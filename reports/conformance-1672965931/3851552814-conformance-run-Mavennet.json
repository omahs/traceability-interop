{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b1f07fda-bc57-477b-8f0b-d0fee23fcf33",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9a38ab09-5781-4ca3-9274-975bb936b78b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "650793c6-e44f-44e5-8bfc-7f5876ed1c07",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a3b275dc-6e1b-4851-8753-ab973c62d334"
                }
              }
            ]
          },
          {
            "id": "cc9d4c9f-b752-48c6-8746-b688889edc42",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ff00b919-b2f3-4128-a4f7-b4c7f16e2d59",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3ed69920-e2c2-4be6-9a0c-890cb7fad35a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "20f937a7-5e12-4b95-8169-a3b0109d1274",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c2050ce5-5717-42c5-820a-20f57c495cc6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8317c613-d4c7-4d83-8786-c4d289197a55",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdd00588-41c5-4593-9c76-0c379426f8b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b82c8dca-69bd-4834-9a50-c8747acba8fe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "177158d6-2b22-4ee0-9d5c-f05184388794",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9d0b813d-5487-48d1-b29f-07385fa8d8a8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "78ffadef-465c-494d-b8da-5eeb5bb1227d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "92b1a433-cac5-4470-bb3a-ef7859757170"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42ab8cfa-b164-4bed-8d01-4c515d8af2f3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9764b9e9-b888-45ff-89a7-7211dc417d85"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fcd04077-8e48-4dc4-8da4-67f365cf46a8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c55b4236-ae91-4dac-be7b-92ff9aaf8d3e"
            }
          }
        ]
      },
      {
        "id": "d9854ddb-a608-49b1-9207-36d4b132909d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e90fdbc8-4877-429d-97c5-64e44f3c240c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14c58d6d-f280-4989-bcd7-3f749cf80ada",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "09b08210-14a4-4a8e-8377-897b9c4275d6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31003e93-394c-48c8-be3e-2f903ac3bf12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08c3b500-b2b7-4025-9167-2d64174624cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a296481f-652b-4850-b47e-a23a04937f2c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c08280-bddc-44d5-95bf-a2d9cf3015e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5666ce14-2020-4c01-bd42-ee15b3a04d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbb99b6-b955-433c-8385-7a0be2cb9be4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bfe296-e4b4-484c-9da7-37872b916a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c503daf0-244e-47e2-8e90-5d1f74253b57"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fe4d7fab-4f20-425c-88b4-f1156e7a91b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1532c245-8b87-4604-b607-d4ba6e86210a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "002f5a3e-9aed-444a-a3fe-d93d0e7ce0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2147362-866d-4b26-8ef7-db40deb8d2b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46fe6b6e-e188-4c03-9885-6187ab4c71be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11833f9d-dfec-414e-8525-e656e94599f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2c9de1-269b-40d9-95b3-aec4155e62f9",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35a3ff9-b08b-4e10-aa67-89bb219e06d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cea8714c-5fbe-45b4-8867-48eb5f6319e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5897f8-708f-4aad-a1b2-d8b1be27d8ab",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "7982ade8-14a3-49a8-b760-2d57dc8af507"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "428fcfb6-2f8e-441a-a8d6-eca7c6bcaa1e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d2fe9e8c-1d1d-4dae-bd39-ed46085b78c7",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7ae1010-3f67-481e-ad36-b7846ab2150a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c30f29f0-2ff7-4280-a19c-879ec841d9b5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e09d067c-1d44-4dc1-b5fe-857279a78800",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "57ca4cdd-1f39-49ad-8a0f-28ecb8392902"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31e975d9-acc8-47b5-b9d0-8618c16c73d8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ac8daa97-eb4e-475a-acbd-bd573a125392"
            }
          }
        ]
      },
      {
        "id": "17d6ab25-8efb-4749-b3d2-72b4da8ffa64",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "47a16ad8-edf8-439f-a245-5c2e4c8a8850",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6fd19bd1-4540-4885-b45c-71d767202d45",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d9ee327e-248a-4458-989e-a7d3986e731f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b665963-0877-405d-8210-76593841700d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e54371f-0682-4a48-ace1-ea0dac272625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a62b52-daf4-438d-ae03-15527ff1a9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "571cc19b-6222-49c2-a012-b9f6d42c6452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618c8306-9dcd-41aa-8f74-b81d45327865",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e42b6dd-6fca-463c-9be0-dc6ed1cf0ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1d977ba-3447-42fc-b856-3a62faf26b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e9d477-bb00-4ef0-b162-0c961d5e1740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f03a5401-1667-4d7d-acfd-3accf92397a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa22f36b-d67f-418d-88df-ab5c6ff77a70",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f36ccb7-25bc-4960-baec-ce483b709bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f184f9c-790a-4ab2-ab66-718d7b61b1bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b014b9b-0102-46fd-94d4-cee22d758b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "468591d1-da96-40f3-9751-8106a0b70c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a0b86d1-0971-459d-b690-7dfc7808b33e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c20165e-944f-4f34-b09d-4984dc30c42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f63b29-582b-4cee-bf2b-16e4436744fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec899c5a-d6f3-4aeb-a827-8185e66727fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aaabc81f-6aa4-43e3-be20-84362c1d61eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25c76e4-3380-4880-af40-47023fda2d28",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f12bf59-582f-4e98-9dfc-e06389044a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc2a72f6-3004-4946-9876-198aacad09eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ef958c-f9a0-4c12-a5c1-cc2182b16709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4183820e-51c6-4707-ac89-14715e6122ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00720827-f96e-406b-a2e1-1d72a627ccee",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8442a4da-8c7c-4211-8375-34b7548b74cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9257d506-4e41-429b-b825-2c72a5d6174a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a845080e-fe95-4463-bd6c-51faa41a0b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a45ffe0a-e475-41d8-9625-2bdd0cc52db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a90ac21-7d67-43ab-9708-ca6dccd166c6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd2d657-9798-49b6-9fdf-fd20bca3b616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae5dead0-26cf-4568-aafe-092c395e6c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e25ea5-2df4-4358-8e3b-6502b6e6949e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc99f8f2-3895-4a46-befa-41ad97d1dffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9d40c9-0790-421f-8326-a2269b8fe19d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c13cce-1fc4-4f6c-9aaf-9d1e0a7f103c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "386325ee-99ec-48b3-aff4-1978a027f238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db8133c-6984-4666-8a13-8b78ad275684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f378a21-912a-4142-a815-9a29c65bfa84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5fcd06-3432-4c80-a4ae-752a505afb1c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7539df1-7288-48de-bcf6-0f961ee1f577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f8efb41-5a6f-45a3-ad39-7b7e413c6f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356d25c6-3985-4778-b8d1-c9154e760b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42157742-2b48-42a9-af17-6430ae5412d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991a92d5-8b75-4ff7-9dc8-0baa750e5132",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8db50f1-b006-450d-a1bb-4cdf6f683e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42d32049-46f5-4291-bbfa-e1934edfd049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d22dc41-066f-461f-9398-1a43c9426538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9289110b-f78a-4ee7-a0c9-79eb2b4974bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07776f70-d564-466a-8fd2-2db424af775c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834c5c7d-9d92-48d5-a66c-24fd2e536d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc69ee8-bb41-46ad-bbd9-20bf1ad34453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233fd458-a31e-40d9-b5d8-6a396dd694d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30cb426e-3c84-4281-b9d8-82a6e348c115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c658f4dc-b09f-47ef-a0ec-73b4630a5a48",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ff6dc9-d581-474b-b780-4c182dbb034b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f9f0967-1607-4b7e-a836-dd21f110736b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5b0ad7-748c-4585-8409-06b2729afc20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0795d52d-6f1a-4386-9df8-4011cff52e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3cd95f6-f6b5-41c8-8177-4f884389e8f6",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eff67be-cb36-4a5e-9623-306631962f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a6ecc8f-9383-4dbf-8bc2-e318c150966a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b666e13f-1b78-44b8-8bfb-12a02222a775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3de7a754-74a5-49ba-8be9-b03f8bc0001c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2387d79b-0fe5-40b5-bb72-e7e902bc7b4e",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bde863-37db-46d9-b6a1-4958781f23b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67be043a-dda7-4127-a463-26efe207dcc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d64a2f7-8d8f-4ad6-9093-dcff687164f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b651dc4-9e30-464e-9522-028523196bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb1a9fc-33de-44bb-bcc9-53a1e68356d1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f4a654-c8e7-40b7-b94d-256b97309d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701367e6-7c5e-4add-abbe-61352d6d6c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1c35d3-b1b4-46e8-af22-745956035027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "508a9a6b-a860-4b83-875f-d9bb2ca27ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e5d5a0-4773-4ed3-8ab7-42cf8a8d6a97",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c1cc67-c6b0-402e-b9c5-f35c4ec77a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd52a717-212d-4cca-baf1-956748c9b43e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2736c3be-230e-4782-8e26-9fbffc4409c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9cb56614-04b8-41a3-820f-aa8fc86195d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f5677e-2019-4a6d-aceb-f5a61fa37fcc",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20cdbd8f-97f6-4590-a5ce-18154855dc11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4126d02-67cb-463b-818e-59c2a16107c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e46119-ef0b-49c0-b848-d47d12382ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf3445b5-5cb0-478e-b244-1fa4ede02518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0220d2c-50da-4b5a-b94d-ee27373f2a48",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5667292-86b8-4ac8-90c8-89056200015c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f36cecc9-e07e-4c61-afd8-0847e7b8d747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649a9ecd-f345-491c-aead-107f362f50fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81d1d198-4dfa-42f5-808e-8955a75bd9ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37dda93d-e212-468b-b66e-50057880593b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f795c4e-677c-4c78-afea-537615fd81f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b74a3a22-8891-4bdc-9276-8af0cf1576a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1bcdd9-2cf0-491e-a849-28de6daddfb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6fdead6a-8486-4f43-9a48-3661e5187428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8614491-98c6-426a-975b-8c278c76b8f8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3447d78-2a66-4781-a195-cf0c55eb01fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7c52279-b196-486d-b7d2-47c8dd7bc937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1bc174f-ccd0-4865-9b0e-1ec85cef54cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1162a89d-470a-4f41-9619-50ef5d83bfdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4770acf8-55d1-4e8f-8009-c41a1b660638",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "394c8126-f947-443c-bf50-847ca1909380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "255f9c5d-5e13-426b-bb1e-93b16ecc86f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb563a83-4d46-4568-bd63-a5b52723b49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ddedc69-5082-4896-9a33-896f24469d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137d69ef-9732-4ac5-bc65-806be1b9d8ef",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acdd3b07-d38e-4998-a214-1b865beeb988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f279fef-0028-4316-a49b-6cb8559fe2ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c089d9cc-d0c7-4c53-bc5f-957b1ec3fed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "15f2000c-00a0-4d8b-811d-24d70cfb07eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43aff132-8d17-4a96-aa36-8389e7f84071",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8d9b23-9c13-46a3-a64e-1246bc541abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c817fee6-522d-4500-bb54-a2e0e109aa48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40092dee-4169-4961-997d-af554215256d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26b37142-624c-4ef3-bd1d-99162ac4f1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d5885f4-4e7c-4364-954d-3a965dbcd1ab",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b0c1d2e-581e-46aa-b7c6-709bb7f284bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28d5332e-3a72-4064-8e81-422228744cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a34948-165b-4c0b-80f5-36fa0c5f2da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b54359b9-d181-4a93-b65b-c0acb4d28b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b50340-173b-4ec3-834c-ca50d513dfd2",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2acb292-0018-45a9-8c2f-748c28dc3490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb23f5d0-fa37-4136-a5cb-1c8d8193cb9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b56313-3b8f-4477-a9fe-ae9bac6ff027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "604a1c89-d4a4-48fa-99dd-7c79672ed5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c620e3-6d2b-4833-b63a-82135b4c5598",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71fb123-b1e2-4477-ac8e-8d48decb6a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92b52a00-dec5-4794-bb18-328c5e1bdc5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd6c97e-be8d-4d10-ac26-ac2ac5e9b50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd306a75-5776-4e23-88a5-e5d5ff02dda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5f3481-bf89-4032-925a-dbb64e147f4d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "532cbb9f-4a39-4cd3-9a73-419f615a22c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a80b315-862c-4521-9ef7-54e2788b50c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf26085f-8979-4134-b195-30d498a5a764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a2ec1f4-9a86-4013-9321-c091206b1951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77394b60-20ab-4f77-9b5f-3d6c51b6f3cd",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5675f0c-0651-4d02-8a24-b189f80874c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff45e2c3-0ed7-4b99-9722-dabd4766f6aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2560b8-3ff8-4a51-ad1f-ee642327210b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c660979-8657-4556-91d5-105a07d59916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46945f1-f73c-4fa1-81f7-0487736808a3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57cd018-7a21-4200-9bb8-a121b31fdeb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b3b59c8-6ee0-4f96-ad11-2e5d9118041f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8182d5a6-fef4-4714-b7d7-b09d9aa3f9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc644b13-ab55-4664-b3c5-8f5b54ac8f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641e6c69-809b-4654-97cd-50a5df4f15b3",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f05c62-5d32-40cc-9873-84633c6a9d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de3d06e-ee9d-4d9f-8369-9ffdaaafbe44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d75b1e-184f-41e3-b44d-eb4ff8511b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "03f08331-5c2c-4239-8363-7f9ebbca6730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7abf975-0a45-4975-b749-bd3851df4e41",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7baf82-9e7e-4335-94ff-44cce06385a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d28b6899-fb85-4e2e-91f9-f05b7618a07a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3c6410-4012-485d-86c3-42111dac261e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f74fac-d01c-4416-98b8-752c97683cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5be762c-67fc-4f2c-9fc0-e09019aae9b5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd9ddce6-df86-4952-abf0-7a17647129fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b64d659-2f09-4214-8c7e-b80ac38fb765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5922af47-bca7-403b-bfe2-8edf0250436a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "163219df-6d7b-4a20-a370-2f0cd1a2cba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17c5c63-e3cb-49f2-9767-7846cebcc1be",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90fb6d74-1bd7-4a5c-b7a3-f24b696fc62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2d93cf2-6ee3-4c3d-ae8e-1dcdf09560a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b5f3a8-6a82-4937-b29f-9cd769a3fffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "683a60ad-36ac-4b8f-a51e-03678d2ecec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2bb1990-0131-4289-9233-675c97f684e1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7e68dc-5c9b-45b9-a547-ce3679d9cfde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97164919-a3d5-4c21-81cb-3d942e7c397a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6cdcac-d99c-4f4e-8458-adc78fa17566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ad25d5a-6a8a-4766-92e1-b83b282ccdb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd7619d-eae1-45d3-8cf3-dbe31326bb83",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7fd317-458f-460b-baed-c7c2408430cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b50a09eb-b61a-4433-bb27-363934ce500d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c47350b-17cd-445a-b86b-2f717cc761a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c245cfe4-b014-4334-8c61-7257b2da07b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a36077-61d2-4c8a-a298-716b3d7340bc",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bc8388-d724-4bf7-971b-094c8269ab0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52f91573-ebf7-44cf-ab49-4d2831829f56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c425a72-675b-463c-a4d3-a2c50d6521f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "486b8e6a-b0af-4825-93c5-919896bc9fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270ea9d5-6f3c-420f-8951-341f3758623e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c6d450-4799-444c-bdb9-0592e1e5c649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "707a3c70-e459-4789-b16b-92a54f7f48ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9c0ce7-9128-4752-8c79-4a3ca4c7464d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f0bf9e98-5ba4-490b-a706-929bde565f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd184e7d-e679-4a3f-be80-1905e5b7ae3c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eee498b-5094-4005-972e-20ceb479926b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85be100f-43dc-4a3c-9510-dda80b1d8517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a23be1-b100-4ffe-9b02-d1ca562140bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "44d6ce5f-99f8-44f9-a201-aa051586adda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986727a4-5a07-44fb-aed3-5abd80912e5e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e8e4de-cdba-471a-9265-6875003b4ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27530b6a-b7b0-424a-8f88-63522847cb95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e514efb9-2777-4218-be15-6cad96244af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "691a6da6-c7a0-47fc-9822-2c9d8ddccc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f482c192-91d3-4db0-b323-c12dd4d5084b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1450d758-5960-42c2-a139-919bf8fa17ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c861b260-7f3f-40c4-b386-821ced874ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15df7072-a70d-49df-9274-59d98013d86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a4ec9f8-f369-4f17-90ab-a9de4b52d4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb13087-80dc-4c13-8b4b-a06117c57e10",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b374f79-9d51-4692-8d08-561509392eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a472b5c-3337-43b9-bddc-7bd4882f3ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319b17d1-7f13-47d3-81b2-3da16bf0de43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "68b6442f-4f79-4b85-8c35-8c406dd98dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb373ee-2b2d-45e9-af6e-dd894f1d984a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faca484a-b0f9-4219-9134-04b1efbf14ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad40f88a-9884-4373-8cb3-a9aab87e142d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8893e9-9b43-4dc1-82bc-c263e520815a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "39cc9e2b-42de-49d0-8c1e-5fe7725d42d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f463b333-b806-4658-ab1e-c07485b5cc97",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b01d656-b31d-48e6-a3b8-7c09a81c0c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4840979-5dc7-4767-aa00-daf74ec4dbaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf3dc6c-effb-459a-b9e2-20b07a12359b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce4e6414-c43e-4ce7-a9fb-6a7c84832d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2b54d4-dc7a-4012-9a4e-5e872cf61e7f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7b3c0e-fddd-4fb7-909c-a110af4d89ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cda67f4-8bd9-4aa6-a01f-8278e9ee89a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0699800d-5fbb-4db8-9084-ee86c1917386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c6f0f091-d97f-4426-aeb8-f12f8f98424b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b320ac2-6b70-42a5-ab6b-d880c1594285",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1189aa71-3a57-4eae-bb6f-5b2e6860d6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "153863a8-5103-48eb-a669-5010eb874c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7fbabb4-1ebf-4730-a6d8-6922829ba0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "06c3d209-5471-438a-bad9-12a59101c51a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d240c4-bdd8-42fa-beae-d7ba9d15bbe2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d595295b-1f89-4643-ba28-beb3bd31b1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a309828-5927-4bde-94f3-debb30496e23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c2360c-255c-4c74-9cdf-39857c3b06a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "27678419-f169-42e1-98d2-8d580e32c14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e71d90-935a-482e-a3ee-0d3c0868a394",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc5b699-15c1-4729-a9e8-9de536a46fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0901fd5b-5ede-4109-889c-a3bce2e8f2ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4803518-e5c8-4fff-ba3e-2609d6417545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3fcd38e-3a30-45a3-b310-67299fc8232f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13bda93-cec7-41fa-b4bd-0f3ae83a5d93",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1297581-59f3-4d57-bc93-7525659c99b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79ba00cd-c02d-406d-b482-5019cec68af4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27531f9-f49f-47e3-bd62-43824c8abaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "58231042-bf11-4f75-8fd3-999119bbd208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c170645b-53a7-4878-815e-348cee5a542d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e569a8-9dac-46e7-9738-14c01600e589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a613770-04c1-4591-adc6-12f64bfab4bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73687f33-3c8f-4dcb-9e9d-369e444da1cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fcbec53-3242-4acf-9de1-1a3bd6413b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604d9e4d-259b-4a51-96df-f64635f6d2c8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1489b976-1783-49f9-9f05-264a15656e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d61966aa-4512-4f98-a053-7335e7be5bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74892e3-37b1-490e-92cd-f3d252a30839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "552e2b24-ee1a-4005-b9a8-411d31b76ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08177c6-ddcc-4329-a5d8-99681c049948",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed683618-e1c7-4e55-8e05-c0b2aaf34e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63935519-3826-447f-9905-8e86ee26660d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f388d71-0e61-453f-ab5a-1086d146cdb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b10d58b-2b1f-4a0c-80ad-f14e056e3343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed098c53-270e-4818-b8cf-af7413bd9325",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a784dd-12b3-4407-98e8-ef170755a87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f88487b-2c14-474e-bf79-c540f4bf5358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405aed9f-c383-4198-a529-b042bf69ce30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b8d64df-ff53-497b-ab6e-4c3736fe7feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044424a4-dead-4bc3-8674-48e885bad186",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81dac998-43e4-4134-b62b-03091e94e8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67be399b-afb1-427c-bb10-2b9b4479b987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ffd11eb-dd28-494d-b597-e920c0a28944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "94088da1-7ee6-4990-849d-6f9f62a54c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede5568a-d2f7-4c63-a273-7067f596969a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04aea35a-4990-415e-a090-ba392a4d75e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "869d2c3d-12ee-45a8-91cd-a93474b63ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4291aacb-18ad-44de-8ec4-f8295f1e9128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f11cdc04-0422-47e0-8a8b-5480df61df57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052c920b-46c1-4cb5-89b1-e3175c553bb5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5428828-c7ee-47cd-9063-f60d2491030e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30da3ba4-d22c-4585-9194-98745512857b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0546c0c4-6889-4691-ad67-4485af8aa39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f42be109-1a56-4d99-a777-c754618f7fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a48b641-ad58-4806-9a86-6dd4618f589e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddeb0cf-bac6-43f4-8d42-e5ef8965c703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ec0385-8d71-49e2-8619-1d8a8acdfb24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbce95c-306c-49a4-9148-6f67c3071434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d52de7d-b96c-4ff1-b154-8df1626df936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef899c4c-7755-4590-b8e3-70c0de0cf44a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad1d8a4b-b2f6-45b2-b3c4-861fdce049b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35994f9-ad6a-46eb-86c1-c54783c757f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57301221-5024-427b-ba1e-5a37c4778e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0e80f80-8c44-4197-a723-1d2c7b10da29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbefbcd-41a5-4a7c-b7a5-786a4ad0c82d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c009c151-4a89-448c-9404-cdcad87cc1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e078fac6-8628-4433-98b0-9df67370ebb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c68889-d1a1-46c5-a648-e1f29c77fc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e1f71caa-7602-4ca2-92fa-4905232f0f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f2acb7-0368-424d-9806-4ae0a81ada8f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9bd208-4f2a-4adb-851b-e30115f3cdf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1289d34-345e-483a-bb1d-72bdd127e9b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808362c0-d218-440d-8751-e1689b03c191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5358a0f3-e553-40ff-b74e-47e38a79d30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "199183d2-3970-4bf3-813a-3b045bdb4887",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74741f10-56f5-4dae-b822-19e8aef2ae3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7988e74d-0999-4cee-85b1-1663d4a65a1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b9ae22-f248-4c45-8d34-da2da325412c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "95e39c76-6ad7-4a9f-ab45-035839054875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccff2ead-3f4d-4f02-a81f-473481d66615",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b106f7f2-ef52-44af-8558-658b5cc6539c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8d44cb-c29c-4b03-b752-b0d31270715c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae394e2-0284-4038-8be5-2abfa3bd3be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "23b1d7e8-3100-4e33-918a-36fc522d0eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006a0acd-8d53-4c8e-ab86-cd5a8bcf2022",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2a9c60-5777-4f0d-9dfc-c08628d55c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e582c07-9771-40d6-b448-a7460f7de988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ccd4945-2333-4930-a1ca-3ef8b355704e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0c3b93a-84b4-479e-80ea-57d1807730dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb00f82b-7db5-4f99-8380-3565af184939",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21db8add-5d49-4851-b326-448e3bbe94ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5da00a83-89a2-4da5-b9a1-a1186797be4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a18c043-576d-4a3c-a06d-caf1421cf86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fc5a7ac-502e-4174-8dc1-222ced0c729e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a72c7c7-9bb8-49a1-8149-02348839cc97",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa47c21-26e6-497e-ab7e-f65ebe0dcb49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfc56154-c47b-4e88-a68f-19d7d66953ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a682f840-defe-4d15-b40a-e56d5aa50388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dfb6248-28c7-48ee-8b26-26ecda1de100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7c80a4-13b1-4999-91b8-b0dfa4fd8b88",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e8513d-241e-47e0-9777-743d2475b87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "214de80c-5fc3-41f4-8968-7bcdfaac12a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02fbe4d3-4bed-4be7-be3d-e1c7835c3d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "deb36350-4a2a-451b-b1bd-73946c60bda9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71cdb28-0703-4db9-b1e8-8e689189745e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbd833c-b27c-4ec3-9ba2-44e9b8cda061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7376e1d2-9942-4e80-82e8-689261a1ef3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e664ca-92f3-43e4-84f1-1ec59a5e6772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "46ea5b67-e65b-41ab-bf9e-b0fe5af16aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec851e6-79cc-4f29-b0fb-4177a0841b77",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a879d9a-b1d0-4e32-89b7-fb62893c472e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1490dd4d-673b-4620-b65d-c3fc7004f8b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edfe35a2-31bc-4874-9c1b-eae65553c418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "06d1dfdc-9470-41f3-9e3b-269e386303c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14573033-8e0e-48b1-a652-fcad9110adcd",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "468fb65a-024f-4689-ba49-1bb481f23692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6cd5d6b-820a-46ca-99e2-ae2298c8de84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973be664-f2ee-4771-8011-5ded79e9d7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd90f3b0-6c07-45fd-bd0c-4e8b410f622a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "accf0eeb-d8ca-42f2-84a6-fb9012c601c3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e56fec84-0c18-43fa-bc33-8f252762ba5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82342521-acb6-4cf8-847f-d50c00e9a767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dbde0f9-b709-43b0-ba08-efc6e7a93788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ca01ef93-1c18-467d-98c3-bdaf15c8854f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b70e3c-9ff9-465c-848e-6676f55a5cdf",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a25029-656a-4e3f-acdb-db379e30048c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6080378d-8d3a-43ca-b84d-893bb111997a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b509e026-328c-4de0-9c94-10694843de80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "26304545-6d2b-4e5c-9bdd-e4df4583ed44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e19e1745-ecd4-4881-9187-d89840290832",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d64254-10b5-40a0-9190-9b4521c00b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fec854b8-0980-4c54-bcf3-c9b5d94479b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1cec3cf-14eb-4ebb-874f-f4afe72b3b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d70fb3a-a8b8-4e6c-bdac-9c5b53d87165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af928c0-8233-4a05-accb-6eb3d9aafaea",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b989fe5a-85b0-4c08-9e59-af9de173da04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "220146bf-80f7-4207-a90f-b23d62452230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c4af8c-5a20-4d10-9a8c-fa3e89282b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d39f8c36-ca5a-42cf-bc7d-fb339469a568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c034e1c2-2328-4511-a3d8-f33bfe43b39a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce0e40d-b1e4-45c6-ab5d-c35e91defcd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c28a21b-99db-4ff9-893e-1182ce8c0655"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e8d4df-ac4b-4810-9556-7e5f595e1cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7afaeaa3-dca7-417c-bd6c-a0f27ff337b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade3a051-a617-4f89-bd79-e76036219e8d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9105f478-d9a9-4183-90cc-98b7eddcf7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "417f0e58-edbb-4cbf-a964-a677220c37a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922edce9-c4a9-4698-bd5f-cbae7983ce72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "494be571-34a8-4e46-9c7f-4d4ebd3f7ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b370ff2f-046c-4965-9b7a-ccdc1b730915",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d0dde68-ac07-4aa6-b227-ecbf9093c38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e50f8fb3-e62a-4f9a-aefa-1e4dcc4c8c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a009a7ed-44b3-43f0-a97d-60701e173a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "30bfdf2b-72a7-436a-9b6d-2527600a8c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fabd15f-e672-41a0-bb91-efe1e8b95006",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db61c0b-f346-44ad-bb95-3258030e3ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b034146-9d67-49ea-9b0f-32acf546608b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e167aa-bd53-4029-8968-2e4dfb1f0f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e68119c2-a425-4288-8adc-97eb196a0270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5a8e70-4cc5-4be0-8df6-65b32510e87b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b177a3f0-57da-4657-ab8e-efa2d3e44068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89543001-b137-40bd-bcfa-278f46109438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450eaf7c-92d5-43e2-bddb-ba4faf20a59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "874c38d8-a66f-40c1-a46d-30296991d652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae371e4-f5b2-4739-bf28-6b8f8c69a0bd",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be5beda-081d-4d9e-9a85-c011f87fac6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebc816f7-5b42-4da1-8a44-976ce28a00d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8dc5c15-dd7e-4c15-966b-fb7104b1a157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f952002f-b93d-4844-9e31-db01256ed46a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8c6d39-0924-4f8d-b5a4-1fc85c88a192",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "646b64c5-7be8-494a-a189-b20327d4e343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cafae2e6-0699-4a01-a121-8d14fd08fe15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a1d66e-c044-452a-84da-73b63efb826e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9e6aca2-ec97-45ae-a317-69e7b2689707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba76b394-60ed-4140-9e5b-c5f84971777d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ceae09-7a0f-419d-86bc-02977426930a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da68a534-bdae-456e-9464-d8653121e2dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83194c6b-d1e9-4b0c-aad5-fb951191f1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eebaf6ed-d1d6-415c-bf31-abf69a6d1947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0adc54ff-c20a-4700-b406-425237f7b583",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab1e1ae-53b6-4164-979b-e5db8eb688b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5654804a-1e2e-4788-aefe-9082d33f25a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927d3689-c515-421f-914c-fec0c56c43d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "21038d2f-2e4e-4367-acfa-19c87bf1696e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffd103c-cf7b-4c06-af86-43915eb03919",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2b214a-0aa9-428b-a2e4-c66822f0707a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b23c6823-46d5-4e0a-af58-77c1f06b7d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d641c42-4db2-4f48-be21-078ad8d41914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bc6b2d88-95bb-4f40-86c2-ea78a6b6253e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b98b0a-1795-44dc-b96b-e83f34c61a89",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca10d5dc-7b97-455d-906c-513f37aae4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7be0769d-63e5-4ca2-ad96-f0901b473603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9882cc7-40e9-4e3c-8946-e205182d4182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b00260ab-f015-4475-b2ef-30b582fd1878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ebf016-00f3-4196-b5c7-4d8323e8b10a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47be47b3-3c0c-4339-8f96-fbcd589c4e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bef78b8d-b7ab-48f5-9b6a-811d81a60b54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e20b3f2-73d4-411a-9517-53c59d53c4bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d65bebb-7848-4723-87f0-090bc585f6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf43fae1-73e1-4172-852a-48aff38bbd52",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb69687b-5913-4463-847e-e20497ff4c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa296d6d-f711-4665-aeaa-d49c5fdb6464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c6a37a-6219-4c6a-9d23-0b6b7a5516c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9100ebc5-c927-4f84-990b-67dc09005653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ec763e-b75b-4a1d-a598-0339f53720d6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba43ace-d7bd-4f51-905c-3801c44a2693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70609d55-7353-46e1-8379-8b6cb0e1e04e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d70503-dc39-479d-94f8-e5ad9131111b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "945f9f38-099d-4b39-8df5-2abea95216f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776a891a-e8de-4964-bebd-e4f2cb3c8097",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb522cb5-5019-4eac-84c9-c499e05d72cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0c65492-cbc9-4b45-b540-7db23e4360f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4ae461-cbdf-4d7e-a532-85f57f2641cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "87eee482-cfda-4e08-851e-995aed51da54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8e3753-a372-4e34-a2c7-d099514b98ce",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef87da9a-56ef-418d-bec0-55ae95f420b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4aa6fe-e8e4-49f9-9491-76403698fd38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9407e821-0688-41b8-9b49-e40ceed874fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "74b0a887-eaa0-46d2-a6f9-c5364a213348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a7db2e-8f01-4465-874e-f9d7b269d62b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d978a9b-49fa-4cbb-afb5-dd932a26a8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf5e167-5b16-4d74-b54b-66f3057a909d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4427f35-1be5-4a6d-bece-be502397290f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0295c842-2c66-4881-8ce0-d3ef7a5fad62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cac1dce-aad8-4119-b30f-04d2a56cb229",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697eadf3-67f5-4c39-b20b-113a3a9900ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef0ccc65-c1a6-4f04-a33f-d81cd1055df0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf17487-4ce3-4b30-b646-6d2edffd8cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "55c7399b-41d1-46fe-a9d4-238176a67e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0e7077-8035-4c24-a391-b6a63e15b4f0",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa0eac3-05e8-403d-8f3f-c950c6424bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a52bcf08-2eb8-441a-b39e-45806f774537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8d0171-8f4e-41ae-893d-a195c4fec359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2afa1731-3a00-448f-b9a1-d8c8eca6ff26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc44ed2-1f49-4436-9171-fdb20f8d08fe",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c08cb1-659f-495e-8580-960fa0d8485f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef4e628-be12-4bcc-8255-a7ca7c34c5b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2113e99e-3160-43a6-aabd-6d80599e4220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee17f680-672c-4c7f-98e0-cf48ff4fdc49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9547bd85-904c-4c9d-b04a-a056ab6528b6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cfd04c-a850-4241-b997-4f09a9485230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b745a039-4cb6-46a9-b5aa-87d90cb387ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1786a0d7-bc87-4ce6-b0ec-3e83691e4e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "79ef117f-6d14-4901-91a9-37c6c814efad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb956087-44f8-422d-8233-f73186724495",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffbd331c-b1c7-42c2-9ed3-1bef5372a4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "723d18f9-2cb9-40b9-a2de-d02cdf08ebe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e75fb23-71b7-4d9d-9af9-9ce1f71732fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d5c322f-0813-4dd3-b801-bf16db6a6f3e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2e1ca33b-0781-48be-9a91-17642b8018a3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "98ce7c81-1fe6-474b-bd77-be306fc5dbcf",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec79800-8102-4a51-8655-b5735537fcbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3c27ddd-5e8c-4630-badd-237c53fb292d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddaeff6-8ae9-49ae-983c-0c2883befb12",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4ccd5987-19d8-4a08-be03-d25106f6bba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4452a3af-6869-4b2d-b835-292fc018d521",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7664c3c1-4ef9-4956-b22f-9655be7e7032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7631922f-133d-4e6b-95ab-4950ccc85e02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a752fdc-15da-4980-b653-fa1f1e4fac21",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "01f65d50-c1d5-449b-9869-5128d1911ed3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a560967b-acc8-4a22-8701-4037c59e2c66",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7de96ff-61ed-46dc-8aba-16d15198e15d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "10d98c9a-725c-4d40-9d6c-e88aaaff0e6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44ba6f3b-d6ac-4915-872e-fd6930ea3660"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fefe7845-f6db-443d-b058-925f7b1840c9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c4188dd2-c5f7-41b9-95c4-220747578f66"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7f2f970f-28c5-41f9-9f31-7c436a336ce7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "26be740b-064c-4ed8-9aa7-605735180c8a"
                }
              }
            ]
          },
          {
            "id": "6eca916c-01e3-4c8e-bde1-16c800da190c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "06881e8b-40ae-40ef-a36f-924f16a72ef2",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0951d15-b2ae-46b6-98b6-49053471510d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ed3b1e1f-bf38-404a-b7d8-a6b341eaaf22"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b007b13d-dc5e-4772-a21e-d3f2bf46b960",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "434e19aa-7cb0-4d30-8231-eaaf6d799170"
                    }
                  }
                ]
              },
              {
                "id": "23cf4149-bf9e-417b-a77e-6d5589ab0d35",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ff63d8f-edc0-4717-a6e2-f86dc511cf16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1fbc7f42-3c05-4ab6-83ce-13b14cdb810a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "555b42fe-8322-4395-93cc-d7b265a87ab5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e7d963df-4ec1-487e-9113-c4ed6660726b"
                    }
                  }
                ]
              },
              {
                "id": "30fdd540-e4ee-4b19-9371-052ed210f7f7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b6de0cd-9848-484b-9d95-6fbc478eb96c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f731e29-1f70-4080-86d0-4a7291e1f841"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "428ca214-5bdb-49c2-ad04-c0fbbfc4539f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "722ec61b-c51c-41a3-b944-8249ad9653cb"
                    }
                  }
                ]
              },
              {
                "id": "ed0bf572-289a-4526-8cca-9166c831aa08",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b535e54-35f3-4632-8293-b5c9e6ce1ea6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6f05725a-5503-48e8-83a2-8fe16325fe93"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48673733-0b28-48b4-af5b-ccf4bacc3914",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b62858ed-e99d-44c7-a682-0cda544f089c"
                    }
                  }
                ]
              },
              {
                "id": "c20cccb2-4909-4953-ba18-125a88957633",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "186a43ec-8880-47e6-8c05-1f8ccc5eaf0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f30061b2-2ece-4152-92b5-22f63fae11b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fee95e46-222c-4417-885f-a3074ade9c36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "954410fa-88ce-49c9-a352-e53558e17d6a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5dd1afaf-d14a-4bda-adea-9186dd34c58c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "77b51e26-2a88-4885-9181-de32c50532a8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6c17f1ef-5e07-4ba3-88fc-4f12ee22ce2d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "72ebca4e-8b56-4754-903c-cb8e89a9ef35"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4d125fc-5fd3-4303-841c-31c2b97dd8a1",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c112b567-4ce3-471d-aa23-bae097458979"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c12b1898-27e1-40dd-b62c-280bb9246702",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2590d07c-96b4-4c4e-8d27-d135deabb5cd"
            }
          }
        ]
      },
      {
        "id": "0b35f673-14b6-45b7-a591-7ab6dae7bc78",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b362a7f2-6822-476b-b61d-6cd48c602647",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2ccca9b3-602c-4adc-a938-f112c54c4c7e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4d83e010-ce35-42bb-8b4d-901ad4a97890",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a96c3b9-4b4e-4d7d-9160-c507032fc79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28b935b-4b1c-4483-ada8-b25b9c5d7363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99298412-27b4-49b8-a7e3-5690944d35ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "34336a11-831d-48ba-acb3-3bf0609ba56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01c8e31-548e-4691-99d5-21784dcd4a9c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e84a20f-4871-4929-acf4-21eef349eddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ff2a2a-a74a-40ac-90e8-c3b34926bc0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7e5c04-f2bf-4a07-8fba-89c9e747f0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af882f4c-3cca-4bda-8f8a-cd03841ed35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e4da6b-654a-4f7e-9dec-aef99b1071d9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ab1815-0f39-4fec-a9d2-38f39c7b2619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c9ea43-3986-4d6a-844d-21c2fe7f823c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def00823-e69b-43dd-8e31-0d3b52b0a309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "51ba5b6b-9b8e-493f-b5e4-4fe362ed0123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b974cb7-69bf-480f-adce-a401d8e4bbbe",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47ceb3c-4eba-48f0-a1ee-500c8ed76236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1145a3df-0899-4ea5-9375-cd20d0da309a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2412298-9e78-4c22-aead-b6aa719c5ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "126fbdad-ee82-4eb6-977e-0354d8ad4f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef1a205-a8c3-4b4a-bf9e-e16205b27046",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "120b0598-31b2-4c57-99d2-b7b50ac60e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5be72c6-13d3-4521-a8eb-a3126d6d520b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8515f9-4b42-4d36-9726-85fba2a4b227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35481c2c-0a3f-48b9-8653-be2a55f003cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3042e9bf-593c-4007-b3b4-0f506ca99f90",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7835fab9-b18d-498f-982b-4f62103b467c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa630c7-8b7e-4a4a-9375-281727060523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee17e335-4e7e-4eb4-a566-9b5a46420347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3dc1eda5-2abe-4565-9aed-465c53c7ff29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64824acd-7633-4d93-8b17-7162305ec049",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7e77d0-53bd-4b24-848c-e2803fcaeb4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc155a2-7907-498e-a0fc-7423c8fd0e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "442f6ad6-ec3f-4e1a-8b2b-dbb2af45730f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2a16b94-50e6-4841-a295-52352192e38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cad8849-2d22-4af7-8686-ed95dbaed83e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32482b4a-f0da-4952-a6ba-3cd3e83e9c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5efa49f5-ea44-41cf-aa18-0526995aaab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c462002-2982-438d-947c-6c07f1c7427a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "03829b62-34ee-49d9-ae87-820288fc1f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c950ef95-9143-44a3-a6a6-00297e6471f8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63eadc21-d29b-46f7-a0a8-83d89d7c270b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfaffb48-a360-494e-b820-827031428e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ca3f1a-2b5f-41bc-bdb1-d0af104842e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "61b462c1-b4b6-4681-8ecc-42e0cfe351c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fdbee34-4757-42b5-85dc-bd4ca6a19e87",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "236af0c2-ea54-4582-8a6a-0e50371ee716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "204df6d3-a08c-4375-90d8-394096a01e5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b02ff74-1dad-4d76-82ea-a16b9752d576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69ea6d3d-bbcb-4e20-af7e-7effa836e51f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2119fc72-9f07-49d7-b0d2-5e6f5956ed58",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "398a3857-5574-47fb-b5ec-5f29209b1449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1461704-9d9b-462d-b2d0-6c2e5552d3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c5100d-2b21-420f-afd1-9b8d54251bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "238c53be-94c1-4a3c-a30f-a6fc6c869993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2dbbe3-3fc5-4512-9e6b-825ef748d8bd",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa41cb89-fb13-46c3-903f-9ec91f12e70f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc803583-51fe-4cec-b6f7-99c8ba7b097e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8058fc-cac2-4953-9f63-88c3ea5f0031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c01d5deb-ccce-4be7-a989-7eef3cabc7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f59bfb8-a09d-45ac-a0f4-c30a07d2df5a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e7d0c9-c3b5-42f6-a263-d00fbe46ccd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "761e1376-e876-4523-baa2-707104fd9a4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f275322-7824-400d-a695-a10730d94c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "559d094f-702b-4653-9af7-2b9e6106da2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6620bb45-6281-42f8-9623-e3894b6b97d1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a0fdb2-e472-4fdf-b370-36e36bc4f738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "390476be-6a8b-4f28-9b33-49d47937a718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63dbf5e-7402-4c26-85ef-044e22ea5089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "34ef0d85-901b-486e-b90f-df8c95c1090d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee00118-c429-4ecd-8ebb-3200a4a0301c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fabf9d72-52f0-4efd-8ec4-fb6472bc2ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "076156ba-ac9e-4555-919f-78bcbd16ee19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba4bb14-69df-4081-a7c8-787c808b7679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e73de09-8baa-4d63-a73d-287efe3e3d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c53011d-d6df-4f0a-9819-ddd848b1fd40",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a13be8-5d4c-40d4-872e-07788e09a12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3763762a-e0f5-426b-b335-bea9f2896713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b91087b3-f628-4ee5-8380-c2c7e22680dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "62995f8c-e48a-41e6-a846-aaab620e88bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e90a4e-9f67-401d-8ccb-8cf0d0843fe0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "084c5785-5b3f-41b8-88b6-d5b233565730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a196bdf-20f9-43ea-a0a4-0a5cf8d4dafd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b809c732-1b2c-47b4-bcab-22e2d441d3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "18259f1f-6f1e-4628-bc44-77740948d1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4bccc52-5f68-4f22-a1e5-238fda9fadfc",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0374b7-38a0-48a8-8236-f28a758615e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32b8c09a-da3e-44d6-9588-48e43651ea99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ffee7c-be6f-4076-8c72-86e2759386dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "182e17ea-60d5-40c6-87e1-43bacaf89b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd0ce78-adc3-474c-a1d9-19a07eec5b9b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4607920-c6a9-4337-8398-547f2ee006a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79863fd9-c19a-4d36-b052-6fdb1691d8f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b039e32-9241-43d6-9dd7-0ec76de01aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "558df6d7-e04f-43a7-9d5c-5a0054c9ca5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb85590b-b616-4cd8-bb64-bcbf6662f0de",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9bb2cf1-e5b4-4854-8d15-56053207be26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7824624c-ce54-4f16-9a71-24323c1ffe36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3e0db2-0951-4a91-b98a-5cc7ebf89c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dcb773e-dd43-4a82-a1e5-ff30b01fb83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82687595-600c-462b-9d95-40aa760bb438",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0581d51-669c-4f2d-a018-0d7b0f82ef4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "548e61c0-bdc9-422b-b54f-49f90487ae81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922d7fa3-39c4-4a66-bb54-5e7656878384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d71f3544-b51b-41a6-9e3c-c1d0fb72b4ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe7854f-d220-42d7-9662-6df6028b0f95",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d79c34-560a-4b65-9e8f-7d031d7e3e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1779d2d1-47a2-46de-a921-e27add072349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f52335-b116-4ce3-8a40-d19de35eeb9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69a7f42a-f48a-4016-a8a9-48b2539c6e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f39ca59-0dda-48dd-97af-9381d20246ec",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a1145f-59b6-47ed-8471-06973261ed1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a7e9bdc-0c75-480e-9cfd-b9793fb06cad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ad091e-89f6-4939-a9c7-0cf7fa2c9809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21f0380e-f235-4d50-9191-193ebbf2dac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa640f65-02cd-4b0f-8bd5-f71ac9e95589",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f59e179d-f670-4aa7-9321-34b1fda2d3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b70785f9-2e15-47dc-81a9-dcb99fde66a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3f7d06-cc0a-44a9-8bc8-65d67491b611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d11f1e69-e3eb-487c-b6ed-75d19d38a8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929337b5-3c35-44d5-afd2-2b320fc8fa01",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c08553d-569c-4ced-b86c-ce87751c2762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc31bd5-8b97-454e-b6ae-cc8dac91c6ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be9c144-3b0c-4722-93b0-b61fb48a574f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e917a310-019e-4827-822a-d9f847e65275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c61469-850a-4a77-8e49-35a33210a058",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5866c0-ebbc-4d2a-b4f2-9111b8f2bc20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d7f2a58-dc57-4541-8c86-11cc10bd21fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb477a9-2761-404e-a745-068404a46ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5050b38-440e-4d32-b4d2-7757aba413af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2900e88c-9d5b-45a4-b7c8-4e419f179ba7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2258ab2-83f5-4f8c-96ad-b285f6785c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65ab7a96-2c06-4381-997c-447244007796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae967e1e-9b2f-47b5-b0d5-b3c5d3ccc59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fb4c93a-5d86-45b4-ba75-c22cccf82a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e27b84b-1b79-41b4-9336-9d5ac9401478",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901cb6a2-81c8-4d2e-9abc-2f26bd1294cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29dfb396-bbe0-468b-9fa4-1d08846fb291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5746aef9-dabf-433e-b14f-49618f62855d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "377f5594-eb7d-4b6f-b1b1-11043d122e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e933c1e0-104b-41bf-979a-39043e9a2507",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8228c51d-366e-4815-aae3-6a37c42ea1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e1c5458-2b24-40cc-8356-d015261edb49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2bede35-eda0-4ddc-9d48-f1619983d8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1338cfd1-4dda-42b2-b6fe-809e74f095cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b134094-a7b2-4ff3-a5bf-1053a6ce5b87",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11401f21-79e2-4b97-a50e-8cd85bfdd62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a13453f5-c0b9-4ba7-ab43-5bf19227cb5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66be9c87-0253-4ba5-aa9a-6a82a31d193c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5113a56a-7c57-4b39-aa31-a59a3bd08f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f970fe87-28df-4541-8fef-a24a6cc5002c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdaeb69e-c127-45f1-8798-24ec29ba18d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a439ebd-5b59-4e24-a46e-81a7a96ee11f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b47a600-7ad2-4ac3-a933-80ab44ddc3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5c810ae-0b86-4505-82c4-b82564caa4ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885659c0-5c74-4013-b897-8f3769ef78b8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d6bb5f-8bb3-4c5f-8cd1-3283639db293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e7496fc-5cb6-410e-8b65-fd7859a0f242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ff7ce5-f88a-41f0-a0c0-2511276c0c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1873b83f-320b-4457-a26e-d9ef48f5a73e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "850dda2c-1d97-4989-b9d7-5adf7fdc550b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "774454c0-ea49-4435-82e9-b29f96a996f4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59259eef-e467-4207-91c4-112f377616ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a497c044-0c30-4c64-ba07-4d683a8f6a96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5365bfc2-8306-4102-bfb2-721d0cdc36ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64efc9a2-55e3-4f2d-a70d-e667e5bc745a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0583c4f-2d47-461c-8e28-3f4a6cf93ce6",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64c80f3-4dc3-47f0-889a-1946289cd6d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9f1d899e-fda6-4947-8f8b-6b1e356e0cf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3929dd8a-f4b9-4977-9a0b-314ace38f01d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60cfa1a2-f1cf-4082-967f-638ace098e6f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb2ac0b3-3f27-4f7c-a259-14ec7e484418",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a475859-cd3b-4c91-a11b-246329a4b2d0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf27f219-763a-4814-83d2-62c09d186fa6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4efe17b9-1eca-4661-8c79-917624ec47c3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d4a61d2-487f-4450-bd83-927efbc33c11",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2a552c44-6eb3-46af-8933-429b98e0d347"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05b12eaf-2bff-4078-8bf2-3871e70864ff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "551acfd2-8fe5-4af8-869f-dd6ee1e8f7cb"
            }
          }
        ]
      },
      {
        "id": "8bdecbb2-b37a-474e-94d9-9a927b6826e2",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bdaa7cd6-79be-4b51-be4f-6563c4ce3292",
            "name": "Negative Testing",
            "item": [
              {
                "id": "37489fbb-24eb-4bb4-909b-ec6aa69802ae",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "49f2cf51-6f3f-440a-87f8-4cb4a4c46adc",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b6fe19-f311-4cc9-9e5f-94ee5c73442c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0aeb315-677c-4c97-af5e-29bfb8a090f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20db0c00-15fd-4d91-acf4-73332491bcd3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9856a76a-1205-49b9-88ab-efc4b4620158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ad3867-66ec-47ea-8467-99b90d8a578c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0acc0744-1eb1-44d5-bc89-9c96fcde7493",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37077540-c431-448e-8700-63f015141230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa42cefa-f6fb-4716-8a69-08793f6be7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34181f5-8dea-4612-976f-4792777b8585",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7900ff20-0574-4754-83d5-8506a0302f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f082c6a6-46cd-4958-84cf-a46fddd6cb79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031a5791-bbfb-45ba-8dc9-2f802c0086cc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e0ad9d-0d70-4319-8aad-66ee3b5ad3e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94e26368-9fe6-42bc-adc1-5125debb7c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f200afe-6ef8-4402-9443-c03b7cd35839",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a433458-428e-447e-831d-470538a22e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b2ff406-d0b9-45fa-8fe5-25328b89ddb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3937e402-23ba-4da0-b1d9-4a44273beb6c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb1ad3a-f3ea-4566-93e2-4b943d05d71c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c85e7c4b-3858-48c5-9b8e-46fbda77c6d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd88a3e4-a90f-4f76-aaa4-2fd9cb1364c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72558751-576c-48b9-a02e-3c7e25b815d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90cbf21-390b-433d-b123-3972cf4a51cb",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11652cb5-77c0-4c0b-9e14-2288baddf294",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f1e8900-ee8f-48d7-a88f-d41c5b658c6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4949688-332f-4412-8d08-6bcbb604746c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caed4a16-aeac-4c80-aea1-6f28ac0c4f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0acd8418-1c5d-4da9-910a-5b2d8b7cfcbe",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed97d68-4536-4764-b451-0f26e7b9526a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "334c6332-bed0-47a2-a3bd-4eb0c063fbc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a68360-17c0-4bd8-b99a-a43b4db47d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a6c3c46-bf55-460f-b864-9f79f1468e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9e42a5-cc6c-4da7-8f9b-f75a27a1e599",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c77722-2a81-4f05-b16e-47954433b917",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21c257e7-c18a-40b2-9d32-99f5c010df5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f03a4dc6-33e0-4779-80b1-5e77083309d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd2219d0-3b36-411f-9e45-b2c811b8df78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b33598-42a8-4d8e-bbde-7d39645af5b0",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c60fe56-4c3d-4fff-a318-5ba5ee4f74bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7023bb5-0a6b-46b5-95f5-8fd5671d67b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1beee4e-b2b5-499d-aca4-727d13128905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "214a65a6-f357-4dea-8a89-7109d9c81918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d1fb8d-f263-4492-a47a-c984fa2e8517",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7af4102-31bd-4513-bc42-cf84041b8cee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5631e4a-5aa3-4638-812a-fb82242f9084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "111a877e-e006-4ad1-9960-c199ee9ef3ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "937237cf-3043-4ea3-9326-7358c41a40b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b91766-713c-4c62-9578-e885b65da3d1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385717a3-c4a5-44f4-9288-bd7a1c905357",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a2e9c7e-2a24-431c-815c-5639a23fdcea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3fc606-c2f9-4aba-b68b-75eeb93c7beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11460e71-6518-412a-9ea9-712a654e0b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87e1b0b-cd08-4291-828a-9c89accef8e7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748dedff-2369-427e-859f-5afd1ef96fc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb67af5d-7695-4b79-8eab-b3d4972c14a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43b05bb-b01b-4de1-ab58-47670113c948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20dd6d78-caf2-4fe9-a327-83aee2344d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca9c438-1575-49c3-bc2e-5cb9eca2588d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ea04cc-b36d-4f4f-a637-dafd051e0302",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d0c7580-bdca-46f7-946f-663eded1d922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "333b565c-3fd3-4bd5-82f5-f1605753ce2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5b136ba-04a7-44f1-98aa-25e3f6b323ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef78a1d0-995f-4126-a8c7-d73771e84b8b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40eec61d-3b41-4ebc-b6b5-39920ecea69d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63fd1dcc-3315-4a11-b293-42d543bb10a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "499b2f32-1589-4fe1-adc6-25c6b90de0f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0324a89d-aeb5-40dc-9cbc-edba92005f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6775ece9-03da-497f-842c-8fa44f1a4a33",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf7e165-b33e-4e21-b9cc-fa2d37c5567e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f654d69-01a7-4124-9b34-c61fd3c9880a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03182868-16a1-4394-90b4-432cd83475c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f22b232b-f070-46be-8091-eb81fef55b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7938100d-33c2-432b-b6bf-15a879534960",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad80f9d-ea50-4a67-9343-43fc7f500e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6fc3850-23bb-4e63-ba14-3392ac85e886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9472859c-ba54-466b-b9eb-63fcf912a391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f75d6a84-644d-4147-b5a5-59e17e91725c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe947c1a-1650-4e4f-aec2-da989563f651",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6c9940-09f9-40f8-9ae5-42589348066f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae2a8901-6da9-4f0c-97ba-61c5234b62bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce13e71-354e-4728-b73b-8a9988df423c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea71ba1-9d65-4299-a930-4bf8255fc929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59591c7f-af19-4a4e-a330-16d774f31e4d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b55271b-f83f-495a-babb-5b4a1a8cca3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b6e0041-34b3-48b2-a489-7dca2347031e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "747853d9-fa2c-4bb8-89ca-bb26f0035f8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ae5deb-f834-403b-a9b0-db9d56e8ac73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b74da01a-e725-40b4-9f8c-3cf93d72dce7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8549b5-6c4d-49d4-9f50-a4428b997361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be01870f-9609-43c6-b00d-c0f04d380db3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76afb91a-2c5f-4720-b36f-0bff90666a7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "993b3f5c-3bbe-4358-b59d-f9d11e751c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b1b5b7-6c9f-429f-98bc-68ee9ec8b8b9",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1654df-8038-4bff-95a0-5ed1ff35c412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29115b62-d962-49ec-b81e-102952674cba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13238c9a-8295-4b49-8bfd-4350cd8945b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd09679-fabd-42fb-afde-e45dab6d7cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d22aa1f-62db-49a2-8f13-fb2b93363339",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5379e2-3751-4601-a1bb-6d2ad8c295e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6b30864-d3e3-4292-b83e-3c59cb35d1c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08045980-03fa-44ea-b3d3-bfb128de4c7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "345e1870-92e9-422a-b03a-62ea4e8055f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753e9e44-2f99-4b65-9a48-9392acfd2852",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "790b8f5d-6473-44aa-8deb-b67bcaec305d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbcc850a-4b41-43f7-9b02-d59f703d74a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14f9f34-0461-4f7d-a402-3e2e20afb684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8193cd44-4df1-4e39-b6a1-5d337d8feca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da5fbd3-805e-4436-9d9f-765749f6a9bf",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f26628-457e-4a17-8039-34c36d594239",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43975524-45bd-4871-87d7-fd55924aedf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd20f29-b6c0-44b4-ad41-1785194fe3bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad24d95-ba95-4ab6-a859-1ffe962dfcc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d5d03e5-1d75-4ad0-8208-a28609b1ef88",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0e710c-6067-4cca-80e2-6ddecb77d101",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fa35cde-8389-4538-91da-2423407c4cc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2fa402-5735-401a-a8f1-20fa42bb4324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb5565bd-f765-414a-a74f-cbaa32066af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9684714-d6b8-40f1-b66a-0ca09bf00ea9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4a2196-d09f-45eb-a834-02a4ebaad36e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f3c2fa4-9531-4a75-93ef-da612acacb91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b391dd-05c6-4f03-bd97-ce4fb0275baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9583c130-c59c-4497-b455-f14e7b4e4272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3dd725-dfe6-491d-874f-0cb67def68ea",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684507e9-58b4-4ae7-81cc-624f081276eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "346adee0-f8d2-4e39-9244-73a046dc91a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b86fb2e-25db-42bd-91ad-407750a3e705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90b4c0aa-c08b-4da5-89c9-4b7387f8158b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b09ec56-88df-46f2-9321-ee7e7e4cd99f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c17e06-d1de-44de-bd29-af004e59d930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9edfe545-5b56-4dc4-b8a1-ea54b0ef6c98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5f0129-4bec-462d-bb53-02cb6920603d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd11942-9a8a-4448-91a5-05b45e1ed6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60fd527-e279-41ea-a181-51ec62d757d9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4deb6e9-40e7-43a3-82ba-3db6ee20069f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a78b5db-d541-4b9b-a50f-5d6bc9df374c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23f98ef-10c9-4616-8e31-34358436fce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eac0c42-66f3-4f62-aed4-8a199a3e5e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c48d2e-3dbc-4c1e-abd7-f5e184d3fcd2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751e6c61-7782-4461-a709-a5d65e87c1ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a54678e-ae7e-4e99-a319-01336978701c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fa6a7e-f3b3-4bc1-adf1-9499f67c970b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26a0b46c-f2c2-4422-bf13-260dd68b815c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb664d7-bf3a-4bdc-8b45-c8c926609f52",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df8cbb7-6d38-4c5a-8421-c6c7e4a967f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad02dbdd-2301-49db-9ca6-6b5ef6a0b10a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2284892-c6f3-476c-b452-58c210e4e4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e30def4f-1148-4b2b-aadb-f8cc437057c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754b5124-839a-424d-aa95-b8015037c5ea",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb04a9a9-4902-494c-af32-8ed7a99c29f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a81e2159-407a-4339-aaf5-b38eb96b5dde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4ff74a-731e-493c-a052-74c05fd07631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9923aaf1-75db-4539-b84a-c1c8256a6d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65586be-f737-4a18-95d1-5e9563535813",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "381f40ed-5cd2-4ddf-a39a-25d1ad2d4f40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f2a86ce-d853-4985-a88d-8e8f68b2ff35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61f0f45-9330-4c26-b657-3259ac825301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0390d81f-138b-4993-84b6-ad7453baed54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a647c706-9cbc-4d2f-8d9c-530690709fbf",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63320b76-ed4d-47ea-88cb-a9d24abfd55b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eccdde1a-9b1d-45ec-8a68-359496e9d0e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4c578d-49d6-43f2-b902-6ca05965f092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef4dea04-75d5-4d74-a734-7f308946a7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9b05d9-1d84-4662-ae2e-b8173dce2b60",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a61d18-781c-42f4-a2e6-b0d2b066b5aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15cb703c-5c8f-414e-a5fa-02b71530817d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f9a546-8bbf-43e3-b0e4-a0a8fa9c2942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ed060a-f9a8-4290-887b-462381201984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b940be-c3f6-467d-a9a4-e166228ccd20",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4740049-1b9d-4b58-9485-55f1777d0543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c26faa07-4a34-4a8d-8a6a-5ef13842febf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc819f9e-b076-4028-b5ae-401a331375e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "494a11f2-a80c-4035-a674-e6acef7b8c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e661ba03-5868-4e68-baae-bab375c8d98a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d0659e-738b-4ade-866a-6691f242aa03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a710a06f-1aca-4bfc-b4a6-a259bc5136f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32811ed8-0c6e-4f5b-a6de-e55ac04ac897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b4a2b7-2977-459d-b6c8-de1fad0f8ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d42e887-b2e9-4e11-ab4c-0bf9036846a7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea18005-46af-4e7d-a2f6-e927b9c65b20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ce9e4cd-a85a-4a51-9f44-21d5ff8ed879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6034a131-50a7-48b1-a63a-6411fc0ae601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "890edce0-416f-46e0-9151-bec81a023b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3cc45b3-3364-40ed-8937-1074bccadfc5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d257b1-7849-4993-8b9f-ea0cabda1fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10e6d186-8fa3-4328-b0ff-3b48dfb6bafd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7cc10d-2700-4fe6-b919-b65f39d78b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c76bae6-9728-4f52-846d-645a3627eaeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f0dca6-3782-4907-86d1-8e0dd5ff4055",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f24bfd-9684-4411-ab80-da4403294e54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6376a10-72a3-412a-aed1-162355ee075c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c0cf51-74fe-4d0f-8861-3a52d4154841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50cf32bc-6d9e-48a0-9c78-913e50c02544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db0c4418-56b2-4865-8590-e8162836310d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188e07a6-c140-4033-9747-904cc9ffbb01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9742c92b-427d-4086-a866-243b39bbd457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a473caf4-e9fe-4ff7-b3b3-3b23b12904f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f573e1b-0b03-47b4-9d62-7e6c021842dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22202625-89f8-47d1-b47b-37c4408a1b9e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d748c83f-d573-4330-8e64-6d4688abbd51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ee1761-b843-4559-a80a-7b7c8e58d091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a2c5f7-6cff-4027-bf12-7d3e47abb1d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e800cd9-4551-49cf-b1cd-6729767fd595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c8e18b-b8a8-42ea-a95e-14814cb7e2b2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd981a5-3ef8-47e1-bbbd-3a2f1a51b462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec24a75-62ff-4337-be91-60f8c10de88a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95210c0-d510-4b8e-b8e5-4721da272415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7eb1b25-48da-47ec-bf0e-0f1e283ec43d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4409cfb5-cd89-4d98-8344-0d210270a7a6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9482150d-151f-43df-9b3c-09b53b89a978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ea38b8-7a7e-4cf3-82d5-7cb5977f78ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5e63fd-9d7b-4b02-8c5c-144eb56ae443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a37cef9-82c7-4d69-8db2-649f19f750ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d7909b-8aea-469b-8516-a7ce802799f8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1e1ebf-fd0d-4841-b10b-f94b1d524111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "827d5bf0-8b5d-4529-8f66-6daf5d8a768c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a53029-dc6b-4c43-a1a9-0ce5f18297e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0760bdd6-0ec7-4628-abd9-bef812782aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14226a8-7644-4a57-b1fb-8ea1fef94d4e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebf6f56-df04-4bff-9253-f4f4eb4b7131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d027e5-3dee-4a4c-a7c2-5be655fa033c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34762e3-c34f-4166-95c0-ba0afc6d2e95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17b81b6-a8b9-409d-9a45-f79b54e867ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a18271-a4cd-4afc-aa2b-c3c0f3f07110",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79b359c-cbe1-4ccd-821c-a9270003baf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fecb849-0375-41d0-8275-20c7174c42d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "056b3a9e-e033-4603-aa4c-f0d5fd8e3610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c682b27b-7b02-4dcd-afad-45589f13e1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9befbaf6-5b41-4d97-8714-7f9d24021b37",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b72e6de4-2d32-4af7-8999-8a503b77c652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c67d75cc-2263-44d0-8c6a-5518181f2362"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e05f443-6016-4178-ba72-e3e16dbde0c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bce1cce-8724-4dea-922a-33c579fb5cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714ec509-a4ec-4b93-92bb-1783641e1a1f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445d1f10-0ee2-4016-a47c-dc77f415309b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2516b2b6-4bdc-4354-868f-f3a3b799ac22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "757e1b61-90f6-44d6-82cc-8c7a37a5fa5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48c6c238-f4b1-4202-bb6d-66897a137f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc55217-37eb-46ec-a8dd-35f9e3ceb607",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d530e1-a31b-4412-94a6-31460f215eb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "501bd178-11af-405b-9e4b-f42083693d34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "318584b0-b651-4559-b932-cace46ce8cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a50929d1-f345-4b8e-bedb-872046192ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d703ef9-3a6b-48f4-9b94-4bf709cee65c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99a55f7-2920-445e-ba35-144815e15c53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42446c34-e063-4f60-892e-4fdf69cdbae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d421145-c91b-41db-81bf-7a3f32a35019",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea9bfca2-ddbe-4afc-8ce3-6bd3d30f3b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fe6846-adfc-465b-a33f-09efc6dfa223",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "debc098d-ee51-4bdf-9257-d549c9acf75c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70937af2-4017-4a21-8c86-a0f881b96aa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1738a6-13ee-4ae8-ad2b-75cc9aa8fd16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c64eda-5945-48f8-abe3-277c28daf43a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d765fc-d391-4f84-95dc-b39a59b623e5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4c8a85-5144-475b-8777-a4036b7b8681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a2c7c34-8c8e-40c0-a962-1b927d37f3b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8522b368-79e5-48c3-8041-982d3f37a3ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e711bee9-738e-43bc-8798-23b33d859384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bbc21d-319c-4f7a-8a4f-3d00ac60ac92",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b1ece1-927d-4e47-a990-8bae376cc337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5665e16f-cc93-4012-8292-07c6f5304ead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "413e07c1-fb9e-4343-a054-14203e06d1e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18214ae8-1a02-4feb-98cc-f7943de6f12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d258b8a6-3859-441b-8ac9-984dc7c9ee4e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ce250b-6a13-4404-8689-aa393709d646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0af2d710-d673-42be-958f-df54e0ff2407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e94dd9f-a74b-48b5-bf73-c8a4512654c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2ce7bff-ddf8-4a07-b9b9-5f6835231bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af71d357-bac5-4599-8bbc-3c3341b01bdb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a8175a-36ab-473c-982a-125dd9785712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02489fb2-f581-4ca4-9aac-1664a46ea0d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4708a5-d791-4054-a360-9f2dec862eea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5945179e-19bd-4128-8bb6-f4f5ef763c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1132c7-6144-4877-9959-3f7f5b88c2a8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb4b22a-8c5b-47e7-b805-15fee20acb34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b6ca97-4c7b-4da2-96aa-2073b12f5c28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "644d2a01-559c-4333-a454-3a9f26bffb76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82ca2711-e15b-44c7-984f-7b4950d87e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb09153-6571-4e4e-aab9-1842f690f260",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97619910-2120-45a8-9f66-34c508ae1cb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6167ba82-10b5-470b-8205-3a0de5661aec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47785a6-0d74-4258-8a5f-c20024d74f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f33b7112-8ce3-4ee0-bfe1-3aa8c5cd2dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66c59a8-dd40-4bc2-820b-acd6e0dbb4bc",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d735046e-19a6-425a-9524-78f20976e7be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c6bd90-e2ab-4792-b9e5-691fb4c7bdb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3204099a-2a94-4dbc-90d9-e8c0501b3c56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea0f915c-112c-4c24-a946-aa1842895ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5982da73-5b4c-4496-a903-224e624966a4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be86b637-c0ae-4d39-9dc7-9458a1f80480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4948633c-3ff6-432b-9fa4-fb801e66e09a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dddd474-c0dc-4d52-b2c2-7bbeaf629ef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3521af47-6093-47b3-acf2-4e937463b7d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ec1d82-237b-400a-b5ea-2e9bda608b9e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd1cf74-c99d-48b6-937a-0881a0d15cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da0277e-e447-4ba3-acf0-711d24f086d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95bca5de-444d-4049-bc9d-9f75dc59a79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e07a44f-a535-4f0c-8389-be84697b961a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274a9e05-719e-48fe-a993-2878716bcdfc",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145ee3d4-b57d-481f-bebb-c911f8289beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9213d7d7-7cc4-4104-ab49-990882dc5e0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d742ada6-acd2-42f4-9105-bdd945563db1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bbea63e-dc11-4898-8ca4-3e3c6d0dc60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f240b0f-71db-4d23-9ecb-22934250c837",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da950a6-5880-4940-859b-57c86cc555fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa88f9a3-17f6-4ec4-a1f8-a3d3efc0f3fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc29a20-3219-4f6c-9168-85c68e5feb8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ada6e4fe-b81f-442d-be46-213ea6e83c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6489f9c5-1eda-4929-824f-b7463ac45a51",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5e97bd-9cbb-4113-b461-93214b35a758",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dacd547-f548-4687-bae0-81af03c041ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ce0a88-1181-44f9-868e-703b4d523ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26813574-c784-4eb3-9102-204a66235a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06c7949-7f24-4946-aa7b-03786e8906e7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425707dd-6318-4ab6-9050-cc2aba3facb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76e011e4-c73d-4bfd-9a02-7cf0540b3749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ff48a8-8c54-4ec2-9057-d49e21e84611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9830a810-da90-42d9-88c7-2ffc9acbb557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "302c34fb-beb4-4918-b23d-55f217d755b7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e5ac36-34f6-4459-9c8f-b6f6018b4826",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "842686f9-5443-48b3-ae10-35ff5591d75f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2650c724-5a28-414a-be8c-184239689a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75949850-6e35-4e11-9a73-38a811d47158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4a7440-d921-4f46-b0a7-0504e8ccb337",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b285f2-0800-40b7-bd3d-cee1f46576e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf192d2d-1b84-472f-852e-ed5e0334ef80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "278f5743-9047-46ee-83e2-de27e84ae5ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c778c4-6a12-47fc-98a6-f313cfb8fad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b57adda-97fe-4252-a5f9-14f478b0bd08",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7933ca6-52ea-4a6d-99bc-cde7ae46d0d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6251d613-4949-4d91-9162-c4c139152bea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c51207-be6d-48e2-b277-99787e1698bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa2abc6e-6547-42d6-beff-0da93cddfe3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4e17f3-f054-4e34-ade6-e7994cdffb98",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c724f8bd-ceff-4bf3-9ff1-149b02c5fda4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef09bc78-5900-4bdc-a0e6-9157668be877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f4c545-bd7d-47f6-b033-b956c5b4a24a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8e2fcce-4d7a-4bc1-9926-89acd10c4502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ff1e39-4bc3-4a54-91f1-ca7ebff1f4e1",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0287dc-6bac-4f5b-8ad8-9446cd280c5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dae021f0-cb3a-46e6-aa20-c1884ada001c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d4773f8-77e7-4f85-8773-1acd1c5a76ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62edf009-2cb7-4de7-a0cf-dcc9cbef7d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c37af77-f4b3-4633-9689-7e80e77b25d1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1fc240-d39f-40d1-96e8-ea540634ad05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1c5e976-b893-4a10-a4ae-4d320e9a5a9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "696fb9c3-a3ae-4938-9d8d-c47e255d1a48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "416dbe77-bfa0-49eb-97a6-a668c13e16e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e25a7c8-86bc-4109-ab22-79d58ca076e4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf349b4-8109-48de-bea8-96b4daade7c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6aa46240-33ce-4a65-9de0-54be87d3f1d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a21463-9f6e-4373-8ff2-52277c48543b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38885e2d-2933-4100-808e-92708c127dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b099fba-e4a2-4061-8dc3-1d0539e2c039",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058da755-265d-4e15-a644-189d3a80ab16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5239cb9-e3b1-4764-9f2b-415ef90a7efc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "247e559b-2842-4ad9-8df0-b23f843add47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65143864-87c7-4d3e-9f6d-ea871a3219dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c01d9b9-4294-4824-ba18-1ace3341624d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f59a025-a7f7-473d-b051-94888fdff161",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53b8ce05-226c-4172-be9b-57f1c0d5ed60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8deded-2c8e-4d37-af0e-5682eb6d340f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84c98fd7-f786-4566-a051-b8401fe3b5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30cc7d9-3607-491a-84ba-918d776d2d8e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9927c012-3580-47f5-9b99-bfe7e4683aea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ff3c35a-e5f5-4673-96eb-78107cdc7740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb22a36-14be-4d51-bef7-6a2f8383a13f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f86bee8f-55b5-4afd-8b15-a1d009d77033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8dc9b3-f60c-4efa-8fdf-cd685b1d8457",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5200a49-7ec3-4e43-9dc3-1221faaa92ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afe12da0-bf7a-4838-98c5-0b11c3450d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b79f0767-96ae-46fc-9ece-166e4bc76de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cdeb32b-5290-426b-870d-647a223f833f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba35a358-49ef-4dde-b0cb-7cd691832e6c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0172755e-6800-47c6-a09b-48cde4860af2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dc9ad7b-a58c-4b6a-bcab-db6fc4347a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e3e179-d2c9-4cb9-a0fb-1ab3ddbe15b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4444777-e253-4a71-89b1-ea9f066a1530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd552ac4-1cb9-48b4-8b0e-041c756c4ca2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b465b1ff-4075-4615-b23b-44d65c44e5d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aadf7d89-a988-4086-b73c-6beed32ca7dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edee344d-bf9a-4cfd-8a5c-f3d247460f56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb54c8cd-00a2-4164-8422-0210469e4ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f184c7-b862-4e80-a1c6-fb763a169d7c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0577c3b9-b34f-491d-b1c0-7ed1b843b33a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67026167-ad8b-433a-8f3c-b713f7f94502"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c930c6f5-e30d-4eee-adf4-a964d1e3dab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bc200ff-ad9f-426f-b915-e083a7a860fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd55573-2155-4f9a-9f76-2721e9c8f776",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be44b9b3-a0df-491d-bd26-b0125dda3ade",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8087633-bf77-493c-a369-b6f45854e7b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5a8dfa-1fca-47a4-828e-0437698bf851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "406c460c-a6a9-42cd-beb2-b819452f295f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d270521-56c3-44d4-9a37-cbe78d41044f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a7c0ad-ebf8-4e04-99c7-8067336639a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95c772d1-d6a8-4b8d-96b4-b76a824bc416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26176a09-c874-4963-a327-cac576565a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "974c140a-ec54-4da5-b344-1d6788709b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e721716f-620f-4616-91ba-71453fe82be0",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b987994-1f11-48f2-92a0-adbe7fc9653a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f03554cd-eb46-4605-a190-dc748de5a1ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9708855-ef6f-4769-ae0b-54acf0bb9db6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "233906d1-1594-4a0e-9a49-b4879de9bf84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d81aa7e9-e8cd-4247-a9c3-5e7e8faf74a6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580a647c-9783-476b-828f-deac40324ec1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f934c63-58b4-4ec1-a13f-a4a110739a3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4483b9c0-49e8-4653-a283-7963f2cc3b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb7f3a6-e439-4f95-b3b1-9ab732c670e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e88422-f13c-4f4c-973d-24b701ee9d06",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca43143f-91d2-4539-b746-de5aefab435b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12ad51b6-f5ed-4121-bc3d-13f35aff5177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d441972a-e878-4b42-a1e8-3f8628afb269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4d574b-ac9e-4be9-a3fc-c9e9fe963f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07782c60-1f96-4492-8db1-ea7c1daf86d1",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a43338-2ded-49e6-bccc-4724c61fd816",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a05e1971-6cf4-49ee-bc50-c23bb963618e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a421a0-b3ca-4ecf-a85c-f9646e9117b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32f56fd6-dd6f-4935-a577-be81f580b1f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e63bebeb-2abe-4023-8de6-0eef8946c8e0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1e512f-96b9-4a97-ae72-ba4613d2f1e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbc3e710-a1d7-41d0-84ad-92d5ced627d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb7d491-5798-4ba9-b1f2-0fa10f4abf66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "959f8ecd-b2c1-46d6-a269-550d16bd24d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f045a1-3c06-47bf-b5fc-8af09dc5c199",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c7c81b-c1c7-4232-b7c9-bc236fa57867",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "136300db-210c-4ef9-b153-0fe8147ed5da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dab08313-c4e1-47d3-b248-8c3f07038838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b87d210-bfe9-4f2f-9604-8f9aeac9a1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c64e74-758c-4c24-a2b9-2e1e5e27dae7",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddd4a8d-24ca-411c-ac19-d8844b245a90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a56bfa81-875a-4c9f-8505-6daec873ba65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23d8a36-b03f-4e36-be66-8cb21f1aad96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "574f3671-f9b2-4637-92fb-eaec85db32d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c711f26-b4da-4cc3-8e97-a840a0748598",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0b10cb-9bbf-4825-9551-86daecc892b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42a23843-9f51-4363-828a-7b2f4a2275d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4656f2-3eaf-441b-ba06-70507f1da77a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ba9db7d-ca6c-4da2-9f3d-f7a3f36c09a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab68387-d7bd-4593-b171-1f20042b0f7e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2508bda-91a8-4753-a053-eb41b817e0ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3d40c4a-d284-404e-a2a1-38d99ba99063"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ab73ff-7bdc-4991-a053-d27e89277faa",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b2c1e92-b992-4507-8219-01deeb1d7baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666797c8-dc3d-48e4-a803-5e971f35c62c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e211be8-0011-4feb-bc9e-0ca7d6534e0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc063ea8-610e-4584-bd55-c07847d90f15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0650ca1a-4d7c-439d-9b39-88aa7a4c57a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3630521b-fb13-4302-ab73-81d14be50e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5b6e19-617c-4818-862c-a3e36074469d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf21154e-c04c-49dc-b81b-a64d4997d46d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37f052ec-778d-41fe-850a-7a6ae0d2d7ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a45e2f5-4b62-41f8-ac45-72189e6e4ff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a43f723-812b-437e-be18-8fd68c934834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21151bb-2fb9-4422-b208-e608e30baa85",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffef1514-b43c-4242-be20-12deff62153a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eaa77f0-1c20-464f-ab6d-d8573d574ca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35d31fa-6da4-40c4-a771-c4ad49684ac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89972b0f-db58-4fb8-9678-55692ea22ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644ed67d-9135-4685-8c86-7ceeb275c008",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7ea86f-5bf8-403d-9891-b7c5fcf731f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d9032d1-4bfa-47bc-b870-ce17ceadfd20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc7168c-4f26-4643-9f10-0299ceb732f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dab6be5-850f-49ca-af4d-591f8bf5ec0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ebca00-1a0e-4228-a5a6-86f6ce8f6083",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7865b603-27e6-47fa-9477-2f430f2aa48c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcccdc7e-109f-4f0c-af4e-cdd448a61915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16976ab0-3db7-4e39-8aba-9f92439e00ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca96aa3-2bc5-49d7-8cb6-9212b94764e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d45264-c7ba-496c-9dbc-dabd83c3f6b2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bced1861-a893-46ce-bdf0-449b8fd128b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "291c3cb3-014c-442b-967b-9777eb976f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09141f98-eaf2-46eb-b9f0-fd237b26b787",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "971f2d50-8ad0-47af-bdbf-16471c49875d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d1baf7-0003-4ee8-9347-04559b0f12a6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b996a8-a547-46d6-ba39-a618a35282e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc6c7c70-d23f-4072-b528-473475b0e19f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eea0e23-5702-4195-9899-bcbac93f7fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "030c005b-2b7e-48e5-a664-96806661a89b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7fe2c7fd-a158-4b1b-94da-0eeec50ad61d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dcdb29fd-e01a-4b62-82fc-849d7adef6d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2addeb77-28cb-4c7a-acb2-bb55c6f747c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "79b0478f-20a3-457c-8114-30e4468ca32e"
                    }
                  }
                ]
              },
              {
                "id": "168db9f0-d39d-4f90-a7cb-ebc34e6f30f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d06a8f28-b237-4fc3-a15a-0f0c19844f62",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b031dfcc-7829-40b9-b0af-c4acae2aad4e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f8de17b6-d497-4793-947a-55342b62036c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35bd4f5-a13b-4d55-8264-408cdaa04de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38be9f64-6d7e-4527-b137-8b12f0ebe731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8e0ab6-c9b1-48b7-b613-2d107c0c0827",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44cfb93e-c2f1-4d9e-829d-0913a28bd81d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e73756c3-a6d5-4b65-a8ed-cc0fa508cb31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fe6669-b4df-428f-adb8-d2f2b1330cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40ee365d-ad07-40e0-bac3-5c980bd15459"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99901bc6-273c-40ac-94b1-a0e3ca0bb79c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b614256c-ba2a-432a-a162-c51869f06bde"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc9be04b-bf93-4cb4-aa52-9395feed50f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5756c0ac-3c24-4234-acfb-6a881f7aee7b"
                    }
                  }
                ]
              },
              {
                "id": "8b47071d-7e8a-409a-a951-c9b1a8fe29da",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a75a8b6c-b35c-4187-9dbd-0e8e279cdb90",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a13c79-0b45-47c0-bc46-cb67cd70a51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d0f4e9e4-1ef8-4b09-bac8-107e2c7ec552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8ad174-763d-4f06-93af-32e7ddf9749c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac56d2f2-c70c-40e1-8c0e-0e36f7e3f2d7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fde162e0-1e21-4358-a013-d487caeb1a3d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "677db8d2-21b8-4ce4-b489-9f07882f60e0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef0b9a69-8c72-4725-b0b8-b579d17a72e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "aeb389c5-46ad-47cc-ae63-a40b92f182db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecacc175-14dd-4af6-b9c2-631b65d45ca1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "759588c9-af74-49b1-a567-71af0f160d11"
                    }
                  }
                ]
              },
              {
                "id": "3ce610a6-edca-4f98-9043-b82a0a1284b7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3a0a81d-5c85-477d-8800-a70f5fd5d36e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fa98e3f9-4ac9-40a4-b6c5-428b0d94dbda"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f53a32a7-4c9f-4b8b-9487-b9d08784705d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3444de9c-ccc1-4f9a-8ffc-56c642a39b2e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f6a58b07-a229-4d9c-b1d9-ebf0cfe15614",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "816cf191-122f-4cd8-8b45-7ddf9daa94da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "736a8e81-711c-4297-b248-66ab4b66df90",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a7925d06-9cf4-4e15-8773-20a25e9e5931"
            }
          }
        ]
      },
      {
        "id": "215131e9-453f-4ca2-a475-f88ad4bef043",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "9689a211-1de4-48e8-933a-d1f9b4ca53b3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cf791f37-ab67-424b-b5af-9124d34d97c0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6dca8984-f57b-475e-997d-a857d5e91fe7",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48f91b6-a9d5-4dd6-a8c4-881b36856396",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0b620d96-a0ce-4457-9737-aa4931eb15fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e278880-fa6d-4167-a524-fd6e7d147793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a2f7bb1-a574-4c10-93d8-d53c150ae053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b0ed5d-9e24-4f68-b922-ce31603aedee",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea60e99-d39b-46a7-bbe9-d7d780482dc3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "999d01e1-1cec-44a2-88a2-88dba5ec8024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "106bac3d-1b46-4323-bbee-1f05843f8488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18ad29ca-a3b5-4232-9394-d0a018ed687a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9094c51c-fe05-4d2b-ad65-a4682967fb76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73560293-343e-4019-8fdd-4be2922ea4ca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7cc76336-9cae-4c21-8979-d093d8d62f59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea347608-8143-46b6-b1f5-16c28924583c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f8d2bb8-e914-4f04-9e30-8c75e21f7934",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a2f2f02a-ef66-41af-bd22-4c18d86b539f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e70789b-52b5-4170-b4bd-e961bff9c143",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "40e7962f-fbaa-4d6a-a20b-b833f3d7cefd"
            }
          }
        ]
      },
      {
        "id": "2a36647e-439d-45ac-a7fb-986bf5c59533",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8e2b9804-872a-493d-87cd-bfd672736673",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5553aa65-37f8-4324-a481-812d5497b0f6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "095b95aa-e3fb-480d-906d-3e828aaa1837",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e761643-45fd-4141-8d6e-62c5d6879deb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dd472233-f89e-4269-be72-83c9c1fa91d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b00f99-489b-45c1-bace-74f11e1addee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "049449e8-fbe6-43f2-bfa5-6394229d1952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e7695c-d76c-4f09-9475-fab01acf8136",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8718563-d495-4ec8-abd8-74d961c31e96",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dba2e2cd-b0fb-4e90-8dc8-4a7420796440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "662b7ca8-d4c5-48f2-884d-eaa70e570047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e044b227-c7ad-43a0-b737-bb0bb94a07d0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed65b1e6-e83b-4eb9-b281-0855c8e2f084",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47e43262-2a98-4d62-a684-b60e1145a6ee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "444f1416-3a41-49db-b41d-b0ba8a6aef9e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee2fd007-dfd3-4575-8d71-bd07f6407181"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c35e8386-ce90-4330-9b67-cd6ee3d38cd6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "197a09c1-9a2c-4f49-bc28-ce3a8410198f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7292b560-b2ce-4152-ba86-7ff49c1de504",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dfee723e-4f2d-4219-b4f5-0981efabec85"
            }
          }
        ]
      },
      {
        "id": "336be79d-abd2-44b2-bbec-2e7d37b429fe",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b665da12-02a7-4efe-b512-ea6ac51aebff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f3622dd-dc2e-44a0-bee4-9e9060a3ffb4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "78ff4cfb-90f8-400e-86c5-0ef9f861a05c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e20e0bff-c51f-4c6b-bce3-a5cad4a7db25",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "19c596ab-3281-4227-9eb0-75e58536f762"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efcdb5fc-a70e-4191-835e-cd10abc1c9d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d690ca3f-0cac-43bd-964b-c518d8567e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7692d65c-37ab-4c80-a2cb-c6a2996fbc03",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df307bae-0b44-4616-8540-b7e76c7a4d90",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "033962e6-a724-48e2-b8d9-105217290d45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3795557d-411e-4bd1-b250-02bbdde5a0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29948302-576b-405c-b6e2-6b82aaf06d11"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "050d5990-b9a9-4e7b-a49b-befb458ed869",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d220c722-88e8-4c9c-b801-b75ea5eeb813"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e058428f-3c18-4edc-9090-e81103f08af7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9df065f-c89b-4f26-9baa-d3e0dfe2073e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "afe7c44e-a81f-44eb-aecc-f3cc7d33efdb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "69262563-4d02-4b1f-b5f0-bb0ca2f39cad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db4a6ea4-d334-4155-862a-d4d5316c78c1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2bf71beb-72aa-4e4e-9b6c-bef9d55f9088"
            }
          }
        ]
      },
      {
        "id": "ec19610c-9e42-42d6-910c-88035507e9ff",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f4eb8ad-c36e-4694-8cf1-055ee3a2e100",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c9424f86-5f46-4638-9cd1-f9b6573b14c0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8e3980fd-1aa3-40b0-b9c4-15988c354cba",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "db229f7f-c757-4a3c-8bad-d5ff88962a22",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6124db2a-ce24-4bc9-bdb0-c32a1f9e5182",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 473
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 192.36879563078577,
      "responseMin": 26,
      "responseMax": 5749,
      "responseSd": 756.3126816889112,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1672965590385,
      "completed": 1672965677058
    },
    "executions": [
      {
        "id": "9a38ab09-5781-4ca3-9274-975bb936b78b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "42404b74-86ed-4441-b01e-54daa08fa24d",
          "httpRequestId": "c03a7180-93b3-42d0-85d1-e3d1b340c058"
        },
        "item": {
          "id": "9a38ab09-5781-4ca3-9274-975bb936b78b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0d02514d-bd03-40d7-957e-c97dfc33fa12",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 0
        }
      },
      {
        "id": "cc9d4c9f-b752-48c6-8746-b688889edc42",
        "cursor": {
          "ref": "891cbff4-cd03-4b10-9e52-1f8a0d717bca",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4aa960d1-ebc9-429a-98a6-2d8f91ea6060"
        },
        "item": {
          "id": "cc9d4c9f-b752-48c6-8746-b688889edc42",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3a149356-c594-4ec3-b5fb-2c4b637f9c1c",
          "status": "OK",
          "code": 200,
          "responseTime": 26,
          "responseSize": 0
        }
      },
      {
        "id": "8317c613-d4c7-4d83-8786-c4d289197a55",
        "cursor": {
          "ref": "93329075-36c4-4a8c-8263-753db56021f7",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bc6eaade-36d2-479b-bea4-9b9033b21057"
        },
        "item": {
          "id": "8317c613-d4c7-4d83-8786-c4d289197a55",
          "name": "did_json"
        },
        "response": {
          "id": "5c6a915c-b6b0-40a3-97e9-eb171f519a4a",
          "status": "OK",
          "code": 200,
          "responseTime": 607,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b08210-14a4-4a8e-8377-897b9c4275d6",
        "cursor": {
          "ref": "6a0b3125-1c94-45e2-8551-6a2aaedf7fde",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a73bb339-bf79-46ef-ad3b-904da2597a1f"
        },
        "item": {
          "id": "09b08210-14a4-4a8e-8377-897b9c4275d6",
          "name": "did:invalid"
        },
        "response": {
          "id": "2b54b2e1-4e78-40a1-a4a8-137e561cf53f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b08210-14a4-4a8e-8377-897b9c4275d6",
        "cursor": {
          "ref": "6a0b3125-1c94-45e2-8551-6a2aaedf7fde",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a73bb339-bf79-46ef-ad3b-904da2597a1f"
        },
        "item": {
          "id": "09b08210-14a4-4a8e-8377-897b9c4275d6",
          "name": "did:invalid"
        },
        "response": {
          "id": "2b54b2e1-4e78-40a1-a4a8-137e561cf53f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a296481f-652b-4850-b47e-a23a04937f2c",
        "cursor": {
          "ref": "d54fb3a0-2d46-4e47-8f58-a797b5269454",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fe81ee34-9d44-4a4d-96e6-156ebf1d99db"
        },
        "item": {
          "id": "a296481f-652b-4850-b47e-a23a04937f2c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "382a8490-2963-4932-adc0-5afc14ee7332",
          "status": "Not Found",
          "code": 404,
          "responseTime": 155,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbb99b6-b955-433c-8385-7a0be2cb9be4",
        "cursor": {
          "ref": "5a21a698-df5f-4899-a8ff-ece6c801235b",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "100e9a96-5e66-4e18-9526-e917bcbde7ec"
        },
        "item": {
          "id": "8bbb99b6-b955-433c-8385-7a0be2cb9be4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "13a3a542-35e1-4665-af7c-b2da15dd87df",
          "status": "Not Found",
          "code": 404,
          "responseTime": 82,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1532c245-8b87-4604-b607-d4ba6e86210a",
        "cursor": {
          "ref": "77f60adf-5cd8-4956-b4b9-ac18d573d659",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "aa93766e-b4e4-4b7f-b1cd-b1d7b91baba9"
        },
        "item": {
          "id": "1532c245-8b87-4604-b607-d4ba6e86210a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7c1b4d5f-49d9-499a-a8a8-35581b3fbe3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2c9de1-269b-40d9-95b3-aec4155e62f9",
        "cursor": {
          "ref": "a46a03b3-1bf3-41f8-a0cd-72311c806418",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b6ede57d-ae7e-464e-905b-4e5b3639ac5f"
        },
        "item": {
          "id": "fc2c9de1-269b-40d9-95b3-aec4155e62f9",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "39d4de9d-cc8f-4898-a762-3753728d8b03",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "fc2c9de1-269b-40d9-95b3-aec4155e62f9",
        "cursor": {
          "ref": "a46a03b3-1bf3-41f8-a0cd-72311c806418",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b6ede57d-ae7e-464e-905b-4e5b3639ac5f"
        },
        "item": {
          "id": "fc2c9de1-269b-40d9-95b3-aec4155e62f9",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "39d4de9d-cc8f-4898-a762-3753728d8b03",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d2fe9e8c-1d1d-4dae-bd39-ed46085b78c7",
        "cursor": {
          "ref": "6e2afe22-017b-421b-b6d5-2a1fae8f3b52",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "692e4417-330d-4be2-b675-201071ef8ffa"
        },
        "item": {
          "id": "d2fe9e8c-1d1d-4dae-bd39-ed46085b78c7",
          "name": "identifiers"
        },
        "response": {
          "id": "effbc025-785a-48f0-902b-c9d50632e2a5",
          "status": "OK",
          "code": 200,
          "responseTime": 643,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ee327e-248a-4458-989e-a7d3986e731f",
        "cursor": {
          "ref": "3d4f9ed9-0a0d-4bee-be56-5ae611088ae3",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "69b5042e-ff19-4b62-be6a-17ace188c766"
        },
        "item": {
          "id": "d9ee327e-248a-4458-989e-a7d3986e731f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "468fe76f-fd3c-4098-8f16-40a0be66112a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "d9ee327e-248a-4458-989e-a7d3986e731f",
        "cursor": {
          "ref": "3d4f9ed9-0a0d-4bee-be56-5ae611088ae3",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "69b5042e-ff19-4b62-be6a-17ace188c766"
        },
        "item": {
          "id": "d9ee327e-248a-4458-989e-a7d3986e731f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "468fe76f-fd3c-4098-8f16-40a0be66112a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "618c8306-9dcd-41aa-8f74-b81d45327865",
        "cursor": {
          "ref": "50ab973b-f6fa-4597-8623-8b1dd7d51f56",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a0754606-0280-416b-9740-b55c56fd3830"
        },
        "item": {
          "id": "618c8306-9dcd-41aa-8f74-b81d45327865",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "83574df8-9be8-4b2e-8b6b-48fd68f4b33a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "fa22f36b-d67f-418d-88df-ab5c6ff77a70",
        "cursor": {
          "ref": "557ebabf-c5f0-4afe-91ed-91e4d827cdca",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "115c1332-2231-4dba-a0b4-71acf385acdd"
        },
        "item": {
          "id": "fa22f36b-d67f-418d-88df-ab5c6ff77a70",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "f6a6be40-91bc-4edf-9c69-4274297e0500",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "4a0b86d1-0971-459d-b690-7dfc7808b33e",
        "cursor": {
          "ref": "31dc4b11-7940-4c21-a9ca-d62f0d9b3fec",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b73207f2-d0d7-49ae-9f1b-a6c17c19b856"
        },
        "item": {
          "id": "4a0b86d1-0971-459d-b690-7dfc7808b33e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2cb56768-2ec8-4024-8f6b-015d9f9c466c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "b25c76e4-3380-4880-af40-47023fda2d28",
        "cursor": {
          "ref": "b5cdccae-ecf8-48f3-bf3e-da15051c9bb4",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f280ce51-1d06-43ed-a7b4-69f1ccb8f0e6"
        },
        "item": {
          "id": "b25c76e4-3380-4880-af40-47023fda2d28",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "97c3b357-1112-4b76-aaee-82432fca1d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "00720827-f96e-406b-a2e1-1d72a627ccee",
        "cursor": {
          "ref": "e1753965-c461-4577-8007-42adab642f6c",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0ab57c27-3cdb-459d-b1a1-717a733bbf42"
        },
        "item": {
          "id": "00720827-f96e-406b-a2e1-1d72a627ccee",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b7d5bc86-057f-42b3-9941-6712ea90da37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "5a90ac21-7d67-43ab-9708-ca6dccd166c6",
        "cursor": {
          "ref": "7e8b6d69-448d-41b9-8df2-ace6ce937b65",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3e5ee315-6b41-4ad4-8768-fddacf62020a"
        },
        "item": {
          "id": "5a90ac21-7d67-43ab-9708-ca6dccd166c6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "04907b84-e91d-4483-ad02-8797e4332a7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "7f9d40c9-0790-421f-8326-a2269b8fe19d",
        "cursor": {
          "ref": "fec7b976-e192-4740-97c0-5273dec58de9",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9b50c80f-a987-401a-bc41-9baa470d199f"
        },
        "item": {
          "id": "7f9d40c9-0790-421f-8326-a2269b8fe19d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d3d61c90-25bd-4710-8d76-f47e72eebf6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "9c5fcd06-3432-4c80-a4ae-752a505afb1c",
        "cursor": {
          "ref": "0d0716d0-9561-4a84-8eaa-effb7a67a769",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "44f24eb3-1962-4882-a85c-126ce5113d88"
        },
        "item": {
          "id": "9c5fcd06-3432-4c80-a4ae-752a505afb1c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a6f5ea70-ebf4-4644-b3ac-10aac48d95f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "991a92d5-8b75-4ff7-9dc8-0baa750e5132",
        "cursor": {
          "ref": "e1d36569-2960-4018-9086-1d32f5e92d92",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a3880f93-790e-4bfa-9246-79ef004c9b06"
        },
        "item": {
          "id": "991a92d5-8b75-4ff7-9dc8-0baa750e5132",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f642fbcd-d2ad-41a2-9ae8-800e74df27ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "07776f70-d564-466a-8fd2-2db424af775c",
        "cursor": {
          "ref": "c2fe4209-ed27-4ee9-a748-6e5d4c41839f",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a75a6c8d-9127-4674-b52e-0e4507213646"
        },
        "item": {
          "id": "07776f70-d564-466a-8fd2-2db424af775c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c3eb297e-2f39-412d-a07b-ccdcbc268032",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "c658f4dc-b09f-47ef-a0ec-73b4630a5a48",
        "cursor": {
          "ref": "7b62a86d-6537-4aee-b7de-6cc1b451daeb",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f51f366b-b9dc-42c9-9f8b-2baeb898d07e"
        },
        "item": {
          "id": "c658f4dc-b09f-47ef-a0ec-73b4630a5a48",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "52582ca3-50b5-4465-bc7f-43bd5c0fa677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "b3cd95f6-f6b5-41c8-8177-4f884389e8f6",
        "cursor": {
          "ref": "7506a140-d098-44bb-a0cf-181536004071",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9355baca-c1cf-467f-88f8-2561b9342de3"
        },
        "item": {
          "id": "b3cd95f6-f6b5-41c8-8177-4f884389e8f6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7ce666d7-51e2-444d-9f57-3a503d07f02b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "2387d79b-0fe5-40b5-bb72-e7e902bc7b4e",
        "cursor": {
          "ref": "7434181b-b876-4751-a897-9dabfdc09df2",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "eae36033-d815-49af-9227-0302ee835b07"
        },
        "item": {
          "id": "2387d79b-0fe5-40b5-bb72-e7e902bc7b4e",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "b0f905b0-e61a-4ed9-af3b-6d9916face29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "dbb1a9fc-33de-44bb-bcc9-53a1e68356d1",
        "cursor": {
          "ref": "5035ff90-1795-4d8b-82b4-cfbbd3ca3d3f",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f63c61b4-7c82-464a-b291-918772bc617e"
        },
        "item": {
          "id": "dbb1a9fc-33de-44bb-bcc9-53a1e68356d1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2d2073de-28d8-4360-84c9-255eaead42e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "78e5d5a0-4773-4ed3-8ab7-42cf8a8d6a97",
        "cursor": {
          "ref": "b7d15f38-7988-41dd-b8a6-68d8935edffe",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7593eee2-a083-4ddf-981a-c1320f60899d"
        },
        "item": {
          "id": "78e5d5a0-4773-4ed3-8ab7-42cf8a8d6a97",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a1c9696e-745a-457d-be74-b69b8c0e3a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "05f5677e-2019-4a6d-aceb-f5a61fa37fcc",
        "cursor": {
          "ref": "5f6495b9-7a23-44bd-81e2-b1c909c0e353",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f75bfc71-42a6-4118-8c63-b20f3cd27766"
        },
        "item": {
          "id": "05f5677e-2019-4a6d-aceb-f5a61fa37fcc",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7cbeb69a-aaeb-41f2-88c9-3f46a329e10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "f0220d2c-50da-4b5a-b94d-ee27373f2a48",
        "cursor": {
          "ref": "08f03cee-959a-44b3-84a6-09947c5b080d",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ccf024a4-eee4-48b1-9118-001195afbcdc"
        },
        "item": {
          "id": "f0220d2c-50da-4b5a-b94d-ee27373f2a48",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "32ba66d7-b992-4bb3-9048-4a0084849136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "37dda93d-e212-468b-b66e-50057880593b",
        "cursor": {
          "ref": "b610b4ab-24dd-403b-a2fd-05ed445e722d",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5038f41e-9f31-46d6-b7a3-7f5bceb934d2"
        },
        "item": {
          "id": "37dda93d-e212-468b-b66e-50057880593b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a6f22734-8dd5-491e-a264-6d988b783b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "d8614491-98c6-426a-975b-8c278c76b8f8",
        "cursor": {
          "ref": "dd2c57e1-e5aa-40ca-8b7f-073ca6ae17d5",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e67fb112-a525-4eb2-89ba-25398d811d84"
        },
        "item": {
          "id": "d8614491-98c6-426a-975b-8c278c76b8f8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d5392eec-74a2-4ec7-968a-4fa8192f2210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "4770acf8-55d1-4e8f-8009-c41a1b660638",
        "cursor": {
          "ref": "eef0ebf0-332e-4cbc-bd14-93369b4a19d7",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "688875bb-03b8-411d-a3b9-afa8ff55c555"
        },
        "item": {
          "id": "4770acf8-55d1-4e8f-8009-c41a1b660638",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "8421b811-7ea2-451e-8aa1-4ae3e3aa6ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "137d69ef-9732-4ac5-bc65-806be1b9d8ef",
        "cursor": {
          "ref": "aac64773-798e-4cfc-9e1c-2043f90ef6ec",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "79d8becb-c0e6-4ddc-8438-ee4ffad83d42"
        },
        "item": {
          "id": "137d69ef-9732-4ac5-bc65-806be1b9d8ef",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "aac70754-e860-445e-83b5-a838e586afe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "43aff132-8d17-4a96-aa36-8389e7f84071",
        "cursor": {
          "ref": "bd462e1e-c031-4c15-82d1-5cc6a49a77c1",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8bbd3b6f-e678-48b2-ae67-15ff56d90b5d"
        },
        "item": {
          "id": "43aff132-8d17-4a96-aa36-8389e7f84071",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7ce76f92-5c61-4e10-be0f-f8b472eb446a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "1d5885f4-4e7c-4364-954d-3a965dbcd1ab",
        "cursor": {
          "ref": "579b5889-d6ad-42e7-b9f6-ab37f06c4622",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0f5cb7d8-1fec-4efe-8738-a363c25482cf"
        },
        "item": {
          "id": "1d5885f4-4e7c-4364-954d-3a965dbcd1ab",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e537e356-298a-4609-ae6e-ed187df8d567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "40b50340-173b-4ec3-834c-ca50d513dfd2",
        "cursor": {
          "ref": "0283ccb7-9677-4987-a2c7-4d4189f0b427",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4bc0428e-a8d5-4089-848b-77d4e93a3de8"
        },
        "item": {
          "id": "40b50340-173b-4ec3-834c-ca50d513dfd2",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0d219a7f-5226-4515-b4c0-fd024ca74862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "c2c620e3-6d2b-4833-b63a-82135b4c5598",
        "cursor": {
          "ref": "ff6bffb9-97bd-46bc-a288-fa78e119e417",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "322dfb6a-2cbb-4759-94bb-d6c598f42186"
        },
        "item": {
          "id": "c2c620e3-6d2b-4833-b63a-82135b4c5598",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "59602d0b-3ccb-4487-a5d3-a75858a49fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "1a5f3481-bf89-4032-925a-dbb64e147f4d",
        "cursor": {
          "ref": "e47296d5-7711-4bd5-857f-0360b42dd13f",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "85d1cfe1-a7a8-4c8f-abe4-380afaa0c354"
        },
        "item": {
          "id": "1a5f3481-bf89-4032-925a-dbb64e147f4d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f32e1617-6c04-4f48-af9b-dace5851aa8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4974,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "77394b60-20ab-4f77-9b5f-3d6c51b6f3cd",
        "cursor": {
          "ref": "0c5a1f7e-ebdc-49c5-9354-73fbf4097fee",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "68a3cfed-d59d-4d1e-9d99-7aaac8f8c6f6"
        },
        "item": {
          "id": "77394b60-20ab-4f77-9b5f-3d6c51b6f3cd",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0a9dc140-af38-4bac-aea0-c5c3bf5ef428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5059,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "d46945f1-f73c-4fa1-81f7-0487736808a3",
        "cursor": {
          "ref": "184b2c70-3895-4b1a-904c-d14ff1381212",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6dc22311-3bc4-44d3-ac0d-5b6d7fbbd30d"
        },
        "item": {
          "id": "d46945f1-f73c-4fa1-81f7-0487736808a3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f3ed631c-37e9-4a45-9d03-1759c0e6fcfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4662,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "641e6c69-809b-4654-97cd-50a5df4f15b3",
        "cursor": {
          "ref": "2c8eac09-8c65-4d44-87b5-d0fc900d8044",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5ced5bee-0de5-478d-af37-1cc83dc9a51f"
        },
        "item": {
          "id": "641e6c69-809b-4654-97cd-50a5df4f15b3",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4a9c29ed-eaa9-4ff6-90e7-1081086d6dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5749,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "a7abf975-0a45-4975-b749-bd3851df4e41",
        "cursor": {
          "ref": "f10a24d4-adfb-4fb6-9fd7-29e23d629e06",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d7003fd8-ce56-44b1-9872-104588c6bdf2"
        },
        "item": {
          "id": "a7abf975-0a45-4975-b749-bd3851df4e41",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e6259419-76f1-4f01-87df-0765cca02944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4242,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "f5be762c-67fc-4f2c-9fc0-e09019aae9b5",
        "cursor": {
          "ref": "b4ca8cb0-46ad-435b-b507-6c4edd16ad81",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7558a3e1-a279-4c5e-9d57-f21e09a29ae4"
        },
        "item": {
          "id": "f5be762c-67fc-4f2c-9fc0-e09019aae9b5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f4bacafa-2d65-4a1c-91bd-da47a263025d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "f17c5c63-e3cb-49f2-9767-7846cebcc1be",
        "cursor": {
          "ref": "54c31d01-d9b5-43f4-b209-94c4fb0b4710",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b941bf44-d1ec-4261-bc40-7021b80212fc"
        },
        "item": {
          "id": "f17c5c63-e3cb-49f2-9767-7846cebcc1be",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "67299c82-6075-41be-9d60-983c003441e0",
          "status": "Created",
          "code": 201,
          "responseTime": 4261,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "c2bb1990-0131-4289-9233-675c97f684e1",
        "cursor": {
          "ref": "00134b43-824b-4a2a-9a70-411354c2d524",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "462df59e-efed-435e-8113-91164226c9a1"
        },
        "item": {
          "id": "c2bb1990-0131-4289-9233-675c97f684e1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2bd27271-4259-41ce-8ae6-06aa98ea80c1",
          "status": "Created",
          "code": 201,
          "responseTime": 4314,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1dd7619d-eae1-45d3-8cf3-dbe31326bb83",
        "cursor": {
          "ref": "858ea103-e466-438e-8349-6b5195d494ae",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1da50d62-ad29-42c6-82fe-cb2a4195e59a"
        },
        "item": {
          "id": "1dd7619d-eae1-45d3-8cf3-dbe31326bb83",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "971154d2-54d6-40f2-a712-63d98b780e98",
          "status": "Created",
          "code": 201,
          "responseTime": 4634,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "77a36077-61d2-4c8a-a298-716b3d7340bc",
        "cursor": {
          "ref": "e1af05d4-8230-495c-aef5-7164e13d50c6",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "75ba0482-c1ed-4def-80bb-d6f0085f3a24"
        },
        "item": {
          "id": "77a36077-61d2-4c8a-a298-716b3d7340bc",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "dd68fe03-bd02-4675-be89-0fba76b6a2fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "270ea9d5-6f3c-420f-8951-341f3758623e",
        "cursor": {
          "ref": "67c43ab5-cc3e-42b2-b668-65a8a50e6b0b",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "907d2374-3271-4a3d-853c-3ce1572d8069"
        },
        "item": {
          "id": "270ea9d5-6f3c-420f-8951-341f3758623e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "13345f88-f5a1-434f-8556-30bf1cf75c64",
          "status": "Created",
          "code": 201,
          "responseTime": 5255,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "cd184e7d-e679-4a3f-be80-1905e5b7ae3c",
        "cursor": {
          "ref": "74355816-88f1-47d8-9b6f-7f708653cd22",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b5ff082a-5e95-429a-bb58-a2905ba0e642"
        },
        "item": {
          "id": "cd184e7d-e679-4a3f-be80-1905e5b7ae3c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a4801d1a-688c-404d-9f6c-dfc8f1d65e48",
          "status": "Created",
          "code": 201,
          "responseTime": 4239,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "986727a4-5a07-44fb-aed3-5abd80912e5e",
        "cursor": {
          "ref": "48a2a7f6-0ca6-4204-a3a9-7e2a4a95034d",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6ae41d04-d60f-4bce-8b3a-d477b82dec59"
        },
        "item": {
          "id": "986727a4-5a07-44fb-aed3-5abd80912e5e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d97ac337-8fcb-48a1-a183-800179fa265d",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 3585,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f482c192-91d3-4db0-b323-c12dd4d5084b",
        "cursor": {
          "ref": "194ca72c-f3cf-417e-8830-889bbc09da32",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5fb050eb-c7df-46bf-80cc-5f5cfa753a80"
        },
        "item": {
          "id": "f482c192-91d3-4db0-b323-c12dd4d5084b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b0425368-1cbb-4078-8398-de53798d1b96",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8eb13087-80dc-4c13-8b4b-a06117c57e10",
        "cursor": {
          "ref": "3c75244a-33a0-4cb7-8aa4-4da641326318",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "515cb306-e622-4a4c-8f62-b1715cd23359"
        },
        "item": {
          "id": "8eb13087-80dc-4c13-8b4b-a06117c57e10",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ca35042a-5ade-4bfb-bc1e-a42275e2477c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "5cb373ee-2b2d-45e9-af6e-dd894f1d984a",
        "cursor": {
          "ref": "fb656849-1644-4d54-9328-125028d02e96",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "83bc7a96-fca9-45ee-ac9a-127c1b060d94"
        },
        "item": {
          "id": "5cb373ee-2b2d-45e9-af6e-dd894f1d984a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2e30cf77-9088-487b-929b-2e470de34d6a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f463b333-b806-4658-ab1e-c07485b5cc97",
        "cursor": {
          "ref": "779629f0-ebd6-47c9-b243-f5122eadd3aa",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "38beb68b-1a59-4be1-9a60-d4a0cdfbef7f"
        },
        "item": {
          "id": "f463b333-b806-4658-ab1e-c07485b5cc97",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2242fcf3-76e1-4092-a58f-925b5991af77",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 59,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "6a2b54d4-dc7a-4012-9a4e-5e872cf61e7f",
        "cursor": {
          "ref": "d750a3d9-6d9e-4dca-b002-1ef66f9cdd41",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a81904eb-d72c-4201-b320-baa097ae2b8e"
        },
        "item": {
          "id": "6a2b54d4-dc7a-4012-9a4e-5e872cf61e7f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "cd69d446-efc4-4144-86c5-fe28cfd10008",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "5b320ac2-6b70-42a5-ab6b-d880c1594285",
        "cursor": {
          "ref": "231513ae-6522-478d-9a80-2a69a9d9dd7c",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "fc0df21b-bfa1-487b-ada5-9ac32d74f686"
        },
        "item": {
          "id": "5b320ac2-6b70-42a5-ab6b-d880c1594285",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "66b190ed-8bc0-429d-b263-7aa5d50934b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 503",
              "stack": "AssertionError: expected response to have status code 422 but got 503\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "55d240c4-bdd8-42fa-beae-d7ba9d15bbe2",
        "cursor": {
          "ref": "4d09d11b-c6b7-4325-98d9-7d43eb0e8bf4",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "cc7cc641-d78b-47fe-8532-4089925b52c3"
        },
        "item": {
          "id": "55d240c4-bdd8-42fa-beae-d7ba9d15bbe2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "35613ff6-8b19-425a-9cfb-3cbbe529543e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "47e71d90-935a-482e-a3ee-0d3c0868a394",
        "cursor": {
          "ref": "7d36c126-b5d8-41d3-946c-8c487f8d4ef9",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "08d43110-2f38-4af7-b743-5a25cbd6e6eb"
        },
        "item": {
          "id": "47e71d90-935a-482e-a3ee-0d3c0868a394",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8faa9bc9-2893-48e1-8605-9116f4556a50",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "c13bda93-cec7-41fa-b4bd-0f3ae83a5d93",
        "cursor": {
          "ref": "9c4c1fe4-b9c0-4fdc-88d5-170dfaba5b7d",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6369c49d-b78a-4f4e-8278-0aeb2043b06d"
        },
        "item": {
          "id": "c13bda93-cec7-41fa-b4bd-0f3ae83a5d93",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1571de24-95b6-451d-a9b3-cb18cf79faa4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "c170645b-53a7-4878-815e-348cee5a542d",
        "cursor": {
          "ref": "6dcfc6b8-c503-426f-9f7e-9477b1bc1bf3",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e8e09b6f-6796-49f4-b4ad-65501f94b2ab"
        },
        "item": {
          "id": "c170645b-53a7-4878-815e-348cee5a542d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "96102fa6-b067-42ea-82aa-5a83f262d4bb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "604d9e4d-259b-4a51-96df-f64635f6d2c8",
        "cursor": {
          "ref": "be07fede-edfd-49c2-b0e7-619acf37c6ef",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "98d47e98-ae63-40ec-a7f0-0b1513cb7a68"
        },
        "item": {
          "id": "604d9e4d-259b-4a51-96df-f64635f6d2c8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7ebb3aab-575b-4721-ac82-8c5151dec277",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "c08177c6-ddcc-4329-a5d8-99681c049948",
        "cursor": {
          "ref": "36f9b79e-5bd1-4ef8-93ef-b168d9800d14",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "cd56662d-8723-480c-9a29-7b31fe8a59b0"
        },
        "item": {
          "id": "c08177c6-ddcc-4329-a5d8-99681c049948",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c0d3f3fa-fed1-44ca-be3e-ee73cfbd52a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "ed098c53-270e-4818-b8cf-af7413bd9325",
        "cursor": {
          "ref": "89210bd6-2392-4207-9399-068d0631ed51",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "79f74cf1-9871-41be-929b-1729b6a160e3"
        },
        "item": {
          "id": "ed098c53-270e-4818-b8cf-af7413bd9325",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c0508174-3d0a-4d81-83b2-87616df799c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "044424a4-dead-4bc3-8674-48e885bad186",
        "cursor": {
          "ref": "5a75c5f1-95cc-45ba-a295-9a7af2a99417",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "eb920205-430a-4ac4-842a-b66cc3131ad3"
        },
        "item": {
          "id": "044424a4-dead-4bc3-8674-48e885bad186",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ebb82693-13bb-4d28-8806-62350ca97b91",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "ede5568a-d2f7-4c63-a273-7067f596969a",
        "cursor": {
          "ref": "95e36b26-11e7-4a10-891c-20cc069420e2",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5dd7627a-b3af-4bac-a97f-e13c3d1d5dab"
        },
        "item": {
          "id": "ede5568a-d2f7-4c63-a273-7067f596969a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2b742d9c-afa0-4a98-a9b5-a7d2b72278da",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "052c920b-46c1-4cb5-89b1-e3175c553bb5",
        "cursor": {
          "ref": "10e100c1-2ed5-423f-88d1-9ee2e92b4258",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9efb2f52-6be5-4fdf-8a46-6f7d158918ed"
        },
        "item": {
          "id": "052c920b-46c1-4cb5-89b1-e3175c553bb5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "879d93ca-25b5-4cf8-bc78-97d43503fc63",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "8a48b641-ad58-4806-9a86-6dd4618f589e",
        "cursor": {
          "ref": "8edbac87-3b15-482e-9285-dcd5d5731d1f",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "54b07591-5f30-46e2-87d9-8b73fd6715ea"
        },
        "item": {
          "id": "8a48b641-ad58-4806-9a86-6dd4618f589e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6987bc83-9359-4f1a-b7a9-dd4c75d0eed5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 63,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ef899c4c-7755-4590-b8e3-70c0de0cf44a",
        "cursor": {
          "ref": "1aa0bc65-e23d-497a-97c9-0994855072ae",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ea51d729-f8b5-4970-9571-f6ada6db469a"
        },
        "item": {
          "id": "ef899c4c-7755-4590-b8e3-70c0de0cf44a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1c1b1e9e-3c1c-41b0-a435-ac1d903876d6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7bbefbcd-41a5-4a7c-b7a5-786a4ad0c82d",
        "cursor": {
          "ref": "0551c6f7-12dc-4a1f-b93e-c4e6207c0804",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a2bbfde3-456b-4989-997a-d0117331b7d6"
        },
        "item": {
          "id": "7bbefbcd-41a5-4a7c-b7a5-786a4ad0c82d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "9c2dd07a-29ca-4396-b8c3-990a4e3f63ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "e2f2acb7-0368-424d-9806-4ae0a81ada8f",
        "cursor": {
          "ref": "409da075-364d-4821-add0-d22f5e743977",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5a26cd79-8bf9-4e08-9cf1-c2e39e3978cc"
        },
        "item": {
          "id": "e2f2acb7-0368-424d-9806-4ae0a81ada8f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "cac18ef8-23c9-42a3-ba9a-db40b2d8a362",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "199183d2-3970-4bf3-813a-3b045bdb4887",
        "cursor": {
          "ref": "a224d98b-bc24-4da6-bd6c-2daca660fa72",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9c57c1ba-630c-427a-ac46-ba050ecfd7ca"
        },
        "item": {
          "id": "199183d2-3970-4bf3-813a-3b045bdb4887",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1c3405c0-15d9-4a95-af74-5d00829a44d2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ccff2ead-3f4d-4f02-a81f-473481d66615",
        "cursor": {
          "ref": "389ca0f0-98c9-4de7-bcaf-b7d9ad64e713",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "268a0c50-e0de-4fb5-b59b-a21602f19daf"
        },
        "item": {
          "id": "ccff2ead-3f4d-4f02-a81f-473481d66615",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d61f3f7c-a57f-46ab-b709-64d3e543788e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "006a0acd-8d53-4c8e-ab86-cd5a8bcf2022",
        "cursor": {
          "ref": "964c896d-0e1c-4661-a903-c21ae0dbf390",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f90f9b2d-7cdc-43a8-9770-205350079830"
        },
        "item": {
          "id": "006a0acd-8d53-4c8e-ab86-cd5a8bcf2022",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8959921e-21b2-4955-ab51-216df3ecc02b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "bb00f82b-7db5-4f99-8380-3565af184939",
        "cursor": {
          "ref": "df3ed069-013a-4c32-9154-d7306c78ee9f",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "538f4961-f004-4ac6-ab64-2bf742bf1056"
        },
        "item": {
          "id": "bb00f82b-7db5-4f99-8380-3565af184939",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0a026a27-e2af-4b3b-9af0-1b1730bdae46",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "4a72c7c7-9bb8-49a1-8149-02348839cc97",
        "cursor": {
          "ref": "e30566fe-1c76-4d3a-81e0-2f0b88badf7f",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ab4e0fcb-f0be-4a87-b0a2-57062b1d04f8"
        },
        "item": {
          "id": "4a72c7c7-9bb8-49a1-8149-02348839cc97",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "df2add1d-a206-4524-b6df-8cc563857833",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "ac7c80a4-13b1-4999-91b8-b0dfa4fd8b88",
        "cursor": {
          "ref": "0ba771b5-3c66-4446-afa3-3afae8ee4f14",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "19004e1b-0ccb-472d-9695-742218373f3d"
        },
        "item": {
          "id": "ac7c80a4-13b1-4999-91b8-b0dfa4fd8b88",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ad5d9c4e-7b6f-49a0-a1a0-ba661c4a662f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "c71cdb28-0703-4db9-b1e8-8e689189745e",
        "cursor": {
          "ref": "f5cbdf1b-86ed-4f3f-aac0-eb4bd0907b6b",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1f1c0f95-6f7e-4a39-b62c-a8efe8b0238b"
        },
        "item": {
          "id": "c71cdb28-0703-4db9-b1e8-8e689189745e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "788c981a-0090-4cc6-af30-80db08ce01d8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "9ec851e6-79cc-4f29-b0fb-4177a0841b77",
        "cursor": {
          "ref": "b8a0c4b9-40d3-4b31-83e9-25657fb035d7",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "65e9ca54-011d-4678-91bb-0b0c490b421c"
        },
        "item": {
          "id": "9ec851e6-79cc-4f29-b0fb-4177a0841b77",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "cad890c2-3045-4c5f-996e-10e322b757e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "14573033-8e0e-48b1-a652-fcad9110adcd",
        "cursor": {
          "ref": "15817129-eadb-49d0-8a46-2494101710ac",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2710b561-dcf0-4a7c-8580-47d19eebcd93"
        },
        "item": {
          "id": "14573033-8e0e-48b1-a652-fcad9110adcd",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "97a28d14-ee30-4197-97dd-2c425e3174ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "accf0eeb-d8ca-42f2-84a6-fb9012c601c3",
        "cursor": {
          "ref": "90160749-c050-448d-9580-486863415a42",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3d7cffda-566a-49ab-a8d8-bf8abecfb41b"
        },
        "item": {
          "id": "accf0eeb-d8ca-42f2-84a6-fb9012c601c3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8c204f25-e050-4a58-8041-e0957120f241",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "b9b70e3c-9ff9-465c-848e-6676f55a5cdf",
        "cursor": {
          "ref": "c79768b6-8c2c-4dee-b98c-9b0d1dc5eb27",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4aab2ee2-08bb-4091-8002-95ce6d09947f"
        },
        "item": {
          "id": "b9b70e3c-9ff9-465c-848e-6676f55a5cdf",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f60bcf73-f498-4f4b-a12b-0dbd913452d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "e19e1745-ecd4-4881-9187-d89840290832",
        "cursor": {
          "ref": "c1a2cbe2-5dc5-4e1c-a9fe-b61ed11c7fda",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f8335493-9261-453e-8adc-3c6523e20474"
        },
        "item": {
          "id": "e19e1745-ecd4-4881-9187-d89840290832",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "8179e568-404f-468a-81a5-0b500729b3ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "1af928c0-8233-4a05-accb-6eb3d9aafaea",
        "cursor": {
          "ref": "b89ac426-770e-45f7-aecd-71a7dcfb7dd0",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "24ec0a31-cdcb-498e-b28b-0d4d65b509a0"
        },
        "item": {
          "id": "1af928c0-8233-4a05-accb-6eb3d9aafaea",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "74662cd9-762b-4370-a3ad-6514d1337ffd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "c034e1c2-2328-4511-a3d8-f33bfe43b39a",
        "cursor": {
          "ref": "d9b8c718-8050-4760-8c4f-67dda11d6ee1",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c645bdd2-1004-46fb-8966-01756b5e7719"
        },
        "item": {
          "id": "c034e1c2-2328-4511-a3d8-f33bfe43b39a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7dd08523-9052-4e7a-8a41-bf4e3f0efbea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "ade3a051-a617-4f89-bd79-e76036219e8d",
        "cursor": {
          "ref": "39640832-19f1-450b-bb65-88f19885be59",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "25825c45-5491-454a-9c31-267cdcd57e5f"
        },
        "item": {
          "id": "ade3a051-a617-4f89-bd79-e76036219e8d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0874c112-ec56-4d5f-95ba-ec1b969279bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "b370ff2f-046c-4965-9b7a-ccdc1b730915",
        "cursor": {
          "ref": "a85a7e7d-b58f-4a3d-960b-ffb4300af2c8",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7bd4248b-923b-4f78-9cd7-408a6d250474"
        },
        "item": {
          "id": "b370ff2f-046c-4965-9b7a-ccdc1b730915",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "42d3dfba-5bb9-4354-ba1e-cd0b294ee770",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "7fabd15f-e672-41a0-bb91-efe1e8b95006",
        "cursor": {
          "ref": "dfb3f5ab-5c49-4dfe-829b-9907239f1936",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1ec78fbb-8b34-4b00-be3d-70c7ab2979f9"
        },
        "item": {
          "id": "7fabd15f-e672-41a0-bb91-efe1e8b95006",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9dfc51b3-a40f-48be-8d16-bc5287a60006",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "7e5a8e70-4cc5-4be0-8df6-65b32510e87b",
        "cursor": {
          "ref": "ba5fdf79-357b-464b-8e4f-a3e34d727504",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3d2afa47-eb6d-42dd-a917-644b0d51f26b"
        },
        "item": {
          "id": "7e5a8e70-4cc5-4be0-8df6-65b32510e87b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "433befa5-b79a-47cd-94f1-64ac7d66a62b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "3ae371e4-f5b2-4739-bf28-6b8f8c69a0bd",
        "cursor": {
          "ref": "f95dfdf5-daea-4fb5-8940-58402e21eec7",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6f0548f2-cc96-4bc6-920e-f449d7abc138"
        },
        "item": {
          "id": "3ae371e4-f5b2-4739-bf28-6b8f8c69a0bd",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "853d30f6-d40b-46d6-a6c9-f03436fe87f2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "5a8c6d39-0924-4f8d-b5a4-1fc85c88a192",
        "cursor": {
          "ref": "7bee5905-899e-4859-aaf0-63052e9ed928",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "adf1a1e0-9227-469c-9d8c-6d9d7cc02e79"
        },
        "item": {
          "id": "5a8c6d39-0924-4f8d-b5a4-1fc85c88a192",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "946da501-f3af-4fda-b501-e31a30033a84",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "ba76b394-60ed-4140-9e5b-c5f84971777d",
        "cursor": {
          "ref": "6ea7b80f-437f-4b9c-9030-f8305905a18e",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "776c3cd0-3da9-46e5-b591-30dc1491ea1a"
        },
        "item": {
          "id": "ba76b394-60ed-4140-9e5b-c5f84971777d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ce361584-70fc-4e38-a99e-5eae90777770",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "0adc54ff-c20a-4700-b406-425237f7b583",
        "cursor": {
          "ref": "860ac0df-f8ca-4b47-bdba-a12d714644b2",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d1cfe5e2-63cb-4f2f-9c8d-51adf74a4bb8"
        },
        "item": {
          "id": "0adc54ff-c20a-4700-b406-425237f7b583",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a4906034-6e93-4480-ab8b-eeb6e67e9da9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "3ffd103c-cf7b-4c06-af86-43915eb03919",
        "cursor": {
          "ref": "d99e128c-cfd3-435b-b45f-224fa0f7ab0e",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f8e359d8-fd75-43b6-9c48-47048a2e8774"
        },
        "item": {
          "id": "3ffd103c-cf7b-4c06-af86-43915eb03919",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ea482289-6786-47d4-b310-f655a922d059",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "92b98b0a-1795-44dc-b96b-e83f34c61a89",
        "cursor": {
          "ref": "e13bfedc-2cc0-4698-b723-9acc13d282b8",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4f110043-5b16-4fb8-aac3-29a3661675f0"
        },
        "item": {
          "id": "92b98b0a-1795-44dc-b96b-e83f34c61a89",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ab255abf-e3bf-446e-a589-48290df911ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "62ebf016-00f3-4196-b5c7-4d8323e8b10a",
        "cursor": {
          "ref": "eb416d1d-c186-4a84-a804-64070dfed602",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3cdf6871-095b-4c7e-a3f9-f92da16dc096"
        },
        "item": {
          "id": "62ebf016-00f3-4196-b5c7-4d8323e8b10a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "92e74382-2bae-4785-a306-d3849442702b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "bf43fae1-73e1-4172-852a-48aff38bbd52",
        "cursor": {
          "ref": "ddc74cc2-f8a6-4d96-8cd9-b5297d932c38",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9a5539f5-e9d7-4187-8c19-5c5f3d023d0c"
        },
        "item": {
          "id": "bf43fae1-73e1-4172-852a-48aff38bbd52",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e3152b60-74f2-4596-b462-5f5303e12bf2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "a1ec763e-b75b-4a1d-a598-0339f53720d6",
        "cursor": {
          "ref": "a47a1465-6054-4731-acfe-50b082b834a3",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7598e147-d2fe-447d-8ef3-ffb54c324557"
        },
        "item": {
          "id": "a1ec763e-b75b-4a1d-a598-0339f53720d6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8fd81776-aa15-47fb-8878-17284430a313",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "776a891a-e8de-4964-bebd-e4f2cb3c8097",
        "cursor": {
          "ref": "f0060e26-0c3c-4ce9-a404-f70c371eaefb",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c8a3b286-09da-4800-b1e8-e30e0934a49e"
        },
        "item": {
          "id": "776a891a-e8de-4964-bebd-e4f2cb3c8097",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a9d588ad-b06c-49de-8774-49f3d2863ff6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "7e8e3753-a372-4e34-a2c7-d099514b98ce",
        "cursor": {
          "ref": "6b26f74a-b687-44ba-a807-b5d057225edc",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a835acd9-cca3-4cb4-b0ca-71e3b7f619e8"
        },
        "item": {
          "id": "7e8e3753-a372-4e34-a2c7-d099514b98ce",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "cddb9acb-2fe5-4641-8d41-2db6694f8871",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "37a7db2e-8f01-4465-874e-f9d7b269d62b",
        "cursor": {
          "ref": "359cd7cd-fc9d-4f2f-a5ae-4fe829c1468e",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8b3880af-8d1a-4db5-baa2-f050d668e3d8"
        },
        "item": {
          "id": "37a7db2e-8f01-4465-874e-f9d7b269d62b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d1d70a81-b574-49fc-8c54-917ad4d28cda",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "3cac1dce-aad8-4119-b30f-04d2a56cb229",
        "cursor": {
          "ref": "fef10ffc-1a80-493a-afc2-6eddb7e6e7f9",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e6c7dc74-5351-4b07-8900-45ab36ce1519"
        },
        "item": {
          "id": "3cac1dce-aad8-4119-b30f-04d2a56cb229",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f8ede8fb-027b-40c5-8af0-94a1c7e42488",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "7e0e7077-8035-4c24-a391-b6a63e15b4f0",
        "cursor": {
          "ref": "c2bfe148-09d0-474b-ac7c-eb3e032b9f4c",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "aa56aed6-a3d6-4528-a90f-08a541518cc7"
        },
        "item": {
          "id": "7e0e7077-8035-4c24-a391-b6a63e15b4f0",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c2a614ba-21b9-490a-8e72-8457a5b93b9a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "6dc44ed2-1f49-4436-9171-fdb20f8d08fe",
        "cursor": {
          "ref": "1f9660f7-ec08-4748-9fe8-7e97e97c45dd",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b5e25c3a-55e1-4878-b6c0-940b8b01f99c"
        },
        "item": {
          "id": "6dc44ed2-1f49-4436-9171-fdb20f8d08fe",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2942c46c-6903-4692-b016-76602475addd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "9547bd85-904c-4c9d-b04a-a056ab6528b6",
        "cursor": {
          "ref": "1ceb85f2-0c1a-42f7-8aca-0c7369044182",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c2b51612-267e-43db-8cae-6d9382336053"
        },
        "item": {
          "id": "9547bd85-904c-4c9d-b04a-a056ab6528b6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "399ac389-71fe-4e49-b989-027e610911b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "fb956087-44f8-422d-8233-f73186724495",
        "cursor": {
          "ref": "4b1dddb5-4d6e-4516-94a3-ec2cb76da224",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ebb69528-1d64-4c00-a748-5e33d1b62264"
        },
        "item": {
          "id": "fb956087-44f8-422d-8233-f73186724495",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "54c025a8-5c87-41c7-a026-31187ae076ab",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "98ce7c81-1fe6-474b-bd77-be306fc5dbcf",
        "cursor": {
          "ref": "efcd8447-9e02-4784-94a2-fdd805bd4a45",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9900051d-c110-4f4e-b653-975bf66f5b0c"
        },
        "item": {
          "id": "98ce7c81-1fe6-474b-bd77-be306fc5dbcf",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ee7b5ac6-4a77-4b90-9611-6850cedf1573",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "4452a3af-6869-4b2d-b835-292fc018d521",
        "cursor": {
          "ref": "572b2cd9-ff7f-4986-b891-04148aba7184",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3b838d6e-b9a3-405f-8413-0cc014dee7f3"
        },
        "item": {
          "id": "4452a3af-6869-4b2d-b835-292fc018d521",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "839dd2d0-8209-45f8-8e96-8008e749e932",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "06881e8b-40ae-40ef-a36f-924f16a72ef2",
        "cursor": {
          "ref": "18c0ac46-6a30-4cb2-a9f1-35de04c5d33a",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "46274dd8-a2eb-4ec9-8f5e-328d28a11548"
        },
        "item": {
          "id": "06881e8b-40ae-40ef-a36f-924f16a72ef2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "33c7e5ec-881c-4c84-8c66-80fd53429e9c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "23cf4149-bf9e-417b-a77e-6d5589ab0d35",
        "cursor": {
          "ref": "d37d123b-677e-47ba-9084-2d49bc6ed1e1",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ea1d9f48-8105-4cfe-9839-ba5a15a89bd5"
        },
        "item": {
          "id": "23cf4149-bf9e-417b-a77e-6d5589ab0d35",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d65f2b2a-1ba6-4717-a855-61943c5386fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "30fdd540-e4ee-4b19-9371-052ed210f7f7",
        "cursor": {
          "ref": "d8902f0d-00fb-4dc0-80a6-ef70dcd73c6a",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "bd3c524b-268a-4694-b7c8-6fedc2e67a76"
        },
        "item": {
          "id": "30fdd540-e4ee-4b19-9371-052ed210f7f7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5200b785-fec1-46cb-96b5-5e8df36a2609",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "ed0bf572-289a-4526-8cca-9166c831aa08",
        "cursor": {
          "ref": "4d2f3206-e8db-4555-a410-d28aec9f7ba5",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f26e5b40-2fce-44c1-be86-6f2754af71f6"
        },
        "item": {
          "id": "ed0bf572-289a-4526-8cca-9166c831aa08",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6a8b724e-3e94-4d82-96e6-ddb442536de5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "c20cccb2-4909-4953-ba18-125a88957633",
        "cursor": {
          "ref": "3798386f-7ae5-4530-bd54-8926eddc8539",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1430eaab-9898-4306-8b32-f04fca226c4e"
        },
        "item": {
          "id": "c20cccb2-4909-4953-ba18-125a88957633",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "bbd2e6ce-fa21-447e-bad9-21272f117725",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "4d83e010-ce35-42bb-8b4d-901ad4a97890",
        "cursor": {
          "ref": "bce8b56a-0f24-45cf-9d5a-653a77760bdd",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "836efbdf-63e7-44c1-b3b6-a3735aaa0927"
        },
        "item": {
          "id": "4d83e010-ce35-42bb-8b4d-901ad4a97890",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "78b1e44b-c01c-4790-abf9-f45c189a9f54",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "4d83e010-ce35-42bb-8b4d-901ad4a97890",
        "cursor": {
          "ref": "bce8b56a-0f24-45cf-9d5a-653a77760bdd",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "836efbdf-63e7-44c1-b3b6-a3735aaa0927"
        },
        "item": {
          "id": "4d83e010-ce35-42bb-8b4d-901ad4a97890",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "78b1e44b-c01c-4790-abf9-f45c189a9f54",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "a01c8e31-548e-4691-99d5-21784dcd4a9c",
        "cursor": {
          "ref": "d7838ec4-9ff8-4907-a7c2-470d4e7e3ff7",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8bf7bcd4-e8c4-432c-b07d-b0fb5ec667be"
        },
        "item": {
          "id": "a01c8e31-548e-4691-99d5-21784dcd4a9c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c5c3bab4-dc35-47c6-82de-51973c29f032",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "a01c8e31-548e-4691-99d5-21784dcd4a9c",
        "cursor": {
          "ref": "d7838ec4-9ff8-4907-a7c2-470d4e7e3ff7",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8bf7bcd4-e8c4-432c-b07d-b0fb5ec667be"
        },
        "item": {
          "id": "a01c8e31-548e-4691-99d5-21784dcd4a9c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c5c3bab4-dc35-47c6-82de-51973c29f032",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "b6e4da6b-654a-4f7e-9dec-aef99b1071d9",
        "cursor": {
          "ref": "060850ab-aa9a-4276-80f4-df181f9f8756",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0303706d-8925-45eb-adf2-11297902144b"
        },
        "item": {
          "id": "b6e4da6b-654a-4f7e-9dec-aef99b1071d9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "fb7dc91c-0029-473b-a575-bf3909fbdced",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "b6e4da6b-654a-4f7e-9dec-aef99b1071d9",
        "cursor": {
          "ref": "060850ab-aa9a-4276-80f4-df181f9f8756",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0303706d-8925-45eb-adf2-11297902144b"
        },
        "item": {
          "id": "b6e4da6b-654a-4f7e-9dec-aef99b1071d9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "fb7dc91c-0029-473b-a575-bf3909fbdced",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "0b974cb7-69bf-480f-adce-a401d8e4bbbe",
        "cursor": {
          "ref": "bd90e5c1-8a47-4db3-89d5-a227c308f08b",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0630506a-3fa5-418c-abdd-3f91e2bef32d"
        },
        "item": {
          "id": "0b974cb7-69bf-480f-adce-a401d8e4bbbe",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "15c27609-09d3-4e42-8209-6fb4afb6bd39",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "0b974cb7-69bf-480f-adce-a401d8e4bbbe",
        "cursor": {
          "ref": "bd90e5c1-8a47-4db3-89d5-a227c308f08b",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0630506a-3fa5-418c-abdd-3f91e2bef32d"
        },
        "item": {
          "id": "0b974cb7-69bf-480f-adce-a401d8e4bbbe",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "15c27609-09d3-4e42-8209-6fb4afb6bd39",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "2ef1a205-a8c3-4b4a-bf9e-e16205b27046",
        "cursor": {
          "ref": "6d36a606-c9c9-4c6c-a803-690ff42830d9",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "927d4397-9ae5-4a2d-8af1-414a0c99f6f1"
        },
        "item": {
          "id": "2ef1a205-a8c3-4b4a-bf9e-e16205b27046",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "07ce49a8-ad54-4412-8c84-020b4593cda2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "2ef1a205-a8c3-4b4a-bf9e-e16205b27046",
        "cursor": {
          "ref": "6d36a606-c9c9-4c6c-a803-690ff42830d9",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "927d4397-9ae5-4a2d-8af1-414a0c99f6f1"
        },
        "item": {
          "id": "2ef1a205-a8c3-4b4a-bf9e-e16205b27046",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "07ce49a8-ad54-4412-8c84-020b4593cda2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "3042e9bf-593c-4007-b3b4-0f506ca99f90",
        "cursor": {
          "ref": "586ed7a2-8a71-4ade-8da7-2b9d1c6e2779",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3b3e4499-e979-42cd-901f-384f0e84136e"
        },
        "item": {
          "id": "3042e9bf-593c-4007-b3b4-0f506ca99f90",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "20d18068-15b7-4027-bc1a-4b75c1ce587a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "3042e9bf-593c-4007-b3b4-0f506ca99f90",
        "cursor": {
          "ref": "586ed7a2-8a71-4ade-8da7-2b9d1c6e2779",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3b3e4499-e979-42cd-901f-384f0e84136e"
        },
        "item": {
          "id": "3042e9bf-593c-4007-b3b4-0f506ca99f90",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "20d18068-15b7-4027-bc1a-4b75c1ce587a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "64824acd-7633-4d93-8b17-7162305ec049",
        "cursor": {
          "ref": "a5a7e198-c69c-4196-8699-2ed58dfb0dfe",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0eec828c-49ee-4fc0-b169-14022e0a0591"
        },
        "item": {
          "id": "64824acd-7633-4d93-8b17-7162305ec049",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "80e90f26-db03-4f4c-940a-f1badec39891",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "64824acd-7633-4d93-8b17-7162305ec049",
        "cursor": {
          "ref": "a5a7e198-c69c-4196-8699-2ed58dfb0dfe",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0eec828c-49ee-4fc0-b169-14022e0a0591"
        },
        "item": {
          "id": "64824acd-7633-4d93-8b17-7162305ec049",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "80e90f26-db03-4f4c-940a-f1badec39891",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "4cad8849-2d22-4af7-8686-ed95dbaed83e",
        "cursor": {
          "ref": "92b12335-2767-4798-a9fe-8a444410c3e6",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b8984c34-3ae1-44ca-a5b2-d5087e8774b8"
        },
        "item": {
          "id": "4cad8849-2d22-4af7-8686-ed95dbaed83e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fc4bec16-5c3c-4360-8fad-9dd4634d1a81",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "4cad8849-2d22-4af7-8686-ed95dbaed83e",
        "cursor": {
          "ref": "92b12335-2767-4798-a9fe-8a444410c3e6",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b8984c34-3ae1-44ca-a5b2-d5087e8774b8"
        },
        "item": {
          "id": "4cad8849-2d22-4af7-8686-ed95dbaed83e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fc4bec16-5c3c-4360-8fad-9dd4634d1a81",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "c950ef95-9143-44a3-a6a6-00297e6471f8",
        "cursor": {
          "ref": "6b62c4a0-de80-4af6-9df2-b860b0c0b31d",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "48c4744a-fa6c-46ad-a47a-ec50fd66abe7"
        },
        "item": {
          "id": "c950ef95-9143-44a3-a6a6-00297e6471f8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "79fb953f-eff4-4002-a14c-3e8f3ebb0f2c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "c950ef95-9143-44a3-a6a6-00297e6471f8",
        "cursor": {
          "ref": "6b62c4a0-de80-4af6-9df2-b860b0c0b31d",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "48c4744a-fa6c-46ad-a47a-ec50fd66abe7"
        },
        "item": {
          "id": "c950ef95-9143-44a3-a6a6-00297e6471f8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "79fb953f-eff4-4002-a14c-3e8f3ebb0f2c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "6fdbee34-4757-42b5-85dc-bd4ca6a19e87",
        "cursor": {
          "ref": "5c2523ab-ee3d-4326-b2ae-9ed4cf635ebd",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1731e672-394e-4173-b7ab-c4f48ad21299"
        },
        "item": {
          "id": "6fdbee34-4757-42b5-85dc-bd4ca6a19e87",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2842cc68-fae2-4f64-8ab1-5a8ea156d6e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "6fdbee34-4757-42b5-85dc-bd4ca6a19e87",
        "cursor": {
          "ref": "5c2523ab-ee3d-4326-b2ae-9ed4cf635ebd",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1731e672-394e-4173-b7ab-c4f48ad21299"
        },
        "item": {
          "id": "6fdbee34-4757-42b5-85dc-bd4ca6a19e87",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2842cc68-fae2-4f64-8ab1-5a8ea156d6e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "2119fc72-9f07-49d7-b0d2-5e6f5956ed58",
        "cursor": {
          "ref": "cbc53364-cd7a-4bdf-aedf-9d79ad9f2615",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "44775ed1-2607-4b51-adce-184a671fb4ed"
        },
        "item": {
          "id": "2119fc72-9f07-49d7-b0d2-5e6f5956ed58",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "06f0eae2-acca-47ae-ba5d-a21321a0700b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "2119fc72-9f07-49d7-b0d2-5e6f5956ed58",
        "cursor": {
          "ref": "cbc53364-cd7a-4bdf-aedf-9d79ad9f2615",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "44775ed1-2607-4b51-adce-184a671fb4ed"
        },
        "item": {
          "id": "2119fc72-9f07-49d7-b0d2-5e6f5956ed58",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "06f0eae2-acca-47ae-ba5d-a21321a0700b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "2f2dbbe3-3fc5-4512-9e6b-825ef748d8bd",
        "cursor": {
          "ref": "28362cdb-5d12-4acb-bd19-f57700dff779",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "19fdad52-2143-4f02-bba7-7550f3415c65"
        },
        "item": {
          "id": "2f2dbbe3-3fc5-4512-9e6b-825ef748d8bd",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1a583473-063d-4efc-adbb-6c74078b4813",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2f2dbbe3-3fc5-4512-9e6b-825ef748d8bd",
        "cursor": {
          "ref": "28362cdb-5d12-4acb-bd19-f57700dff779",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "19fdad52-2143-4f02-bba7-7550f3415c65"
        },
        "item": {
          "id": "2f2dbbe3-3fc5-4512-9e6b-825ef748d8bd",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1a583473-063d-4efc-adbb-6c74078b4813",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2f59bfb8-a09d-45ac-a0f4-c30a07d2df5a",
        "cursor": {
          "ref": "f64ff13c-4693-4bcc-bc64-8a133d532e74",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3fc8cd3c-b940-4708-ac9d-782e2207e9e6"
        },
        "item": {
          "id": "2f59bfb8-a09d-45ac-a0f4-c30a07d2df5a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "968a3ecc-2bc4-469f-a1e2-eb4cbc5301fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "2f59bfb8-a09d-45ac-a0f4-c30a07d2df5a",
        "cursor": {
          "ref": "f64ff13c-4693-4bcc-bc64-8a133d532e74",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3fc8cd3c-b940-4708-ac9d-782e2207e9e6"
        },
        "item": {
          "id": "2f59bfb8-a09d-45ac-a0f4-c30a07d2df5a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "968a3ecc-2bc4-469f-a1e2-eb4cbc5301fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "6620bb45-6281-42f8-9623-e3894b6b97d1",
        "cursor": {
          "ref": "57ec4370-fe3d-4a98-8b07-8d114e17b743",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7aedf2bd-37e8-477d-b566-4acbc8371e44"
        },
        "item": {
          "id": "6620bb45-6281-42f8-9623-e3894b6b97d1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "998dd1db-3358-421a-b69a-e9dbc35dbb45",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "6620bb45-6281-42f8-9623-e3894b6b97d1",
        "cursor": {
          "ref": "57ec4370-fe3d-4a98-8b07-8d114e17b743",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7aedf2bd-37e8-477d-b566-4acbc8371e44"
        },
        "item": {
          "id": "6620bb45-6281-42f8-9623-e3894b6b97d1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "998dd1db-3358-421a-b69a-e9dbc35dbb45",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "3ee00118-c429-4ecd-8ebb-3200a4a0301c",
        "cursor": {
          "ref": "be90735a-fb8b-4ca0-ba9d-1fcd1b0a6caa",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bcdddc53-3e84-46fb-a7d1-af7d29377d49"
        },
        "item": {
          "id": "3ee00118-c429-4ecd-8ebb-3200a4a0301c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "40f24433-7deb-40b3-bc18-bdf32b2ae825",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "3ee00118-c429-4ecd-8ebb-3200a4a0301c",
        "cursor": {
          "ref": "be90735a-fb8b-4ca0-ba9d-1fcd1b0a6caa",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bcdddc53-3e84-46fb-a7d1-af7d29377d49"
        },
        "item": {
          "id": "3ee00118-c429-4ecd-8ebb-3200a4a0301c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "40f24433-7deb-40b3-bc18-bdf32b2ae825",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "6c53011d-d6df-4f0a-9819-ddd848b1fd40",
        "cursor": {
          "ref": "0cea228d-a3da-492f-aac0-bae43991a906",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "72c19d15-0c05-41d2-a03a-6e3fdc36d9a0"
        },
        "item": {
          "id": "6c53011d-d6df-4f0a-9819-ddd848b1fd40",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0a44dc90-3aca-4838-b3bd-0dc4a4a3ae68",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "6c53011d-d6df-4f0a-9819-ddd848b1fd40",
        "cursor": {
          "ref": "0cea228d-a3da-492f-aac0-bae43991a906",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "72c19d15-0c05-41d2-a03a-6e3fdc36d9a0"
        },
        "item": {
          "id": "6c53011d-d6df-4f0a-9819-ddd848b1fd40",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0a44dc90-3aca-4838-b3bd-0dc4a4a3ae68",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "61e90a4e-9f67-401d-8ccb-8cf0d0843fe0",
        "cursor": {
          "ref": "5235d4fb-cfce-4f2c-93ee-4eed416b9424",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c0b31534-7095-463e-be75-e2e0cde7e1cd"
        },
        "item": {
          "id": "61e90a4e-9f67-401d-8ccb-8cf0d0843fe0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0d8a9b70-2156-4b83-a9e9-486fb7e3740e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "61e90a4e-9f67-401d-8ccb-8cf0d0843fe0",
        "cursor": {
          "ref": "5235d4fb-cfce-4f2c-93ee-4eed416b9424",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c0b31534-7095-463e-be75-e2e0cde7e1cd"
        },
        "item": {
          "id": "61e90a4e-9f67-401d-8ccb-8cf0d0843fe0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0d8a9b70-2156-4b83-a9e9-486fb7e3740e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "f4bccc52-5f68-4f22-a1e5-238fda9fadfc",
        "cursor": {
          "ref": "2995ba2a-0dba-42ed-8d8b-9934f8c59370",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9af0208f-2285-4653-9c5c-50364df05bc1"
        },
        "item": {
          "id": "f4bccc52-5f68-4f22-a1e5-238fda9fadfc",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c88a8f14-6f02-4e4e-83e0-7178e8d890a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "f4bccc52-5f68-4f22-a1e5-238fda9fadfc",
        "cursor": {
          "ref": "2995ba2a-0dba-42ed-8d8b-9934f8c59370",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9af0208f-2285-4653-9c5c-50364df05bc1"
        },
        "item": {
          "id": "f4bccc52-5f68-4f22-a1e5-238fda9fadfc",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c88a8f14-6f02-4e4e-83e0-7178e8d890a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "dbd0ce78-adc3-474c-a1d9-19a07eec5b9b",
        "cursor": {
          "ref": "5dd3f89d-9185-4991-a79b-a0c4e02d15cf",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "556276b5-a5ac-4220-b0ee-a7619ce27ba3"
        },
        "item": {
          "id": "dbd0ce78-adc3-474c-a1d9-19a07eec5b9b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e858096f-bb35-4224-a395-8264107a67ae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "dbd0ce78-adc3-474c-a1d9-19a07eec5b9b",
        "cursor": {
          "ref": "5dd3f89d-9185-4991-a79b-a0c4e02d15cf",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "556276b5-a5ac-4220-b0ee-a7619ce27ba3"
        },
        "item": {
          "id": "dbd0ce78-adc3-474c-a1d9-19a07eec5b9b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e858096f-bb35-4224-a395-8264107a67ae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "cb85590b-b616-4cd8-bb64-bcbf6662f0de",
        "cursor": {
          "ref": "2d2a504b-ee15-4aa4-b78c-6b76f0a2f1b1",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "024054c6-3913-4ffc-8b87-cc5918cae94e"
        },
        "item": {
          "id": "cb85590b-b616-4cd8-bb64-bcbf6662f0de",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7c164474-88ba-48b7-ae33-fd568c8085ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "cb85590b-b616-4cd8-bb64-bcbf6662f0de",
        "cursor": {
          "ref": "2d2a504b-ee15-4aa4-b78c-6b76f0a2f1b1",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "024054c6-3913-4ffc-8b87-cc5918cae94e"
        },
        "item": {
          "id": "cb85590b-b616-4cd8-bb64-bcbf6662f0de",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7c164474-88ba-48b7-ae33-fd568c8085ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "82687595-600c-462b-9d95-40aa760bb438",
        "cursor": {
          "ref": "2b3b1dbc-3f56-4a33-be24-6f6a4a2e17de",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3118bffd-9f11-420a-bb75-6a0d5a2528cf"
        },
        "item": {
          "id": "82687595-600c-462b-9d95-40aa760bb438",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a1960ecb-18cb-4822-9bbe-73b4d0231c30",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "82687595-600c-462b-9d95-40aa760bb438",
        "cursor": {
          "ref": "2b3b1dbc-3f56-4a33-be24-6f6a4a2e17de",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3118bffd-9f11-420a-bb75-6a0d5a2528cf"
        },
        "item": {
          "id": "82687595-600c-462b-9d95-40aa760bb438",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a1960ecb-18cb-4822-9bbe-73b4d0231c30",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "efe7854f-d220-42d7-9662-6df6028b0f95",
        "cursor": {
          "ref": "aa523653-76ee-4d48-9b20-36929dc32d80",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6f12b456-3528-4772-9fc2-dfc87eecc121"
        },
        "item": {
          "id": "efe7854f-d220-42d7-9662-6df6028b0f95",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bac5a1bc-b48d-42ac-920e-ce34ca57f395",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "efe7854f-d220-42d7-9662-6df6028b0f95",
        "cursor": {
          "ref": "aa523653-76ee-4d48-9b20-36929dc32d80",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6f12b456-3528-4772-9fc2-dfc87eecc121"
        },
        "item": {
          "id": "efe7854f-d220-42d7-9662-6df6028b0f95",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bac5a1bc-b48d-42ac-920e-ce34ca57f395",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "2f39ca59-0dda-48dd-97af-9381d20246ec",
        "cursor": {
          "ref": "b3908367-7963-496c-88de-5efcdcff6b5d",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "70501268-5d76-4526-bf87-25a6d6674295"
        },
        "item": {
          "id": "2f39ca59-0dda-48dd-97af-9381d20246ec",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "141eeb8d-2f5c-48e0-aeb8-be2b6f56e2d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "2f39ca59-0dda-48dd-97af-9381d20246ec",
        "cursor": {
          "ref": "b3908367-7963-496c-88de-5efcdcff6b5d",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "70501268-5d76-4526-bf87-25a6d6674295"
        },
        "item": {
          "id": "2f39ca59-0dda-48dd-97af-9381d20246ec",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "141eeb8d-2f5c-48e0-aeb8-be2b6f56e2d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "fa640f65-02cd-4b0f-8bd5-f71ac9e95589",
        "cursor": {
          "ref": "fe666a18-3900-4f03-a9e0-86028a6b8ad1",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "911898ac-6b61-4fb2-a662-787cb639275d"
        },
        "item": {
          "id": "fa640f65-02cd-4b0f-8bd5-f71ac9e95589",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d81ad686-093b-49ac-aa96-50e131147e48",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "fa640f65-02cd-4b0f-8bd5-f71ac9e95589",
        "cursor": {
          "ref": "fe666a18-3900-4f03-a9e0-86028a6b8ad1",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "911898ac-6b61-4fb2-a662-787cb639275d"
        },
        "item": {
          "id": "fa640f65-02cd-4b0f-8bd5-f71ac9e95589",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d81ad686-093b-49ac-aa96-50e131147e48",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "929337b5-3c35-44d5-afd2-2b320fc8fa01",
        "cursor": {
          "ref": "7c543b40-f094-45ad-ba21-1d75d8743596",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b200d38a-08e7-47b6-a14e-73560bdc2e79"
        },
        "item": {
          "id": "929337b5-3c35-44d5-afd2-2b320fc8fa01",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f3cb7219-4f9f-439b-ae1d-bdf3583146ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "929337b5-3c35-44d5-afd2-2b320fc8fa01",
        "cursor": {
          "ref": "7c543b40-f094-45ad-ba21-1d75d8743596",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b200d38a-08e7-47b6-a14e-73560bdc2e79"
        },
        "item": {
          "id": "929337b5-3c35-44d5-afd2-2b320fc8fa01",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f3cb7219-4f9f-439b-ae1d-bdf3583146ef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "84c61469-850a-4a77-8e49-35a33210a058",
        "cursor": {
          "ref": "822a9008-e998-431f-a74f-d0ad399dd820",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8d13a22f-7df2-4c8e-92fe-876c3a80168b"
        },
        "item": {
          "id": "84c61469-850a-4a77-8e49-35a33210a058",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "61cf7ecb-e992-4a47-8fbc-5cfd65a5bd19",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "84c61469-850a-4a77-8e49-35a33210a058",
        "cursor": {
          "ref": "822a9008-e998-431f-a74f-d0ad399dd820",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8d13a22f-7df2-4c8e-92fe-876c3a80168b"
        },
        "item": {
          "id": "84c61469-850a-4a77-8e49-35a33210a058",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "61cf7ecb-e992-4a47-8fbc-5cfd65a5bd19",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "2900e88c-9d5b-45a4-b7c8-4e419f179ba7",
        "cursor": {
          "ref": "e9a27f65-4a77-4986-a4b5-3a946c896e97",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7e2a091a-6863-49b3-8ed0-c95e8b775ef1"
        },
        "item": {
          "id": "2900e88c-9d5b-45a4-b7c8-4e419f179ba7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "70ab92c3-ecc5-4907-9ca3-ffebc65e4fdb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "2900e88c-9d5b-45a4-b7c8-4e419f179ba7",
        "cursor": {
          "ref": "e9a27f65-4a77-4986-a4b5-3a946c896e97",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7e2a091a-6863-49b3-8ed0-c95e8b775ef1"
        },
        "item": {
          "id": "2900e88c-9d5b-45a4-b7c8-4e419f179ba7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "70ab92c3-ecc5-4907-9ca3-ffebc65e4fdb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "6e27b84b-1b79-41b4-9336-9d5ac9401478",
        "cursor": {
          "ref": "d7db7403-a368-4688-af7e-ae177a4a645f",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9ccf5d28-1fa1-4d7d-af5d-be79f7f07dee"
        },
        "item": {
          "id": "6e27b84b-1b79-41b4-9336-9d5ac9401478",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f7a34d9f-8e3e-4736-b67f-d70cbaba209a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "6e27b84b-1b79-41b4-9336-9d5ac9401478",
        "cursor": {
          "ref": "d7db7403-a368-4688-af7e-ae177a4a645f",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9ccf5d28-1fa1-4d7d-af5d-be79f7f07dee"
        },
        "item": {
          "id": "6e27b84b-1b79-41b4-9336-9d5ac9401478",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f7a34d9f-8e3e-4736-b67f-d70cbaba209a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "e933c1e0-104b-41bf-979a-39043e9a2507",
        "cursor": {
          "ref": "816a60ff-859b-4d33-9e17-db7cd72174cd",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "fb78de6b-f101-4a35-95d2-8755d08e57c9"
        },
        "item": {
          "id": "e933c1e0-104b-41bf-979a-39043e9a2507",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7d6d9a91-26dc-4eaa-9d32-2834c70cfc73",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "e933c1e0-104b-41bf-979a-39043e9a2507",
        "cursor": {
          "ref": "816a60ff-859b-4d33-9e17-db7cd72174cd",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "fb78de6b-f101-4a35-95d2-8755d08e57c9"
        },
        "item": {
          "id": "e933c1e0-104b-41bf-979a-39043e9a2507",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7d6d9a91-26dc-4eaa-9d32-2834c70cfc73",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "0b134094-a7b2-4ff3-a5bf-1053a6ce5b87",
        "cursor": {
          "ref": "8f9757d4-d6d9-4248-b736-5734f2d6ddf7",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9f4ea6df-4970-4543-b83e-02787a2dcae2"
        },
        "item": {
          "id": "0b134094-a7b2-4ff3-a5bf-1053a6ce5b87",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "68b42989-b807-4cc5-88b4-46c0d6b24644",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "0b134094-a7b2-4ff3-a5bf-1053a6ce5b87",
        "cursor": {
          "ref": "8f9757d4-d6d9-4248-b736-5734f2d6ddf7",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9f4ea6df-4970-4543-b83e-02787a2dcae2"
        },
        "item": {
          "id": "0b134094-a7b2-4ff3-a5bf-1053a6ce5b87",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "68b42989-b807-4cc5-88b4-46c0d6b24644",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "f970fe87-28df-4541-8fef-a24a6cc5002c",
        "cursor": {
          "ref": "74c14216-03d5-42ad-bc23-2c3c37069e7d",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3d528caa-9ec7-4464-a667-c579995628f6"
        },
        "item": {
          "id": "f970fe87-28df-4541-8fef-a24a6cc5002c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e3890d3b-14d1-48a9-9ca9-a536dcfc01fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "f970fe87-28df-4541-8fef-a24a6cc5002c",
        "cursor": {
          "ref": "74c14216-03d5-42ad-bc23-2c3c37069e7d",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3d528caa-9ec7-4464-a667-c579995628f6"
        },
        "item": {
          "id": "f970fe87-28df-4541-8fef-a24a6cc5002c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e3890d3b-14d1-48a9-9ca9-a536dcfc01fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "885659c0-5c74-4013-b897-8f3769ef78b8",
        "cursor": {
          "ref": "705380ab-7136-4bf4-bc54-bd384664255b",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b6c0cead-9d71-47b3-ba33-8acbf92e7962"
        },
        "item": {
          "id": "885659c0-5c74-4013-b897-8f3769ef78b8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5ce60430-c151-497c-8a4f-f3f4f16b0f12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "885659c0-5c74-4013-b897-8f3769ef78b8",
        "cursor": {
          "ref": "705380ab-7136-4bf4-bc54-bd384664255b",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b6c0cead-9d71-47b3-ba33-8acbf92e7962"
        },
        "item": {
          "id": "885659c0-5c74-4013-b897-8f3769ef78b8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5ce60430-c151-497c-8a4f-f3f4f16b0f12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "774454c0-ea49-4435-82e9-b29f96a996f4",
        "cursor": {
          "ref": "64b7caa9-41b3-4a29-97fd-4dc960a4ca9e",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "746fe71b-b4a1-419c-9b4b-e94c1d68392f"
        },
        "item": {
          "id": "774454c0-ea49-4435-82e9-b29f96a996f4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ee13061b-ed92-4898-9d08-01958aab5211",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "774454c0-ea49-4435-82e9-b29f96a996f4",
        "cursor": {
          "ref": "64b7caa9-41b3-4a29-97fd-4dc960a4ca9e",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "746fe71b-b4a1-419c-9b4b-e94c1d68392f"
        },
        "item": {
          "id": "774454c0-ea49-4435-82e9-b29f96a996f4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ee13061b-ed92-4898-9d08-01958aab5211",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "e0583c4f-2d47-461c-8e28-3f4a6cf93ce6",
        "cursor": {
          "ref": "336ef08e-b4b2-4fc9-9047-d16e20da7b8b",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7c75286b-caf6-4d94-9cdb-88f66f87ea89"
        },
        "item": {
          "id": "e0583c4f-2d47-461c-8e28-3f4a6cf93ce6",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "08caddad-b7df-4cba-be69-aad72bb25eb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "e0583c4f-2d47-461c-8e28-3f4a6cf93ce6",
        "cursor": {
          "ref": "336ef08e-b4b2-4fc9-9047-d16e20da7b8b",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7c75286b-caf6-4d94-9cdb-88f66f87ea89"
        },
        "item": {
          "id": "e0583c4f-2d47-461c-8e28-3f4a6cf93ce6",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "08caddad-b7df-4cba-be69-aad72bb25eb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "49f2cf51-6f3f-440a-87f8-4cb4a4c46adc",
        "cursor": {
          "ref": "0adde16c-f29c-41f8-9058-7fc877f0f8d5",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f83ceaeb-3b76-4bf7-bf43-7d138d4a22aa"
        },
        "item": {
          "id": "49f2cf51-6f3f-440a-87f8-4cb4a4c46adc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f400bda1-0a89-4623-a76d-65a3e2de19f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "49f2cf51-6f3f-440a-87f8-4cb4a4c46adc",
        "cursor": {
          "ref": "0adde16c-f29c-41f8-9058-7fc877f0f8d5",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f83ceaeb-3b76-4bf7-bf43-7d138d4a22aa"
        },
        "item": {
          "id": "49f2cf51-6f3f-440a-87f8-4cb4a4c46adc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f400bda1-0a89-4623-a76d-65a3e2de19f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "20db0c00-15fd-4d91-acf4-73332491bcd3",
        "cursor": {
          "ref": "9f781d22-ec6f-4ebb-84f3-864c8a4c0ffd",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "563b2d3f-7cee-44f4-95ff-da1a9374fc83"
        },
        "item": {
          "id": "20db0c00-15fd-4d91-acf4-73332491bcd3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "77ae1f9a-9100-411c-b558-5b8a662fc313",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "20db0c00-15fd-4d91-acf4-73332491bcd3",
        "cursor": {
          "ref": "9f781d22-ec6f-4ebb-84f3-864c8a4c0ffd",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "563b2d3f-7cee-44f4-95ff-da1a9374fc83"
        },
        "item": {
          "id": "20db0c00-15fd-4d91-acf4-73332491bcd3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "77ae1f9a-9100-411c-b558-5b8a662fc313",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "0acc0744-1eb1-44d5-bc89-9c96fcde7493",
        "cursor": {
          "ref": "82a80a1a-46ff-43c8-b4d4-d5d07674c75e",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "690acfc6-32e7-48fa-aa9e-59f678bab302"
        },
        "item": {
          "id": "0acc0744-1eb1-44d5-bc89-9c96fcde7493",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "86a4ce95-bcbf-4bac-8879-9cf3ea954b36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "0acc0744-1eb1-44d5-bc89-9c96fcde7493",
        "cursor": {
          "ref": "82a80a1a-46ff-43c8-b4d4-d5d07674c75e",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "690acfc6-32e7-48fa-aa9e-59f678bab302"
        },
        "item": {
          "id": "0acc0744-1eb1-44d5-bc89-9c96fcde7493",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "86a4ce95-bcbf-4bac-8879-9cf3ea954b36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "f34181f5-8dea-4612-976f-4792777b8585",
        "cursor": {
          "ref": "c24f767e-760e-4988-a75d-baea63d335a2",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "acd97627-f2d0-4979-be81-651daf370e00"
        },
        "item": {
          "id": "f34181f5-8dea-4612-976f-4792777b8585",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "292ff3cb-5ef7-47f8-a2ab-2683f871079d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "f34181f5-8dea-4612-976f-4792777b8585",
        "cursor": {
          "ref": "c24f767e-760e-4988-a75d-baea63d335a2",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "acd97627-f2d0-4979-be81-651daf370e00"
        },
        "item": {
          "id": "f34181f5-8dea-4612-976f-4792777b8585",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "292ff3cb-5ef7-47f8-a2ab-2683f871079d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "031a5791-bbfb-45ba-8dc9-2f802c0086cc",
        "cursor": {
          "ref": "65173d92-abd0-4dba-bec9-5bb1eeb363fb",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5a773c69-1f66-46df-b468-f5a7463cc6e5"
        },
        "item": {
          "id": "031a5791-bbfb-45ba-8dc9-2f802c0086cc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a6584b4f-0ae6-4859-a92c-3024d85dfa4f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "031a5791-bbfb-45ba-8dc9-2f802c0086cc",
        "cursor": {
          "ref": "65173d92-abd0-4dba-bec9-5bb1eeb363fb",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5a773c69-1f66-46df-b468-f5a7463cc6e5"
        },
        "item": {
          "id": "031a5791-bbfb-45ba-8dc9-2f802c0086cc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a6584b4f-0ae6-4859-a92c-3024d85dfa4f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "2f200afe-6ef8-4402-9443-c03b7cd35839",
        "cursor": {
          "ref": "47fb2e07-e6ab-4516-b63b-e9494fbeff93",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e866d259-f355-43b3-926b-dc9979a69d6d"
        },
        "item": {
          "id": "2f200afe-6ef8-4402-9443-c03b7cd35839",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "bb3be112-0549-4071-be44-acb42c08e536",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "2f200afe-6ef8-4402-9443-c03b7cd35839",
        "cursor": {
          "ref": "47fb2e07-e6ab-4516-b63b-e9494fbeff93",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e866d259-f355-43b3-926b-dc9979a69d6d"
        },
        "item": {
          "id": "2f200afe-6ef8-4402-9443-c03b7cd35839",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "bb3be112-0549-4071-be44-acb42c08e536",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "3937e402-23ba-4da0-b1d9-4a44273beb6c",
        "cursor": {
          "ref": "7dc15553-ea6e-422a-9318-8b155c7fce8d",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9e706c74-d0a9-4332-a018-a9858ad060e9"
        },
        "item": {
          "id": "3937e402-23ba-4da0-b1d9-4a44273beb6c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b2cc905c-e213-4662-a460-3c7ad0f3e59c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "3937e402-23ba-4da0-b1d9-4a44273beb6c",
        "cursor": {
          "ref": "7dc15553-ea6e-422a-9318-8b155c7fce8d",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9e706c74-d0a9-4332-a018-a9858ad060e9"
        },
        "item": {
          "id": "3937e402-23ba-4da0-b1d9-4a44273beb6c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b2cc905c-e213-4662-a460-3c7ad0f3e59c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "b90cbf21-390b-433d-b123-3972cf4a51cb",
        "cursor": {
          "ref": "d9e49ce0-d614-4696-941b-5ab11dbd596f",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "62b44f29-bd22-42a8-af14-5fefa3611f4a"
        },
        "item": {
          "id": "b90cbf21-390b-433d-b123-3972cf4a51cb",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "47752a8d-e016-437c-ac52-c7b2c8e48310",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "b90cbf21-390b-433d-b123-3972cf4a51cb",
        "cursor": {
          "ref": "d9e49ce0-d614-4696-941b-5ab11dbd596f",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "62b44f29-bd22-42a8-af14-5fefa3611f4a"
        },
        "item": {
          "id": "b90cbf21-390b-433d-b123-3972cf4a51cb",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "47752a8d-e016-437c-ac52-c7b2c8e48310",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "0acd8418-1c5d-4da9-910a-5b2d8b7cfcbe",
        "cursor": {
          "ref": "efbae7f9-f765-49e1-a966-c7fc414fd67b",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "029d938c-8bed-4df4-b901-6815bb19108a"
        },
        "item": {
          "id": "0acd8418-1c5d-4da9-910a-5b2d8b7cfcbe",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ac6ae36b-f70a-4195-b043-c79b8fdca935",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "0acd8418-1c5d-4da9-910a-5b2d8b7cfcbe",
        "cursor": {
          "ref": "efbae7f9-f765-49e1-a966-c7fc414fd67b",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "029d938c-8bed-4df4-b901-6815bb19108a"
        },
        "item": {
          "id": "0acd8418-1c5d-4da9-910a-5b2d8b7cfcbe",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ac6ae36b-f70a-4195-b043-c79b8fdca935",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "2d9e42a5-cc6c-4da7-8f9b-f75a27a1e599",
        "cursor": {
          "ref": "0411baea-dda7-4638-9d30-629cef101b69",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c16f90a9-2804-42f0-881a-f65a7209a0e0"
        },
        "item": {
          "id": "2d9e42a5-cc6c-4da7-8f9b-f75a27a1e599",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f8a3b386-2b79-4eca-b4ad-b931eddf6791",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "2d9e42a5-cc6c-4da7-8f9b-f75a27a1e599",
        "cursor": {
          "ref": "0411baea-dda7-4638-9d30-629cef101b69",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c16f90a9-2804-42f0-881a-f65a7209a0e0"
        },
        "item": {
          "id": "2d9e42a5-cc6c-4da7-8f9b-f75a27a1e599",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f8a3b386-2b79-4eca-b4ad-b931eddf6791",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "43b33598-42a8-4d8e-bbde-7d39645af5b0",
        "cursor": {
          "ref": "79a90f5b-c412-4859-9f8c-21c7dc7d2347",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e0c0d427-21b3-4b08-9ab7-b967492c3375"
        },
        "item": {
          "id": "43b33598-42a8-4d8e-bbde-7d39645af5b0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a258ce6f-6011-4aef-8221-e520f025552a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "43b33598-42a8-4d8e-bbde-7d39645af5b0",
        "cursor": {
          "ref": "79a90f5b-c412-4859-9f8c-21c7dc7d2347",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e0c0d427-21b3-4b08-9ab7-b967492c3375"
        },
        "item": {
          "id": "43b33598-42a8-4d8e-bbde-7d39645af5b0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a258ce6f-6011-4aef-8221-e520f025552a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "e9d1fb8d-f263-4492-a47a-c984fa2e8517",
        "cursor": {
          "ref": "0685f0f8-76ac-4389-a3be-78920714c8f9",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "40da0643-5186-4f7b-9362-2515ab765546"
        },
        "item": {
          "id": "e9d1fb8d-f263-4492-a47a-c984fa2e8517",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "056ca59b-bb4e-47e8-959d-a8fd38bbd69c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "e9d1fb8d-f263-4492-a47a-c984fa2e8517",
        "cursor": {
          "ref": "0685f0f8-76ac-4389-a3be-78920714c8f9",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "40da0643-5186-4f7b-9362-2515ab765546"
        },
        "item": {
          "id": "e9d1fb8d-f263-4492-a47a-c984fa2e8517",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "056ca59b-bb4e-47e8-959d-a8fd38bbd69c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "03b91766-713c-4c62-9578-e885b65da3d1",
        "cursor": {
          "ref": "12b2d731-ea3c-408e-ac32-39501741571d",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "835e5dd1-15ad-46d5-84b4-42b2f6c6a0ef"
        },
        "item": {
          "id": "03b91766-713c-4c62-9578-e885b65da3d1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5565b1a9-123e-47db-ab9e-8148bffdcef7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "03b91766-713c-4c62-9578-e885b65da3d1",
        "cursor": {
          "ref": "12b2d731-ea3c-408e-ac32-39501741571d",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "835e5dd1-15ad-46d5-84b4-42b2f6c6a0ef"
        },
        "item": {
          "id": "03b91766-713c-4c62-9578-e885b65da3d1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5565b1a9-123e-47db-ab9e-8148bffdcef7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "b87e1b0b-cd08-4291-828a-9c89accef8e7",
        "cursor": {
          "ref": "e306de32-d242-4e93-8370-796b54bf761e",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "84425750-707a-4af9-bb18-df6c66d2ead4"
        },
        "item": {
          "id": "b87e1b0b-cd08-4291-828a-9c89accef8e7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1a761bff-58ea-4d7e-8ad7-11d0a42f9841",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "b87e1b0b-cd08-4291-828a-9c89accef8e7",
        "cursor": {
          "ref": "e306de32-d242-4e93-8370-796b54bf761e",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "84425750-707a-4af9-bb18-df6c66d2ead4"
        },
        "item": {
          "id": "b87e1b0b-cd08-4291-828a-9c89accef8e7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1a761bff-58ea-4d7e-8ad7-11d0a42f9841",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "8ca9c438-1575-49c3-bc2e-5cb9eca2588d",
        "cursor": {
          "ref": "17b994e4-fd9c-40a1-88a2-a4dbd67cbed7",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "22314768-f9fc-42de-a6be-62aa2494266a"
        },
        "item": {
          "id": "8ca9c438-1575-49c3-bc2e-5cb9eca2588d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "11ea7d7c-99c4-44e6-93ab-97873fb02906",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "8ca9c438-1575-49c3-bc2e-5cb9eca2588d",
        "cursor": {
          "ref": "17b994e4-fd9c-40a1-88a2-a4dbd67cbed7",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "22314768-f9fc-42de-a6be-62aa2494266a"
        },
        "item": {
          "id": "8ca9c438-1575-49c3-bc2e-5cb9eca2588d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "11ea7d7c-99c4-44e6-93ab-97873fb02906",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "ef78a1d0-995f-4126-a8c7-d73771e84b8b",
        "cursor": {
          "ref": "63f494a4-fd71-498a-a9ba-bc0941134b62",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "75d06310-086e-4657-bce6-8f6df6900305"
        },
        "item": {
          "id": "ef78a1d0-995f-4126-a8c7-d73771e84b8b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0ccb501b-94a0-4366-8b42-ae76b756ada5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "ef78a1d0-995f-4126-a8c7-d73771e84b8b",
        "cursor": {
          "ref": "63f494a4-fd71-498a-a9ba-bc0941134b62",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "75d06310-086e-4657-bce6-8f6df6900305"
        },
        "item": {
          "id": "ef78a1d0-995f-4126-a8c7-d73771e84b8b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0ccb501b-94a0-4366-8b42-ae76b756ada5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "6775ece9-03da-497f-842c-8fa44f1a4a33",
        "cursor": {
          "ref": "65e6c24d-304b-43a3-907a-bdcc38c55624",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "da34e5bc-6355-414d-a873-25e0cabc4b3c"
        },
        "item": {
          "id": "6775ece9-03da-497f-842c-8fa44f1a4a33",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1d5e8572-3836-4721-bfc0-9d45ac4710e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "6775ece9-03da-497f-842c-8fa44f1a4a33",
        "cursor": {
          "ref": "65e6c24d-304b-43a3-907a-bdcc38c55624",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "da34e5bc-6355-414d-a873-25e0cabc4b3c"
        },
        "item": {
          "id": "6775ece9-03da-497f-842c-8fa44f1a4a33",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1d5e8572-3836-4721-bfc0-9d45ac4710e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "7938100d-33c2-432b-b6bf-15a879534960",
        "cursor": {
          "ref": "a84c774a-d1a4-4da5-8c04-bafd0c0dcf82",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "077e87f2-7bb8-42b3-9757-a6075b28e70e"
        },
        "item": {
          "id": "7938100d-33c2-432b-b6bf-15a879534960",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "fe93dfc0-073d-4ce5-9ad7-d04c682af1ab",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "7938100d-33c2-432b-b6bf-15a879534960",
        "cursor": {
          "ref": "a84c774a-d1a4-4da5-8c04-bafd0c0dcf82",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "077e87f2-7bb8-42b3-9757-a6075b28e70e"
        },
        "item": {
          "id": "7938100d-33c2-432b-b6bf-15a879534960",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "fe93dfc0-073d-4ce5-9ad7-d04c682af1ab",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "fe947c1a-1650-4e4f-aec2-da989563f651",
        "cursor": {
          "ref": "41bfb724-98db-4b79-90fb-bd80c32051b3",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7eafa351-aec2-475d-88b8-fbc88f5f7250"
        },
        "item": {
          "id": "fe947c1a-1650-4e4f-aec2-da989563f651",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6273795e-5824-4790-9ba9-152ecd34c1ec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "fe947c1a-1650-4e4f-aec2-da989563f651",
        "cursor": {
          "ref": "41bfb724-98db-4b79-90fb-bd80c32051b3",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "7eafa351-aec2-475d-88b8-fbc88f5f7250"
        },
        "item": {
          "id": "fe947c1a-1650-4e4f-aec2-da989563f651",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6273795e-5824-4790-9ba9-152ecd34c1ec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "59591c7f-af19-4a4e-a330-16d774f31e4d",
        "cursor": {
          "ref": "6ef89652-3120-4779-ab00-ef5ac046f502",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d72729a0-159e-49bb-81ad-8eba29e8c448"
        },
        "item": {
          "id": "59591c7f-af19-4a4e-a330-16d774f31e4d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e66fce58-8df7-4245-addc-e4ab9b2276cb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "59591c7f-af19-4a4e-a330-16d774f31e4d",
        "cursor": {
          "ref": "6ef89652-3120-4779-ab00-ef5ac046f502",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d72729a0-159e-49bb-81ad-8eba29e8c448"
        },
        "item": {
          "id": "59591c7f-af19-4a4e-a330-16d774f31e4d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e66fce58-8df7-4245-addc-e4ab9b2276cb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "b74da01a-e725-40b4-9f8c-3cf93d72dce7",
        "cursor": {
          "ref": "09c04abe-ad45-4cd8-a25e-20e625e04a8e",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "bb4c756c-1378-4e95-9822-ccafb7677afa"
        },
        "item": {
          "id": "b74da01a-e725-40b4-9f8c-3cf93d72dce7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8d8f8045-230c-4a92-bbd9-4333854061fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "b74da01a-e725-40b4-9f8c-3cf93d72dce7",
        "cursor": {
          "ref": "09c04abe-ad45-4cd8-a25e-20e625e04a8e",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "bb4c756c-1378-4e95-9822-ccafb7677afa"
        },
        "item": {
          "id": "b74da01a-e725-40b4-9f8c-3cf93d72dce7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8d8f8045-230c-4a92-bbd9-4333854061fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "84b1b5b7-6c9f-429f-98bc-68ee9ec8b8b9",
        "cursor": {
          "ref": "61fdeca8-597f-4c71-bc2f-b343f98f70f5",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "340da52c-1ece-4bff-a197-a47600fe6eaf"
        },
        "item": {
          "id": "84b1b5b7-6c9f-429f-98bc-68ee9ec8b8b9",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0a6823d2-8f16-4d87-ac7e-f5366ea4b666",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "84b1b5b7-6c9f-429f-98bc-68ee9ec8b8b9",
        "cursor": {
          "ref": "61fdeca8-597f-4c71-bc2f-b343f98f70f5",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "340da52c-1ece-4bff-a197-a47600fe6eaf"
        },
        "item": {
          "id": "84b1b5b7-6c9f-429f-98bc-68ee9ec8b8b9",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0a6823d2-8f16-4d87-ac7e-f5366ea4b666",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "5d22aa1f-62db-49a2-8f13-fb2b93363339",
        "cursor": {
          "ref": "6456c42e-1b33-4ac1-a166-6e8209e130f6",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c764af64-a162-4266-9b78-b72eedc725fb"
        },
        "item": {
          "id": "5d22aa1f-62db-49a2-8f13-fb2b93363339",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "46d60964-c284-4053-98db-ac86d635b2d4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "5d22aa1f-62db-49a2-8f13-fb2b93363339",
        "cursor": {
          "ref": "6456c42e-1b33-4ac1-a166-6e8209e130f6",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c764af64-a162-4266-9b78-b72eedc725fb"
        },
        "item": {
          "id": "5d22aa1f-62db-49a2-8f13-fb2b93363339",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "46d60964-c284-4053-98db-ac86d635b2d4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "753e9e44-2f99-4b65-9a48-9392acfd2852",
        "cursor": {
          "ref": "d447dbf3-e8cf-4772-80e0-2ef9c2115605",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c56b9465-aa00-4e53-ba81-7c148bf431fb"
        },
        "item": {
          "id": "753e9e44-2f99-4b65-9a48-9392acfd2852",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "46710092-77b8-40e6-afa6-7be71b2d84c3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "753e9e44-2f99-4b65-9a48-9392acfd2852",
        "cursor": {
          "ref": "d447dbf3-e8cf-4772-80e0-2ef9c2115605",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c56b9465-aa00-4e53-ba81-7c148bf431fb"
        },
        "item": {
          "id": "753e9e44-2f99-4b65-9a48-9392acfd2852",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "46710092-77b8-40e6-afa6-7be71b2d84c3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "4da5fbd3-805e-4436-9d9f-765749f6a9bf",
        "cursor": {
          "ref": "be4321aa-deeb-4ef4-bfd9-fd46a27541e8",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c8da0fd6-f68c-4432-b39a-85582be6ddbf"
        },
        "item": {
          "id": "4da5fbd3-805e-4436-9d9f-765749f6a9bf",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4bd3bc71-5cd2-4007-bfa3-322cccac21da",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "4da5fbd3-805e-4436-9d9f-765749f6a9bf",
        "cursor": {
          "ref": "be4321aa-deeb-4ef4-bfd9-fd46a27541e8",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c8da0fd6-f68c-4432-b39a-85582be6ddbf"
        },
        "item": {
          "id": "4da5fbd3-805e-4436-9d9f-765749f6a9bf",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4bd3bc71-5cd2-4007-bfa3-322cccac21da",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "0d5d03e5-1d75-4ad0-8208-a28609b1ef88",
        "cursor": {
          "ref": "da116d18-cb6f-4aba-b84a-0bca83d6b439",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c1fcad7e-3b26-4ff5-a708-c30296463ef3"
        },
        "item": {
          "id": "0d5d03e5-1d75-4ad0-8208-a28609b1ef88",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ae54a4d5-8513-4eb5-b0f6-64bcd3bac130",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "0d5d03e5-1d75-4ad0-8208-a28609b1ef88",
        "cursor": {
          "ref": "da116d18-cb6f-4aba-b84a-0bca83d6b439",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c1fcad7e-3b26-4ff5-a708-c30296463ef3"
        },
        "item": {
          "id": "0d5d03e5-1d75-4ad0-8208-a28609b1ef88",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ae54a4d5-8513-4eb5-b0f6-64bcd3bac130",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "a9684714-d6b8-40f1-b66a-0ca09bf00ea9",
        "cursor": {
          "ref": "6cd3a512-8734-4594-8d54-e0fb80c3ae4c",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "22c08cd0-ed43-429a-840f-2054d0e5d1ce"
        },
        "item": {
          "id": "a9684714-d6b8-40f1-b66a-0ca09bf00ea9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7c39bba9-28f1-48e5-9ff8-762af48552a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "a9684714-d6b8-40f1-b66a-0ca09bf00ea9",
        "cursor": {
          "ref": "6cd3a512-8734-4594-8d54-e0fb80c3ae4c",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "22c08cd0-ed43-429a-840f-2054d0e5d1ce"
        },
        "item": {
          "id": "a9684714-d6b8-40f1-b66a-0ca09bf00ea9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7c39bba9-28f1-48e5-9ff8-762af48552a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "1c3dd725-dfe6-491d-874f-0cb67def68ea",
        "cursor": {
          "ref": "b9c192ef-e879-4c5e-a3f2-dc0cc8fcafb9",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "464de34f-b874-481c-a90e-10f4771df6c0"
        },
        "item": {
          "id": "1c3dd725-dfe6-491d-874f-0cb67def68ea",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "bca5f2a1-6305-45cb-8b0a-be6ef8b55a03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "1c3dd725-dfe6-491d-874f-0cb67def68ea",
        "cursor": {
          "ref": "b9c192ef-e879-4c5e-a3f2-dc0cc8fcafb9",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "464de34f-b874-481c-a90e-10f4771df6c0"
        },
        "item": {
          "id": "1c3dd725-dfe6-491d-874f-0cb67def68ea",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "bca5f2a1-6305-45cb-8b0a-be6ef8b55a03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "8b09ec56-88df-46f2-9321-ee7e7e4cd99f",
        "cursor": {
          "ref": "2d1e1758-6d42-4956-9296-635b10b5a954",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1b697669-1e2a-4782-8886-420d22eb7c29"
        },
        "item": {
          "id": "8b09ec56-88df-46f2-9321-ee7e7e4cd99f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4f0c60a9-d96c-4f48-bad1-4b56b2765708",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "8b09ec56-88df-46f2-9321-ee7e7e4cd99f",
        "cursor": {
          "ref": "2d1e1758-6d42-4956-9296-635b10b5a954",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1b697669-1e2a-4782-8886-420d22eb7c29"
        },
        "item": {
          "id": "8b09ec56-88df-46f2-9321-ee7e7e4cd99f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4f0c60a9-d96c-4f48-bad1-4b56b2765708",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "d60fd527-e279-41ea-a181-51ec62d757d9",
        "cursor": {
          "ref": "1d441d93-4895-4b4e-ad34-8707ef132b48",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1553f4ee-c99a-48d0-8b1a-621e2ca43dd4"
        },
        "item": {
          "id": "d60fd527-e279-41ea-a181-51ec62d757d9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "35ce2070-37b3-411d-ab63-01e5f2f50b3f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "d60fd527-e279-41ea-a181-51ec62d757d9",
        "cursor": {
          "ref": "1d441d93-4895-4b4e-ad34-8707ef132b48",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1553f4ee-c99a-48d0-8b1a-621e2ca43dd4"
        },
        "item": {
          "id": "d60fd527-e279-41ea-a181-51ec62d757d9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "35ce2070-37b3-411d-ab63-01e5f2f50b3f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "97c48d2e-3dbc-4c1e-abd7-f5e184d3fcd2",
        "cursor": {
          "ref": "7c6ddc51-9001-4062-9eda-0439d24d44aa",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "034a304b-fc58-4456-b009-5104f91c98ae"
        },
        "item": {
          "id": "97c48d2e-3dbc-4c1e-abd7-f5e184d3fcd2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "29001165-7cf9-41d2-85ff-266159b904f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "97c48d2e-3dbc-4c1e-abd7-f5e184d3fcd2",
        "cursor": {
          "ref": "7c6ddc51-9001-4062-9eda-0439d24d44aa",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "034a304b-fc58-4456-b009-5104f91c98ae"
        },
        "item": {
          "id": "97c48d2e-3dbc-4c1e-abd7-f5e184d3fcd2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "29001165-7cf9-41d2-85ff-266159b904f1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "9eb664d7-bf3a-4bdc-8b45-c8c926609f52",
        "cursor": {
          "ref": "d0a89ed2-fe39-4059-a79c-23d9faf9c5f7",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3ab56049-79eb-443f-be0a-014dfd2ef3cb"
        },
        "item": {
          "id": "9eb664d7-bf3a-4bdc-8b45-c8c926609f52",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "55c5d178-b3c2-463e-a23e-8a5a4cf577d4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "9eb664d7-bf3a-4bdc-8b45-c8c926609f52",
        "cursor": {
          "ref": "d0a89ed2-fe39-4059-a79c-23d9faf9c5f7",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3ab56049-79eb-443f-be0a-014dfd2ef3cb"
        },
        "item": {
          "id": "9eb664d7-bf3a-4bdc-8b45-c8c926609f52",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "55c5d178-b3c2-463e-a23e-8a5a4cf577d4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "754b5124-839a-424d-aa95-b8015037c5ea",
        "cursor": {
          "ref": "3b582d13-30bd-4c1f-bcb3-9eab9a7f490c",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b26298ad-6b0d-4fbe-98d8-381f5847ed7e"
        },
        "item": {
          "id": "754b5124-839a-424d-aa95-b8015037c5ea",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b57177e0-58b0-43f1-af92-3553336e0dba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "754b5124-839a-424d-aa95-b8015037c5ea",
        "cursor": {
          "ref": "3b582d13-30bd-4c1f-bcb3-9eab9a7f490c",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b26298ad-6b0d-4fbe-98d8-381f5847ed7e"
        },
        "item": {
          "id": "754b5124-839a-424d-aa95-b8015037c5ea",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b57177e0-58b0-43f1-af92-3553336e0dba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "e65586be-f737-4a18-95d1-5e9563535813",
        "cursor": {
          "ref": "fe5d2195-ce4a-44a6-bf84-3a46a00811d9",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ba614e4e-1ef5-4c89-a0ba-92525dcbf141"
        },
        "item": {
          "id": "e65586be-f737-4a18-95d1-5e9563535813",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b2e9daa1-c37b-4dba-98a0-d724ef76cef2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "e65586be-f737-4a18-95d1-5e9563535813",
        "cursor": {
          "ref": "fe5d2195-ce4a-44a6-bf84-3a46a00811d9",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ba614e4e-1ef5-4c89-a0ba-92525dcbf141"
        },
        "item": {
          "id": "e65586be-f737-4a18-95d1-5e9563535813",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b2e9daa1-c37b-4dba-98a0-d724ef76cef2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "a647c706-9cbc-4d2f-8d9c-530690709fbf",
        "cursor": {
          "ref": "f08ae9c6-0514-46e5-a729-a272755444d2",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "29ffc22f-46cb-453b-99a2-7d85f499962a"
        },
        "item": {
          "id": "a647c706-9cbc-4d2f-8d9c-530690709fbf",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2f42bf61-15ed-4571-8944-f5a40b34158e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "a647c706-9cbc-4d2f-8d9c-530690709fbf",
        "cursor": {
          "ref": "f08ae9c6-0514-46e5-a729-a272755444d2",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "29ffc22f-46cb-453b-99a2-7d85f499962a"
        },
        "item": {
          "id": "a647c706-9cbc-4d2f-8d9c-530690709fbf",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2f42bf61-15ed-4571-8944-f5a40b34158e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "ec9b05d9-1d84-4662-ae2e-b8173dce2b60",
        "cursor": {
          "ref": "748d698f-beb3-4433-b5d1-94d04735cbf9",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8edbb41b-47de-4703-96f7-d3e99ea1504c"
        },
        "item": {
          "id": "ec9b05d9-1d84-4662-ae2e-b8173dce2b60",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5278627a-8ce8-46a9-8018-1bcc2fa8aec7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "ec9b05d9-1d84-4662-ae2e-b8173dce2b60",
        "cursor": {
          "ref": "748d698f-beb3-4433-b5d1-94d04735cbf9",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8edbb41b-47de-4703-96f7-d3e99ea1504c"
        },
        "item": {
          "id": "ec9b05d9-1d84-4662-ae2e-b8173dce2b60",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5278627a-8ce8-46a9-8018-1bcc2fa8aec7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "31b940be-c3f6-467d-a9a4-e166228ccd20",
        "cursor": {
          "ref": "71e1fffc-e8ce-4168-8145-c81d6bf552f7",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "2428243c-6d17-43e4-86c6-87f751bbbd3f"
        },
        "item": {
          "id": "31b940be-c3f6-467d-a9a4-e166228ccd20",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b08029b1-aaec-4498-ae2c-25ec6dfd3f76",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "31b940be-c3f6-467d-a9a4-e166228ccd20",
        "cursor": {
          "ref": "71e1fffc-e8ce-4168-8145-c81d6bf552f7",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "2428243c-6d17-43e4-86c6-87f751bbbd3f"
        },
        "item": {
          "id": "31b940be-c3f6-467d-a9a4-e166228ccd20",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b08029b1-aaec-4498-ae2c-25ec6dfd3f76",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "e661ba03-5868-4e68-baae-bab375c8d98a",
        "cursor": {
          "ref": "be9f13f2-be95-48e1-9494-e87e0973ea01",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a9d24614-d3c9-43ab-a90b-e19dbaa08ef1"
        },
        "item": {
          "id": "e661ba03-5868-4e68-baae-bab375c8d98a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "663b8c59-519b-49ef-a945-b5a10cdb97fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "e661ba03-5868-4e68-baae-bab375c8d98a",
        "cursor": {
          "ref": "be9f13f2-be95-48e1-9494-e87e0973ea01",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a9d24614-d3c9-43ab-a90b-e19dbaa08ef1"
        },
        "item": {
          "id": "e661ba03-5868-4e68-baae-bab375c8d98a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "663b8c59-519b-49ef-a945-b5a10cdb97fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "6d42e887-b2e9-4e11-ab4c-0bf9036846a7",
        "cursor": {
          "ref": "4ce76d76-66b9-44d3-9278-7faf8b109940",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7f5cc02b-155d-477f-9509-2c2e32c588d4"
        },
        "item": {
          "id": "6d42e887-b2e9-4e11-ab4c-0bf9036846a7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b426e731-99a4-49d5-b11e-253dbed80951",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "6d42e887-b2e9-4e11-ab4c-0bf9036846a7",
        "cursor": {
          "ref": "4ce76d76-66b9-44d3-9278-7faf8b109940",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7f5cc02b-155d-477f-9509-2c2e32c588d4"
        },
        "item": {
          "id": "6d42e887-b2e9-4e11-ab4c-0bf9036846a7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b426e731-99a4-49d5-b11e-253dbed80951",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "b3cc45b3-3364-40ed-8937-1074bccadfc5",
        "cursor": {
          "ref": "1aa190e3-7ea2-49ad-8c11-3b2e4c4f6208",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "16590bf2-b699-464c-af92-800eea4c1552"
        },
        "item": {
          "id": "b3cc45b3-3364-40ed-8937-1074bccadfc5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "de2011ea-0a3f-400d-a0f1-4053958a3939",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "b3cc45b3-3364-40ed-8937-1074bccadfc5",
        "cursor": {
          "ref": "1aa190e3-7ea2-49ad-8c11-3b2e4c4f6208",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "16590bf2-b699-464c-af92-800eea4c1552"
        },
        "item": {
          "id": "b3cc45b3-3364-40ed-8937-1074bccadfc5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "de2011ea-0a3f-400d-a0f1-4053958a3939",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "f3f0dca6-3782-4907-86d1-8e0dd5ff4055",
        "cursor": {
          "ref": "4a3b34ee-6064-4fb5-b784-a0356e9f3450",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "402fb5e2-0d9e-4aa5-a3ac-e70e6c11f667"
        },
        "item": {
          "id": "f3f0dca6-3782-4907-86d1-8e0dd5ff4055",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "29e2c2e3-174b-4ba4-aadd-c6ef1b5592d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "f3f0dca6-3782-4907-86d1-8e0dd5ff4055",
        "cursor": {
          "ref": "4a3b34ee-6064-4fb5-b784-a0356e9f3450",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "402fb5e2-0d9e-4aa5-a3ac-e70e6c11f667"
        },
        "item": {
          "id": "f3f0dca6-3782-4907-86d1-8e0dd5ff4055",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "29e2c2e3-174b-4ba4-aadd-c6ef1b5592d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "db0c4418-56b2-4865-8590-e8162836310d",
        "cursor": {
          "ref": "36af0c3a-9b67-4682-b765-d18363e9e0af",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b2f19c5a-1ddd-4391-8b05-fdfad7f1b654"
        },
        "item": {
          "id": "db0c4418-56b2-4865-8590-e8162836310d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f5adec4e-c016-4fb4-adb5-55a57cebee8f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "db0c4418-56b2-4865-8590-e8162836310d",
        "cursor": {
          "ref": "36af0c3a-9b67-4682-b765-d18363e9e0af",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b2f19c5a-1ddd-4391-8b05-fdfad7f1b654"
        },
        "item": {
          "id": "db0c4418-56b2-4865-8590-e8162836310d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f5adec4e-c016-4fb4-adb5-55a57cebee8f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "22202625-89f8-47d1-b47b-37c4408a1b9e",
        "cursor": {
          "ref": "c52c528d-0d51-46a1-af49-0e68e06d5491",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "22191469-6a44-4d9a-a34b-602b788ce5ec"
        },
        "item": {
          "id": "22202625-89f8-47d1-b47b-37c4408a1b9e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e6218a02-465d-4095-a563-044a02f658cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "22202625-89f8-47d1-b47b-37c4408a1b9e",
        "cursor": {
          "ref": "c52c528d-0d51-46a1-af49-0e68e06d5491",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "22191469-6a44-4d9a-a34b-602b788ce5ec"
        },
        "item": {
          "id": "22202625-89f8-47d1-b47b-37c4408a1b9e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e6218a02-465d-4095-a563-044a02f658cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "f4c8e18b-b8a8-42ea-a95e-14814cb7e2b2",
        "cursor": {
          "ref": "56cd8850-1a55-4026-b49e-239bb734d992",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "263641f4-99fe-4eeb-8ee4-bb40dd62923a"
        },
        "item": {
          "id": "f4c8e18b-b8a8-42ea-a95e-14814cb7e2b2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a7a8464a-33de-40e4-a9db-fff436e13530",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "f4c8e18b-b8a8-42ea-a95e-14814cb7e2b2",
        "cursor": {
          "ref": "56cd8850-1a55-4026-b49e-239bb734d992",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "263641f4-99fe-4eeb-8ee4-bb40dd62923a"
        },
        "item": {
          "id": "f4c8e18b-b8a8-42ea-a95e-14814cb7e2b2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a7a8464a-33de-40e4-a9db-fff436e13530",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "4409cfb5-cd89-4d98-8344-0d210270a7a6",
        "cursor": {
          "ref": "e50d8a94-4573-4561-a6b9-092955e37521",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "96b6b2ce-5de7-49ca-a951-5d5bc2990535"
        },
        "item": {
          "id": "4409cfb5-cd89-4d98-8344-0d210270a7a6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ca1e9617-a45a-498a-a46a-05c8c877f051",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "4409cfb5-cd89-4d98-8344-0d210270a7a6",
        "cursor": {
          "ref": "e50d8a94-4573-4561-a6b9-092955e37521",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "96b6b2ce-5de7-49ca-a951-5d5bc2990535"
        },
        "item": {
          "id": "4409cfb5-cd89-4d98-8344-0d210270a7a6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ca1e9617-a45a-498a-a46a-05c8c877f051",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "d6d7909b-8aea-469b-8516-a7ce802799f8",
        "cursor": {
          "ref": "47073913-a08c-40c5-b761-e09de4482a4a",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2ed3b909-b260-4b49-a2e5-5ff056c0cc6c"
        },
        "item": {
          "id": "d6d7909b-8aea-469b-8516-a7ce802799f8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "440297c9-ac82-454a-ba85-da07fe2a7b8d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "d6d7909b-8aea-469b-8516-a7ce802799f8",
        "cursor": {
          "ref": "47073913-a08c-40c5-b761-e09de4482a4a",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2ed3b909-b260-4b49-a2e5-5ff056c0cc6c"
        },
        "item": {
          "id": "d6d7909b-8aea-469b-8516-a7ce802799f8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "440297c9-ac82-454a-ba85-da07fe2a7b8d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "c14226a8-7644-4a57-b1fb-8ea1fef94d4e",
        "cursor": {
          "ref": "4952fa5c-4224-4b6b-acc1-5c0a3ad675e9",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2303e358-724b-4dfc-97fa-fe2324a46440"
        },
        "item": {
          "id": "c14226a8-7644-4a57-b1fb-8ea1fef94d4e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "324379d2-8ccb-4c80-b9ba-630d3c4a4cac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "c14226a8-7644-4a57-b1fb-8ea1fef94d4e",
        "cursor": {
          "ref": "4952fa5c-4224-4b6b-acc1-5c0a3ad675e9",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2303e358-724b-4dfc-97fa-fe2324a46440"
        },
        "item": {
          "id": "c14226a8-7644-4a57-b1fb-8ea1fef94d4e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "324379d2-8ccb-4c80-b9ba-630d3c4a4cac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "a9a18271-a4cd-4afc-aa2b-c3c0f3f07110",
        "cursor": {
          "ref": "bfc0308a-925c-4964-9018-fb9bd8bd8046",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "431e9473-7d3a-4b0d-b3d0-6a8e94bde384"
        },
        "item": {
          "id": "a9a18271-a4cd-4afc-aa2b-c3c0f3f07110",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "92f3c1e6-073d-4c83-9802-e4656598d972",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "a9a18271-a4cd-4afc-aa2b-c3c0f3f07110",
        "cursor": {
          "ref": "bfc0308a-925c-4964-9018-fb9bd8bd8046",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "431e9473-7d3a-4b0d-b3d0-6a8e94bde384"
        },
        "item": {
          "id": "a9a18271-a4cd-4afc-aa2b-c3c0f3f07110",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "92f3c1e6-073d-4c83-9802-e4656598d972",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "9befbaf6-5b41-4d97-8714-7f9d24021b37",
        "cursor": {
          "ref": "5e94b90d-88c7-48f3-bb9a-972805841080",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5f7894dc-7881-49ec-a218-1aba84a9d3a9"
        },
        "item": {
          "id": "9befbaf6-5b41-4d97-8714-7f9d24021b37",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6d26ca7c-cd31-4d1d-a7c8-d7f16778032e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "9befbaf6-5b41-4d97-8714-7f9d24021b37",
        "cursor": {
          "ref": "5e94b90d-88c7-48f3-bb9a-972805841080",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5f7894dc-7881-49ec-a218-1aba84a9d3a9"
        },
        "item": {
          "id": "9befbaf6-5b41-4d97-8714-7f9d24021b37",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6d26ca7c-cd31-4d1d-a7c8-d7f16778032e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "714ec509-a4ec-4b93-92bb-1783641e1a1f",
        "cursor": {
          "ref": "402f3e8e-035c-496b-9e00-4093221ca93f",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e4986223-741f-4b4c-9784-e629751d1712"
        },
        "item": {
          "id": "714ec509-a4ec-4b93-92bb-1783641e1a1f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3511e398-3f36-405c-9eb5-e161a7f3363f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "714ec509-a4ec-4b93-92bb-1783641e1a1f",
        "cursor": {
          "ref": "402f3e8e-035c-496b-9e00-4093221ca93f",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e4986223-741f-4b4c-9784-e629751d1712"
        },
        "item": {
          "id": "714ec509-a4ec-4b93-92bb-1783641e1a1f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "3511e398-3f36-405c-9eb5-e161a7f3363f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "ccc55217-37eb-46ec-a8dd-35f9e3ceb607",
        "cursor": {
          "ref": "e70e93b4-bc56-4fc8-91d4-10d0fd565f13",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "82ec7a7d-6e3b-43ba-adad-049c1fff0d4f"
        },
        "item": {
          "id": "ccc55217-37eb-46ec-a8dd-35f9e3ceb607",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4cfcaf3c-79fa-43e9-9e2c-a525df21e622",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "ccc55217-37eb-46ec-a8dd-35f9e3ceb607",
        "cursor": {
          "ref": "e70e93b4-bc56-4fc8-91d4-10d0fd565f13",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "82ec7a7d-6e3b-43ba-adad-049c1fff0d4f"
        },
        "item": {
          "id": "ccc55217-37eb-46ec-a8dd-35f9e3ceb607",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4cfcaf3c-79fa-43e9-9e2c-a525df21e622",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "1d703ef9-3a6b-48f4-9b94-4bf709cee65c",
        "cursor": {
          "ref": "e20f994e-697c-472d-9023-87ae35449f20",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1666fe4a-8b13-4997-89b3-182ef31093e0"
        },
        "item": {
          "id": "1d703ef9-3a6b-48f4-9b94-4bf709cee65c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "47e31a52-ebc7-46ab-bb5d-88435e72b2e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "1d703ef9-3a6b-48f4-9b94-4bf709cee65c",
        "cursor": {
          "ref": "e20f994e-697c-472d-9023-87ae35449f20",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1666fe4a-8b13-4997-89b3-182ef31093e0"
        },
        "item": {
          "id": "1d703ef9-3a6b-48f4-9b94-4bf709cee65c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "47e31a52-ebc7-46ab-bb5d-88435e72b2e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "08fe6846-adfc-465b-a33f-09efc6dfa223",
        "cursor": {
          "ref": "460b534e-0332-4cb2-895e-528ac1b46ef5",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0f2d3c20-09c7-4e82-a3ce-f79110676921"
        },
        "item": {
          "id": "08fe6846-adfc-465b-a33f-09efc6dfa223",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0dc85953-ceb9-4db4-9e23-b4c99dae4145",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "08fe6846-adfc-465b-a33f-09efc6dfa223",
        "cursor": {
          "ref": "460b534e-0332-4cb2-895e-528ac1b46ef5",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0f2d3c20-09c7-4e82-a3ce-f79110676921"
        },
        "item": {
          "id": "08fe6846-adfc-465b-a33f-09efc6dfa223",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0dc85953-ceb9-4db4-9e23-b4c99dae4145",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "00d765fc-d391-4f84-95dc-b39a59b623e5",
        "cursor": {
          "ref": "7dc2c36d-aae8-408c-a229-1835fc85a4d7",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "244ecb08-e6d8-4b92-a1d4-d6425c802162"
        },
        "item": {
          "id": "00d765fc-d391-4f84-95dc-b39a59b623e5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "deee5672-77c1-45a4-8be5-07e0b6be96f8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "00d765fc-d391-4f84-95dc-b39a59b623e5",
        "cursor": {
          "ref": "7dc2c36d-aae8-408c-a229-1835fc85a4d7",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "244ecb08-e6d8-4b92-a1d4-d6425c802162"
        },
        "item": {
          "id": "00d765fc-d391-4f84-95dc-b39a59b623e5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "deee5672-77c1-45a4-8be5-07e0b6be96f8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "03bbc21d-319c-4f7a-8a4f-3d00ac60ac92",
        "cursor": {
          "ref": "1eefb50f-68b1-4713-ad15-f791d11eeebb",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "02170a68-62a2-45a1-8521-09dcae08df1e"
        },
        "item": {
          "id": "03bbc21d-319c-4f7a-8a4f-3d00ac60ac92",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f12a716b-274b-4b26-9b53-9c0382b45b36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "03bbc21d-319c-4f7a-8a4f-3d00ac60ac92",
        "cursor": {
          "ref": "1eefb50f-68b1-4713-ad15-f791d11eeebb",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "02170a68-62a2-45a1-8521-09dcae08df1e"
        },
        "item": {
          "id": "03bbc21d-319c-4f7a-8a4f-3d00ac60ac92",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f12a716b-274b-4b26-9b53-9c0382b45b36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "d258b8a6-3859-441b-8ac9-984dc7c9ee4e",
        "cursor": {
          "ref": "d0cc7e18-fda9-4b73-8fb3-43661b1c5c04",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f279499f-85ac-41fd-ac28-ba2e43f1de76"
        },
        "item": {
          "id": "d258b8a6-3859-441b-8ac9-984dc7c9ee4e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "cfa05dfa-a3f5-4b7d-99a4-994e351f0ee8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "d258b8a6-3859-441b-8ac9-984dc7c9ee4e",
        "cursor": {
          "ref": "d0cc7e18-fda9-4b73-8fb3-43661b1c5c04",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f279499f-85ac-41fd-ac28-ba2e43f1de76"
        },
        "item": {
          "id": "d258b8a6-3859-441b-8ac9-984dc7c9ee4e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "cfa05dfa-a3f5-4b7d-99a4-994e351f0ee8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "af71d357-bac5-4599-8bbc-3c3341b01bdb",
        "cursor": {
          "ref": "93fe1ae0-dbdb-4680-ba74-8e9fcc3d1dd3",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "10612e48-f312-4487-a49e-21fa661611a7"
        },
        "item": {
          "id": "af71d357-bac5-4599-8bbc-3c3341b01bdb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "bb8cc36c-3906-4e47-affd-2c7aa5bfc413",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "af71d357-bac5-4599-8bbc-3c3341b01bdb",
        "cursor": {
          "ref": "93fe1ae0-dbdb-4680-ba74-8e9fcc3d1dd3",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "10612e48-f312-4487-a49e-21fa661611a7"
        },
        "item": {
          "id": "af71d357-bac5-4599-8bbc-3c3341b01bdb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "bb8cc36c-3906-4e47-affd-2c7aa5bfc413",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "4a1132c7-6144-4877-9959-3f7f5b88c2a8",
        "cursor": {
          "ref": "7090805c-4ad0-4d30-ac9e-e64fde62b9e3",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5c19a3f8-07c4-4b07-9017-4fc061a9458b"
        },
        "item": {
          "id": "4a1132c7-6144-4877-9959-3f7f5b88c2a8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "457a6a54-de5b-481f-bd10-f1246a6ad724",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "4a1132c7-6144-4877-9959-3f7f5b88c2a8",
        "cursor": {
          "ref": "7090805c-4ad0-4d30-ac9e-e64fde62b9e3",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5c19a3f8-07c4-4b07-9017-4fc061a9458b"
        },
        "item": {
          "id": "4a1132c7-6144-4877-9959-3f7f5b88c2a8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "457a6a54-de5b-481f-bd10-f1246a6ad724",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "9fb09153-6571-4e4e-aab9-1842f690f260",
        "cursor": {
          "ref": "93903431-0719-4ec4-b5fe-3330b335b145",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f199752b-4826-4435-86e6-ede33f475e1f"
        },
        "item": {
          "id": "9fb09153-6571-4e4e-aab9-1842f690f260",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0e3c6719-d39f-49b0-aad7-31e7a344ebe5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "9fb09153-6571-4e4e-aab9-1842f690f260",
        "cursor": {
          "ref": "93903431-0719-4ec4-b5fe-3330b335b145",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f199752b-4826-4435-86e6-ede33f475e1f"
        },
        "item": {
          "id": "9fb09153-6571-4e4e-aab9-1842f690f260",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0e3c6719-d39f-49b0-aad7-31e7a344ebe5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "f66c59a8-dd40-4bc2-820b-acd6e0dbb4bc",
        "cursor": {
          "ref": "fb996b76-e970-445c-9da5-a88e6e680672",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "df29a573-0751-4c99-b941-301f9a0227b0"
        },
        "item": {
          "id": "f66c59a8-dd40-4bc2-820b-acd6e0dbb4bc",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a9852849-de87-46d0-9e94-bd730ee89542",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "f66c59a8-dd40-4bc2-820b-acd6e0dbb4bc",
        "cursor": {
          "ref": "fb996b76-e970-445c-9da5-a88e6e680672",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "df29a573-0751-4c99-b941-301f9a0227b0"
        },
        "item": {
          "id": "f66c59a8-dd40-4bc2-820b-acd6e0dbb4bc",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a9852849-de87-46d0-9e94-bd730ee89542",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "5982da73-5b4c-4496-a903-224e624966a4",
        "cursor": {
          "ref": "4a19ee04-560b-4537-8734-3879482410af",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bf16ae86-c5ca-44dd-b513-ff630373473f"
        },
        "item": {
          "id": "5982da73-5b4c-4496-a903-224e624966a4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "80030f7a-d76d-4c41-8fad-73255aa0e2ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "5982da73-5b4c-4496-a903-224e624966a4",
        "cursor": {
          "ref": "4a19ee04-560b-4537-8734-3879482410af",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bf16ae86-c5ca-44dd-b513-ff630373473f"
        },
        "item": {
          "id": "5982da73-5b4c-4496-a903-224e624966a4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "80030f7a-d76d-4c41-8fad-73255aa0e2ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "e7ec1d82-237b-400a-b5ea-2e9bda608b9e",
        "cursor": {
          "ref": "0ae8e844-670e-4965-821d-58ab5f6d9798",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cef3a508-a109-4cf8-9088-01e8de822359"
        },
        "item": {
          "id": "e7ec1d82-237b-400a-b5ea-2e9bda608b9e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "cb4dbd43-9e1c-43a9-a539-7aa6101c334d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "e7ec1d82-237b-400a-b5ea-2e9bda608b9e",
        "cursor": {
          "ref": "0ae8e844-670e-4965-821d-58ab5f6d9798",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cef3a508-a109-4cf8-9088-01e8de822359"
        },
        "item": {
          "id": "e7ec1d82-237b-400a-b5ea-2e9bda608b9e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "cb4dbd43-9e1c-43a9-a539-7aa6101c334d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "274a9e05-719e-48fe-a993-2878716bcdfc",
        "cursor": {
          "ref": "e40a9575-9afb-4d99-b797-bdbab445dc83",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7104605e-0986-4ec4-a035-341a392473d3"
        },
        "item": {
          "id": "274a9e05-719e-48fe-a993-2878716bcdfc",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "72b1cdb0-cc18-466c-b454-3727510e4fb8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "274a9e05-719e-48fe-a993-2878716bcdfc",
        "cursor": {
          "ref": "e40a9575-9afb-4d99-b797-bdbab445dc83",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7104605e-0986-4ec4-a035-341a392473d3"
        },
        "item": {
          "id": "274a9e05-719e-48fe-a993-2878716bcdfc",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "72b1cdb0-cc18-466c-b454-3727510e4fb8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "7f240b0f-71db-4d23-9ecb-22934250c837",
        "cursor": {
          "ref": "417192e5-faab-4516-97d7-2e2ea6a368a7",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e510d972-323b-4e0a-98d5-c205e6725451"
        },
        "item": {
          "id": "7f240b0f-71db-4d23-9ecb-22934250c837",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0f37f5ef-e00b-4634-abe4-bb50672e9e12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "7f240b0f-71db-4d23-9ecb-22934250c837",
        "cursor": {
          "ref": "417192e5-faab-4516-97d7-2e2ea6a368a7",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e510d972-323b-4e0a-98d5-c205e6725451"
        },
        "item": {
          "id": "7f240b0f-71db-4d23-9ecb-22934250c837",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0f37f5ef-e00b-4634-abe4-bb50672e9e12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "6489f9c5-1eda-4929-824f-b7463ac45a51",
        "cursor": {
          "ref": "b72a2f4f-4dcb-419f-a225-04851e551424",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "15b0d1e6-f04a-408e-af91-4e3ada436160"
        },
        "item": {
          "id": "6489f9c5-1eda-4929-824f-b7463ac45a51",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c3a10830-014a-4429-8285-7cb8ee82ee98",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "6489f9c5-1eda-4929-824f-b7463ac45a51",
        "cursor": {
          "ref": "b72a2f4f-4dcb-419f-a225-04851e551424",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "15b0d1e6-f04a-408e-af91-4e3ada436160"
        },
        "item": {
          "id": "6489f9c5-1eda-4929-824f-b7463ac45a51",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c3a10830-014a-4429-8285-7cb8ee82ee98",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "c06c7949-7f24-4946-aa7b-03786e8906e7",
        "cursor": {
          "ref": "841430d9-6c10-4817-8f58-245cc5ac29a9",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9a1fb802-ee55-40ac-97db-48c6b426b5ef"
        },
        "item": {
          "id": "c06c7949-7f24-4946-aa7b-03786e8906e7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f431141e-b6c5-4be7-8941-1ebf39a2ebcc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "c06c7949-7f24-4946-aa7b-03786e8906e7",
        "cursor": {
          "ref": "841430d9-6c10-4817-8f58-245cc5ac29a9",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9a1fb802-ee55-40ac-97db-48c6b426b5ef"
        },
        "item": {
          "id": "c06c7949-7f24-4946-aa7b-03786e8906e7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f431141e-b6c5-4be7-8941-1ebf39a2ebcc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "302c34fb-beb4-4918-b23d-55f217d755b7",
        "cursor": {
          "ref": "2bef7410-f3a8-497b-a78e-d7dcd2efe1f5",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f29a722c-e946-4529-a7b6-bcec2e0e838a"
        },
        "item": {
          "id": "302c34fb-beb4-4918-b23d-55f217d755b7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "47d34cc9-d6cc-4c1a-87ac-d528d948b687",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "302c34fb-beb4-4918-b23d-55f217d755b7",
        "cursor": {
          "ref": "2bef7410-f3a8-497b-a78e-d7dcd2efe1f5",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f29a722c-e946-4529-a7b6-bcec2e0e838a"
        },
        "item": {
          "id": "302c34fb-beb4-4918-b23d-55f217d755b7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "47d34cc9-d6cc-4c1a-87ac-d528d948b687",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "ca4a7440-d921-4f46-b0a7-0504e8ccb337",
        "cursor": {
          "ref": "65ceda37-35cc-4be5-a500-b191be43a6be",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c6627ea6-399c-4fcc-a1bb-9eb519c66eb0"
        },
        "item": {
          "id": "ca4a7440-d921-4f46-b0a7-0504e8ccb337",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f34da827-dca7-4d2c-a72d-cca97a927ab7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "ca4a7440-d921-4f46-b0a7-0504e8ccb337",
        "cursor": {
          "ref": "65ceda37-35cc-4be5-a500-b191be43a6be",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c6627ea6-399c-4fcc-a1bb-9eb519c66eb0"
        },
        "item": {
          "id": "ca4a7440-d921-4f46-b0a7-0504e8ccb337",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f34da827-dca7-4d2c-a72d-cca97a927ab7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "2b57adda-97fe-4252-a5f9-14f478b0bd08",
        "cursor": {
          "ref": "42b4306d-fc82-4554-b80e-253fbc224c47",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8c6e6cfe-d529-4383-97b2-61a6ef81e491"
        },
        "item": {
          "id": "2b57adda-97fe-4252-a5f9-14f478b0bd08",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9f60c00b-8212-48ef-a2cc-b75b657e35c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "2b57adda-97fe-4252-a5f9-14f478b0bd08",
        "cursor": {
          "ref": "42b4306d-fc82-4554-b80e-253fbc224c47",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8c6e6cfe-d529-4383-97b2-61a6ef81e491"
        },
        "item": {
          "id": "2b57adda-97fe-4252-a5f9-14f478b0bd08",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9f60c00b-8212-48ef-a2cc-b75b657e35c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "9c4e17f3-f054-4e34-ade6-e7994cdffb98",
        "cursor": {
          "ref": "6325ded3-bbe8-4b53-9e4d-6f6a2974a590",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e36aaf93-45ff-4d24-96f1-546e45a459c1"
        },
        "item": {
          "id": "9c4e17f3-f054-4e34-ade6-e7994cdffb98",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9d716ee7-cc5d-4a1c-89b3-f57fc4769354",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "9c4e17f3-f054-4e34-ade6-e7994cdffb98",
        "cursor": {
          "ref": "6325ded3-bbe8-4b53-9e4d-6f6a2974a590",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e36aaf93-45ff-4d24-96f1-546e45a459c1"
        },
        "item": {
          "id": "9c4e17f3-f054-4e34-ade6-e7994cdffb98",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9d716ee7-cc5d-4a1c-89b3-f57fc4769354",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "e8ff1e39-4bc3-4a54-91f1-ca7ebff1f4e1",
        "cursor": {
          "ref": "f406ae39-cc57-4f96-8d90-6f7b5812cc41",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7a2f860e-5791-4f62-b22f-375c00fb6828"
        },
        "item": {
          "id": "e8ff1e39-4bc3-4a54-91f1-ca7ebff1f4e1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "de7dacc1-4cc4-45cf-b28d-fc46432aa58b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "e8ff1e39-4bc3-4a54-91f1-ca7ebff1f4e1",
        "cursor": {
          "ref": "f406ae39-cc57-4f96-8d90-6f7b5812cc41",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7a2f860e-5791-4f62-b22f-375c00fb6828"
        },
        "item": {
          "id": "e8ff1e39-4bc3-4a54-91f1-ca7ebff1f4e1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "de7dacc1-4cc4-45cf-b28d-fc46432aa58b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "4c37af77-f4b3-4633-9689-7e80e77b25d1",
        "cursor": {
          "ref": "b13043fb-04e7-4678-b631-2e97fb3b9ac8",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e39105f1-1512-450e-8972-28d33caec55f"
        },
        "item": {
          "id": "4c37af77-f4b3-4633-9689-7e80e77b25d1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9dc033f9-da80-4226-b4cb-dc863eae443d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "4c37af77-f4b3-4633-9689-7e80e77b25d1",
        "cursor": {
          "ref": "b13043fb-04e7-4678-b631-2e97fb3b9ac8",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e39105f1-1512-450e-8972-28d33caec55f"
        },
        "item": {
          "id": "4c37af77-f4b3-4633-9689-7e80e77b25d1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9dc033f9-da80-4226-b4cb-dc863eae443d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "2e25a7c8-86bc-4109-ab22-79d58ca076e4",
        "cursor": {
          "ref": "a0086e1f-2b07-47c0-b884-6bd5d6905133",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a021cfe6-a60f-4c2c-a7d8-eb9a3264b468"
        },
        "item": {
          "id": "2e25a7c8-86bc-4109-ab22-79d58ca076e4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "58747591-3545-4470-843c-53db58ec974f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "2e25a7c8-86bc-4109-ab22-79d58ca076e4",
        "cursor": {
          "ref": "a0086e1f-2b07-47c0-b884-6bd5d6905133",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a021cfe6-a60f-4c2c-a7d8-eb9a3264b468"
        },
        "item": {
          "id": "2e25a7c8-86bc-4109-ab22-79d58ca076e4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "58747591-3545-4470-843c-53db58ec974f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "0b099fba-e4a2-4061-8dc3-1d0539e2c039",
        "cursor": {
          "ref": "285b9d0d-af46-42f9-9d0d-fad807d3e4c3",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "05c4a92e-ab03-4a85-b92b-e6304a0c5ed6"
        },
        "item": {
          "id": "0b099fba-e4a2-4061-8dc3-1d0539e2c039",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c4cf18f5-27d7-4446-a9f7-d60b90b57fbf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "0b099fba-e4a2-4061-8dc3-1d0539e2c039",
        "cursor": {
          "ref": "285b9d0d-af46-42f9-9d0d-fad807d3e4c3",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "05c4a92e-ab03-4a85-b92b-e6304a0c5ed6"
        },
        "item": {
          "id": "0b099fba-e4a2-4061-8dc3-1d0539e2c039",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c4cf18f5-27d7-4446-a9f7-d60b90b57fbf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "6c01d9b9-4294-4824-ba18-1ace3341624d",
        "cursor": {
          "ref": "6e1bb172-71dd-4db8-8dfe-8a9860d70b55",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "dbb3c892-910b-485f-a739-870be375e98e"
        },
        "item": {
          "id": "6c01d9b9-4294-4824-ba18-1ace3341624d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d753c1d0-24d0-4479-ac68-ad332f95ea17",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "6c01d9b9-4294-4824-ba18-1ace3341624d",
        "cursor": {
          "ref": "6e1bb172-71dd-4db8-8dfe-8a9860d70b55",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "dbb3c892-910b-485f-a739-870be375e98e"
        },
        "item": {
          "id": "6c01d9b9-4294-4824-ba18-1ace3341624d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d753c1d0-24d0-4479-ac68-ad332f95ea17",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "b30cc7d9-3607-491a-84ba-918d776d2d8e",
        "cursor": {
          "ref": "bf66624b-15c9-4d01-9ea4-9a09bb9b9d0f",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f37b1264-0558-4bca-a89f-e356a23ab220"
        },
        "item": {
          "id": "b30cc7d9-3607-491a-84ba-918d776d2d8e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "0aef7866-9c41-4f26-a622-7fd6ad90d2da",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "b30cc7d9-3607-491a-84ba-918d776d2d8e",
        "cursor": {
          "ref": "bf66624b-15c9-4d01-9ea4-9a09bb9b9d0f",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f37b1264-0558-4bca-a89f-e356a23ab220"
        },
        "item": {
          "id": "b30cc7d9-3607-491a-84ba-918d776d2d8e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "0aef7866-9c41-4f26-a622-7fd6ad90d2da",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "ee8dc9b3-f60c-4efa-8fdf-cd685b1d8457",
        "cursor": {
          "ref": "c6276df2-b38b-4cca-a2e0-c31a76d9a3e0",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "14629af2-6208-4e9a-93c0-a0bf7e394fff"
        },
        "item": {
          "id": "ee8dc9b3-f60c-4efa-8fdf-cd685b1d8457",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "cfca513f-4109-4ee8-beff-61b1c79d1410",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ee8dc9b3-f60c-4efa-8fdf-cd685b1d8457",
        "cursor": {
          "ref": "c6276df2-b38b-4cca-a2e0-c31a76d9a3e0",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "14629af2-6208-4e9a-93c0-a0bf7e394fff"
        },
        "item": {
          "id": "ee8dc9b3-f60c-4efa-8fdf-cd685b1d8457",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "cfca513f-4109-4ee8-beff-61b1c79d1410",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ba35a358-49ef-4dde-b0cb-7cd691832e6c",
        "cursor": {
          "ref": "4980ae4d-a7f0-431e-b972-3d21168824ee",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6107418c-9089-4c0a-9d71-35e2f23d5767"
        },
        "item": {
          "id": "ba35a358-49ef-4dde-b0cb-7cd691832e6c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ebee30bd-f8f1-4c72-bbaf-881f0749aa12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "ba35a358-49ef-4dde-b0cb-7cd691832e6c",
        "cursor": {
          "ref": "4980ae4d-a7f0-431e-b972-3d21168824ee",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6107418c-9089-4c0a-9d71-35e2f23d5767"
        },
        "item": {
          "id": "ba35a358-49ef-4dde-b0cb-7cd691832e6c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ebee30bd-f8f1-4c72-bbaf-881f0749aa12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "dd552ac4-1cb9-48b4-8b0e-041c756c4ca2",
        "cursor": {
          "ref": "7c35e128-8a04-429f-af85-b9897e7a4148",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a563ca37-48c3-4e4d-bccf-6f8feb480eb8"
        },
        "item": {
          "id": "dd552ac4-1cb9-48b4-8b0e-041c756c4ca2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9cbabe9b-5f59-4f44-a0a2-96839c16bea2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "dd552ac4-1cb9-48b4-8b0e-041c756c4ca2",
        "cursor": {
          "ref": "7c35e128-8a04-429f-af85-b9897e7a4148",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a563ca37-48c3-4e4d-bccf-6f8feb480eb8"
        },
        "item": {
          "id": "dd552ac4-1cb9-48b4-8b0e-041c756c4ca2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9cbabe9b-5f59-4f44-a0a2-96839c16bea2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "83f184c7-b862-4e80-a1c6-fb763a169d7c",
        "cursor": {
          "ref": "8c6d0a44-e118-4cf4-802e-c7ffa7fb725b",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0c0d7a37-a325-4520-ada0-0bcf90074f55"
        },
        "item": {
          "id": "83f184c7-b862-4e80-a1c6-fb763a169d7c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a5f8cef8-da1d-402f-a650-cb8cc70c8e31",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "83f184c7-b862-4e80-a1c6-fb763a169d7c",
        "cursor": {
          "ref": "8c6d0a44-e118-4cf4-802e-c7ffa7fb725b",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0c0d7a37-a325-4520-ada0-0bcf90074f55"
        },
        "item": {
          "id": "83f184c7-b862-4e80-a1c6-fb763a169d7c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a5f8cef8-da1d-402f-a650-cb8cc70c8e31",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "9dd55573-2155-4f9a-9f76-2721e9c8f776",
        "cursor": {
          "ref": "4cb350a0-b39e-47d6-8354-dc4cd68857c7",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "178cf0a5-5a54-4806-9478-e592b0dc8ad0"
        },
        "item": {
          "id": "9dd55573-2155-4f9a-9f76-2721e9c8f776",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2b311d20-f2e2-430e-9d38-8b8fbcef5245",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "9dd55573-2155-4f9a-9f76-2721e9c8f776",
        "cursor": {
          "ref": "4cb350a0-b39e-47d6-8354-dc4cd68857c7",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "178cf0a5-5a54-4806-9478-e592b0dc8ad0"
        },
        "item": {
          "id": "9dd55573-2155-4f9a-9f76-2721e9c8f776",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2b311d20-f2e2-430e-9d38-8b8fbcef5245",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "8d270521-56c3-44d4-9a37-cbe78d41044f",
        "cursor": {
          "ref": "4d87a240-bae9-4f57-8b5c-38ed59c9245d",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "73a3efbd-2fd7-473c-b863-4422a84dfb6b"
        },
        "item": {
          "id": "8d270521-56c3-44d4-9a37-cbe78d41044f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9ee118e8-471d-4eab-9967-2a35d819ee09",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "8d270521-56c3-44d4-9a37-cbe78d41044f",
        "cursor": {
          "ref": "4d87a240-bae9-4f57-8b5c-38ed59c9245d",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "73a3efbd-2fd7-473c-b863-4422a84dfb6b"
        },
        "item": {
          "id": "8d270521-56c3-44d4-9a37-cbe78d41044f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9ee118e8-471d-4eab-9967-2a35d819ee09",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "e721716f-620f-4616-91ba-71453fe82be0",
        "cursor": {
          "ref": "4ad0bf05-4f89-4542-add7-37924470806a",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "31dc82ee-4668-4dd6-996e-f1ecf14c5a65"
        },
        "item": {
          "id": "e721716f-620f-4616-91ba-71453fe82be0",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e745ef95-674f-4469-96a5-b0e10246ff6f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 55,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "e721716f-620f-4616-91ba-71453fe82be0",
        "cursor": {
          "ref": "4ad0bf05-4f89-4542-add7-37924470806a",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "31dc82ee-4668-4dd6-996e-f1ecf14c5a65"
        },
        "item": {
          "id": "e721716f-620f-4616-91ba-71453fe82be0",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e745ef95-674f-4469-96a5-b0e10246ff6f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 55,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "d81aa7e9-e8cd-4247-a9c3-5e7e8faf74a6",
        "cursor": {
          "ref": "3cee84cd-8fea-45fd-81fd-d21094887ea1",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f46fe550-c9e6-4778-90eb-26fc40c19d9a"
        },
        "item": {
          "id": "d81aa7e9-e8cd-4247-a9c3-5e7e8faf74a6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f53d498d-c687-4ca4-9bf6-3b5bfe892982",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "d81aa7e9-e8cd-4247-a9c3-5e7e8faf74a6",
        "cursor": {
          "ref": "3cee84cd-8fea-45fd-81fd-d21094887ea1",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f46fe550-c9e6-4778-90eb-26fc40c19d9a"
        },
        "item": {
          "id": "d81aa7e9-e8cd-4247-a9c3-5e7e8faf74a6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f53d498d-c687-4ca4-9bf6-3b5bfe892982",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "e1e88422-f13c-4f4c-973d-24b701ee9d06",
        "cursor": {
          "ref": "38fa7f59-aac9-4b95-8542-d22c0a6ba9bd",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7941a199-4a3b-4d65-8176-6877a9ea95f2"
        },
        "item": {
          "id": "e1e88422-f13c-4f4c-973d-24b701ee9d06",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "38ee284b-cb69-4618-be6a-083ae5f07353",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "e1e88422-f13c-4f4c-973d-24b701ee9d06",
        "cursor": {
          "ref": "38fa7f59-aac9-4b95-8542-d22c0a6ba9bd",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7941a199-4a3b-4d65-8176-6877a9ea95f2"
        },
        "item": {
          "id": "e1e88422-f13c-4f4c-973d-24b701ee9d06",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "38ee284b-cb69-4618-be6a-083ae5f07353",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "07782c60-1f96-4492-8db1-ea7c1daf86d1",
        "cursor": {
          "ref": "0689dad7-7dcb-40a0-b541-4b3a06471739",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a9d55340-5fdc-4a11-81cb-e2d196b96d73"
        },
        "item": {
          "id": "07782c60-1f96-4492-8db1-ea7c1daf86d1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "75700869-da39-4cf0-ba2c-062f0b8ce966",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "07782c60-1f96-4492-8db1-ea7c1daf86d1",
        "cursor": {
          "ref": "0689dad7-7dcb-40a0-b541-4b3a06471739",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a9d55340-5fdc-4a11-81cb-e2d196b96d73"
        },
        "item": {
          "id": "07782c60-1f96-4492-8db1-ea7c1daf86d1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "75700869-da39-4cf0-ba2c-062f0b8ce966",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "e63bebeb-2abe-4023-8de6-0eef8946c8e0",
        "cursor": {
          "ref": "d600b3e5-9823-4cb8-bdbc-199eabe558ed",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "cc7f8c8f-845a-4f9c-ac20-5099abaad85b"
        },
        "item": {
          "id": "e63bebeb-2abe-4023-8de6-0eef8946c8e0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f19e3542-38d1-4d65-b566-5d6d2c045776",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "e63bebeb-2abe-4023-8de6-0eef8946c8e0",
        "cursor": {
          "ref": "d600b3e5-9823-4cb8-bdbc-199eabe558ed",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "cc7f8c8f-845a-4f9c-ac20-5099abaad85b"
        },
        "item": {
          "id": "e63bebeb-2abe-4023-8de6-0eef8946c8e0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f19e3542-38d1-4d65-b566-5d6d2c045776",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 58,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "67f045a1-3c06-47bf-b5fc-8af09dc5c199",
        "cursor": {
          "ref": "4a5e4e53-585f-44ca-aef5-db65f78dcff4",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0abe7ada-4459-4253-bc72-cb6cc7141810"
        },
        "item": {
          "id": "67f045a1-3c06-47bf-b5fc-8af09dc5c199",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9078b9a3-3013-40b3-a703-9ab112ff2622",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "67f045a1-3c06-47bf-b5fc-8af09dc5c199",
        "cursor": {
          "ref": "4a5e4e53-585f-44ca-aef5-db65f78dcff4",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0abe7ada-4459-4253-bc72-cb6cc7141810"
        },
        "item": {
          "id": "67f045a1-3c06-47bf-b5fc-8af09dc5c199",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9078b9a3-3013-40b3-a703-9ab112ff2622",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "e5c64e74-758c-4c24-a2b9-2e1e5e27dae7",
        "cursor": {
          "ref": "5d4ad760-f5f0-4f06-8274-a75874d56e05",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4925d3a5-7ae3-43b7-87ad-0a85283524d2"
        },
        "item": {
          "id": "e5c64e74-758c-4c24-a2b9-2e1e5e27dae7",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0305215e-0770-45cb-bac2-330dc70c04c1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "e5c64e74-758c-4c24-a2b9-2e1e5e27dae7",
        "cursor": {
          "ref": "5d4ad760-f5f0-4f06-8274-a75874d56e05",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4925d3a5-7ae3-43b7-87ad-0a85283524d2"
        },
        "item": {
          "id": "e5c64e74-758c-4c24-a2b9-2e1e5e27dae7",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0305215e-0770-45cb-bac2-330dc70c04c1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "3c711f26-b4da-4cc3-8e97-a840a0748598",
        "cursor": {
          "ref": "04d89009-881b-4fc7-875d-198e768c893b",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ff6d32cb-86eb-4a16-8dc0-637179decb8e"
        },
        "item": {
          "id": "3c711f26-b4da-4cc3-8e97-a840a0748598",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ee5f1058-8cf9-42c2-9208-9f79d295f932",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "3c711f26-b4da-4cc3-8e97-a840a0748598",
        "cursor": {
          "ref": "04d89009-881b-4fc7-875d-198e768c893b",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ff6d32cb-86eb-4a16-8dc0-637179decb8e"
        },
        "item": {
          "id": "3c711f26-b4da-4cc3-8e97-a840a0748598",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ee5f1058-8cf9-42c2-9208-9f79d295f932",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "8ab68387-d7bd-4593-b171-1f20042b0f7e",
        "cursor": {
          "ref": "69d4cb70-6f05-4d65-8831-def1a5f81f6d",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f656f901-adee-4db4-8253-13901f76c467"
        },
        "item": {
          "id": "8ab68387-d7bd-4593-b171-1f20042b0f7e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "13eefb6a-a893-4deb-8be6-e971942e34fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "8ab68387-d7bd-4593-b171-1f20042b0f7e",
        "cursor": {
          "ref": "69d4cb70-6f05-4d65-8831-def1a5f81f6d",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f656f901-adee-4db4-8253-13901f76c467"
        },
        "item": {
          "id": "8ab68387-d7bd-4593-b171-1f20042b0f7e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "13eefb6a-a893-4deb-8be6-e971942e34fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "666797c8-dc3d-48e4-a803-5e971f35c62c",
        "cursor": {
          "ref": "fdb636a6-e6b6-4eeb-97df-be3aa67d7dff",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "526adc7c-9426-4134-a354-8dc93d39f2ef"
        },
        "item": {
          "id": "666797c8-dc3d-48e4-a803-5e971f35c62c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7b1e5dee-3cc6-4f3f-9efb-0be24acb12b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "666797c8-dc3d-48e4-a803-5e971f35c62c",
        "cursor": {
          "ref": "fdb636a6-e6b6-4eeb-97df-be3aa67d7dff",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "526adc7c-9426-4134-a354-8dc93d39f2ef"
        },
        "item": {
          "id": "666797c8-dc3d-48e4-a803-5e971f35c62c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7b1e5dee-3cc6-4f3f-9efb-0be24acb12b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "6d5b6e19-617c-4818-862c-a3e36074469d",
        "cursor": {
          "ref": "9dfe0354-4089-4eab-bfc6-c9966f967ea0",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f7f2ae50-433c-4a66-8a1b-4dd69c750ee7"
        },
        "item": {
          "id": "6d5b6e19-617c-4818-862c-a3e36074469d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b3655e82-1944-46b6-bb4f-cf144a5ba0bb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "6d5b6e19-617c-4818-862c-a3e36074469d",
        "cursor": {
          "ref": "9dfe0354-4089-4eab-bfc6-c9966f967ea0",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f7f2ae50-433c-4a66-8a1b-4dd69c750ee7"
        },
        "item": {
          "id": "6d5b6e19-617c-4818-862c-a3e36074469d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b3655e82-1944-46b6-bb4f-cf144a5ba0bb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "f21151bb-2fb9-4422-b208-e608e30baa85",
        "cursor": {
          "ref": "ecc8ac98-a6ba-4067-a27d-fbe1e47ab66d",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d35788dd-f051-4845-a37e-a52a9a3c4a57"
        },
        "item": {
          "id": "f21151bb-2fb9-4422-b208-e608e30baa85",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "04d753db-0169-4d28-adbf-555e6aa7038b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "f21151bb-2fb9-4422-b208-e608e30baa85",
        "cursor": {
          "ref": "ecc8ac98-a6ba-4067-a27d-fbe1e47ab66d",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d35788dd-f051-4845-a37e-a52a9a3c4a57"
        },
        "item": {
          "id": "f21151bb-2fb9-4422-b208-e608e30baa85",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "04d753db-0169-4d28-adbf-555e6aa7038b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "644ed67d-9135-4685-8c86-7ceeb275c008",
        "cursor": {
          "ref": "4afbd09e-e9d2-44ff-b763-5069dcf91cd4",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "195a5778-fd1f-47b7-a6df-4d2d0a867c2d"
        },
        "item": {
          "id": "644ed67d-9135-4685-8c86-7ceeb275c008",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7ad60bbd-1156-41d5-8561-d919d0af4bdd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "644ed67d-9135-4685-8c86-7ceeb275c008",
        "cursor": {
          "ref": "4afbd09e-e9d2-44ff-b763-5069dcf91cd4",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "195a5778-fd1f-47b7-a6df-4d2d0a867c2d"
        },
        "item": {
          "id": "644ed67d-9135-4685-8c86-7ceeb275c008",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7ad60bbd-1156-41d5-8561-d919d0af4bdd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "73ebca00-1a0e-4228-a5a6-86f6ce8f6083",
        "cursor": {
          "ref": "d31cf055-96a3-4037-8cc0-25a1c6672af6",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "08c73b0d-2ed2-4b53-b851-9ba73d5602f1"
        },
        "item": {
          "id": "73ebca00-1a0e-4228-a5a6-86f6ce8f6083",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2c8634d0-7be7-45b0-b428-ebea79afb988",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "73ebca00-1a0e-4228-a5a6-86f6ce8f6083",
        "cursor": {
          "ref": "d31cf055-96a3-4037-8cc0-25a1c6672af6",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "08c73b0d-2ed2-4b53-b851-9ba73d5602f1"
        },
        "item": {
          "id": "73ebca00-1a0e-4228-a5a6-86f6ce8f6083",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2c8634d0-7be7-45b0-b428-ebea79afb988",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "d8d45264-c7ba-496c-9dbc-dabd83c3f6b2",
        "cursor": {
          "ref": "e4c8f107-99da-44e0-b747-480e90e42a6b",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7c6400d0-3801-489a-872f-7a3ddcadce72"
        },
        "item": {
          "id": "d8d45264-c7ba-496c-9dbc-dabd83c3f6b2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e6b728a3-bd10-4a46-b0e4-e4455aca4cd9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "d8d45264-c7ba-496c-9dbc-dabd83c3f6b2",
        "cursor": {
          "ref": "e4c8f107-99da-44e0-b747-480e90e42a6b",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7c6400d0-3801-489a-872f-7a3ddcadce72"
        },
        "item": {
          "id": "d8d45264-c7ba-496c-9dbc-dabd83c3f6b2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e6b728a3-bd10-4a46-b0e4-e4455aca4cd9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f8d1baf7-0003-4ee8-9347-04559b0f12a6",
        "cursor": {
          "ref": "d13aaa9a-99df-4099-bc0c-6bf2827092ce",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7469b191-1c50-4877-8c88-65e4fad78687"
        },
        "item": {
          "id": "f8d1baf7-0003-4ee8-9347-04559b0f12a6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2b5bcf22-cd05-4468-928e-767d24ba4a68",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "f8d1baf7-0003-4ee8-9347-04559b0f12a6",
        "cursor": {
          "ref": "d13aaa9a-99df-4099-bc0c-6bf2827092ce",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7469b191-1c50-4877-8c88-65e4fad78687"
        },
        "item": {
          "id": "f8d1baf7-0003-4ee8-9347-04559b0f12a6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2b5bcf22-cd05-4468-928e-767d24ba4a68",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "d06a8f28-b237-4fc3-a15a-0f0c19844f62",
        "cursor": {
          "ref": "35b72389-a6eb-4dea-bc00-fbe04ff56735",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c4aba067-0958-4ac1-b28d-c02105940def"
        },
        "item": {
          "id": "d06a8f28-b237-4fc3-a15a-0f0c19844f62",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d8a85ee5-9a22-4942-aa77-c6bea694c3d9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "d06a8f28-b237-4fc3-a15a-0f0c19844f62",
        "cursor": {
          "ref": "35b72389-a6eb-4dea-bc00-fbe04ff56735",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c4aba067-0958-4ac1-b28d-c02105940def"
        },
        "item": {
          "id": "d06a8f28-b237-4fc3-a15a-0f0c19844f62",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d8a85ee5-9a22-4942-aa77-c6bea694c3d9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 57,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "0f8e0ab6-c9b1-48b7-b613-2d107c0c0827",
        "cursor": {
          "ref": "59164747-3620-4c9a-b04b-d7b15bf97957",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "31f7900f-9266-48bb-ab86-b9da0e65776d"
        },
        "item": {
          "id": "0f8e0ab6-c9b1-48b7-b613-2d107c0c0827",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "52aab57c-4759-48da-9731-478cd8e99df3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "0f8e0ab6-c9b1-48b7-b613-2d107c0c0827",
        "cursor": {
          "ref": "59164747-3620-4c9a-b04b-d7b15bf97957",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "31f7900f-9266-48bb-ab86-b9da0e65776d"
        },
        "item": {
          "id": "0f8e0ab6-c9b1-48b7-b613-2d107c0c0827",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "52aab57c-4759-48da-9731-478cd8e99df3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "a75a8b6c-b35c-4187-9dbd-0e8e279cdb90",
        "cursor": {
          "ref": "f5fc6d2c-88f6-449b-8908-47022a330d13",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f48f6b52-91c4-4ba2-a2d8-e4718ddfda9c"
        },
        "item": {
          "id": "a75a8b6c-b35c-4187-9dbd-0e8e279cdb90",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0730532a-2c2c-43d3-b8dd-c49b67f466f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "a75a8b6c-b35c-4187-9dbd-0e8e279cdb90",
        "cursor": {
          "ref": "f5fc6d2c-88f6-449b-8908-47022a330d13",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f48f6b52-91c4-4ba2-a2d8-e4718ddfda9c"
        },
        "item": {
          "id": "a75a8b6c-b35c-4187-9dbd-0e8e279cdb90",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0730532a-2c2c-43d3-b8dd-c49b67f466f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "677db8d2-21b8-4ce4-b489-9f07882f60e0",
        "cursor": {
          "ref": "9f9bb138-14b9-4728-a401-36314f067efd",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a9cfbaaa-2129-4cac-8777-2453837106c9"
        },
        "item": {
          "id": "677db8d2-21b8-4ce4-b489-9f07882f60e0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e80d1e9d-2425-4f50-99ca-6ce8beda003e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "677db8d2-21b8-4ce4-b489-9f07882f60e0",
        "cursor": {
          "ref": "9f9bb138-14b9-4728-a401-36314f067efd",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a9cfbaaa-2129-4cac-8777-2453837106c9"
        },
        "item": {
          "id": "677db8d2-21b8-4ce4-b489-9f07882f60e0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e80d1e9d-2425-4f50-99ca-6ce8beda003e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "3ce610a6-edca-4f98-9043-b82a0a1284b7",
        "cursor": {
          "ref": "2d7dd76b-a099-49e6-9185-9f1634a74a47",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "52925805-e8ec-4f18-ab7a-91585b359be3"
        },
        "item": {
          "id": "3ce610a6-edca-4f98-9043-b82a0a1284b7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7e40962f-c7b2-4ef5-8a5d-ea1e902012b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "3ce610a6-edca-4f98-9043-b82a0a1284b7",
        "cursor": {
          "ref": "2d7dd76b-a099-49e6-9185-9f1634a74a47",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "52925805-e8ec-4f18-ab7a-91585b359be3"
        },
        "item": {
          "id": "3ce610a6-edca-4f98-9043-b82a0a1284b7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7e40962f-c7b2-4ef5-8a5d-ea1e902012b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 56,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "6dca8984-f57b-475e-997d-a857d5e91fe7",
        "cursor": {
          "ref": "967ba11c-f756-4af5-a6ae-6e17c838e5c1",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "010368bf-288e-4b88-9401-174c07cae9fd"
        },
        "item": {
          "id": "6dca8984-f57b-475e-997d-a857d5e91fe7",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "6dca8984-f57b-475e-997d-a857d5e91fe7",
        "cursor": {
          "ref": "967ba11c-f756-4af5-a6ae-6e17c838e5c1",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "010368bf-288e-4b88-9401-174c07cae9fd"
        },
        "item": {
          "id": "6dca8984-f57b-475e-997d-a857d5e91fe7",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "6dca8984-f57b-475e-997d-a857d5e91fe7",
        "cursor": {
          "ref": "967ba11c-f756-4af5-a6ae-6e17c838e5c1",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "010368bf-288e-4b88-9401-174c07cae9fd"
        },
        "item": {
          "id": "6dca8984-f57b-475e-997d-a857d5e91fe7",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "19b0ed5d-9e24-4f68-b922-ce31603aedee",
        "cursor": {
          "ref": "b91bfa6a-608b-41c1-bc75-ce308b7afb98",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "75d4f1d0-5397-49bd-ba91-4f4ed7ff7e96"
        },
        "item": {
          "id": "19b0ed5d-9e24-4f68-b922-ce31603aedee",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "19b0ed5d-9e24-4f68-b922-ce31603aedee",
        "cursor": {
          "ref": "b91bfa6a-608b-41c1-bc75-ce308b7afb98",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "75d4f1d0-5397-49bd-ba91-4f4ed7ff7e96"
        },
        "item": {
          "id": "19b0ed5d-9e24-4f68-b922-ce31603aedee",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "19b0ed5d-9e24-4f68-b922-ce31603aedee",
        "cursor": {
          "ref": "b91bfa6a-608b-41c1-bc75-ce308b7afb98",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "75d4f1d0-5397-49bd-ba91-4f4ed7ff7e96"
        },
        "item": {
          "id": "19b0ed5d-9e24-4f68-b922-ce31603aedee",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "095b95aa-e3fb-480d-906d-3e828aaa1837",
        "cursor": {
          "ref": "c7a932cf-aa4b-4248-ac1e-fb9bfec530bd",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b3ca397b-fe6c-4110-af7f-9c3b83af67c7"
        },
        "item": {
          "id": "095b95aa-e3fb-480d-906d-3e828aaa1837",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "095b95aa-e3fb-480d-906d-3e828aaa1837",
        "cursor": {
          "ref": "c7a932cf-aa4b-4248-ac1e-fb9bfec530bd",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b3ca397b-fe6c-4110-af7f-9c3b83af67c7"
        },
        "item": {
          "id": "095b95aa-e3fb-480d-906d-3e828aaa1837",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "095b95aa-e3fb-480d-906d-3e828aaa1837",
        "cursor": {
          "ref": "c7a932cf-aa4b-4248-ac1e-fb9bfec530bd",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b3ca397b-fe6c-4110-af7f-9c3b83af67c7"
        },
        "item": {
          "id": "095b95aa-e3fb-480d-906d-3e828aaa1837",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "00e7695c-d76c-4f09-9475-fab01acf8136",
        "cursor": {
          "ref": "3c7c4394-cb6f-408e-b7dc-15ae41129e8b",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "40914272-2f00-4307-b64f-d9eae4f7d6cd"
        },
        "item": {
          "id": "00e7695c-d76c-4f09-9475-fab01acf8136",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "00e7695c-d76c-4f09-9475-fab01acf8136",
        "cursor": {
          "ref": "3c7c4394-cb6f-408e-b7dc-15ae41129e8b",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "40914272-2f00-4307-b64f-d9eae4f7d6cd"
        },
        "item": {
          "id": "00e7695c-d76c-4f09-9475-fab01acf8136",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "00e7695c-d76c-4f09-9475-fab01acf8136",
        "cursor": {
          "ref": "3c7c4394-cb6f-408e-b7dc-15ae41129e8b",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "40914272-2f00-4307-b64f-d9eae4f7d6cd"
        },
        "item": {
          "id": "00e7695c-d76c-4f09-9475-fab01acf8136",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "78ff4cfb-90f8-400e-86c5-0ef9f861a05c",
        "cursor": {
          "ref": "ebc7a356-c2be-492f-be47-4f3758ee9f59",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8a4951d4-0674-457f-8bb3-1c798a8e3c5c"
        },
        "item": {
          "id": "78ff4cfb-90f8-400e-86c5-0ef9f861a05c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "78ff4cfb-90f8-400e-86c5-0ef9f861a05c",
        "cursor": {
          "ref": "ebc7a356-c2be-492f-be47-4f3758ee9f59",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8a4951d4-0674-457f-8bb3-1c798a8e3c5c"
        },
        "item": {
          "id": "78ff4cfb-90f8-400e-86c5-0ef9f861a05c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "78ff4cfb-90f8-400e-86c5-0ef9f861a05c",
        "cursor": {
          "ref": "ebc7a356-c2be-492f-be47-4f3758ee9f59",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8a4951d4-0674-457f-8bb3-1c798a8e3c5c"
        },
        "item": {
          "id": "78ff4cfb-90f8-400e-86c5-0ef9f861a05c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "7692d65c-37ab-4c80-a2cb-c6a2996fbc03",
        "cursor": {
          "ref": "6ef2811e-ca64-4af9-a284-25c1a85041d7",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "22b5788a-e4a6-4480-8de3-1c879b157cab"
        },
        "item": {
          "id": "7692d65c-37ab-4c80-a2cb-c6a2996fbc03",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "7692d65c-37ab-4c80-a2cb-c6a2996fbc03",
        "cursor": {
          "ref": "6ef2811e-ca64-4af9-a284-25c1a85041d7",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "22b5788a-e4a6-4480-8de3-1c879b157cab"
        },
        "item": {
          "id": "7692d65c-37ab-4c80-a2cb-c6a2996fbc03",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "7692d65c-37ab-4c80-a2cb-c6a2996fbc03",
        "cursor": {
          "ref": "6ef2811e-ca64-4af9-a284-25c1a85041d7",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "22b5788a-e4a6-4480-8de3-1c879b157cab"
        },
        "item": {
          "id": "7692d65c-37ab-4c80-a2cb-c6a2996fbc03",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}