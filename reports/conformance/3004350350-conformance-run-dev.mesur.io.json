{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fb9f4341-fb5c-4931-b3ef-f90537e0ed10",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ded9d41c-a976-4757-a574-b304207b0187",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8eff4f4d-7d8c-4083-8ca0-0d5d3c2e3a6e",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b9eb6cf-733e-4fbd-a5a9-c6770ac63000",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "98c7826a-71d6-4a15-b961-be41d9f17f6e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "1fe558aa-2a56-4a32-82c6-b2da3db7d1fc",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4bfbb33f-fd59-4fb5-8862-b7c2599377ee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb10ba90-ad02-48c6-9983-0662dbf1a469",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e7fd5d03-6fd3-43e1-b1a5-da5b5f144a54",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b636517-d93a-42dd-9ae5-3ff939925ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9b32f36-481e-4a97-875d-45b578e71501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d3c22c-5110-45f4-a661-21ac2c6ddc55",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8114ac49-ee08-4f59-b74a-f9c7f7cdb5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b205fba2-c564-4a00-bcfc-55c5d386ec51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb7873a-dc38-4c31-ad72-98f95824c5f0",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c310f0b1-e1c1-49a0-b854-24aa062533e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8d81c27-c1c9-417d-8daf-560bb7f5a128"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d516a2dc-7dc8-4917-be99-2c7d34c319f9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c09b77f4-e55c-455f-a499-31a6b0b0b60a",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ea886a-5aa7-428b-ba5a-6d29f8a4d162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b9615eeb-25d6-48b3-8b86-8808a7bbfe17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3df3b9-6ef3-47cf-a338-7a5d7350295a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d276da2-e0f3-4cac-a1d4-8c4ee1733701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "811bb615-8f00-4b13-be08-cd2996e9268b",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "706a0183-ee0f-48e2-9a4c-8c8d3563e9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8872694-5528-478a-9c0f-5228b16a9f02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16780ccc-0213-45f7-b2e9-aba77f32c180",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "1120e351-7243-46e0-b266-72d12b0b29f1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "01bffe19-3a6f-4936-9544-99250241ebad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fc045682-4086-4c73-a06e-21d5dc64d29a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2cb07f9d-a16b-4ac9-b388-f6345fc2f9b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0fed67b0-b394-471d-b6c8-39eda9e3784f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "affbfce1-6394-48d6-8148-c4ba378b32b8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "071fda48-1f87-4b24-b129-d797206e72c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cbf16206-9f4e-430f-885b-27671bd8ca52",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "81918b0a-50a9-4ce3-bab4-c325a7d00aae"
            }
          }
        ]
      },
      {
        "id": "8ecc9531-4fb9-4017-a6a7-3c699728b86d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f129e690-3e80-4e32-8bac-336869dac215",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81c5263b-39d2-4553-8a83-ff9149794fb0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "13f99fdd-3abc-4ab3-8aab-31b75e4f46ca",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edac53f5-0ea9-4b78-8c98-fa0bbe303934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5373d74b-0b8c-4a4b-87a9-3a7d8bc30589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03268804-2f14-4fa5-a4d8-c052813f2121",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b662b4bd-e0ce-4e80-98ba-42a3750d7bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c1a190-6f46-4490-9039-37c1d43d21c6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3642d0-5091-4584-bd29-f5106eb79cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5890a95a-30f5-4d7b-8676-47f7f2d3c5da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf21f5e-09ed-4726-a447-24dbeab54331",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "614f36cc-090b-45b5-b05f-1d2d9d9e8298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6413d3-20f8-4ce2-bda0-e79847a0e90e",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb95486-3146-48c1-bbcf-4283683b0aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9af726b-4e06-4ef8-9a27-964eb478ebcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975766c5-0119-45d5-9ed3-42c12912ca31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5886b1d-d3b2-44b9-b890-b8ecca7af921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8082a250-fb2a-4c29-a470-67f7595b32e1",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1ab889-af2e-4989-b1b1-0fc438cdaf9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "514224f5-d47a-4ca9-95e6-a52c328f710b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277ffe6c-20f0-4906-96c2-4276d8cf0060",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73b631c5-b63a-4d3d-a03c-c92ba190ee28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89d1ed9-043c-4962-9ca5-1a4ee9deb7a8",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae5a2c0-b236-40a4-b9c1-10e20758b8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd52894f-bb90-49d7-917c-fb3e37ce3e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce513074-0d61-4eae-90bb-bd912f10b680",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81ad0006-0a86-4c31-84a3-bc875dc94054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60568d96-3e01-4ca8-a061-8d4d3e355923",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4f6478-1431-405d-8659-17e406509cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bdf1346-920d-4609-af7c-01ab2d6418ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ef7664-c113-4aa3-8721-6c1467df1c53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db3168c0-750e-4c8e-bb04-86d0080cd764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a962def4-4376-494f-9eac-7c45b1f52cd7",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "511114bd-bb4c-4bbf-8163-cbfbf0374489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84bbd51-87b8-4ad1-8681-8c73913752c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480e510b-2c4c-453b-bd6a-bba7c9387681",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a49e0eb4-934a-4201-87c4-099fa1bcfd07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce704d15-fd18-4ced-bb1c-d790bc9ba1d0",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6814ebc0-9f64-4f14-9097-d31c527ebea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b5d0eee-5f24-4d2e-b00f-a3b4c783ad2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7defd1fd-34a0-442e-b978-5bad6d3b71b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6ec2146-8767-4ac7-a07f-0dc1815fe76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa518bd0-46a1-4c78-85f5-e8a7da343a05",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1289870a-375c-43c3-8363-4761a99f971e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ddd950d-9edc-4776-a4bf-49a6baac4ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5976594e-6123-4f0e-b8c7-e307373cf1b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06663aa0-b022-4d6b-82e8-53417ff906ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5aad3bd-49b6-44af-b563-64062249b8e0",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7b2d95-6442-46fd-93e3-cfd075c78ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "312113bc-2a57-45d3-acd0-5b9443dda3c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d12b670-20b7-447a-a2c9-63533d697ea9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cee55f4-c9b0-40d1-a9fd-4301ac8b76fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68097fc0-a760-44f5-a0b3-f8286c18a0d5",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d29479-574a-4670-9e0d-ee3eacca4b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeaba533-6953-4a98-865e-a9ab8ca6df5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936f4640-fc2d-4987-aa3d-8a20231bf33b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "74f776b0-ddb6-4643-ad6e-36621d7feb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583712db-bd20-4c9a-afbd-fa46451839b1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4d14c7-f416-48df-86af-687981545b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b67e165-6e47-4eee-8b40-0aa527d845b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3885916-1bde-4fb4-bdbf-414932b05a8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "c0ee6250-e990-4920-b594-354da4232827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8adb5680-05d1-4718-90ca-3cab6528d4f0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68339dc2-acb7-4f8e-a5a3-14b66c380811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c9ded26-765d-4c9b-b872-320b1a930517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5f5316-28bf-49b7-a7bf-070c81f43e63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f82ec94a-d42b-4a1a-b83d-8f543d01be54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600dee80-baf8-4fce-b01c-c3b2cd75f405",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a14939-b397-4f93-bb74-8dafc401d092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0efdbcf-f18e-4ecd-906e-5cefaea4e271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf747fc0-9a0c-4061-90f8-392df9d3e286",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86f42eff-f11d-42b9-8544-32f0902e7fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966ba48c-1ae6-4c2c-ae58-1cc34cdeb895",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f56f71a-ef2c-442e-8779-69f3121ef225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "958f675b-6c78-4637-96c6-b74bc704aec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691322c0-6c68-44e4-9921-48a13ba9fa40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "8da16109-684a-428e-b700-c898b0cba302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160b0174-6dc1-401a-a230-350fb313ff71",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c24ef8c-11bc-4dcf-a3a7-a52efd56949f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52a60536-e49d-4a96-84cb-afe957201a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4b324f-928d-49c5-a73e-fbaa659feed8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "bf2ca169-a297-4bd1-ae72-956433cf60b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0689fa94-72f5-4456-9e69-9d22ef916836",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93033779-7e35-4590-a2c7-29a8c96cfafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c088d363-5fee-44f6-bee8-ebb12417ec32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b73ca46-c709-44cf-9b5e-30792ace7be4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "749c7f1a-4c2f-44bf-93dd-f7c780659437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f46adeeb-094d-4adc-9cbf-e592cb106a0d",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d8db68-1e59-40e8-b369-01dbcb5204ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e18511d5-7eb3-4e5e-888b-272a958dbc7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d0695e-2623-4cfa-a419-f1f5a16b875e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3670e419-1b0a-4841-86d9-d970a9d66e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b10dad-8e86-41e7-a99c-86126eb5bacf",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26586e8f-9d15-4341-b820-09c8360ce26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02e36eec-9a16-4884-89ab-47e13f012469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56cf4c40-bcd0-4658-9657-d8dc89cd9336",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48df9141-92e4-4d87-927c-5c7a578cfdd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e7f818-9de0-47a7-b645-585089ca1f35",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b36a175-388d-4ccb-8a1a-55bef6445995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e658ae31-7b1a-4d24-897b-90594173b19a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8a5cf6-a93e-45ce-9b8e-58a050c765dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2b89950-fea0-4f93-9c93-6c6f16972ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ee44c1-c06c-4754-a82d-1580fa954cd5",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf90b7fd-fa87-4793-a490-4c74685c45ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94a33243-8100-4c37-8e35-ba4999a460d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c2f2f71-af40-494d-9d5b-47c8cc64ca87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6eb610d-e3ad-4543-a4cc-dc1fca8d672f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35b7620-0cde-41a5-a70b-41a4cbe2f6ab",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3689a01-002a-4d1d-9d10-ff7083abc002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cbb05de-7d34-4da2-b505-6f8581cab85a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27beb725-46b0-4dc1-8c9b-c6dc37620b04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0afe16c5-f98f-43ff-8c1f-c4a9022bf8a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c079cf9e-0738-4b3a-80e3-a2a65b095726",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2e8264-643b-4b46-a2d7-a62d64091c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "260a748a-6ffd-4136-9d5d-9483491375e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c51bee2-8559-44da-8693-b53ce3f3cc7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b314ccf-7cb6-4cff-8738-bb2955d032ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b27ce14-d190-49dd-ba1b-cbd09d08c640",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e30ee04-3f8f-46df-8723-498de6ccfe11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b0ebb00-81b8-4042-b09d-99478c6d3d6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5858235-2e74-4e7c-bd70-30779ebac0d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "612560f3-1d2a-4f19-95bc-27ef98f6311a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dafebde1-f406-4976-9160-0694f61924a1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51992e0-6b5d-4d9c-9fdf-1779e87ba52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7796c2da-911c-45d7-9530-fc813a8b4cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7710c09-82b4-415d-90fb-5c9ce61e5525",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7e7ac17-f9ff-407e-a8da-053422ec521a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22115bd6-b2ed-44fc-895e-287841c776bd",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22e0d4b-d0d7-4139-a6aa-c1367ddf641b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d7a8a70-9c5a-4f76-bcb4-e0a4ec0a95be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533f953a-87fd-4dfb-851e-cef88871c9c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8cc94ba-0e31-49f6-b228-5fc54ae65ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0507b5f9-03fe-4e6e-bdae-954639625499",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e1287f-cbab-4782-ab2d-44bb0d587717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcdf976b-eaed-4b85-aaaf-de7213d0c237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9df82b0-a007-4b6b-957e-7cc2081d4117",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09fa07cd-8037-493d-81d0-0237624b2d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1619281-51e3-4d97-ac49-94c94d6605ea",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b9f94d-d9c1-4b50-bc7d-b571106f915c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c30227-fc37-4ba4-86e4-8273f2b078ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74bbcf6c-d712-4077-9078-1b8f6dfd699d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b46ba01c-3918-4e80-ab2f-36336efba775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e144e1b6-697b-485e-9913-f5b00d0be7c7",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0c6afd-af44-428e-a0bb-8de91ac5f9d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb55bd0-4d22-4ff3-8f0b-3ecf2c397386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a328e38-e726-4c8c-b3bb-95e6f206e2b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a0d3b71-1073-4822-85df-d9999544e1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3827197f-a87f-4a59-8114-db93563dccea",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf32093e-4d00-4101-9544-7f9a1604af14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2536c6f9-ecaa-4621-970d-13cfff0cf524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b91ef070-e09b-41d6-90c3-f9617cccf136",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0754212a-7fa5-42bf-bd13-9c25be7464eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805c6382-8435-44c5-b1bd-cc444852e13f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd770b53-b7f0-4ce7-b697-adbad5197544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "dda976eb-ba85-44c3-afab-78fe676357db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b63b4d6-9d71-4ded-93f8-330c991b862e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "428d76b8-0b0c-4220-8583-ec83da827154"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e307c916-906f-43b3-95f9-fad2a2212cf3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f3c20ad-1543-4360-86b1-3f4962931893",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111c06a0-56b9-42f3-84e0-cdba73e5a3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7eaecfc8-0492-4721-857b-61577ffccf9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f464ee-230e-431e-8d6e-51296c0f9670",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "185f2744-4382-4015-829a-dba71c369203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a120558-30de-46b4-8dad-008498a8dc2a",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3cebcb5-91ee-4eea-8f4d-2f460bf03aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d62abbe-e566-4a56-9ce3-0c8e170448b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d450a30a-2fe5-4e02-ba8b-0eafa1747f9b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "414f37c9-a75c-413a-8795-1f8a3d3e1932"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eca9c482-15f2-4030-a220-deddc4fbde80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e06e05ad-3c85-490f-9513-fff5fafc2575"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e083047-a3c1-436a-8d5d-eedc07aa68d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e60e893-17f7-421f-a710-4e37f677324b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f41201f6-b75e-41a6-bbff-f0fa166c4aeb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c16dbeb5-9e8a-4393-b6a1-0c15a4d35a72"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8ab41b97-6946-413a-8279-af83d768a181",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8d878c9f-1699-492c-aaa9-31355cd4711a"
                }
              }
            ]
          },
          {
            "id": "e738006f-97a0-4f6d-be66-4213e923d0bd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2e18e045-67e0-4a60-9b14-ebaf8ec47110",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "edd6a2c8-a082-4e00-b7bd-945a2b367eec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "030a9ae7-73cd-40a2-93d2-a0043d0a0f28"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2154b77-df09-4962-a1f5-3be59615a33c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "8ca81cf8-4cf0-42e7-b92c-93807c8be480"
                    }
                  }
                ]
              },
              {
                "id": "826efd5b-875e-4c4b-9ec8-2a0780878aaa",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0727e1d-c861-483d-a7c9-d97ab772cf7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b70463d-0070-491d-8ace-20609e372835"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8149f6f4-0aee-4c7e-9324-b4e424c84acf",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "bac4abcd-675d-40a6-8724-b3ab0647726c"
                    }
                  }
                ]
              },
              {
                "id": "e3792ae7-136a-4e74-84a4-6e1f78b310df",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78b3682a-b531-4917-a9a5-c6ead409145a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e03bb0d-c106-41a8-a11f-c1af6d68a051"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "463f4631-1562-4c82-9622-4d0568534aba",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "dd707185-8c47-4953-a9fd-1bc7cbd4af71"
                    }
                  }
                ]
              },
              {
                "id": "08388ce8-9e53-4591-b08a-ac3ab18c45d8",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "82f80090-a18f-4140-895f-05e14ed56970",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8dc68be5-0e6c-4ffd-a86c-22deedf1b9fd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "918a1dca-7bcd-41c5-a5d9-6a8217e36400",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "fcde7dbb-6660-47bb-ad9d-acd7a62424d3"
                    }
                  }
                ]
              },
              {
                "id": "f590c88a-bf48-4e28-8468-e806782acfb1",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6c697a5-8fb5-44c6-85de-7e004adc2b2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "14e2107c-9e07-4649-9967-1b7ba155fb79"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "53cd4c98-009d-4f27-8a55-63aab6badd8a",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e817bdd4-d6c7-4758-b32d-1746b220f7ef"
                    }
                  }
                ]
              },
              {
                "id": "a1d99b80-694e-475a-bf2f-f1ba85035128",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5e9ce63-2c0c-4465-a752-e892da8f84d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "395c837b-aabb-45fb-80a7-da3ef967adaf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8ab35ea-4c3e-4df1-b586-2a6982255cb9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ebc20161-956f-43a6-91a8-ebe66f9972e0"
                    }
                  }
                ]
              },
              {
                "id": "9ae9865a-01d6-491c-adb8-838941410051",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0d166d4-1f91-49d8-b847-07de3bc3b231",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "878c9bce-dc9d-4778-9678-1d5d3836fc33"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a5e3c6d-1f15-4d95-ac80-a0e0a41ba7db",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "26644564-c967-41b0-8b49-d9ddbd6b5c23"
                    }
                  }
                ]
              },
              {
                "id": "01c26496-79ea-404d-9cbf-2da6b771dafa",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f7dd6cc-d1db-4719-95f8-49e72bc44c32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9a2b6b52-d507-4192-b4d4-611b0d8165f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc804ec1-fa34-47db-9fb3-b8ad21da33d9",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ea916c1c-4abd-43b7-bba9-c65c4cccc073"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "11fc44bb-5997-4f27-b6f3-9f94114df519",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9fcc32ce-5f4c-4f48-9bbb-bf636455b979"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fde85383-88a9-4f27-a7ff-0a236dbfe22a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aa8fe180-99d6-4ed3-8a85-9f5d91156089"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "801ef46f-223d-4a18-9d74-3dfae93eecb6",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {",
                "            \"id\": \"{{credential_subject}}\"",
                "        }",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "5bf8b45a-6518-4457-bebd-43bda9a9d97c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "10641310-a776-46a4-88d5-06d77f2ab1aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aa9e052f-84d5-43ec-aaee-275611efb6f8"
            }
          }
        ]
      },
      {
        "id": "87aaef55-3a73-45d6-8c93-8408829849b6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5ba230d1-7242-49ab-bcd3-9e80981c4776",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc363de2-9221-4ea2-93b1-7c46201bd424",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "49bae722-8bd4-463a-bd35-608d52c7dec9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82dc827c-0ea0-441a-a9b8-a08eb7177959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32545a37-b6b3-432d-af66-f03a57e06eb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af34a48-bba5-4d2f-ab7a-b4e15c48f371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d36e86d6-a605-4169-89ec-0514b82d2685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bff18b5-f09f-4df8-af9d-78453532885f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e813f87d-c500-471d-aaba-1b2a472ac5b6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "fc104737-1cc0-40b9-92f4-b1585dab6dbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ad80b9-6927-4e7c-9e7d-7beffb52957f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4b57992-2bfa-4b4b-b2a7-984167c8b6a5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "953704f6-145a-46d9-ad47-99cc0740af96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a233c2c-ee4f-4461-a3b3-54572946bacf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6bd6dcd-b6cd-4988-9256-71ab8fbd8234",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c82d4a9-832f-4789-b1ab-8c2f2fb8f247"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a77b70e4-a857-458a-abb9-0577b25c08d9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "37ffe81b-244e-403e-ad18-8be95bde3764"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "11c738f4-556e-448a-ac90-b644c9eeabad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6db9e9c5-8ad8-444a-9396-33756729c2c8"
            }
          }
        ]
      },
      {
        "id": "303ebf25-6338-411b-8d0a-89ae6d7d4995",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a07399ab-3345-4105-8183-3f73a1f6134f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4421f716-849c-47a5-b2c2-652fa381776f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "85708456-6aeb-4ff5-8592-42ce56e8507b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7542e8af-df51-4cce-aec9-1b712221f94b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90fe8245-b752-476b-81dd-8f98beceb240"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19623fc9-bbdc-4774-922e-45305b6c5c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4accf12-d873-40ef-92fb-e596c36a65c1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7b53952f-95e7-4b78-a28b-d1a8dd47c89e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "332d0592-c191-49ca-a05c-7c28305cfed3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202467b2-2846-4f79-a4b5-702dc998c8ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "8b879a2a-5b56-4ddf-b7a3-c9cbafd386a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85294c03-6099-428e-8f63-cfda75358344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d1df596-3e50-49c3-8df2-399d79079166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500c4d40-b498-4958-811c-92a2c1ec78ba",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e19f776-816f-4064-b4b4-9e492c28c239",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "39420aaf-fcba-4d52-8c76-b3bc0e7f0095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63dcb2dd-6249-4287-b401-f10b310bc88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bebd1e6f-1a14-4172-b4df-f0b01dbf5967"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c5278bb-eadf-4dad-9a16-35477c03dc82",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af1c238f-1bd9-4006-ae61-7b3e55f57527"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d237a0ea-16c8-4244-9bd2-fec87fd105fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "859c9882-841b-4777-88b2-18d00fa6e27d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "adbd9f2e-af6f-4c18-8def-7eb1daf56fe2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "294d9a23-cec9-4264-89eb-c565c2e709c9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7aa8c292-62cb-420a-b00c-bdff721cf83e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "69ab347d-637d-449b-8f58-234c87960cdf"
            }
          }
        ]
      },
      {
        "id": "1baedada-599d-44e3-8585-42eec324f222",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3f275e4c-9135-4c88-b10c-cb8c20eb9037",
            "name": "Negative Testing",
            "item": [
              {
                "id": "94185657-0b04-4b1d-91d1-52c8996b812e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a8021bd9-9353-4053-837c-6b3c6c59d0f1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c33cd4dd-f18d-413d-9279-a310a0b4431f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84c7cd2b-fede-44ef-8381-0736c12f603d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb342b0-dfe1-4b2b-ba11-132ee3d59466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d60347b-f38b-44ed-90ab-d260a6e8520c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23518536-a15f-425c-88a0-02fca6d6f7ba",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d12e250-b6d8-4d80-891d-fd9abbf5527f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "b0d9e5bb-47df-479e-b071-887b3ec2254b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "753b5666-9489-4fe1-8002-f72deabf149b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70a14a93-7d10-4d5f-9009-4343935e8ee7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b31d85f9-6fd7-46a0-8127-cf08160237a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38513651-abf5-4d8d-9ca7-b4f2c4428bf3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fde03c15-d03a-4555-8fd6-d2c4ef432292",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7df087e-f477-48f3-9a7e-097cc57fd61e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d518a39c-0739-49e6-835f-aa0bbe993a05",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "d7423b7a-ed92-4d87-b0e1-b8b0a0a823fb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1790de0-d9f6-42f9-bcdb-cb00a99b7a73",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb0054d9-d556-403b-81c5-5df8d840a938"
            }
          }
        ]
      },
      {
        "id": "5de50233-c520-4014-a7a2-4b2683ffd422",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "92eb67b0-858a-4894-a376-ad442d4e05f3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "746e9ba6-9242-4dcc-9b9d-b08469d01f19",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc318924-e0d5-4881-a08b-ba5664bfbb3e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33df1dad-5ca3-49a2-ba78-b8afdf360391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3626006c-793a-4061-be7d-3026ebc98260"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4702aca4-334b-40c6-85ce-7d3aae6fb6fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b9a0517-a4b8-4689-b415-519dfeda1a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7705ab9d-2680-4e91-99ff-cec3725af931",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56338f64-c130-4f25-a916-62e15bb58952",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0b072296-1b68-4e2c-a86c-ac9a98461745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02f5bde-1863-4417-b141-a2a5b290c014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f38f3a3c-a45f-4981-87ad-4652b1cb1b7d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "091a46f9-c1f5-4c82-bb83-9dd03c78805f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e5475fb-87c7-4a92-858d-58569eaf7974"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fb2056c-dfd9-4459-b1ea-c73b1d85cab7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cbf601a1-b9c8-4128-a1e5-cda67061117c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "472fee3c-e348-46b5-98a5-215147f745fb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "0293e559-64f2-4d47-8c30-50542ad5d4c9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8136fd0e-8b8a-441d-b476-550fb403d299",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b85dcb98-80b7-4aa6-9f06-d9b6b04865c2"
            }
          }
        ]
      },
      {
        "id": "bb956273-9332-4ed1-af9a-c311562117bc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0216d9f8-5628-4e6f-9d17-de93b50ba9b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c186e28f-a4c4-42bf-ad99-ee2a0f175bb6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dc36b80a-ef31-4f9a-b3c3-c9695ff87545",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecfd586-c278-4c8e-a179-513579374887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8108328-8226-41f9-b29d-f0ba66d9ce3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e8914f-2db8-4a3b-8e89-02395a273d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89ecfab7-99d1-4ff7-a66f-6b765de7d5a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7d5c31-b631-40dc-bc3a-e86469ee65c9",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1613963e-8247-4754-b46d-f525c47194cb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "f81cb2a5-b5f2-4f3c-8f86-3d088dfae85c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82223acd-fda4-4d73-8ec8-03d977147fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f7e6fad-31d4-47ed-9f23-900f2f0c4429"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61df8465-5a7b-4266-90ae-e11575b6eada",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a046cfea-fc9c-4050-a70c-8e7a454c9bb3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a4daf98-5efb-4f13-801e-3fa6d26ef0e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "237c0a8c-a733-416d-b9bc-0be0da5c97bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "823bae08-b005-426e-8489-36335536da2f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "265bb30c-70d1-448a-8b79-f69e09805d96"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "adc855a3-d0d0-4d4f-8d96-dd83b7bc62f8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "feefd6eb-d3c4-4b60-ae1c-2e06c3940fdd"
            }
          }
        ]
      },
      {
        "id": "c5218c28-8d5d-478f-8576-99e3e5a83287",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "850fc59e-ea34-41a3-948b-a61131e91fa8",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 453,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 108,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 123,
        "pending": 0,
        "failed": 16
      },
      "testScripts": {
        "total": 229,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 224,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 50.111111111111114,
      "responseMin": 10,
      "responseMax": 317,
      "responseSd": 86.57017420410097,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662511991407,
      "completed": 1662512000027
    },
    "executions": [
      {
        "id": "8eff4f4d-7d8c-4083-8ca0-0d5d3c2e3a6e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 59,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "576c57d5-4d96-4e6b-9c35-bb8fc3cdb971",
          "httpRequestId": "afac468a-4c25-4309-9de4-3dc8830ff311"
        },
        "item": {
          "id": "8eff4f4d-7d8c-4083-8ca0-0d5d3c2e3a6e",
          "name": "did_json"
        },
        "response": {
          "id": "3c6e0a3c-67cf-4ba0-a1cc-7d855387a361",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 1002
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7fd5d03-6fd3-43e1-b1a5-da5b5f144a54",
        "cursor": {
          "ref": "3a08d76d-6093-4ed7-b99e-358f3036c520",
          "length": 59,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "546e853c-6805-42b7-a9e4-ec78f6b0c637"
        },
        "item": {
          "id": "e7fd5d03-6fd3-43e1-b1a5-da5b5f144a54",
          "name": "did:invalid"
        },
        "response": {
          "id": "ec7e5f2e-581c-4a82-a12a-f1f443575bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7fd5d03-6fd3-43e1-b1a5-da5b5f144a54",
        "cursor": {
          "ref": "3a08d76d-6093-4ed7-b99e-358f3036c520",
          "length": 59,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "546e853c-6805-42b7-a9e4-ec78f6b0c637"
        },
        "item": {
          "id": "e7fd5d03-6fd3-43e1-b1a5-da5b5f144a54",
          "name": "did:invalid"
        },
        "response": {
          "id": "ec7e5f2e-581c-4a82-a12a-f1f443575bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d3c22c-5110-45f4-a661-21ac2c6ddc55",
        "cursor": {
          "ref": "bf465d6a-ecb0-469b-ac31-457752d2f2da",
          "length": 59,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "428e09b7-b227-426a-9927-c575e3812575"
        },
        "item": {
          "id": "73d3c22c-5110-45f4-a661-21ac2c6ddc55",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1e0b4d2b-812f-4c04-ac77-77e25a92b783",
          "status": "Not Found",
          "code": 404,
          "responseTime": 60,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb7873a-dc38-4c31-ad72-98f95824c5f0",
        "cursor": {
          "ref": "10099c14-f08a-4e9f-824b-2029fcef84b3",
          "length": 59,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "663775d2-ab80-4944-9cf7-7aa4eac7a660"
        },
        "item": {
          "id": "5eb7873a-dc38-4c31-ad72-98f95824c5f0",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8b48eee4-c460-430b-a6ac-88f52a2e1922",
          "status": "Not Found",
          "code": 404,
          "responseTime": 12,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09b77f4-e55c-455f-a499-31a6b0b0b60a",
        "cursor": {
          "ref": "48e22338-ac32-4cc3-8db9-65e0f7a4420f",
          "length": 59,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "18e0e90e-0658-4c5e-b54e-75cf9240d66f"
        },
        "item": {
          "id": "c09b77f4-e55c-455f-a499-31a6b0b0b60a",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5374df6a-473f-4033-bec8-a55aeffb06d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "811bb615-8f00-4b13-be08-cd2996e9268b",
        "cursor": {
          "ref": "fdb6d78e-674c-4a79-9f74-19a77df7cd70",
          "length": 59,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1b99f035-578c-45d1-a27b-af056144755a"
        },
        "item": {
          "id": "811bb615-8f00-4b13-be08-cd2996e9268b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4b57956e-2fee-4dee-a379-f8877b9cc799",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 12,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "811bb615-8f00-4b13-be08-cd2996e9268b",
        "cursor": {
          "ref": "fdb6d78e-674c-4a79-9f74-19a77df7cd70",
          "length": 59,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1b99f035-578c-45d1-a27b-af056144755a"
        },
        "item": {
          "id": "811bb615-8f00-4b13-be08-cd2996e9268b",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "4b57956e-2fee-4dee-a379-f8877b9cc799",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 12,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc045682-4086-4c73-a06e-21d5dc64d29a",
        "cursor": {
          "ref": "58f6344c-1552-4ceb-ab03-a723e8c9f4c8",
          "length": 59,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "85bd0d1b-c1d2-428d-a2e3-39259755c24f"
        },
        "item": {
          "id": "fc045682-4086-4c73-a06e-21d5dc64d29a",
          "name": "identifiers"
        },
        "response": {
          "id": "94b5cb15-c832-47f4-9c47-82ffa1234734",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 1018
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f99fdd-3abc-4ab3-8aab-31b75e4f46ca",
        "cursor": {
          "ref": "5f1511fd-cf5c-4f9c-af5a-9da672f4ef9a",
          "length": 59,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f67407c5-cc7c-41ba-9762-dff3a3d0c92f"
        },
        "item": {
          "id": "13f99fdd-3abc-4ab3-8aab-31b75e4f46ca",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a218bf42-6141-4b92-a00a-796a62ead2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f99fdd-3abc-4ab3-8aab-31b75e4f46ca",
        "cursor": {
          "ref": "5f1511fd-cf5c-4f9c-af5a-9da672f4ef9a",
          "length": 59,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f67407c5-cc7c-41ba-9762-dff3a3d0c92f"
        },
        "item": {
          "id": "13f99fdd-3abc-4ab3-8aab-31b75e4f46ca",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a218bf42-6141-4b92-a00a-796a62ead2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13f99fdd-3abc-4ab3-8aab-31b75e4f46ca",
        "cursor": {
          "ref": "5f1511fd-cf5c-4f9c-af5a-9da672f4ef9a",
          "length": 59,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f67407c5-cc7c-41ba-9762-dff3a3d0c92f"
        },
        "item": {
          "id": "13f99fdd-3abc-4ab3-8aab-31b75e4f46ca",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a218bf42-6141-4b92-a00a-796a62ead2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c1a190-6f46-4490-9039-37c1d43d21c6",
        "cursor": {
          "ref": "503a92c6-aa6a-4f35-8d8a-34a1d075d4c3",
          "length": 59,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0983449d-d4ca-4d06-975a-d040e2cfaba2"
        },
        "item": {
          "id": "f5c1a190-6f46-4490-9039-37c1d43d21c6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "869b139f-d674-4ab4-8991-42f1d7d823e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c1a190-6f46-4490-9039-37c1d43d21c6",
        "cursor": {
          "ref": "503a92c6-aa6a-4f35-8d8a-34a1d075d4c3",
          "length": 59,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0983449d-d4ca-4d06-975a-d040e2cfaba2"
        },
        "item": {
          "id": "f5c1a190-6f46-4490-9039-37c1d43d21c6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "869b139f-d674-4ab4-8991-42f1d7d823e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6413d3-20f8-4ce2-bda0-e79847a0e90e",
        "cursor": {
          "ref": "6f8ef2be-c9a0-4b31-b105-da1a27f625d0",
          "length": 59,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "22a3a973-656a-4038-a501-1654b2092c8c"
        },
        "item": {
          "id": "9a6413d3-20f8-4ce2-bda0-e79847a0e90e",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "6d09a0ae-5607-4543-a383-957dbf064639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6413d3-20f8-4ce2-bda0-e79847a0e90e",
        "cursor": {
          "ref": "6f8ef2be-c9a0-4b31-b105-da1a27f625d0",
          "length": 59,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "22a3a973-656a-4038-a501-1654b2092c8c"
        },
        "item": {
          "id": "9a6413d3-20f8-4ce2-bda0-e79847a0e90e",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "6d09a0ae-5607-4543-a383-957dbf064639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8082a250-fb2a-4c29-a470-67f7595b32e1",
        "cursor": {
          "ref": "8f84e0e5-ce85-4e28-b334-b538532b54ee",
          "length": 59,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "498b8454-3e6d-47d2-9226-85254b4bb2a7"
        },
        "item": {
          "id": "8082a250-fb2a-4c29-a470-67f7595b32e1",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "090a71dc-40d6-4d4d-949c-21c764fff3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8082a250-fb2a-4c29-a470-67f7595b32e1",
        "cursor": {
          "ref": "8f84e0e5-ce85-4e28-b334-b538532b54ee",
          "length": 59,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "498b8454-3e6d-47d2-9226-85254b4bb2a7"
        },
        "item": {
          "id": "8082a250-fb2a-4c29-a470-67f7595b32e1",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "090a71dc-40d6-4d4d-949c-21c764fff3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89d1ed9-043c-4962-9ca5-1a4ee9deb7a8",
        "cursor": {
          "ref": "10f23633-f4d2-4e47-baed-1e3d291fcae2",
          "length": 59,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3811a8cf-0a3a-4226-a4f0-ba4066e6bc7a"
        },
        "item": {
          "id": "b89d1ed9-043c-4962-9ca5-1a4ee9deb7a8",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "80487210-1ce8-4d22-96ca-5c4634da87ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89d1ed9-043c-4962-9ca5-1a4ee9deb7a8",
        "cursor": {
          "ref": "10f23633-f4d2-4e47-baed-1e3d291fcae2",
          "length": 59,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3811a8cf-0a3a-4226-a4f0-ba4066e6bc7a"
        },
        "item": {
          "id": "b89d1ed9-043c-4962-9ca5-1a4ee9deb7a8",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "80487210-1ce8-4d22-96ca-5c4634da87ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60568d96-3e01-4ca8-a061-8d4d3e355923",
        "cursor": {
          "ref": "a7beefa4-89d3-44b4-9541-5123d4fa0f2d",
          "length": 59,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cf95e5d0-b55c-4304-a3cf-27a115a77ee1"
        },
        "item": {
          "id": "60568d96-3e01-4ca8-a061-8d4d3e355923",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0c5211f3-f627-4126-ac0d-adf97ca009cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60568d96-3e01-4ca8-a061-8d4d3e355923",
        "cursor": {
          "ref": "a7beefa4-89d3-44b4-9541-5123d4fa0f2d",
          "length": 59,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cf95e5d0-b55c-4304-a3cf-27a115a77ee1"
        },
        "item": {
          "id": "60568d96-3e01-4ca8-a061-8d4d3e355923",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0c5211f3-f627-4126-ac0d-adf97ca009cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a962def4-4376-494f-9eac-7c45b1f52cd7",
        "cursor": {
          "ref": "f9e0c806-43de-43ba-9156-460f07492bb0",
          "length": 59,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ad8b41f9-9c02-4395-ba3f-b7882fe5ca72"
        },
        "item": {
          "id": "a962def4-4376-494f-9eac-7c45b1f52cd7",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "60392ada-7bff-4f67-b557-3619d11cad5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a962def4-4376-494f-9eac-7c45b1f52cd7",
        "cursor": {
          "ref": "f9e0c806-43de-43ba-9156-460f07492bb0",
          "length": 59,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ad8b41f9-9c02-4395-ba3f-b7882fe5ca72"
        },
        "item": {
          "id": "a962def4-4376-494f-9eac-7c45b1f52cd7",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "60392ada-7bff-4f67-b557-3619d11cad5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce704d15-fd18-4ced-bb1c-d790bc9ba1d0",
        "cursor": {
          "ref": "8da46e7f-8466-4f14-8041-83dd12ab7b66",
          "length": 59,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1dcf57f9-7b27-4a16-ae89-448bd8ba5e5d"
        },
        "item": {
          "id": "ce704d15-fd18-4ced-bb1c-d790bc9ba1d0",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "aec7b532-3b33-4c14-aebd-63d695ec881a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce704d15-fd18-4ced-bb1c-d790bc9ba1d0",
        "cursor": {
          "ref": "8da46e7f-8466-4f14-8041-83dd12ab7b66",
          "length": 59,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1dcf57f9-7b27-4a16-ae89-448bd8ba5e5d"
        },
        "item": {
          "id": "ce704d15-fd18-4ced-bb1c-d790bc9ba1d0",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "aec7b532-3b33-4c14-aebd-63d695ec881a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa518bd0-46a1-4c78-85f5-e8a7da343a05",
        "cursor": {
          "ref": "6ab79c9e-9150-417c-ba7a-0cbbe70add39",
          "length": 59,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8a095b3f-cb40-4aa9-8796-2778b745b334"
        },
        "item": {
          "id": "aa518bd0-46a1-4c78-85f5-e8a7da343a05",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5bdf86b5-3125-4811-88fe-8dc332e90ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa518bd0-46a1-4c78-85f5-e8a7da343a05",
        "cursor": {
          "ref": "6ab79c9e-9150-417c-ba7a-0cbbe70add39",
          "length": 59,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8a095b3f-cb40-4aa9-8796-2778b745b334"
        },
        "item": {
          "id": "aa518bd0-46a1-4c78-85f5-e8a7da343a05",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5bdf86b5-3125-4811-88fe-8dc332e90ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5aad3bd-49b6-44af-b563-64062249b8e0",
        "cursor": {
          "ref": "6f316a5d-700f-4c85-890f-65b754ccc797",
          "length": 59,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b9d51880-b68c-4370-b885-220036c4432d"
        },
        "item": {
          "id": "d5aad3bd-49b6-44af-b563-64062249b8e0",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "6041f9a4-6872-4fff-8452-20e49072a462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5aad3bd-49b6-44af-b563-64062249b8e0",
        "cursor": {
          "ref": "6f316a5d-700f-4c85-890f-65b754ccc797",
          "length": 59,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "b9d51880-b68c-4370-b885-220036c4432d"
        },
        "item": {
          "id": "d5aad3bd-49b6-44af-b563-64062249b8e0",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "6041f9a4-6872-4fff-8452-20e49072a462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68097fc0-a760-44f5-a0b3-f8286c18a0d5",
        "cursor": {
          "ref": "7c63ed28-4a6e-48ae-90b8-31266d3ef19e",
          "length": 59,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fa14cc75-3ac3-46a9-985f-0dc0cda84139"
        },
        "item": {
          "id": "68097fc0-a760-44f5-a0b3-f8286c18a0d5",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "337b18e6-5228-48e7-9acf-673c37943233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68097fc0-a760-44f5-a0b3-f8286c18a0d5",
        "cursor": {
          "ref": "7c63ed28-4a6e-48ae-90b8-31266d3ef19e",
          "length": 59,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fa14cc75-3ac3-46a9-985f-0dc0cda84139"
        },
        "item": {
          "id": "68097fc0-a760-44f5-a0b3-f8286c18a0d5",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "337b18e6-5228-48e7-9acf-673c37943233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583712db-bd20-4c9a-afbd-fa46451839b1",
        "cursor": {
          "ref": "b9a525d8-3814-4862-bc03-0d241b054758",
          "length": 59,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2e2299f0-490b-4e2b-b997-4c9d82a17a1e"
        },
        "item": {
          "id": "583712db-bd20-4c9a-afbd-fa46451839b1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a11d46bf-d2ae-40c3-a19f-098d55fa771a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583712db-bd20-4c9a-afbd-fa46451839b1",
        "cursor": {
          "ref": "b9a525d8-3814-4862-bc03-0d241b054758",
          "length": 59,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2e2299f0-490b-4e2b-b997-4c9d82a17a1e"
        },
        "item": {
          "id": "583712db-bd20-4c9a-afbd-fa46451839b1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a11d46bf-d2ae-40c3-a19f-098d55fa771a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8adb5680-05d1-4718-90ca-3cab6528d4f0",
        "cursor": {
          "ref": "d0b3e361-ab8c-4a15-befc-321377cdcfee",
          "length": 59,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f0cf64d6-5a0b-48c3-819b-b26a87167256"
        },
        "item": {
          "id": "8adb5680-05d1-4718-90ca-3cab6528d4f0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c1145cb4-1282-4876-93fd-3abea73c5e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8adb5680-05d1-4718-90ca-3cab6528d4f0",
        "cursor": {
          "ref": "d0b3e361-ab8c-4a15-befc-321377cdcfee",
          "length": 59,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f0cf64d6-5a0b-48c3-819b-b26a87167256"
        },
        "item": {
          "id": "8adb5680-05d1-4718-90ca-3cab6528d4f0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c1145cb4-1282-4876-93fd-3abea73c5e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600dee80-baf8-4fce-b01c-c3b2cd75f405",
        "cursor": {
          "ref": "5873bb4f-7e0f-4757-a2a4-35af02cc875c",
          "length": 59,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "087e9fb9-4095-47bb-b3ac-02d69ada1437"
        },
        "item": {
          "id": "600dee80-baf8-4fce-b01c-c3b2cd75f405",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "8d64da18-bc56-4bb6-b68c-2620a74732ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600dee80-baf8-4fce-b01c-c3b2cd75f405",
        "cursor": {
          "ref": "5873bb4f-7e0f-4757-a2a4-35af02cc875c",
          "length": 59,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "087e9fb9-4095-47bb-b3ac-02d69ada1437"
        },
        "item": {
          "id": "600dee80-baf8-4fce-b01c-c3b2cd75f405",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "8d64da18-bc56-4bb6-b68c-2620a74732ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966ba48c-1ae6-4c2c-ae58-1cc34cdeb895",
        "cursor": {
          "ref": "768bd551-b463-4585-b624-412af42f0db5",
          "length": 59,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8d7cbb6a-aec5-4b5e-927c-f0d18e6c6095"
        },
        "item": {
          "id": "966ba48c-1ae6-4c2c-ae58-1cc34cdeb895",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "d8869ab7-c904-4787-bcac-1ba13929033e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966ba48c-1ae6-4c2c-ae58-1cc34cdeb895",
        "cursor": {
          "ref": "768bd551-b463-4585-b624-412af42f0db5",
          "length": 59,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8d7cbb6a-aec5-4b5e-927c-f0d18e6c6095"
        },
        "item": {
          "id": "966ba48c-1ae6-4c2c-ae58-1cc34cdeb895",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "d8869ab7-c904-4787-bcac-1ba13929033e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160b0174-6dc1-401a-a230-350fb313ff71",
        "cursor": {
          "ref": "156e467b-b65c-41ed-827a-8d490178c05f",
          "length": 59,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "eedbb57f-61cf-4b7b-bbea-eb5f29619a54"
        },
        "item": {
          "id": "160b0174-6dc1-401a-a230-350fb313ff71",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bc88c3d6-d1fc-42fa-9211-b8473c878044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160b0174-6dc1-401a-a230-350fb313ff71",
        "cursor": {
          "ref": "156e467b-b65c-41ed-827a-8d490178c05f",
          "length": 59,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "eedbb57f-61cf-4b7b-bbea-eb5f29619a54"
        },
        "item": {
          "id": "160b0174-6dc1-401a-a230-350fb313ff71",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bc88c3d6-d1fc-42fa-9211-b8473c878044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0689fa94-72f5-4456-9e69-9d22ef916836",
        "cursor": {
          "ref": "376cff29-4195-4e8e-8812-6eaae9466195",
          "length": 59,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "46fcd504-f0f8-46ae-a720-c09c16aa846d"
        },
        "item": {
          "id": "0689fa94-72f5-4456-9e69-9d22ef916836",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8eedf6c8-ed60-41cc-86ba-2a82e5afaa20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0689fa94-72f5-4456-9e69-9d22ef916836",
        "cursor": {
          "ref": "376cff29-4195-4e8e-8812-6eaae9466195",
          "length": 59,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "46fcd504-f0f8-46ae-a720-c09c16aa846d"
        },
        "item": {
          "id": "0689fa94-72f5-4456-9e69-9d22ef916836",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8eedf6c8-ed60-41cc-86ba-2a82e5afaa20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46adeeb-094d-4adc-9cbf-e592cb106a0d",
        "cursor": {
          "ref": "38806089-6a83-4054-9c28-95b9a29685a6",
          "length": 59,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4dea693c-25bd-48a4-aca2-c6accfeb7abc"
        },
        "item": {
          "id": "f46adeeb-094d-4adc-9cbf-e592cb106a0d",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "bc3e7aa9-838d-4c7b-903c-d201d16392d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46adeeb-094d-4adc-9cbf-e592cb106a0d",
        "cursor": {
          "ref": "38806089-6a83-4054-9c28-95b9a29685a6",
          "length": 59,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4dea693c-25bd-48a4-aca2-c6accfeb7abc"
        },
        "item": {
          "id": "f46adeeb-094d-4adc-9cbf-e592cb106a0d",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "bc3e7aa9-838d-4c7b-903c-d201d16392d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b10dad-8e86-41e7-a99c-86126eb5bacf",
        "cursor": {
          "ref": "0637d45b-c74e-4381-80c7-aba1a3769bbf",
          "length": 59,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "15a5fff7-9862-4bb6-a0d4-fa3041f96fab"
        },
        "item": {
          "id": "33b10dad-8e86-41e7-a99c-86126eb5bacf",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "213907c7-8cd5-4e49-9637-3a703aa2ee64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b10dad-8e86-41e7-a99c-86126eb5bacf",
        "cursor": {
          "ref": "0637d45b-c74e-4381-80c7-aba1a3769bbf",
          "length": 59,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "15a5fff7-9862-4bb6-a0d4-fa3041f96fab"
        },
        "item": {
          "id": "33b10dad-8e86-41e7-a99c-86126eb5bacf",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "213907c7-8cd5-4e49-9637-3a703aa2ee64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e7f818-9de0-47a7-b645-585089ca1f35",
        "cursor": {
          "ref": "32f2bb63-6837-447b-86a5-75e223500008",
          "length": 59,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "17872df9-a91d-4390-9bfe-b19a5294ab60"
        },
        "item": {
          "id": "33e7f818-9de0-47a7-b645-585089ca1f35",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "89fda0ca-669a-451e-af60-becd2257bbe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e7f818-9de0-47a7-b645-585089ca1f35",
        "cursor": {
          "ref": "32f2bb63-6837-447b-86a5-75e223500008",
          "length": 59,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "17872df9-a91d-4390-9bfe-b19a5294ab60"
        },
        "item": {
          "id": "33e7f818-9de0-47a7-b645-585089ca1f35",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "89fda0ca-669a-451e-af60-becd2257bbe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ee44c1-c06c-4754-a82d-1580fa954cd5",
        "cursor": {
          "ref": "252dee41-eacc-4c37-b824-4d04f48f815e",
          "length": 59,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d29ecaa1-b7c7-4944-882e-efa5d4c16c20"
        },
        "item": {
          "id": "15ee44c1-c06c-4754-a82d-1580fa954cd5",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "a1c7436e-342d-4634-a627-fdcff02a1906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ee44c1-c06c-4754-a82d-1580fa954cd5",
        "cursor": {
          "ref": "252dee41-eacc-4c37-b824-4d04f48f815e",
          "length": 59,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d29ecaa1-b7c7-4944-882e-efa5d4c16c20"
        },
        "item": {
          "id": "15ee44c1-c06c-4754-a82d-1580fa954cd5",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "a1c7436e-342d-4634-a627-fdcff02a1906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35b7620-0cde-41a5-a70b-41a4cbe2f6ab",
        "cursor": {
          "ref": "91052c3d-4cb1-4917-b515-b8b1d7e60ddd",
          "length": 59,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d676304b-113f-477b-9151-18fe21277840"
        },
        "item": {
          "id": "d35b7620-0cde-41a5-a70b-41a4cbe2f6ab",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "4c5ea729-8976-4f10-add5-b71778a3339d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35b7620-0cde-41a5-a70b-41a4cbe2f6ab",
        "cursor": {
          "ref": "91052c3d-4cb1-4917-b515-b8b1d7e60ddd",
          "length": 59,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d676304b-113f-477b-9151-18fe21277840"
        },
        "item": {
          "id": "d35b7620-0cde-41a5-a70b-41a4cbe2f6ab",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "4c5ea729-8976-4f10-add5-b71778a3339d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c079cf9e-0738-4b3a-80e3-a2a65b095726",
        "cursor": {
          "ref": "68323962-e3cc-4884-b86f-5f6d44b9e239",
          "length": 59,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bc03f8e6-84d3-4e17-843b-f9491b4e3ecc"
        },
        "item": {
          "id": "c079cf9e-0738-4b3a-80e3-a2a65b095726",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "648126c1-eb3c-4048-8e59-441db189eac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c079cf9e-0738-4b3a-80e3-a2a65b095726",
        "cursor": {
          "ref": "68323962-e3cc-4884-b86f-5f6d44b9e239",
          "length": 59,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bc03f8e6-84d3-4e17-843b-f9491b4e3ecc"
        },
        "item": {
          "id": "c079cf9e-0738-4b3a-80e3-a2a65b095726",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "648126c1-eb3c-4048-8e59-441db189eac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b27ce14-d190-49dd-ba1b-cbd09d08c640",
        "cursor": {
          "ref": "af978152-cb0a-4ebe-9514-3ef61897155e",
          "length": 59,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "cab47e7c-f5d5-4332-8687-3a8a83f64dba"
        },
        "item": {
          "id": "4b27ce14-d190-49dd-ba1b-cbd09d08c640",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "7ec77d38-c1e7-40bf-b214-7b59542b9710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b27ce14-d190-49dd-ba1b-cbd09d08c640",
        "cursor": {
          "ref": "af978152-cb0a-4ebe-9514-3ef61897155e",
          "length": 59,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "cab47e7c-f5d5-4332-8687-3a8a83f64dba"
        },
        "item": {
          "id": "4b27ce14-d190-49dd-ba1b-cbd09d08c640",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "7ec77d38-c1e7-40bf-b214-7b59542b9710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dafebde1-f406-4976-9160-0694f61924a1",
        "cursor": {
          "ref": "069192e4-7b5b-46b8-8d96-a76746b1b1d6",
          "length": 59,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9c13bb20-02f5-4c47-8a0f-15a673a72389"
        },
        "item": {
          "id": "dafebde1-f406-4976-9160-0694f61924a1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "289c636d-43f5-4395-8334-45e9a98cc4b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dafebde1-f406-4976-9160-0694f61924a1",
        "cursor": {
          "ref": "069192e4-7b5b-46b8-8d96-a76746b1b1d6",
          "length": 59,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9c13bb20-02f5-4c47-8a0f-15a673a72389"
        },
        "item": {
          "id": "dafebde1-f406-4976-9160-0694f61924a1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "289c636d-43f5-4395-8334-45e9a98cc4b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22115bd6-b2ed-44fc-895e-287841c776bd",
        "cursor": {
          "ref": "17401b78-019d-4b46-95c3-6f945a43db79",
          "length": 59,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6e0ce595-370b-4f42-ac80-25e150b3e662"
        },
        "item": {
          "id": "22115bd6-b2ed-44fc-895e-287841c776bd",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "2b14b8a5-3b5a-4c1a-8c58-b2ff448ff910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22115bd6-b2ed-44fc-895e-287841c776bd",
        "cursor": {
          "ref": "17401b78-019d-4b46-95c3-6f945a43db79",
          "length": 59,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6e0ce595-370b-4f42-ac80-25e150b3e662"
        },
        "item": {
          "id": "22115bd6-b2ed-44fc-895e-287841c776bd",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "2b14b8a5-3b5a-4c1a-8c58-b2ff448ff910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0507b5f9-03fe-4e6e-bdae-954639625499",
        "cursor": {
          "ref": "128d0244-4aaf-416e-847e-9e2187caa1bf",
          "length": 59,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ce1f1335-5e03-4966-b4fa-edbf551bd01c"
        },
        "item": {
          "id": "0507b5f9-03fe-4e6e-bdae-954639625499",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "10fa99a2-6707-4abc-95c3-963eb2234771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0507b5f9-03fe-4e6e-bdae-954639625499",
        "cursor": {
          "ref": "128d0244-4aaf-416e-847e-9e2187caa1bf",
          "length": 59,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ce1f1335-5e03-4966-b4fa-edbf551bd01c"
        },
        "item": {
          "id": "0507b5f9-03fe-4e6e-bdae-954639625499",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "10fa99a2-6707-4abc-95c3-963eb2234771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1619281-51e3-4d97-ac49-94c94d6605ea",
        "cursor": {
          "ref": "87c5d425-c7e1-4a1f-96b1-588ff9d9de5c",
          "length": 59,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "187ff855-7758-4f87-a777-0834ea4486d5"
        },
        "item": {
          "id": "a1619281-51e3-4d97-ac49-94c94d6605ea",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "7c853018-2d95-4769-96db-feb499704676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1619281-51e3-4d97-ac49-94c94d6605ea",
        "cursor": {
          "ref": "87c5d425-c7e1-4a1f-96b1-588ff9d9de5c",
          "length": 59,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "187ff855-7758-4f87-a777-0834ea4486d5"
        },
        "item": {
          "id": "a1619281-51e3-4d97-ac49-94c94d6605ea",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "7c853018-2d95-4769-96db-feb499704676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 347
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e144e1b6-697b-485e-9913-f5b00d0be7c7",
        "cursor": {
          "ref": "66358e98-33c8-4466-bbc6-876f2afd337d",
          "length": 59,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "54fc46ae-f57c-4cac-aa91-959f11f42dd0"
        },
        "item": {
          "id": "e144e1b6-697b-485e-9913-f5b00d0be7c7",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "5a6be61b-9b84-4dea-860c-050ec72b813a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 392
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e144e1b6-697b-485e-9913-f5b00d0be7c7",
        "cursor": {
          "ref": "66358e98-33c8-4466-bbc6-876f2afd337d",
          "length": 59,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "54fc46ae-f57c-4cac-aa91-959f11f42dd0"
        },
        "item": {
          "id": "e144e1b6-697b-485e-9913-f5b00d0be7c7",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "5a6be61b-9b84-4dea-860c-050ec72b813a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 392
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3827197f-a87f-4a59-8114-db93563dccea",
        "cursor": {
          "ref": "4d3e6fca-88ff-4400-8e02-b00212d2c865",
          "length": 59,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "eace24c3-57f7-4633-a535-892dd5deccf0"
        },
        "item": {
          "id": "3827197f-a87f-4a59-8114-db93563dccea",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "741bbb2d-c406-45c5-a908-d7d4211e5e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3827197f-a87f-4a59-8114-db93563dccea",
        "cursor": {
          "ref": "4d3e6fca-88ff-4400-8e02-b00212d2c865",
          "length": 59,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "eace24c3-57f7-4633-a535-892dd5deccf0"
        },
        "item": {
          "id": "3827197f-a87f-4a59-8114-db93563dccea",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "741bbb2d-c406-45c5-a908-d7d4211e5e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805c6382-8435-44c5-b1bd-cc444852e13f",
        "cursor": {
          "ref": "5b8e8271-bf91-4e6d-8beb-270147efc494",
          "length": 59,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6d7df502-a215-40f2-84d8-dc7fffd5ca57"
        },
        "item": {
          "id": "805c6382-8435-44c5-b1bd-cc444852e13f",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "e1daba16-3b44-47e7-8d79-bb3d4d9a281d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805c6382-8435-44c5-b1bd-cc444852e13f",
        "cursor": {
          "ref": "5b8e8271-bf91-4e6d-8beb-270147efc494",
          "length": 59,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6d7df502-a215-40f2-84d8-dc7fffd5ca57"
        },
        "item": {
          "id": "805c6382-8435-44c5-b1bd-cc444852e13f",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "e1daba16-3b44-47e7-8d79-bb3d4d9a281d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3c20ad-1543-4360-86b1-3f4962931893",
        "cursor": {
          "ref": "3ac9abbe-27ab-4496-b232-177e1ba722dc",
          "length": 59,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "564731d9-3574-4ab4-8333-79310b0c8b46"
        },
        "item": {
          "id": "4f3c20ad-1543-4360-86b1-3f4962931893",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "34486286-e5af-4056-b0b5-4744c3a16f7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3c20ad-1543-4360-86b1-3f4962931893",
        "cursor": {
          "ref": "3ac9abbe-27ab-4496-b232-177e1ba722dc",
          "length": 59,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "564731d9-3574-4ab4-8333-79310b0c8b46"
        },
        "item": {
          "id": "4f3c20ad-1543-4360-86b1-3f4962931893",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "34486286-e5af-4056-b0b5-4744c3a16f7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a120558-30de-46b4-8dad-008498a8dc2a",
        "cursor": {
          "ref": "90395441-35b4-4419-8db0-057770f677c5",
          "length": 59,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b695dcde-06f3-4701-97af-4c3a5e825816"
        },
        "item": {
          "id": "8a120558-30de-46b4-8dad-008498a8dc2a",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "788c8e0e-eb3b-4aea-b5a9-1a058b074cd8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a120558-30de-46b4-8dad-008498a8dc2a",
        "cursor": {
          "ref": "90395441-35b4-4419-8db0-057770f677c5",
          "length": 59,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b695dcde-06f3-4701-97af-4c3a5e825816"
        },
        "item": {
          "id": "8a120558-30de-46b4-8dad-008498a8dc2a",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "788c8e0e-eb3b-4aea-b5a9-1a058b074cd8",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e18e045-67e0-4a60-9b14-ebaf8ec47110",
        "cursor": {
          "ref": "c77641fc-a804-4b23-a19c-4e652556517c",
          "length": 59,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fb35c5ec-8746-4f5b-b810-ce4e7146d9ec"
        },
        "item": {
          "id": "2e18e045-67e0-4a60-9b14-ebaf8ec47110",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c04538cc-18c3-4281-8ec6-3a49410d2310",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected { id: 'did:example:123' } to equal 'did:example:123'",
              "stack": "AssertionError: expected { id: 'did:example:123' } to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e18e045-67e0-4a60-9b14-ebaf8ec47110",
        "cursor": {
          "ref": "c77641fc-a804-4b23-a19c-4e652556517c",
          "length": 59,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fb35c5ec-8746-4f5b-b810-ce4e7146d9ec"
        },
        "item": {
          "id": "2e18e045-67e0-4a60-9b14-ebaf8ec47110",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c04538cc-18c3-4281-8ec6-3a49410d2310",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected { id: 'did:example:123' } to equal 'did:example:123'",
              "stack": "AssertionError: expected { id: 'did:example:123' } to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "826efd5b-875e-4c4b-9ec8-2a0780878aaa",
        "cursor": {
          "ref": "b5846f1d-7ec5-472a-8276-7b64b3780422",
          "length": 59,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2dee1114-64bb-48c0-a633-166af26abc05"
        },
        "item": {
          "id": "826efd5b-875e-4c4b-9ec8-2a0780878aaa",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "2f704163-55a3-48e9-9cd5-47c915ecc979",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "826efd5b-875e-4c4b-9ec8-2a0780878aaa",
        "cursor": {
          "ref": "b5846f1d-7ec5-472a-8276-7b64b3780422",
          "length": 59,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2dee1114-64bb-48c0-a633-166af26abc05"
        },
        "item": {
          "id": "826efd5b-875e-4c4b-9ec8-2a0780878aaa",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "2f704163-55a3-48e9-9cd5-47c915ecc979",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "e3792ae7-136a-4e74-84a4-6e1f78b310df",
        "cursor": {
          "ref": "eb1f9eae-6027-4809-9f12-9cc62ee57bea",
          "length": 59,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5dcc3c03-b122-4d5b-a63e-7ebed1db6638"
        },
        "item": {
          "id": "e3792ae7-136a-4e74-84a4-6e1f78b310df",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9078aabc-4f69-4b9e-85ea-eaa95e9d8ca3",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3792ae7-136a-4e74-84a4-6e1f78b310df",
        "cursor": {
          "ref": "eb1f9eae-6027-4809-9f12-9cc62ee57bea",
          "length": 59,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5dcc3c03-b122-4d5b-a63e-7ebed1db6638"
        },
        "item": {
          "id": "e3792ae7-136a-4e74-84a4-6e1f78b310df",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9078aabc-4f69-4b9e-85ea-eaa95e9d8ca3",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "08388ce8-9e53-4591-b08a-ac3ab18c45d8",
        "cursor": {
          "ref": "59c3e605-1c3a-427d-8d11-9fd32e1a02ee",
          "length": 59,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "aa22d40d-a4f3-4a44-8779-5fc4242edb09"
        },
        "item": {
          "id": "08388ce8-9e53-4591-b08a-ac3ab18c45d8",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "9cd2c523-2bdc-48cb-a219-2a7cad1b549e",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "08388ce8-9e53-4591-b08a-ac3ab18c45d8",
        "cursor": {
          "ref": "59c3e605-1c3a-427d-8d11-9fd32e1a02ee",
          "length": 59,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "aa22d40d-a4f3-4a44-8779-5fc4242edb09"
        },
        "item": {
          "id": "08388ce8-9e53-4591-b08a-ac3ab18c45d8",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "9cd2c523-2bdc-48cb-a219-2a7cad1b549e",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f590c88a-bf48-4e28-8468-e806782acfb1",
        "cursor": {
          "ref": "e4618d5d-f6ed-4911-8cf1-ebdb405d8288",
          "length": 59,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "054ab3dc-e09f-4aba-87a6-d765c34e77e4"
        },
        "item": {
          "id": "f590c88a-bf48-4e28-8468-e806782acfb1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5a22ae60-1874-400c-aa58-0618e3307fc9",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f590c88a-bf48-4e28-8468-e806782acfb1",
        "cursor": {
          "ref": "e4618d5d-f6ed-4911-8cf1-ebdb405d8288",
          "length": 59,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "054ab3dc-e09f-4aba-87a6-d765c34e77e4"
        },
        "item": {
          "id": "f590c88a-bf48-4e28-8468-e806782acfb1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5a22ae60-1874-400c-aa58-0618e3307fc9",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 574
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.type should be array, data.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d99b80-694e-475a-bf2f-f1ba85035128",
        "cursor": {
          "ref": "42f7105e-5bae-44be-b469-d71ffd82d329",
          "length": 59,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f7004e96-d2e7-4a2b-aa02-5fdef1b5aaff"
        },
        "item": {
          "id": "a1d99b80-694e-475a-bf2f-f1ba85035128",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8233db50-fe84-4397-8015-e81015423485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "a1d99b80-694e-475a-bf2f-f1ba85035128",
        "cursor": {
          "ref": "42f7105e-5bae-44be-b469-d71ffd82d329",
          "length": 59,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f7004e96-d2e7-4a2b-aa02-5fdef1b5aaff"
        },
        "item": {
          "id": "a1d99b80-694e-475a-bf2f-f1ba85035128",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8233db50-fe84-4397-8015-e81015423485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9ae9865a-01d6-491c-adb8-838941410051",
        "cursor": {
          "ref": "aa7b2fbf-b5ae-4c4b-b440-b398ea83a008",
          "length": 59,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "46065dfa-5c1b-4508-ba11-eddf8713df6a"
        },
        "item": {
          "id": "9ae9865a-01d6-491c-adb8-838941410051",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b4985ba5-d99f-496a-94a2-09e8a0a33e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9ae9865a-01d6-491c-adb8-838941410051",
        "cursor": {
          "ref": "aa7b2fbf-b5ae-4c4b-b440-b398ea83a008",
          "length": 59,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "46065dfa-5c1b-4508-ba11-eddf8713df6a"
        },
        "item": {
          "id": "9ae9865a-01d6-491c-adb8-838941410051",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b4985ba5-d99f-496a-94a2-09e8a0a33e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "01c26496-79ea-404d-9cbf-2da6b771dafa",
        "cursor": {
          "ref": "e8777281-941e-4e49-92d9-e49b4c814a2d",
          "length": 59,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d44c2bde-8ddb-405f-8890-16ec44fb7699"
        },
        "item": {
          "id": "01c26496-79ea-404d-9cbf-2da6b771dafa",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "33bbe067-ec92-4cfa-b5e7-45017b5c6df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "01c26496-79ea-404d-9cbf-2da6b771dafa",
        "cursor": {
          "ref": "e8777281-941e-4e49-92d9-e49b4c814a2d",
          "length": 59,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d44c2bde-8ddb-405f-8890-16ec44fb7699"
        },
        "item": {
          "id": "01c26496-79ea-404d-9cbf-2da6b771dafa",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "33bbe067-ec92-4cfa-b5e7-45017b5c6df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "49bae722-8bd4-463a-bd35-608d52c7dec9",
        "cursor": {
          "ref": "e274fb3c-d4e1-4229-b37c-0de52f6b423f",
          "length": 59,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "88c460d0-f631-4ae5-b1a8-52956dbf2997"
        },
        "item": {
          "id": "49bae722-8bd4-463a-bd35-608d52c7dec9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b8bb65e3-f47d-45de-9977-db5f340ef06b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49bae722-8bd4-463a-bd35-608d52c7dec9",
        "cursor": {
          "ref": "e274fb3c-d4e1-4229-b37c-0de52f6b423f",
          "length": 59,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "88c460d0-f631-4ae5-b1a8-52956dbf2997"
        },
        "item": {
          "id": "49bae722-8bd4-463a-bd35-608d52c7dec9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b8bb65e3-f47d-45de-9977-db5f340ef06b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bff18b5-f09f-4df8-af9d-78453532885f",
        "cursor": {
          "ref": "c87354b4-53fe-4a46-ba1d-979d27bc2d31",
          "length": 59,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b67316c2-fcac-4653-8a3a-615d5a5627fb"
        },
        "item": {
          "id": "1bff18b5-f09f-4df8-af9d-78453532885f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "80969851-a4bc-4fda-9f71-e76ac78fc570",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 21,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85708456-6aeb-4ff5-8592-42ce56e8507b",
        "cursor": {
          "ref": "ba40ff4f-0c43-4d11-ac70-495730fa08b0",
          "length": 59,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a77c8ccd-ee8e-49e4-a559-a310d6b7ee49"
        },
        "item": {
          "id": "85708456-6aeb-4ff5-8592-42ce56e8507b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "173b2109-ade9-4bcd-b10c-b5b311e1f0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85708456-6aeb-4ff5-8592-42ce56e8507b",
        "cursor": {
          "ref": "ba40ff4f-0c43-4d11-ac70-495730fa08b0",
          "length": 59,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a77c8ccd-ee8e-49e4-a559-a310d6b7ee49"
        },
        "item": {
          "id": "85708456-6aeb-4ff5-8592-42ce56e8507b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "173b2109-ade9-4bcd-b10c-b5b311e1f0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "332d0592-c191-49ca-a05c-7c28305cfed3",
        "cursor": {
          "ref": "293fcbd6-a620-4aef-a42d-694ebc376dfc",
          "length": 59,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "92e29040-991f-403f-8fcf-c89c0d32f6b0"
        },
        "item": {
          "id": "332d0592-c191-49ca-a05c-7c28305cfed3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d0732a11-7ef2-4774-ad39-087a79982f5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "500c4d40-b498-4958-811c-92a2c1ec78ba",
        "cursor": {
          "ref": "4241161c-3ccc-4420-91ee-c7f62923ecf1",
          "length": 59,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a019daae-bfb4-46ed-b9de-5bfdb9d9aca8"
        },
        "item": {
          "id": "500c4d40-b498-4958-811c-92a2c1ec78ba",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "2c71e6b2-985b-4a9f-b7d2-7e7be4eadffb",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8021bd9-9353-4053-837c-6b3c6c59d0f1",
        "cursor": {
          "ref": "4db75c61-f576-4946-b39b-62f9592e1023",
          "length": 59,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8fd68a5f-9768-4589-a7a2-d97bf765c449"
        },
        "item": {
          "id": "a8021bd9-9353-4053-837c-6b3c6c59d0f1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7005a361-2b52-4c14-953d-53823e20cfc4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8021bd9-9353-4053-837c-6b3c6c59d0f1",
        "cursor": {
          "ref": "4db75c61-f576-4946-b39b-62f9592e1023",
          "length": 59,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8fd68a5f-9768-4589-a7a2-d97bf765c449"
        },
        "item": {
          "id": "a8021bd9-9353-4053-837c-6b3c6c59d0f1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7005a361-2b52-4c14-953d-53823e20cfc4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23518536-a15f-425c-88a0-02fca6d6f7ba",
        "cursor": {
          "ref": "c9417728-64d0-4cfb-8200-7e53c93c0a61",
          "length": 59,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8ed5eb8b-2a55-4493-a367-334ca4f5b1ee"
        },
        "item": {
          "id": "23518536-a15f-425c-88a0-02fca6d6f7ba",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "4a3ef472-b488-4270-91d9-45cea6a1dfed",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc318924-e0d5-4881-a08b-ba5664bfbb3e",
        "cursor": {
          "ref": "af2c8662-4638-413b-8f21-1693ecfb2071",
          "length": 59,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "02e18049-2ec1-44a6-8927-f27710047a36"
        },
        "item": {
          "id": "cc318924-e0d5-4881-a08b-ba5664bfbb3e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "88980e0c-36b9-465a-861e-47ac29551f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "cc318924-e0d5-4881-a08b-ba5664bfbb3e",
        "cursor": {
          "ref": "af2c8662-4638-413b-8f21-1693ecfb2071",
          "length": 59,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "02e18049-2ec1-44a6-8927-f27710047a36"
        },
        "item": {
          "id": "cc318924-e0d5-4881-a08b-ba5664bfbb3e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "88980e0c-36b9-465a-861e-47ac29551f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "7705ab9d-2680-4e91-99ff-cec3725af931",
        "cursor": {
          "ref": "67a6d870-cfbc-421d-ba33-473e0f06e1a6",
          "length": 59,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0e69885d-1f01-4e9c-afd2-fd6566d9aa9b"
        },
        "item": {
          "id": "7705ab9d-2680-4e91-99ff-cec3725af931",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "76eaf5bc-e5ed-4eb2-9eb2-130c688d9e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.code should be equal to one of the allowed values, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "dc36b80a-ef31-4f9a-b3c3-c9695ff87545",
        "cursor": {
          "ref": "eaf27ba2-638e-40c8-b4bd-cfb9d876f7d9",
          "length": 59,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a97a3882-a21c-4416-a7f5-81e1d387d2cf"
        },
        "item": {
          "id": "dc36b80a-ef31-4f9a-b3c3-c9695ff87545",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1996e9de-0fcc-4266-92e5-47ab6d61c994",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc36b80a-ef31-4f9a-b3c3-c9695ff87545",
        "cursor": {
          "ref": "eaf27ba2-638e-40c8-b4bd-cfb9d876f7d9",
          "length": 59,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a97a3882-a21c-4416-a7f5-81e1d387d2cf"
        },
        "item": {
          "id": "dc36b80a-ef31-4f9a-b3c3-c9695ff87545",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1996e9de-0fcc-4266-92e5-47ab6d61c994",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7d5c31-b631-40dc-bc3a-e86469ee65c9",
        "cursor": {
          "ref": "2d88af07-3183-4d7d-bc22-cd55952f1de2",
          "length": 59,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "efb0e7dd-b31a-47ef-baa5-f132bf3f501a"
        },
        "item": {
          "id": "5e7d5c31-b631-40dc-bc3a-e86469ee65c9",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "c9223542-5b43-41c7-a1eb-2a039abee21f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 11,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}