{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "81fd80e0-68da-44dc-9597-c36b4e844762",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1d3a7410-b401-422d-9b06-62a79258482a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a27e7bc4-8fe1-40a5-9882-97c19aeadca8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4141af09-a88d-4bf1-9a4b-fd37c13fdfe1"
                }
              }
            ]
          },
          {
            "id": "1308cb41-881c-4308-8538-cf6bfddc535c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "14d1c342-3228-4de2-810f-7d269cb1c64c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2b5f15fd-0fec-472b-b133-f0d51d45c95f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a51cefd1-47f4-43ca-836d-aec283020211",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e3dfada7-2b0c-438e-b598-e216f0f3e90f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cf1ed5d3-aa87-45ce-bc96-974ca8fc59f3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f903158-0a55-48b3-a782-cec7f82ec034",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ece42135-33c7-4b49-9118-0819b6588c43"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b94f1bf0-b6bc-4e3a-8fe9-b7ab5969ec1a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "27cca15a-3d5c-4775-9980-2ff067ac6f2d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4e0dd225-5937-4a67-bfc0-fd21933a21da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6cfbd19b-3e24-4af3-ad5f-0bd92fa79387"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df7a8add-a184-4229-90a5-f53910825189",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "fcd58bfc-41bd-4154-8b7b-5fdcbc43dcd5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3f79ffa-3d13-4dd1-833d-6528da508f89",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f8d6694-f0cf-4e88-abfb-0b940e42d82c"
            }
          }
        ]
      },
      {
        "id": "9fe784ec-ff6f-47cc-abef-ab0517cf5e53",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b595a5a7-11c1-42d6-9f8b-ed704b833161",
            "name": "Negative Testing",
            "item": [
              {
                "id": "248613fb-5842-4a5f-838b-15978a0fa70e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dc8f8113-c362-4da3-a4ee-f5ff670bd832",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4e015d-3d71-4404-8b96-11a4825b0938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25cbc5fa-3471-496d-bbc5-7d76e8fa0905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91485ade-cf2a-48af-b8e1-6428753a8a02",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bda3e6-e119-4572-8ad5-df8e065a17df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5229317d-a1b5-4a38-8a80-b4bdf632efde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637a1adc-c9f5-4c97-86db-52fe1c56849b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c4ea1d-47c1-41b6-bdd8-0b5aec58593e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d102ef53-9530-4e6a-ba1d-53aeea0f93ee"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9360ff17-ee68-4ed1-a18b-b38e67adb214",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2f3d59ae-49ef-4760-92b1-61cc7ccb33f2",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e768d24-5940-4299-8c91-38056d2715cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "654a8674-69c8-4a9e-97f9-68f1ed47c890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc7907ed-40d8-4735-9cce-bddda4844265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5563d7bc-f145-41e6-bf92-5072a5097d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1009368e-21e8-4e5b-a464-9621280ee35d",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9740436-d18b-43e7-98c0-d3f99e899de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d2c013e-7621-47e2-84d3-0da2887f20b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a90a8c3-e3f8-4bb1-9724-91aeb617a3dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c184453c-bee8-4dd0-bec1-244af4ac291b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "000596f3-52c9-4854-88d1-b692db2e7ef2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5a56da00-6526-4930-8090-1f75dd686f4f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13acef3f-b03e-41b2-93e4-e6170eb8db48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0dd13357-aeb1-4a29-aeea-f633fe63bc88"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7a57c7a9-b130-41b9-819e-8eaf8b7519ec",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "740a722b-8a47-4be7-a123-19263e0afcee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a190f2a4-b08d-4737-a405-8c532864c115",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a7c36fac-fe75-4bd2-bbab-42564273fce8"
            }
          }
        ]
      },
      {
        "id": "d66cec57-5970-4913-ac8b-977ae24cb5e2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b44e5f54-a396-4521-b85a-9dbd42390156",
            "name": "Negative Testing",
            "item": [
              {
                "id": "645981b1-9a4e-4aaf-8a09-6466607c1488",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "41ce8869-2b0c-46ec-a77d-067ed02e619d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea87dba-32b8-42a4-bae3-5a72077dc04c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf1f193-8df7-49f0-bb77-357b12f4165a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1365e032-3322-4bac-842a-19bd556a2243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc120041-309f-4cb1-88e6-94ae4d470f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9852dfe8-ec5d-4e7d-84fc-392aaa079be6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63935193-33fd-43ef-b4d3-b6e63f34c927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a38732-d797-40c2-88d0-3b0f369c8ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829576a5-804e-48ad-a653-0a825a179e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "371efb17-fde6-4a70-94b6-fd810a6c8a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3f187c-7a0d-45fd-9658-f738b4e26afd",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7757c18-6f78-421e-94fc-71c37d478591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b259e785-8d1b-457d-ac29-8736895f6c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d58e596-0bcf-4c89-afa2-0839afa9a83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6d2e2cc-7252-42d5-904e-3ffc3ed7f20e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8031cc2-d879-42fb-adae-bb0d8decea95",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bcb81fa-111c-4be5-958d-22dae4304a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d62876e-b0ea-4a66-8846-c0bee45f8ad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb0a8c6-d9db-47e2-9620-50591f7c4e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b75401b7-7ba1-40c6-95a0-e34286fdcb70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9244580-f967-49ec-942a-0890de77c129",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ddf534-1873-4692-98a1-6a758cbf8a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f97f02b0-7786-4577-a25c-45500b27f951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5370fb-c864-4627-ae97-44dd3ccc8af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1bf6b4c9-1f62-484a-ac53-34f1667e02a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be6be5ba-739c-4182-8d56-0aaff5f9ce18",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "594e5fcf-8c36-44af-9f17-1cf7b98ca9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33336ba9-ee95-4a7f-a223-eb9750f2d922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b26031-2b38-4f26-abbd-e39414fed74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ecbf3f4-5a4e-40d4-9263-b60b1e480814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ac4057-9c59-491e-85e5-83961420d800",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdec68c7-2eaf-4ffc-9667-f13525bce033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d52f0f47-6591-4e7e-8037-f407764fd0e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e394683-5483-446c-a681-2c7a88a4b3c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f82d2a0d-3f7a-4bb1-82d4-d1346337acb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e7e6a6-b88b-4925-bd2d-d625fb5c989b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b286283-513d-45ec-a989-54ee7b988ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a5cb30-1a3c-4c31-a730-1d693a074d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeec96b4-70b2-4136-a6ba-544b6230079d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "735fa934-ee12-408a-bfab-5e3f0e43942b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0286ceb3-1486-42ad-a77b-ba476da03ccb",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c9bd09-fea0-4631-b4e4-4c30eb6c802d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c448ac-6dab-4ce8-81be-0dadfd932098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75281ac-b264-4c7c-a82a-1380c0938b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00de5c65-b982-404f-8ae6-bad116b7d7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621a11fe-ccdf-4e80-b053-dae438120dac",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c578b0-7e4b-45d8-b2c8-50bbff04a8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa62d2dd-0d93-4fea-a50e-d6ad01de87ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36db1595-c2c1-4538-a7f1-8d4caae1ffa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1869d920-6622-4a9a-8e53-3b66ae433214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f4cb57-f7a1-49d0-97e6-aeb50d12a331",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3f0797-ea35-4fea-ab1b-be10f22188d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5dc9808-a647-4c8a-9466-d80c3438f522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b242745d-bee1-4ec3-8ef5-35e48ed8e5dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f7d7b9c-751e-406c-a90d-57d31bc862fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e87b6d8-43e6-4c7d-b64a-d3427666be0f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c93fe0-9c6e-4bc5-b9b3-e78b4d5ac507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf65b66-3e83-46a4-bf3b-defe4e5dba37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d6a8301-d33e-4d78-ba33-f1a25103dcad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cb88f97-5813-4ac1-af4b-7ce99fc5486b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885494c0-953d-4345-b544-42bb5801f782",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea3b165-2db8-450a-9bd6-d0a0b2b2a907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4506162-54ae-4666-a199-1c8ee756308e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4dc84e4-82f4-43a0-89ec-77cbfe28d9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62bcd00b-2903-45fd-9388-00b161c6e543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6076fd97-e99c-489a-8450-d817731d7cf4",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d4e211-c3c6-4f67-ba19-47568e664494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "173eb56e-c976-4a0e-8fac-86034bdc6553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac5d12c-c9a4-4349-8ec1-83e078cb97e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "576e57a8-b2ea-4cc1-bf04-631ca4c3582e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b7ba34-22b5-4365-b05f-dbed400d25b7",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14bb83f7-e2c9-473a-be3f-f149288dfc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad8cbbd8-8d37-493d-9552-cb14c724c832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3856cb6f-369a-4d0b-8ce4-735652764135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a965d04-0f89-487b-a743-8f4da2ca22d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307e6f7f-9992-4e58-bd24-ef025a30c584",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62d8d78-5159-4789-bf12-cffc33248d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e675a0bc-ab1d-47f1-9312-d3fd60c813a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28135624-4958-4d57-91a9-64a418d7b638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d841df84-58b2-403a-ab07-f7daf7191d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c8d18b-e52e-46ee-98fa-04aff521e0a3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7af886-7600-402f-b3ca-1f2d38b618c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d596069e-8c94-468a-9f99-b33484f6426c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a306630f-c9d2-41ba-af5f-804fd8c32361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dae09e4f-fa10-4911-abf8-641c7628a235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387e5192-2aea-4b60-be35-02bd4cd579bd",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b9e41d-def3-4bae-8e66-0c4a6ffe4bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "003d1558-b5bd-4a6c-93a0-9878682fd9e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ead8d6f-bf53-4524-8f8a-ef2b0f4a4401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ff5f245-aa38-49b7-ae64-858d6cee12be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6259ef-799a-42ab-a952-aa9dacc14c45",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfaf2001-88e3-49f8-8b37-570c387ac207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e59ef8-9e1f-4906-a896-bc02da21c51c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbfdd33e-dffe-47e8-8bc4-b6ba53235b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b25f2173-7fa4-4792-a32a-4122b641802b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea743795-a3cb-4c5d-9158-fe6e1f9dce04",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a5add6-054e-4eaf-b9c6-d05ed3cc3ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43a4f177-3d04-4e94-898b-1c22ca997e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ba4048-088b-4f8c-8036-1997e243e931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2301275d-271a-4ba0-8c99-21c0efb6d8f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37fbed8-fbcd-4f60-b861-a4a4b6ce8b0e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a229381-2a9c-428e-a533-739720f16532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f70a2f-dc78-4a15-8540-8fd7296c3f37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b5e4a8d-e3af-4dc1-be36-2b373e88f97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef142536-a18f-4ed5-9553-f7a198245d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "442b47c8-7716-4579-bf3c-876c8624be2f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff888d42-d35a-491e-9614-2cc16dbe178b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6908bed4-fcaf-41de-8571-1c13a230f503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d1a3e4-d5c0-4502-adfe-94adb1f590af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "60379879-25f3-42b7-8d87-e8baf1d32e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c7f26a-1065-4953-8db2-fc196ad56722",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19823bd8-3a5d-42fd-98bf-26112ea27adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef495ad0-095c-4eaa-a780-e59085824faa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8862a86-875e-4f59-8b3f-d0bed04e41f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9a9ff57b-8a48-4acc-856f-e4d84795729e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a72b4b-2764-469d-93ee-60dea0080839",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84fd1a8-b9f8-40a7-aff5-d4bea52b1e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4b9cfd4-94f6-48f5-a45d-9bde608ffb96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259e3fde-0525-4889-b9cb-4ed663fefbbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c9e76cb-66b4-40ce-838c-170790e912bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7765a8fa-0260-4a69-aea3-94bd053769b8",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "690877ea-c749-453a-b86b-f9be54c7074b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e7e3ab8-9f6e-4953-b121-15002e35612b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124b2821-45a7-45fd-af0f-50a1d872b303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c41de7fa-7e12-44df-9fa0-667d73bc4a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d993db-ca34-4b4d-8c0e-32db7a82fe0c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b798fb4-7a28-4707-a188-28bbd2e28f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e011bb-1d6e-44d4-9e70-e8be51a6ed4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf67ac7-58b2-48be-ae35-32ef1c2e98bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f293696-aa30-4641-899e-9a071f5560ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bce85ff-add1-46e1-95a3-7ac868945901",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95c5031-4387-43f9-8639-1b0577b6e0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f6ed34-110e-4749-a435-5bb4163a2d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd7526f-c15c-47d8-ae54-faa13c661255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3504d29a-ec2d-43df-ae72-1461ad37e03c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549ff890-f656-4f36-b016-a6788663e614",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430a8368-d4bb-41f6-8875-a71119776ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "258a90ee-172e-4e92-b5f1-0f29bf4f155a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf178a73-0996-49ef-a71b-80ae13c5711b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ce77294-6f3d-4eaf-9531-6204dcb10b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d07332-e518-4c8e-9df1-3217a5da3966",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d1f1b1-28d5-47d7-8cdd-dbfccc2113ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9261721-f7fd-479f-9798-ccf8d8a17fa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44748c27-560b-46c9-a551-7bb74638b2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bab06396-7df7-48b6-b46c-08e0454106c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f77386b-f0df-45c6-99cd-1e8da3d83c75",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca831e4-c2b3-4425-990a-69fad6eeb7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fda4601-cc17-4eba-91a9-41162325570d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd849c26-c6fc-436f-ad96-ede34c25ab34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce20655a-adee-4ca8-adeb-a253c094e36b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62464316-54ae-4303-8558-439f3eb8a436",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06aa278-2980-402e-9104-7d8a13f14943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b2bec69-1511-4d2a-9f7b-4226c858f9f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f067ebd2-353c-45bf-aa90-0bc3d9690892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f43ab35c-4f2a-4670-9c06-489f7ff63961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615926a9-78e7-4e00-abc7-cd5a82294acb",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b2f3ce-051c-4c97-8767-7b7cd7341a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d285592-4be7-49c4-9093-1c3c8ed2630d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f096dae4-0df1-4312-9d2d-77eccd80a722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb6cad0-273b-4d15-8ea8-1c5a858500d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c79169a-4038-4108-8349-d5c41f41428f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738b8528-71e1-4b07-9e48-89d840b64557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a5b8944-2b2a-471c-87c7-7a81b45303e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6806ab1f-8849-41e4-ba71-3cc8c63ddf9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4f83673-5ec6-492c-966b-da7a54f5f228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f09c20-4d25-472c-8a99-849e331ab472",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d613c710-9e69-466c-97c0-1f408f557baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f372a01b-53e5-4ce5-81f6-c745c7b7ec06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4dab5cf-0203-4dfb-873a-aefb821a750a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "733597ca-dfd3-4e63-80cd-b26576c78c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3724f6c3-1622-4a17-a03e-ff6407a03981",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffababa1-6ac7-4a77-98e0-f1b49811f136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be7032f8-41ff-4437-b36e-ce169083011e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ea5ef8-0905-4bb7-b327-e82280deb5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f0c1e5ef-6d19-469a-8f39-ffe3564768b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66da30ee-e42a-4049-87cf-08978199466b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "228cb914-e6fe-456a-9242-c7883f917ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ea1cd62-90aa-451b-87a9-0dfa2415179e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ddc9ff-79cc-4462-9d8d-a5229871abe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1fb82d03-70d5-472e-bd48-8cee90dab258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9fc956-ac8b-4cdd-91b8-bb9f90938b01",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b5289d-4993-47c9-8cf0-f6cf2785f985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e72c9b04-77bc-4426-be8c-b317213137cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "265732bb-96b1-4259-8598-9c81ec127245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "42d36243-a51d-412f-a4eb-7156dbddfb01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3126709f-3c78-4b6c-b7e1-c1cf7ba8a44a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c401d884-5b05-4868-b09e-b2c20ed398f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "058a6fd4-c7d9-48d4-bd6e-3efbaccdb5f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071dc0c3-49bc-4306-9fb0-2552bee361eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f48bcc4a-bced-4ebe-a1b9-43239b58b409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a470b971-6f40-49b7-b264-3d8b2abb6ce8",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c0a9a9-b5a8-467b-889b-4ff5fa011387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bff5acb9-b037-4116-8b00-6039d2eabdbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d749f9-48e5-4bc8-84b5-4593e27cbb4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd8c50b9-08c3-42a0-861f-a14d6feb0ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8dd9fc-e26d-4fa8-92f4-c056d85395a4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53917de0-f7c4-4f51-91b5-157ef4de474a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1177526a-f2f9-4b12-ae18-fd1cf1bd16ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7e2467-7ac7-473e-ba06-6d70d6cda747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7325b3b-138a-4b05-a4ab-060f42a52937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "432c9e8f-cacd-42fe-b7ac-c913aa05ce71",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c9d915-1b7a-4770-af07-d3aa4758b40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2258f23-6a3c-45b5-9189-ba31949f540f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e9f482-d49c-4451-9bb6-3123411eda50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b0c502f-d6c1-4462-91c2-1bf470b44fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1564c64d-17a9-43cf-88a4-10002f07d07e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a32452-4f0b-4ee8-94ed-a66ad02ed213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d0e847-8c6b-4f63-9f60-8ff8292ae347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988c6c0c-bc1d-45df-847e-1c32dbc27fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8fcc145c-f275-4d9a-87e2-6f86b5b4076e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62dc431b-e65d-46e5-bf94-2bcb8c583b15",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d0667a1-73c3-445f-887b-d2ffdd4ff962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd8101e8-060d-45fc-84a4-a397f2a7a1d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a2a9cd-18d7-45b2-b8e7-ed1bcc524cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fac3381-7f10-441c-a0cc-084efb1a6312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349e8a2c-d073-438b-983d-88333df15876",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c465b3c-22a4-4c5d-9355-fb883f6e5cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20848cde-f22e-41da-b805-4261824838e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29c7d1a-9436-4d29-902d-236f0340eb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "69b73799-12f3-4c97-9989-1372d7dd949b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58cdd878-7ecd-4223-9c82-69d0be5de265",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41cfe21-e3d2-4981-a77a-fadcb9bb2a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4cf4ef3-0760-4657-be83-c64dda3cec7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a416130f-2fb6-475c-8b85-b7898cdef068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "421f1f08-9816-477b-a2d7-a2a1998c7e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a07410c-3049-4c74-a92a-60cb41c9c680",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ce6bf1-8af4-4b72-a9ec-8241d888b5dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe18be5f-6254-487e-a4e4-b016e09256a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1139fcc3-07f1-4371-ac5c-fdeb45ec88b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "70805ffd-30f4-4c27-8d5e-785ef1c474d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51017f3-796d-4688-9f4d-8f4caeb00eef",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3033d88-03ff-4545-a1ca-a757faf010b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "346e96d3-f9e0-4f1a-83c5-cfb0c4381480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e3a3ac-3a45-49c8-9755-74adbd57d697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d2e027-70a2-42ac-a532-66b1b43f4699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24760280-932f-4478-b402-bb1e64c52a4f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b1b47b-0482-447d-a5a5-f29c158cbd80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09138ef4-b134-4d7b-aa12-465f1a3789d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b15722bd-58f7-4642-87fc-2445e5ee976c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "291cab07-f8b2-4a6a-9ab5-21ecf53d4166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9cb976-91dc-46d1-bdb1-2b3a3e84589e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b4427d-57fc-4a2f-87cb-846fa9c52c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ce300e-9e23-4564-b185-18355f1f519c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf6da48-028a-443a-bcdf-51d8e02711dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea67a7ee-1e64-489b-ba5d-4c5c16f57604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a770048-1ae9-40fc-8733-b52c81018042",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc80eae-7c25-41d2-b8ac-bceee9ff2524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d63135-4e66-4c7c-a0d5-729f06e11e85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e32003e6-788c-4931-a84c-776494313df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e8566475-889a-489a-a532-d99622be02bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc7cf45-09f9-40ef-a43d-dc4088eb6593",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcaf6bdc-7893-4d6d-96db-2c113993ce8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a0dc908-87b3-4f1a-9ba9-eda74f78f0e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b57224-94a2-4d25-a2ba-e88d9f1f06d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "92911e3b-b85d-45bf-80e9-905211941646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0869e5b2-d771-48ad-84ac-11e33a6a4642",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3803c59-1ee3-4ac6-9ff1-7641949b1623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f299dd7-2977-437d-8e05-1c1996db701c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827a3f4f-cbf9-411c-9e0d-b96b4529ce2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a87d616-6f86-415c-aab7-7170242d3c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f206a012-811f-4aa3-b8bb-36e979b54886",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bb6605-8e89-42e1-93bc-9bdb9363ae0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89bc8a8-5dbc-4f45-8de6-07b85fbc48dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ff9450-493b-4498-8f3f-77548571c274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f22889ef-7347-415a-a188-5315f6799b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eabdacfe-d86a-47f6-8298-9d32b11e78b9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef42030e-cbd3-4a9b-a358-666824a684cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "676d05de-6eac-4849-8178-7c04e159ccdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b308093f-8b50-4285-8dd6-f4f047a700e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "36aa6da0-31a9-4817-a1f4-06a6661db45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc5d6fb5-ed77-4ba6-b781-f8b5a4ffe43f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd35f59b-654e-4848-8767-c07c7d0d710b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f28186-3f42-4129-8f2f-6ac44d3af1b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7272bfe1-34ec-485c-b202-2ac5382c15d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "267cd121-46b9-43cc-84d4-1269e1263371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6acc020-cff3-4ea8-98ba-a3c63031decd",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc0ec75-c724-46ed-9ac4-40d043b6996a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78825dd9-0524-4410-b65c-a355cf1c7505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2fd1507-750d-4737-b854-7098257e63e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5707624b-125c-4f5d-8d67-aee27ffaf833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96cdcd1e-2571-4985-859a-116dd76657e6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7755f4-a641-48f9-8eeb-13d74fc1097f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e411c4-c772-486a-90ee-249466f310f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43df320f-5f27-4375-9993-3b9f55043410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9be0087b-e9ad-4845-9637-5196a982aca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12cd3be9-b03d-407e-95c5-b02154bf9342",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "343202fa-3109-435e-8ccc-d3d21bd7df70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9f386b-4886-4e41-973c-ec2188696841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841d5529-7d0c-49f9-b390-88853506b404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "87ae2854-f71d-4437-9e18-67d056cacd19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa67cccc-8803-4e20-bcbc-93952fe10bf7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "439a6d37-a84f-4c14-82e4-fec83314f73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c4e5aa8-3235-4e8a-aeff-6f6c4697ce67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf044490-ef62-4831-af8f-8702f23001d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1db81e78-944f-4a5d-8ec8-5bf979191875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863d872e-a6a5-4b75-9d98-65472f5b7cb0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebee3b4-50e0-40aa-800d-67e770aa365b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f12960e3-66c4-45ad-ba14-26fe45533a3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d39eecba-bb95-4f05-8cdb-613340d06b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "92516eb8-379c-404e-ab46-340806287856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb183d0-e8ec-4d6a-8940-a51b425fdd6a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe19f3a-c35b-48ee-880b-06d6917e967e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e21d453-da35-4511-8615-783be691d373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8931b375-5376-43c9-ac01-507c7142de12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4e2526c-f6a8-44fc-b736-04abaa584a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091f599d-3d2d-48b0-979b-4b6064077adc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c6cc3e-f63b-470b-bdf5-f39357d99e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f08d3ba5-6a20-4a73-bfc1-69623e98688d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec58785b-8358-417b-8e19-e7f47f89a747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ac1611-1a38-43ce-9fe3-31566e1c9ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ecf8294-983e-4fb2-b045-8f1213e08a75",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c4eca2-6d49-4111-b876-33f9ef8a48f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70707f7b-7f5a-419d-9098-e51fab313a40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db9cb49-8a0d-47f3-b137-1c36abe7ffdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "68b05662-6e4a-48ea-b930-a0a56d807c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa12e3c8-df7e-4c16-8cf4-523bbe242801",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a86ab8-9933-44d4-a2c2-a3a9dd10b8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be654543-8caf-4ea7-9e9b-56950144419c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1879d6a7-32a4-4bab-be3b-3678fc125550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6530070d-d558-4c27-9c70-326569907e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b54e56-f5a0-4ae4-b0a1-54034a613a54",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2e6fec-3dcf-409a-9103-502b5c0ac14b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc8556f-1d08-4b8e-9385-9bd8caad277f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459fb541-ef10-4e1f-9731-d3de5a567208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7059285a-e829-4f69-a3cb-57bbafa3c563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603c4f8e-80fb-477a-af59-e774acc05de5",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504568e9-ae98-4db5-b6ff-3cae32095792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf8dc40-3af1-43ea-8a3a-345156e272fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520ad700-1626-4f91-8bc2-683aa7d607d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57310646-feef-4873-89eb-0ef29a9da166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf3877f-4882-4478-9ff6-8a447926dbad",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ca9224-2cc5-4038-a1d1-7e10c7e71766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a446ba9-f5f6-43fc-9b73-1dbc1de40249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69262b59-d209-43b5-9c15-fb9e16f5a3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3e064a08-f531-496b-8424-e582099b811d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979bc68d-3464-455b-ab14-2442d8f9fc9c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50015a8-126e-4880-bdd4-d58aef4db6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7968c466-02bf-414e-a4e7-fe89bfe126c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb1aec7-9827-4b7f-9433-096961ba2c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e6e5c60-4f2b-4380-9c55-eba0fe92103c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c61d422-9437-4894-952e-124b9e916e4f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e698d871-ce59-4ccd-bcd6-88e9451bc3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d5b0a95-59a6-42d0-8cca-f14fc35de085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ca2bb5-5136-49e1-8c8d-1f928c603ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcb8a989-2be4-4661-aa57-6de9d539e84f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0439038f-69a2-46c2-b65b-1ed3f63c66cb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc81eb95-1906-4edc-8eab-6a7637aeefdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "395d13c3-1fe5-487f-ad3d-4d3452e7cf2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b21c18f-e719-46ff-9d82-5ff56a1cf279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08740329-0fad-48e8-ac54-6749dcec8bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a21ea13d-ccc3-4100-a263-b204fcb767bc",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250ad54b-f507-457d-8d37-44e5641c95d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b47b1b0c-4d4f-472b-99d9-dfd561ac9c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4dee78-fdc1-4d8a-8266-3fbbc639d088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd08ab05-25e3-4e90-a5ee-dc1922d270d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54c3bef-083a-4af2-9fdf-59c7e225eba5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fb46e9-19c5-4e13-a7a0-434ca5b523bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8862e19f-23c0-49e1-9b72-526668e719bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e490126-f6e1-4f5d-9ad7-cefb835a6229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89eaf3f5-992a-4e74-8e7c-747d5c1d94b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8071da4-3cf2-4e26-967c-f730e1af94ef",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e954a1e4-193c-4f3d-89fb-b0cd7b716d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18f5148a-6292-48bc-8841-6928c8bf026a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f6b412-7465-4ed5-9ae1-88c4e138f7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "485e1b3b-6a04-47f4-821e-3adc7f3b278e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881e282e-ff01-4fba-a4a2-f06918acf072",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b40c02-e5e0-4bd7-b96c-5ee25e1d8cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9585480-8963-4b20-9752-0c4734ce8e37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7afd9c5-7e39-4363-b265-f8e93f8d21f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f1ae3fa-69f3-4436-9866-14867fa683c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b194f44e-8e54-4da8-b72f-e074f295d397",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eac8c2a-88a7-44dc-b711-8e49ad3b574a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9499b7a2-c862-446f-bf2a-dadfb0dc2ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab7a19a-85df-461d-992f-17aa58c48bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d387cea6-0af2-4f74-bb11-28e7f1d248dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d559dbd-7c95-4e53-bf42-5873ff4bd063",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ebfbb73-60ed-435f-8004-16dae0eca5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f30781b-9ff8-4128-9d38-f79679b6a818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51d763c-e6ab-4071-8d6d-f60f821e9263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95f2a95d-4d8b-436a-a852-1bec07ef1d80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbcfcd94-3c43-4fa3-85b2-73ebb8c107ce",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef4c1e2-c3eb-462c-a9c2-62d4e0a1adc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab0849f7-8bd0-43b5-b516-2c4e8a2d2cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46ae306-06ba-448d-bb15-8daec14453a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5287adbb-c3df-4614-9e43-99d65edc86cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c90d7a5-2ebb-4362-852f-b0bc86216ac3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "302c1379-93fb-4954-8d43-5cb3893d64c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6da487c-dc9e-4bcd-88fc-753f1d4f0bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e23f320-207a-4b83-9aea-5f3bb7f55c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c48c15f-6386-48ae-8cdc-429a94d67202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56e9726-b464-4561-9a0f-f25a823a028b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25961f4-46db-4acb-8add-4c413f75083d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5a5a00f-ccd4-4a63-a244-dc9de82b80d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a001d282-44d2-4830-a5c7-15f18dc92f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "870c8ef6-a088-46fe-b5c9-95f5d4db2f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "564d7c8f-b51e-4f34-8808-8871231fc273",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ded6261-a31a-4000-9476-7c5122dfad89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e71568-89cb-4253-944d-29260f3ed276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b26abf-27ef-4316-b38e-c26a78e7dafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a03858c8-31be-4d88-b1f2-e799bd767d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10202519-9d27-4648-987a-7b2a0d42047f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "529dd053-5bc7-4b4f-baab-6efed90cf3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85852538-c437-4042-8294-30488fdd0f53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2115674f-dbbf-49ad-b15d-7811cc6a0cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bbd23ea-0634-48f3-977c-f70c649fde08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef22a7ea-0e00-4f79-8a2a-9bd6c38a06cb",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddeb0b95-cc39-4146-a167-7a554d026025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b077a1e8-3725-4748-9889-912abba8e445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "034b732f-fd8f-45d8-a489-64761a7a63c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a835bf6b-6782-465a-ac84-0c0373d42799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7651c691-f63f-484a-8652-78b20f38a13a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f9fb0d-d30f-4689-8188-c9743d8987f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f4dfcf8-cd89-422c-a005-990ae7f9f0b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b45d539-2259-46bd-9ca4-32280745e628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "07db664f-1e89-4920-b720-8a927852e0cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e94f15-d41f-402f-a313-2d425de406f6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4216ca3-9376-4d55-b54e-9b4ae95abbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5651f92-10e3-4558-9119-76714dced3a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e1523d-c9eb-4b5e-9122-d356c8a48587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5874da7d-24f4-4db2-9dc4-e70699144099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c123dbd-f6b9-4302-8a48-0ce53b6f1239",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "720bbc24-3e74-4253-9416-c83dbb3d0000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e6904d3-2c87-4c78-bc45-8d642fced81d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d94136-b8f2-4084-a6c2-c4723656fb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "96d5eeb5-a985-45b1-83c1-f6b405b8044f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f796b84e-9274-40ef-a29d-08b6542f0885",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2e1be1-9d8b-4983-af7d-0e436a631b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2a2c5d-2af1-4f4d-86e1-e4883cac251a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224c7fa5-fd9d-4de7-bed8-fa662d4c064e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8702c9d-c539-4d3d-97d0-c80fb31a7707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b8c28c6-9f54-48bc-ad72-3aa42a3235a0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27164ddc-c023-473e-a820-395c073ec85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f44b546a-2498-4054-93a4-437f4fb6903f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d1e38e-0994-4c18-85ae-c7a2d734f15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "690d82a3-1fe7-4410-a598-6649237a4eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07e30e6-d6c8-4427-9f7b-3175ea3c12f2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3970612d-1465-4479-af72-3e1570646d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "529487df-1dc4-4ad7-a49d-2686be43d42c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb093936-39ba-4be4-b41b-a35482781c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a3ba21b-0070-4cc8-8c1b-c13748a23872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566cfa2a-98fc-4f4c-a307-3aec8ef2ce7e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb5cd97-ab4f-4cec-8d45-1c3605726a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ab4327-2e78-48be-a9f9-b248189dc422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3787bf6-3b8e-45b2-a919-64670ae041bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4cc1088c-0798-402a-8377-096e5d605984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5009ada-91da-47cf-8e01-0ccf4f79d4c5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0767edc-7e7d-48f8-b07f-35ba872384c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c24ff70-00b4-410d-8d6c-68af7733732b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26277d1-cca3-4420-81c6-4ad388dc7b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "00179f42-ae84-4fea-b8a4-d55f54143254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2deb060-2382-4ea4-a64f-185cd7d96bd6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5176eb6e-20d1-4865-947a-39f0f3311318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38bd65c5-c15f-4475-8b73-5498478e7b79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107db074-d89a-40fe-9d04-f157db38c211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "45ebf5c6-c188-4976-aec5-08d19f13c836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2b2662-2ba8-4529-9254-154bbd66205e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "627f6706-b3cc-438f-8eaa-fac228d08a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a7870ec3-b437-42ce-99c8-4b32d0b05006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8830864-db69-4a7e-ba33-60745b2b193e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e7199d-57e5-4923-a4c8-5433ee7d4b39"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1880394f-e85d-41b4-bacc-600821370192",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "863c17a9-5d6e-4faa-b0be-fbe03368f3c8",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f97736-c8b4-4d9c-b4ae-beadb0e503d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13c94773-6e0a-4209-a88e-545e6d44a387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8796edf5-e575-4b3f-b38b-69890676cb4a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "f4597cd0-d855-4487-a196-f16c4ff330c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8967524f-b16b-4ae5-acff-c9b413819453",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b209f4-5016-4f4a-a529-b55eea1767b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8355488d-708b-4900-a778-d7f366bc8806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5da442a-5580-4124-a787-88e8435501b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "9a3f61ad-c175-4ed5-95a7-ababd1e4469d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59bff8bf-980c-4306-bd5c-05edeff5b27e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8207cc3-ae5e-4f7e-b197-3d11809228aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "59f63648-d9b6-4b28-97fe-296036f74d22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c49b0c51-62a0-429f-8ea7-50f7e4abab1a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d98e0257-bb54-4dbf-8b03-b27aaf27489f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "791e4ecf-b12f-41bf-9a72-0fabf169b895"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fe92fb85-ae06-4d7e-baf9-7a3619e898e0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0821b7f0-ff29-4b2f-bb54-72738e1d4cbe"
                }
              }
            ]
          },
          {
            "id": "01e063ef-e9b3-448d-848b-d2622009ca07",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3a42b6f4-489e-4e3e-9ce3-5ee7e0ad589f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e16ba5cc-70a2-4883-bae2-4edea0a87e22",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e443c2d-13db-4e5f-8ac5-12262e935863"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c90f69f-9df3-48be-a84b-cc0536d4e940",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "15ea85e3-bf87-407e-b9c4-ee458d8bcc21"
                    }
                  }
                ]
              },
              {
                "id": "c648f63a-9f66-4d59-a042-d892e8be5b23",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4aadabd5-a37f-4651-be94-2a538ddf520e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d7f8b160-1b04-4d38-b9d8-6cc0b5085d8b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2c97457-f1f5-4cd2-9f18-8707f77e82df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "25e9af70-5e47-4f08-9cbb-028df23a31cc"
                    }
                  }
                ]
              },
              {
                "id": "1fa9bf84-c635-45b8-ac91-76fb702f99bc",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f0e0a75-042b-421f-8418-1921f5b4a4c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e13b5fc-5350-42a9-a520-ca391cbd12e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae0a4f7b-580d-4775-9f8d-d42a15574327",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0889005b-e177-407b-b0dd-a08c3973cbe2"
                    }
                  }
                ]
              },
              {
                "id": "84a50a4d-1045-49b7-8b66-3fd16646f809",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd4d222c-4b3f-4d67-a97a-2cdf8eb57ddd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b0f453b-7b82-4f65-8f20-56c642cc96a8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68a5b14f-5fc6-401c-962a-afa261bdc927",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "56abb094-11bc-4d1f-88cb-a1540884ce94"
                    }
                  }
                ]
              },
              {
                "id": "7de34552-e728-4556-be89-fc4fb6d446ae",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "292d6bb3-4c74-46f3-8a7a-1549152c8dc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d6e1c94c-43b7-409b-ba51-45e48326730e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eca886ca-af2d-40d5-9739-62c696e48b17",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e800b15b-eb66-4ac1-8abb-b39dc5205bef"
                    }
                  }
                ]
              },
              {
                "id": "0ca6f44f-89dc-4174-b905-e66e9c774d7e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "92545a0a-90bd-40d7-ae98-9e9a3a1b6e62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5939c38a-dff4-44af-9d88-79893dcdc651"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74c81ef7-ad63-4bcb-904c-40df71b8440a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9b94b606-6153-494a-8614-6ff30827fdf2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "95ce509e-6a72-41e5-bc22-526dc428d8f4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "99617444-a054-456d-9d61-66ceea001d81"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "638b6c6c-edcf-43e5-86e0-4375b6b2d9e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e43a424e-a225-45c0-957e-d7d027b6cbc3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd35b8c1-67a8-4fe3-baee-84f5c216ab60",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "bdefe278-4110-46ac-a89b-eaf50369f401"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df855478-681c-4393-9157-f250b9bd1634",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "53648d39-6bb7-4711-84cf-46fd947edf5d"
            }
          }
        ]
      },
      {
        "id": "88410530-5664-4eb9-8268-c7135da91b63",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ecc8f074-4511-48b0-a31b-d8d30fc75ca9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2077e9f1-5555-496b-bb23-8bda032c415e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d2189bac-9b82-4b03-9286-5d2fc1798ec6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9336c811-72f8-43df-a5c2-078b86f5f4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0170d4ea-bbed-4da9-892b-568a9cc1cc36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0e9a19-74f1-4395-ab38-7c5b7e2b535b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c210833b-eef9-47fa-b8ad-9b061533587f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b960f31b-1c6e-48d7-9536-c56f22a7f56d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8fa9750-a261-4ded-81c3-9452c3634f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2e8f7e3-93bb-41fa-8156-651040e0a19b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78bcd272-789a-44cc-996e-d56430da5cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "398c23a3-5d69-48cb-8bdd-2db21ea44c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd027d11-02c5-43a1-9576-24af666cc167",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d72cad1-81f7-4911-b4d9-bda27624be3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb33a9a-8ca3-4744-a586-134e24cc8eb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967c1a7d-f323-465a-b131-50442ca0937f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f81eb191-bff7-4f97-90ad-d56f98df6d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fece44a-8572-4a28-abe1-fa28b03ef3bb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac822e23-8659-47a1-8d75-57837fcb6f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94619cb9-311a-4ac1-96fe-67450ed6f7d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d5b3af-a20d-4652-ad81-67e7ad189fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e30cfd7-3157-4f43-8b51-e1defe41c57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c94deb-cf68-4464-83c3-f1a064c3ddb9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c3e401-2479-4550-b024-e1095fa5190f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b43fd0-1c31-4c54-a01f-03db45131944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68696ce-bb2d-480a-a401-de9b1eb0ee07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79bb682e-3b7a-410f-b6c0-b7526578c506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02dcb9fc-8951-4ff2-a67f-caa9beb93dd8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6b18ad-f0a9-46b8-876b-7026c143d98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5402e81-eb48-47ad-9415-299a03d9b159"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a26c3e2-cfbc-47ee-b2bb-c656b1f2999c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "016475d0-f784-4d39-bb86-81ae4748c82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af3b878-5b79-4fd2-96b7-de35e8cb98b8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2761215f-b677-40e5-bd46-508ae38c0bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcb9e55d-ab86-4b59-8e4d-bba8e900f18e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49b94e6-4983-468f-bdec-292d3d2cdccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "790c1b96-b4c7-4683-86e6-dc13db8ff363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb530b47-d074-4683-9360-351931fddef8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c34bb3-95b3-462e-999f-9f165fb3dbf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "822e8b11-c687-4053-9cef-ce03a6ab0086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a52c1c3-7d41-4ff2-b8c0-5e5787cea8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc69143e-34c5-418f-8509-29c7ef219470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4a0edf-ea8e-4800-bff4-5a47328118b0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50e9810-6454-4e89-bde2-0938f880260a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75bf0cdb-f43e-4ac1-9786-551a22a050c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3359564d-4e26-4ef7-81c9-2e17f8d11dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49bbf30c-6cf6-4dce-bb3b-dd4fd1d5379b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619fd844-b932-427d-9f1a-747a8ce74a32",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "888fb6c4-bd5d-480c-92f0-4437824a0b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "433deff2-7806-4906-abc3-58db7e4fff5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dca8981-851c-4835-9b6c-e287d12d6337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "603b7a92-5fe0-49f6-a350-f2f259a025f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ce7662-87d2-4a06-be1f-fb403e602697",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec60ee1-e240-43e0-adf6-a47a3f208505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56f8388a-346d-4502-bad9-69558454adaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0320a35e-0561-4a88-a895-eb05e54499ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6fcd26fc-a08b-41ac-a75f-09b9d7679e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e272f74f-8d7d-4dce-a125-1eec08911c63",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4997ab77-5f03-4547-ae8b-75b0fe07c145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bde713b-3720-4e5c-b121-c161627b009d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acaf60d6-5cb8-48d8-8fdc-ba82566d29e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c2c19f47-58f1-4bc5-9a13-f831401f87f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "610b1ccc-2736-458c-8840-a559b2faae13",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd8f5cd-2a43-4bff-8786-39fe8fad4d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f253665-8fa7-45b1-8226-0d6f58d953f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02dd6c07-e4e8-422a-855a-a7b06e58c1c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "793d83ba-0516-452c-a1d1-6552944a3229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188067c5-8227-43f3-ac85-a9f533309303",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eafa89e-dc62-40c9-9406-b5923b1ee9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab0c238-8f12-4967-ad37-c08a551c52f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995541da-c653-4404-bc6d-46463d4f450f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b60764f3-9a07-4479-ad68-5581c986086a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997849f0-825f-45d6-a650-4c0a5a5a0343",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c559729-d51d-424b-ac50-6e0e3fe4bc94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9bea83-64b5-4278-9621-930698cf22b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043701d1-3d61-4203-b0f8-d25979982dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "95517f9f-3217-49c8-974e-07368c6a100a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959cc3fa-771e-4e96-8da6-1c2697914542",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc168dd5-3fd6-4f13-a020-8f535beb5db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a308da3-2e12-4c42-aa5b-e775cd25d350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8860c7-f233-4d62-937a-4936cafa46a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ac57a4-9c24-432a-840e-ca8df64aff8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ad7e4d-3b55-4351-9e3b-45dea89aaf91",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8467b55-0cec-4f7d-b047-d6366b518946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55fb3fd7-d472-4168-bd84-006c857a5ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6979226-0d2d-478c-ad92-027d9727950b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "55b77ecc-3486-4119-bb38-41f20acdc020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d39c54-c7cf-4ead-bdc9-ea701764ea96",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53da942-eaad-4570-bd68-971e9cf9199c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8b62626-cf12-4243-be05-983839657eb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6297efc-1bf3-4d0c-8ba7-d3b67e77f9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b085e5d4-328b-4246-8445-d3ae9674b66a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e0ab34-fcd1-4e17-8c87-ad83dea35d72",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abcf68c8-1aac-4fe1-9a9e-5b6d44af546f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b35f593b-4b2e-4820-b08a-2aa11f58b409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46a366f-4000-4cab-840a-f0bb964e848d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "478636d4-7fec-4177-8b55-ae3dfbe75b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ace8763-a232-4188-9f27-007e1b5fac48",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de50be9-a2a5-4afc-81e5-86057245e245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a420efc8-39b8-4b4d-ae51-b552df3c6fd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3d001f-efcd-4764-be6d-00e43e1fb586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acd21f12-2234-45cd-8fc0-b91403672de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910d78c4-cbbd-4fd2-82df-99abc928e2d5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b293b6b-78c2-491e-88e3-0390f933b4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87345152-93a6-40e5-91d9-a1b3f45b6fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d152468-c900-49dd-87ff-7087c00e67fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e09f32b-c5a1-42af-9c01-f522711c0e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f22f49-0164-4c9c-b80e-8abde452c50f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b579ee-89b7-41ec-9c5d-35cfbeb8b7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "467657dc-4868-42f9-ab75-cf96cb3c7dd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12290bc-e4ec-41fc-b025-a9cda4616a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cead0678-b5c1-47c5-a081-2e8570dcd70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490eb794-5f6c-4d2d-b016-53501596fcba",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d11c74-2664-4626-bfb0-6340fa677c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d62342e-d8c7-4139-b225-c20dc7aa900c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d7722b-487d-4877-b610-57d127dc0073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdb94aad-fe95-4a27-bec7-ff879afb9dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33a6f95-988d-46db-a2da-b36c02367219",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d550d2a8-8090-48aa-826e-d08996856ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d0434d7-3b9b-4b2c-81ee-7a86b18242c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2fcb46e-69aa-4a26-a443-9a45f1fe170b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c4d9030-c0d4-4155-8088-b939c8ffcf10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f58f78-a247-4d60-81cd-41fae54d798b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2be676c-cf5d-4811-b14a-5d847fb8a75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "084541b3-4004-4824-90e5-94d14c26c07f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "738e6f05-f70c-4ac1-bde7-cd8f8953ba15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "579e191b-bdda-4a4e-89af-45ef0885522a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb249f7-0de9-4caf-a289-b5c1e46c3e5f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e9cbbad-d465-40ae-a8dd-a50d911cfc6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e0ee8bd-f2d5-4eb9-90b3-e6e58632cdf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2333b5-4e85-456a-ac4f-3ae3df4c2386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d976df7e-0857-46ea-8bd9-38321738ea0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5ee7084-9a1e-49fe-9a7b-07ab03247baf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad0e299-fbdd-4b39-ae5e-281f81ed33b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5df69c5-c117-4145-bcf4-5a2b1e2999b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31930f5-02bc-4f79-b6d6-4dac747ffe05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f82598a9-dba0-4a14-a824-b7838a4df175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe74b3b9-2ce1-46bc-93af-b891bc9daf9b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9abf52-5abb-4940-bbb3-f7b3a6d1695a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea46a365-3ca8-4d74-b671-16092fe396fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8541e1f-b9e5-4354-b68c-ff9850c7d835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2757e119-54e4-4d57-abc5-aec5f523e42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62f33ab-3f69-49d3-9fe8-9f87e1829ac7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5452e7a9-6fd5-430c-b055-37295456cf26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "542982c6-a98a-4ccd-9977-a54b3faf65db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e17ef9-2ab7-45da-8510-7851e1c2a185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8390b2b-4a82-4b78-a51f-9283b10dc780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f41702-cad1-44b2-b2dd-15bf0225bf4b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "233d9d80-6d1c-47f4-997c-f3353f762938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ade0fa4d-383c-4b29-b089-559548efacf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c3b931-42b7-47e5-9672-21ef1c8e0f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "733947e6-8969-4e7f-9aef-5f79996fbce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c45871-f0d2-45f4-aab3-2190e448aaff",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb4eea8-eae5-4ea6-b120-37978a906a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb4dbbea-9408-4230-953b-ee9d5251b9f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6acc314d-8c95-4f79-b577-0ef622b642ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ef34c02-aeec-462e-bd1c-7cad3c2d0d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5070e165-90e5-468e-bf79-5f13999f56f8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51166c22-be2d-471c-b0d1-e26a617ef356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d40f5051-1c20-4001-ba43-c5e215426ab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14cdfb1e-f569-4ff1-8620-d42cebbd514a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd3a74db-7b09-4019-bca3-80571b13f452"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fc20a9a7-fa01-4bac-be7c-9076de753bc5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "73795abc-356c-4625-a70b-53e8d5c7634b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bab8c20-be4c-49be-8f01-c42ffe213f79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e02c104d-5fd1-4a36-a878-1d695be1f4a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2916abff-36cc-4ba7-bffb-3ab3a75e6be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7531195b-5708-4f30-8794-e1a0f15c51dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6be955-8364-40a2-b04f-41433fa13469",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4156df-b414-46a5-b2fa-306f2aa229ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c6007a5d-6c7c-4a84-b2b1-a9a37bba28c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7981855-9e86-4fec-b094-f60d575b3105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6711b43-5b3f-4f36-a8e2-d0a612fe6c91"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f11ff0ab-6529-4361-bb79-4f05774e07b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9cc815e-c540-42be-af3c-a43e87e4efff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4895b3c-a61b-4a12-bcef-c766c957f00a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33604be8-9267-4ea2-9735-0998ee982fd3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "488bc8d7-2b18-4428-a890-611d4c0e52a4",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9071858b-0770-4f8c-8933-3399f7a85296"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d875c26-b85c-4972-8a62-389c0cafbb9f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "875bce8f-2380-40f3-ac39-58279ae736ae"
            }
          }
        ]
      },
      {
        "id": "329673b5-d4f4-4c01-b90d-472f027dda2d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d9a171f5-7f76-4e4a-8c74-43db442fba6d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "51378be7-a7b3-4952-82f0-3aaf07dd011a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1e4f17d1-9fcc-4914-a220-8374165ae819",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54940c67-6f59-42fd-9a4c-e6b30428d37a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24d4fd45-eb49-4b33-8c96-ad860e2fde93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "853bb2c8-97b2-4210-8e42-afe696c5cd40",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37064f45-9fb9-4b58-9e96-352ff882dfe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be211d8-c3d6-4887-9b1d-04dcc9c92001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddfdbcbc-4437-4087-95c4-7c0d5056a7d7",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de208a06-7359-43d5-9447-90639f38782b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e8102c7-1da7-48a5-bfe4-a9c00a427db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf64c6c-974f-4d8f-858a-37a0fe5e2a87",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c1a56bc-39d8-437a-b976-6527176aacde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45cd0d6e-4571-47da-bc57-729338d37e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5a3038-b7b6-448f-b814-b908c9c94dcc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "105c4400-2764-4233-be1e-9a64b116880f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0dc056d-edf1-4d12-96ed-4d12dfdde4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae4f42b-4670-4c50-95a6-8f11789e5abd",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78bb3b74-24b2-4691-88da-451d1d5908b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "696b4642-8ba1-4a55-83ae-a556c6baff43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86ad05f-a54a-4baa-9197-694fe14232e4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "878e2343-20b7-4343-bf43-6a0de31cddc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a309a2-c1f2-47e6-a485-cdced7d1b212"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4f2e68-3a8b-454d-8ce4-296203803662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe99e164-db9a-4f23-be33-ebbc43e11c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c2fb962-bd26-4b12-beb4-48976ce767b9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809b8ad0-d2f8-4754-ad98-0196e8d46b24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14c7b1d5-e0cd-4b29-ad8b-f227430949d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "421515d3-9751-4aa8-be10-cde1ae9627ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aa1877d-5e2c-4711-8aee-5a3112536f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577c38af-b5e0-46cb-b467-a2abe97b30e3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58be6068-0102-4dc6-bc54-4fb32b8f013b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec224728-be78-4c55-a001-58233c908d34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab99713-375d-48d1-97e4-537b014ff506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae1219fa-bf29-4e50-8b1a-2b516a014a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872d458d-d4e4-47b3-9b44-e58ce65d5114",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5afc12ab-6e2c-41a7-9886-d1ad413f752b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a8a1385-a5e4-4be0-827b-bdbc900568fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70032ce4-ae58-4d5a-ba1d-2cf3344c970f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d36ca660-96da-45a7-a783-5f6196651930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a99def5-12ba-424c-a27a-807a04c6e408",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc6a8dd-10b0-44fc-95fe-b4471312bae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ca184b5-214b-4b23-8031-d5d09a17785b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16c18ab-1c2e-4c49-a101-3809aa376787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9361a53-eb31-413d-9e6e-8a8f9e9be5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91ce251-3e10-427f-844c-d5ef7815100f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32db8f83-8615-4fcb-9f8a-03c8fc60dba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bdace37-cf8e-4015-a30c-ad2a84148750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea0b9e8-1c3d-4edd-b859-76e3256a9ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "615f06b4-2ad0-477a-bedd-21ecd1da379c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e47e2f-26cc-4dcc-9743-50479cc5a8b3",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd8973e-8763-406c-94ae-8c753399c1ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1f71365-46f2-455d-a76c-287f363e1f2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db0463a-37ab-47c9-b7e9-c105152903c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec332fa-ad75-4b7a-a076-1a5bcdff2423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3f42f6-5d96-4f0d-9627-4623d016887f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b482f1a2-a8f4-4b4f-a8e9-3416448df668",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d828b32-8f8a-495f-a6eb-55224fc2dd59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f39adf3-6b55-4a6a-a309-984aed22b4b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4fdf8cf-9073-44fe-9e11-fe2b632d77fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d38b260b-5b9e-4b68-aa79-ce95e33ccacb",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd0a3c1-21cf-4a40-a2f4-57dbaee67c0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e11772c3-d0b3-41f5-ab88-37b9bfee502b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f9c22d-0f52-4a2d-968c-645b263c6357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "206a3f91-66fa-41c1-ac56-bd242f9004f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03af7701-e0ef-482b-8f46-e3d3291065f8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5094348a-5c65-4495-95ad-3847b0f14df9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9705b77-d71b-416c-8b55-f34233c3c7fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e4a06c-3f5f-4b76-8368-a609e22f31cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823792bc-2e3b-49c7-80b7-1bef6cb2bd95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493ce28e-dfb2-4f7e-9249-82ae7f84b2b6",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b4b077-a612-40a5-9b40-804baa935f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db938a1-bc38-4bbd-9b08-930bcbe3b94d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f749c42-7385-40b7-a2b2-afcfc788f3ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db130dda-a550-42ce-b129-2c56206368f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9b56d6-7501-4dd2-9247-981a9f6d838b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8c2d4b-c835-4020-889d-b2ecb4bbda9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40470b1e-98a0-427b-aaf9-dda9d6ff318c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13988e0d-ed1e-4bfd-980e-07794754d44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d2c15aa-94ca-4415-87b8-3cd68b52d86c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec909072-2db6-460b-86d8-b3afc5fd3447",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42232a35-f8b0-4297-8192-54959d6c1fe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32dd78dd-3253-4db5-9589-afb917fc335d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c539dc8a-e6f6-48fd-90d6-a39611d00d6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "021bc5a6-7191-42d5-96cf-c009b3cf98a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b41b23-b028-4382-80f2-cb8a35482477",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da0227b-06cb-4d5b-ac14-acd39a10cd35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a55daeb8-99c4-4400-a3b6-df914e3910d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "616ac973-b2fd-41b2-b2d6-b65c2976da3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "610ef597-6876-4dd3-9155-2d6708f24ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6bcd30-864c-43c6-aa4e-c7dcf1e6dc85",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144caa1a-4c27-4868-a2f9-b50f5a0ae6b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4105b9f-30d7-4999-acad-dc20ff261605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c0250e-9699-44f8-8117-cc1908877cd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cf6ff94-2079-4adf-b69c-b3b2f45f8921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe4b85a-3a5a-4ad2-aa11-f665b54d768e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc321a0-7293-4e84-a587-2f5da69973ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3291b0cd-6a85-4f30-b677-c42e8f4b7378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b36ec74-7207-4b8f-93eb-4e0a615ef555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c71c787-0859-4ff0-8e96-f8737feb4127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fff5b6-b0df-4474-b1b5-e8e6e8af69f8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81194b3-2a2b-4ca7-b2cd-a132a91190a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d6546b3-ebe3-46ee-8bbc-af7a57be1164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86148909-f252-4453-8015-16b26ed42306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d38fe137-400e-45d6-9ced-9a55cca90e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4af32c-6e3c-48df-816c-ea1b2e8f74ec",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e13ac128-76f5-4a92-8b31-7b5bece7c724",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fcf7c16-2fa2-4d76-82c6-03061ded5c3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "251793c4-94b3-4858-b521-780965a78ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd2376b-894c-48e0-bf28-3bb59c96bc5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d7195ed-7753-43a7-a6bb-d33b76912c20",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9338db97-09c9-41ce-b96a-a56d2aa9238e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e42fb6dd-f522-4715-a49f-116ace52dffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e6c54b-ac33-4f30-b64a-f473dcab45e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85cbbb37-59e1-4dbb-a2ad-ad9e3fea74bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954c77d7-a15d-4cfb-b2fc-848e3c097373",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee7dc76-17d5-47d8-8556-1ccbbbb9cd38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb006845-1240-4730-9ceb-f8dfbe0e533c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a00665d-286a-44cd-82e8-880837793393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f29661ad-fad8-4054-8d7f-b2d9066cad62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337fd420-a684-43b1-923e-0b0681573f12",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b44dcb-a843-48dd-b118-e95e3b85fe89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfbb6631-e1a7-413e-af4d-4c0cfe5c7051"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d819e1-bd36-4f19-840f-27ff8244eee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea27b9cc-a350-42e2-bece-a68dab611e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3793116-c25f-4f70-ab6d-2c5b9db9c606",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e76df5-3df1-4574-a2a9-8580675e46fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7bf832b-e435-4a65-a6d0-d42e20b08a5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "782a2d65-3834-485a-8d05-2d418cc2eacd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d23e95-ebe4-4559-a875-6b48fc09df94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb4c0ab-1ccd-40ef-a3c5-3e776e5205e8",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60dd6061-b064-4d12-a5e0-f73d0b897b43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e59267bd-a770-4d1b-9342-a465121ca783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77eff2e7-d2cc-4bc5-a803-54d6f891e4b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18dd95b9-e1ea-4fd4-83b7-97f53b33c415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b951d343-e2a1-4ced-8a90-06f48d946436",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a10b8801-079c-48e6-9c3c-1531fcc73522",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cd44a7c-0d35-4855-8cfa-4cd10fef1433"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c956d1a-1a43-4db8-8988-c461ecb83197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcc989a8-5b70-403e-a58b-1f950f51e693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e68fc4a-857b-4758-aa39-87f85d008318",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f636ac-143c-4b7e-a5c2-3100e7f51725",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e9030fe-7407-4cf5-b870-b5e8b7021347"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4dd5d8-8366-4bd5-af1b-d1c5cefef26d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1accf9a4-ae4c-4e58-9230-0b2ff72413a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2767d213-9392-4d7a-aac7-8f1dae87658b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a57ad6-f82a-4cec-8eb9-02a3b0818125",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63c5bb85-f48e-4b3f-9f92-18fac5733775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8df656-71b3-49d6-9940-8f6c94c5440b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48c9ed0-a1b0-4536-8e2a-e2e00324cf67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41879b20-d419-49b9-a86f-c7ec0fc07445",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e6f78d-9a4a-40e5-a80f-b96893c31472",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bba182c1-8f32-4a0e-a00e-3b1699d524fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9489da7e-6a36-4ae7-a9a8-2571509480b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4df57e6e-269c-4ca8-9917-373ad05e7c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d5895e-28fe-4c59-95b7-abc99cf73ca6",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab982ea6-2352-4f6b-b4ea-a5cfc54feaba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ece19df4-90b3-4780-b437-503f62c3f46a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1e6531-1be9-41f5-8f7f-85bf80da9719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a83a9cd4-35d4-4c78-ab48-b7f40e9c4d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2297238f-4a72-446f-a848-03154a67a1fa",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd957e39-742e-416a-add6-692c9a0c7b22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d5e0ddb-4c09-4ecc-8b2d-270020d25567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f131b67d-9966-4d15-96cb-f207a62a6d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51006771-b56e-4b90-b7c3-40ca33aaf788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03238735-396b-489b-8380-55ee4efb8171",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6cf7a1-2f62-4c79-a9ad-d136f1f548dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a7418c6-066d-4882-8d47-f9e4781fcb95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac523ce-4bec-49be-b125-ac36e551ded8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fb3c209-7204-4846-8754-3ac89872de64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48d6dae-0f8a-4cdc-9995-50fe45843e6f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f98489a-b121-43a7-9585-4c30fccb527d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a465120f-f1c2-4231-91b4-e0503d282c4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1929c9-faa7-4047-963d-b46fd59a84c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "964de989-fb3e-44e2-814e-2216a17069f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835f5c5d-bab3-4b32-9814-babdecc04bc6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8bca607-d593-46c8-b841-a3a2fb643775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "791b7ce6-b6c1-48c9-b9e2-cb9f6b8375fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc1cb0c-3466-4cc2-af2b-f576e951f907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caaad325-5cf4-4491-9c0c-b89c06c27279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6da761a-a4de-4bdf-92f7-5042e7fea916",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a1cc69-b661-4af0-9598-4cb7397a9185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b9df58-bb4b-43c2-a604-968612124184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7aa6465-03e9-4a87-9df0-7296403959aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0473b4a2-af3e-4deb-9eb6-9e860ecc1d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89bf1929-3a1e-4d3f-b1bc-df6a6ac2825b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9bf936b-d3fa-417c-bb9c-195320c09b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5617a4f1-187b-4185-9dcd-a9844bdca9c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d135ce-98c7-4399-a7af-dcbd65d55d09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b18982b6-968b-4976-bde9-5ed0088859a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9587b64b-6b96-45bd-931a-18fabcad0cda",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b3ba77-b0d0-4a2c-9665-b3ae75611602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa43a915-c378-43a8-b5d1-c8081accbef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7bec067-12e5-46d4-a4e0-b186b43cb8d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00589221-b3a3-4991-870a-019affee3c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeff4848-426b-4f19-b17a-3e73f31b36a9",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91383534-5b0f-412c-967c-74e29553d77e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f14b92bc-d635-4ccf-bddc-1ec308193ce9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0313f360-9421-4d7a-84eb-1d29dfea013d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5f48268-ef3c-407d-b7d6-069febfca084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2297a6-62f1-4736-a71b-cc5453a78448",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1337a52-71bc-48ca-a236-e2342b112e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58393cad-8aca-4fb2-8838-c41c8c248c3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99862be2-a428-49e6-9e6b-d6806556f383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7207b0-bf5c-4da1-a8a4-c4e7658c9b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48dbe786-1eec-46ff-b891-54bab703f678",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996cdcd9-d17b-4b4f-997e-7756b14a2e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9282527c-c258-4745-bbaa-0d3b00a523b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "122ee705-72bf-4c4d-bd9a-d24e4627cbb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1819de32-bfdd-4e1a-9233-44445668be54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34bdd20f-debf-4249-a68b-1c465a4f4477",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca03b715-6ccb-485d-8ce5-586fd335b98a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcae05ba-79cb-4aa2-8687-a869a666c5a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57714472-4cd2-4093-bff0-c0bcfebdeb86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfdd92d2-4ed4-4185-b852-c33ef5e8f2f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549095eb-6bd6-42f9-a1a3-fd61c3d39e3b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcbe1e1d-246d-493e-9475-6339a1143ee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c4f3f0-ea3b-4dc0-b601-c240c05ddfbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df8f1cc-5fc1-44c0-803e-981419aa90e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70975d7a-7dbd-49e5-941e-06d1048d953f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43551a54-e3c7-4f04-a2ec-64c017031ba7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557ec6f1-b860-44a7-aa67-a0ef8407e47f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab5025ec-b2a3-4a26-ad77-28f9bf54bf9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a503156-7b17-43c0-a3e7-7b03d50b299b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fee229e-fecc-482f-b719-06638e35e333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce380dce-246b-42cd-b5b1-81ae39a0090f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30fe077e-c890-4cce-a187-af7cc391565e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a7dafa4-5d0c-41f6-aa94-078b1f12ef18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "245b8229-5ea6-4bdf-9003-3ba965893546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9905d78-5975-49a6-ba24-c58e21a5736e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7f583f-061d-4b84-a1f2-4d83b2a870ca",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25732862-2200-4cae-85fd-487e648eb591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abdecfb5-782c-408f-a51a-974e9ec3893b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c53c60-5f86-4355-b328-42b3248f4f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fecfe2f-e56e-412b-b2aa-9485e9353526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2c3946-8925-4934-afd1-8bd68a1d2f10",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bedecf3b-c668-4f63-957a-022f614e5d07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dccce58-1c5d-48d9-9255-6029bece62ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2dbaf98-8cb9-4a46-bb3d-a21c01ff2425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e097923-07f0-4da1-8aea-0ebf4f843b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6578d54-eede-49fe-af52-ad90e0f4648e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40c8520-9824-4444-bce3-14affd6a5eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc88164-866b-40b1-951f-1333a58285e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ceba283-a61a-47bd-9cf5-ae3287c555af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a5b457-9c7b-4515-aff7-a8c303637dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c0679c-384e-4b55-911f-29b92ec2dae5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022644c5-69e3-4561-b89d-23cbce7b7eb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a421f6-beca-462f-a82e-c77eb8d8b18c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d84bc40-02c5-4f7f-ba8c-09528bd1619f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c3ffefe-e8d2-4893-a5a7-f8a67664b6fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81481473-5d8d-4308-887d-8467c1311be5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e2926b5-c130-4387-bf89-b97140d7bd7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6255c63b-c79c-4579-8d9c-06afdcc7356c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29996341-35ce-4bc9-9f0f-eefbdac308ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4efa40db-5f61-4533-a5c1-fcf3d20c8602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c14f62-1855-4634-843b-a1901ff24c02",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26918cf2-d475-4c93-9b9f-eac7aea50ba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c49f1a1b-9b91-454a-81d3-c3ea9e75addd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee45c75-943d-4bc8-8531-82bc26c87d71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7f70c92-5f26-4ff0-baf5-3b9a90d91067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11cdca4e-b529-4e70-99d1-d4f391d531f5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31a4610-c91d-4506-8d38-af549d1e42db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11016e14-a65a-4cfb-b96f-5d97110d5aab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dcb4528-b244-4c78-b42a-4f94dc1fe29b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36616330-0e93-44d1-a3dd-83b077f546ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bafb939-9f0f-4478-a2aa-299358182580",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9707f792-9a4b-40b2-bbbc-f963a9166c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f238e291-ea2a-487a-9d8a-9866cd380592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c39e586-7b6d-40fa-a469-a2c692cbcce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f720b19c-9170-4ddc-a33a-e81f74206f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80aa26ac-9cd9-4172-97ef-92feb938d4cd",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4424cf5e-475d-4bb0-9628-02c1c7623ce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da1543b-aca1-45af-916c-67be2de85f18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e813d0-88e0-44dc-8787-6b67b8fbd699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b92944c-05a2-4bbd-be4b-71ab66c7b0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f14d352-389d-47c2-9879-ce35efedd6c0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3767b45e-f59d-44e9-b857-b845ce934184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21fa67af-5927-4fd4-bb1f-18e718d0882b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3021f35-9c6a-4949-a60c-aed198f4b18e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee284453-a122-49f2-93d8-7b3a942cffa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a129a3f7-cce5-406c-a148-65e8c7acf9bb",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce910955-6146-455b-9293-aba6bd2a484c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "202eae76-7b5a-4ff5-84b1-e4167b7e6e67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7be3dc9-7c5f-4733-9bdc-3b85f111c57f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47a5282-1575-4acb-ace4-98bf861e24c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ccdfc3-1197-4221-b879-7c10e95b50b2",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25164d60-694d-46f4-af5f-98a0a110e733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f869073-dcac-41ba-a482-b74662f87d03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "461b58d8-c4ef-41d1-b049-fe3add99c13a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78f1c59c-c3af-44ce-9a6a-3861e495d0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b50b98-f9f9-4c19-8a61-bcb6e3e4b3eb",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed14ca09-34b6-400a-9052-6479d0b72ff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac512c22-a2c7-4948-b188-d90be901143a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02dd9660-4e03-46ab-b420-1b15a9911bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95065dd3-db41-4398-bff7-030dcdcac0bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876fef24-9ae6-431d-9938-ca9451f2412b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11872454-ac4a-4350-b92e-2a6e430f323c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef95d4e-cafb-4a48-a91b-186b946edb2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "730bcf4f-bfc5-4a39-a2ba-ccc279fd1bf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cef877f5-4140-46ce-afca-694ea54f3aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3cff5b-159f-4b99-85fe-a5c5ca2b055d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "087051e3-5f45-4408-8a57-824c0a589ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f433b74-2da6-47f3-8f08-3c426ac1675a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6551e828-725b-4ad0-ba5d-6bd5a6f96053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eb89639-d365-4438-af79-fb9c83e2732c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3592f3d-bb9b-4e94-96ed-ef652c04ecf3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b4fa61-c025-4004-b94e-6fdb6dda6100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49f4ea84-f718-44ff-8fc4-7410130e9895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4fe0e3-5cb6-4ea4-8676-1e5776234b3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f29389c-b296-441d-ae97-44c654df6792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077c1e45-4470-49ce-a124-4e65eb4b2aae",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786d75b4-9320-407c-8cc7-5cb73a7dd107",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b1d054c-178f-4686-b1b2-9c67da2fd1b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "849bd62a-7cfe-4e42-b05a-023c647b7565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7db6dd8e-e015-4188-a73f-d4152643a6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe58a92-b33a-496e-b21a-dd1d0f2c16ee",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7606cd-08ad-4762-b20c-1ff0efe26eff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdb6e406-da62-44d7-b66c-00594987e045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2136b0b-66d5-4730-941c-dcc6bbe7cbc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27549385-806a-4a37-9432-b79b2ffe358d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4429ecf0-e0a2-4597-bdef-09034bea2ffd",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1ccaeb-b377-4356-9aaf-95481c0eb501",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a4f7a81-b975-4c50-976b-41751dd1df32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5057a1b0-52ad-49a2-bb90-9edffb7a3b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdedc591-6ac5-4690-8bca-ae78921a05d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cbc5746-0490-4685-8c70-b494652a7527",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92235a81-4b12-4d55-b5a7-5b3a587b819c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09abf463-3ab3-4456-9d09-5e00da906caf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1abab04-c77e-4bf6-9e08-e0fb28aafb4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f56c6f3a-d8f0-4c5f-a01d-22126f088607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee27a82-96d0-4ee9-8f98-828c55991631",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144d5ca8-0fda-422e-9bb6-c9db8f13004e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "984b6148-6924-4c9b-b7fb-bcfc3abd7835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ec225c-c983-4911-95b0-a96b6a4f3840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0b26b67-c339-4033-b83e-bbf86e1b3af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35830f99-c493-41ee-bf4d-6be526152bed",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80b47b1-cfac-4e15-a5a0-16bd39d9c5cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "580d6943-1be7-45c4-8475-49005df1d925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdcc5c2b-1ee8-4d2e-b34d-d7d35d5a3269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "828750c3-35a5-43a1-b0ff-4d9ce699105d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5a7586-68cd-4dbd-9fca-2788b737991d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e407c1c3-5d87-4690-8c5c-6d571e6c3dd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "214450e3-e8fe-4134-a25e-c78891b86881"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c072fe68-7948-4f78-8b68-b03de532e28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dcfd5dd-8617-468d-9ce5-fdb834646913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b8bd18-c502-4d24-bc70-36e445c55939",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2671828-a25a-48cb-97b6-7ea377c0ebec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d0d6028-9a04-41f7-aa88-97da233db2ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e4b557-e2bc-41c8-abc6-01652e942e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd063300-445a-4091-aaaa-b5ad27283e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b76c23-1aac-4f98-9c8b-da72458f4a85",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd7c8a4-4222-4a04-b46e-2c33f62e48c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4fb2493-d8f1-48a9-ba9b-a3c9e221a9f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05eef4d-8196-45ba-94a7-acf315756280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f8993e-c4aa-4c4c-b6a8-ae5e0463ad05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042d4894-65ec-429e-8643-7a7efa18aa71",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f04226b-a31f-4009-a7f9-91fa97b567fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47a169d7-18a5-465f-b838-8fb50e897fc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9158f8-e61d-4737-b2f7-4b8ae2c64c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f2277cf-bfe2-4cc5-9d86-eecc860ac3bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2392bdbb-4446-4b92-97cb-e64c2f68d52b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935cc915-a3de-47a6-99f0-9ecc3530eaae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a447ec23-523d-4ff9-af35-2a7cf3064448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a32a132-51b2-4ec0-85dd-ac4c3f7f3b86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952c9d24-a951-48f6-bb55-96faf26b4426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f508139-7a7b-4e31-b64e-d1762e20a885",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa19fbf5-4807-4125-886a-f7792ae03022",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a4dc1b9-7b18-42a5-80b4-dea511bc324d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "388d2239-eaa6-45bf-aafb-98f8929a86a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4b2370a-f5af-411e-adc1-34498018b78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d19fd22-c687-4c1f-9fa9-0e1bfcff19aa",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5612c7ae-16bd-42c4-9700-856645ed927a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b0d2af0-2db3-4c96-bcc2-d00a8fc5fe87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1eb1534-1771-496f-88cd-45c9c763eb03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22350aec-6942-4275-bbee-33dbf5761588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb449a9-4b83-4d40-b496-b51cedf3eeb0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3da644-8e6a-42da-b516-95c2f2e4940f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d373b860-f4ab-4721-bca3-58f8e57a1b1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c78527f-c0a4-4a09-9e0f-88c31d2ab7cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a4a70c9-43da-49e0-abf6-0b60dfedd80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98ebf90-a427-4915-ab0d-39462ebe85da",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4499ca1f-a1bb-489d-8b55-1020cf9fefdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "130347b9-d978-4576-9c7a-b97b06365ac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc06927-8587-4bc5-a2ed-6eb099b87ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1f922a5-c643-4ec1-a10e-295d1a6578c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042e6cb8-fe17-4aa4-b60a-fd96e54f599b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a83ac6-6023-4509-867f-f64905d9a42c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a7bad48-f8c8-4736-badb-17e0797b9914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "016bf31b-8c71-47a9-8004-763073c312b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e51f55-109b-45e0-a02e-749b29b4c850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169e9f44-39bc-4853-8558-402caeaa401c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e964f1d6-e9fc-446f-b7e7-c1f645271a8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47cc1d10-54e9-4fe6-8de4-ec28067d60ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "503c2f05-84d9-40cc-ad93-c5dfe4143e85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c2d6aa2-3d5e-41c2-b79b-226d59bea3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66cc8b2c-59a7-4ae3-9e9e-6d9a88d2d763",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a97bf85-221a-4401-a604-a28f6b9b878f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afead071-aed2-4b32-8713-4364bb78bba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98fedfea-3a19-4e7c-bd4c-e36d3cbab7aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dba661b5-3110-47c3-b247-32bf17d86f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b165558-9396-4661-8216-0889969f755d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ec97cb-02f0-40c1-9420-e9e71def899b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b80091cd-cf89-4d05-8eb2-9bd5a7bebe96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e81ffd9-5ea1-42d5-906a-98f096390e76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98278b9e-0a8a-4599-9e59-6edea6206da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "327faed4-ed66-407e-9064-8ff39ffaefbb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f063a873-113a-4b72-9c64-2186aaaf22b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc503f5f-2dde-4946-8e2a-72df4516a2c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdb015b-91d9-485f-b42e-1631416e4b9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9970a233-277a-495f-9d51-a5d5032926d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82aa0c94-36ec-405c-aa87-0a020a27be3f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f30bf89-6a53-442e-90f7-f775737f855e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "190c8d2e-6e7d-4d70-95b2-3feae56293a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76497391-1684-4d84-b0f8-66bc3e5cad18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f277b9c9-0c47-4947-a2d8-d9d5bae4b0d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d4ab89-e47b-48bf-bc50-9a5c003032c0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b861004-3036-4dff-9e43-b653cd857174",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2153da8a-463f-496a-9639-66a03f1704c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf348e04-8de9-45b6-8b94-6cd22860b890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0845f4cd-1958-458c-96e6-311667f260ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98932d17-bfdf-4a66-8897-5557c99b7e70",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94b257b-32f2-4117-8327-1642c006abac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4be6f526-91a2-410e-b396-975f990e7d08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2667fba7-211a-4f73-9383-f1907700546e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74f8eede-0a82-4b84-aaf0-3fa1fd747eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ac55b6-55d7-4732-a618-f81818a26770",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d9d483-d3e8-4c38-80f5-142b350ef800",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30840f55-bd0c-48ad-bfa8-472619d2fd83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d093740-9250-4a75-8841-d65b23a255a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7bf2dae-6f53-43db-9127-a6ce75881dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a0fc82d-21fe-4198-a0f5-56ea8c58da68",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e011bda-f7b5-4442-a51f-1dcaeb683d9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "427b92ab-51f0-4a6e-893f-f716e0c6488c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0adcc9c-14ec-48b5-a9b0-da64196732f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be062ab7-fae0-403a-b428-d5001cbd2077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd97285-dee5-46dc-916c-4284119ce1f7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e95cb779-773b-4f1f-b688-b6c895d927b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9506894-eed3-4ad3-9104-77af966643df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0a0785-b362-4f99-b525-80ad806eb95a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a9ec24d-3b89-452d-b1bb-aafafa54ea61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005f1c0e-02c4-48f5-beb6-8f47dec4ca0b",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83853a49-98b9-4e57-a38e-9b18ded715da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00ef6e22-9d6c-4610-a1a3-9ab82ec7fcca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31e6e3f-7af2-4284-b864-e23d491369a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b295f81-f323-4b28-a2fb-a39fa3e20f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160b2795-61b5-4a11-a8f6-62f7491ffdfb",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ffedd9-25a8-4d32-b2c5-e54f5aa090b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ae2a5a8-4fee-4303-92dd-b3b457184b7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8148289-0755-448c-ade0-714d083b055d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d78d2570-e2eb-418d-8166-0589da2f0db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9446d5d-476b-4a51-85d9-98669c9a6ba7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95147a8b-9982-47a9-a40a-9bc5e2e0e9f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05656887-08de-41e6-aee9-f14f06715854"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "237b1f06-11ab-454e-854d-c33792397adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60506828-777a-439b-90da-1d632f6affb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53be1cc5-01da-445c-a5b5-cb2a82170f00",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e787ab8a-ff9e-4ee8-b666-b0e6751e0a4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fc4f31b-ea8e-414b-ae13-e314170e4cf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8b54b7-6608-4ec8-92ec-0fec411cd09b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f2b8ce-9cea-4f4f-9d0c-3c4dcb8a41a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61efe03-cf42-4f08-a16c-d777340618c1",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e88a62-253c-4bc0-b133-3b861ce6be19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c8a7cf5-0851-4592-8ebb-0aa31fa5951c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27bf4753-f1f5-4a5a-a8b3-b81b6b0dbf58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cefa5ddc-b38f-46a1-bb0c-6ae7eedce504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f246fe0-2b7d-46c1-84d2-90b0f5d9a0f2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34416b45-f6e8-4c4a-a752-1bbe9403a4de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ed489f4-205c-4104-8629-a95a2d8dcedb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6971b358-59d0-485c-b448-c47529c255e4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5abb0179-1697-4b39-ae1c-38957902e6b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71cbecc4-78d0-4bc1-a777-894c752fe93a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e576ed3a-9ccc-46f7-a175-f2daff66436f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cea1839d-d467-4e52-9948-7676b088a2cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a9be0f2-842d-43a4-80ce-cd4e9287858a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb513f2-0099-4e5e-8065-9b4301ef177a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64d8f858-03bd-47db-b63e-39968bb39582",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a2ab872-3b33-4c1b-a9d7-17dc462671c7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "99c81dca-b333-4556-8a5c-45d1418537db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b31d0249-1a46-43f4-8b65-1b4b82a85183"
                    }
                  }
                ]
              },
              {
                "id": "4a2aa5d5-1607-4694-9371-1ea639c0d9c4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "92a963e3-d1c1-494f-bf78-3987491daa68",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6128ce-d1ce-4220-8336-32a0d566e184",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "122d8fb5-cba0-45b8-a2c5-f0231c5e6090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4972c51-575a-47ac-bf90-4bc85e752b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4add487-455c-4a8e-901a-bc67c717fd7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b06d6b-8825-4e2c-bd9b-6c5621489219",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddfd314f-9b43-412d-b012-3d057b488033",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5a8342e3-31af-43ac-84b7-70095fbae50c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "087e534b-7b53-4c2d-8696-a809c60de488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72fe2fc6-f25d-4527-8984-643bd728fca0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dac10947-5d7d-405e-bbb1-cae4baac7f08",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "adc57962-70d6-4f50-a607-c2de18c0b6cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b9b9f2e-3540-4d60-be16-afeb8b3486d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "941c114d-b0a7-48e1-8fd7-c5935384301e"
                    }
                  }
                ]
              },
              {
                "id": "d8325bf1-e402-45c4-acc1-7d391b6df061",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "43c62ea8-2ab6-428e-8057-dc3a7181092f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c2e9ce-cddb-4e82-9dc6-15e56b148b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f0b32e17-8307-4711-a6fb-c08cab864a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ecefb4-b6f1-4078-b5e3-2b8f9366d47c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af1e3c50-35a6-4255-b79d-23afb1cc105c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9f3cbca1-9292-4505-a506-097f4396bd75",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dad35045-1e79-4aa6-a911-8c6ea7ca92c0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "649e821b-9be3-43c4-b1ee-29bc6ad979a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c22566ff-5493-4a37-87b3-a6f3a714b691"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed44c39d-a89c-4fc0-870e-6453d79d126d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5611fcba-5270-46b5-8c2f-f550256981ed"
                    }
                  }
                ]
              },
              {
                "id": "2986afca-695c-4374-b38f-e164fe257e68",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0266eb5-63ff-48ab-9b95-17e72a7aeab0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "75adc201-7fdc-4443-9324-d07790fbfeb5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cbb6af0f-5063-4b0e-82c9-28dc1ec3173b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "322575dc-91b6-420e-937f-061154bdf8b7"
                    }
                  }
                ]
              },
              {
                "id": "78ff9e2d-9148-4045-9ea1-197a6bbb9846",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d82bdf2e-e286-4d02-81e7-b33154d9e492",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "62daf20e-a247-4512-b993-30c8f5b3243e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10c46f26-39b4-4495-99ba-7d3a447d7252",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d39ae2c9-5bbf-4351-b4ab-5e6cd782e295"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62d47155-c099-4438-a7a0-38599ac0a292",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8316c788-e955-4d5d-ad57-b944beea1265"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed712c49-a7ec-41e7-9cd4-2c566bb5e706",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "602ea3f1-8831-40a2-9aff-6b5a11ff13cc"
            }
          }
        ]
      },
      {
        "id": "2d3af20e-e249-4a0f-952e-30d74a2e5c47",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "353b07da-1863-47cf-8c5d-0b99d020626d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "11cd6562-bbc9-4e48-a562-f6ff3f0e3d54",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "af52123f-e955-43ab-a974-1ba0dca991bf",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a4e539-89c1-4c98-b591-326658262a0e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d2ea1489-d752-4347-97e5-a4dbab4e622f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9957dcc7-61cc-4748-a970-363086a344a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b1a58dc-c701-41f2-8247-65ba9debd969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf122b8-12a6-4266-9940-711155d15433",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51bfe739-6440-4220-980d-445918278a02",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dfc3f19f-81c1-474d-bb94-59028ea0f148"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f23f653-4433-4ab8-9bba-c325fb9bc7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64d3adcf-2f95-4420-bcce-1c6b41bb0dda"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb5c6d78-68e4-4c80-a59f-d33cdeef3904",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d35f07dc-7e21-4ebe-bbfa-1c1346f0871f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b0fb220-8e9a-44b3-8793-7d69415234a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6597fb16-516f-4aec-9cfc-403499fa13cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4721e21c-384c-4fb5-8995-89fa436ce17f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "482964c0-7268-4157-9f4c-9eeb7057e12c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "adfe6881-9fb7-41a9-b6c8-a3dd28ee9d59",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "903b18e6-29b3-4a0f-93d8-470da629b7d1"
            }
          }
        ]
      },
      {
        "id": "926151c6-e781-4544-99ca-55b6cbe0d1e1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f9f46ff8-80cd-43b8-af95-51f9bd238583",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7981200c-2b3b-4f62-a99a-1ba232357f27",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "999b4345-8562-486a-8aaf-1175d23a3544",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de0fc56-c028-456d-8a65-3d67c29a41ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "19dd8f0c-c4e5-4b51-b29e-6a4b3d1965dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0b81c8-bbf4-4e25-ade9-c25bd4fcf3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86af233a-07b6-49d2-b67e-e06283be1f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b79c616-c667-43af-a4f1-a6ba79cdad89",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731c69e5-dcbe-4e3e-8cae-aa06cfd4db21",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4b8a5d12-da0d-415f-b3f6-ecadd5103422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae841218-c476-4d45-af15-8e139af51da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2cae22c-9629-4dd5-a7dc-b03050b47b05"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6772e2b5-2dfa-41a7-8c06-f9aae33c80be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a637bdf-23f6-4ce4-93cf-1cf97da2b6e3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "32c95b5c-86f0-4be0-9367-c69b99f1a82d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed59ab0c-e618-414e-966d-6ca285798c73"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8def6724-ef40-4175-83f9-7c92422854de",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0a667a93-292f-4a09-897f-d0169a9402eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2268a7d-65d6-4f26-9199-4af8ac8f83ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "068de0db-16a9-40fc-84d5-eb47c2fe052f"
            }
          }
        ]
      },
      {
        "id": "1669a4fa-641d-4e77-ac89-ed789f2e95c4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "17ede41f-8dfe-4faf-870a-e7bd5e47a397",
            "name": "Negative Testing",
            "item": [
              {
                "id": "134381ca-8956-4718-b197-12b79f4310d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "58dd8020-320b-45d1-a990-560fc716f301",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc1a946-f5f8-4ecc-9fca-3167e5cb7044",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e96160c5-055d-4a6d-b054-7de7c0fbf2c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e24481-8522-42a0-a1ac-e9d5decd32c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6332419a-f524-454c-b750-af39ae4835ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2ed811-65a7-45f2-9a92-c0455b1dd925",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e011158-e09d-40f5-806e-5c46fe749530",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d1c59d74-bc5e-4dab-b6bd-71bab659e110"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93293b93-1242-4a24-8d9a-a295bcd56dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6206b05-2913-422f-b794-b000bf61d35f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb8bfc3e-563a-452c-bd34-74ae94f80542",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8186e38d-2a09-4082-b0e6-f1b80b87f206"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "676309c9-5778-41f4-8726-c46eee6a0eaf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb0e28b3-15e7-40f4-9ee1-e2d54d4c6893"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75f650cb-f2b9-4beb-9241-4df13c6ba165",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b7d79171-897d-4a47-aa79-9229062fd506"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f26c278b-d112-441e-8adb-eb916f909fe4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "402e26dd-3fa2-4027-8db7-aa4c8bb6f295"
            }
          }
        ]
      },
      {
        "id": "3437eece-855c-44fc-80f2-28606e093e4f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07de25d8-55eb-4df4-9051-fd0b9bcce9ec",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e2a7681-dd7a-4c3c-81a8-e3240b7924d3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9613b3f6-cb01-4cd0-8fc4-2e2cec4e4fa2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72cb66ed-3099-43da-92d3-387b26b457bb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73d857bf-ab1f-44a9-b126-37361772396f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 87.96934865900383,
      "responseMin": 20,
      "responseMax": 711,
      "responseSd": 108.03486301905095,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1668818757115,
      "completed": 1668818789671
    },
    "executions": [
      {
        "id": "1d3a7410-b401-422d-9b06-62a79258482a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "db853cd5-6b07-4d24-8c7e-8cd34199bb28",
          "httpRequestId": "b508508e-f8f2-4154-a842-639926a76325"
        },
        "item": {
          "id": "1d3a7410-b401-422d-9b06-62a79258482a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e221a919-a40e-47a3-ac51-ab8893850af2",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 0
        }
      },
      {
        "id": "1308cb41-881c-4308-8538-cf6bfddc535c",
        "cursor": {
          "ref": "4932fd04-43af-4599-8dc6-2c792205d552",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "97e86615-0466-47b4-aa08-6015f90baea2"
        },
        "item": {
          "id": "1308cb41-881c-4308-8538-cf6bfddc535c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "40dc390a-5073-4d34-810e-e040009cd93b",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "cf1ed5d3-aa87-45ce-bc96-974ca8fc59f3",
        "cursor": {
          "ref": "cf0df2b9-c053-4130-b2e5-5fb9363fc497",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d8c86d51-a82c-4c1a-9a86-921c48096313"
        },
        "item": {
          "id": "cf1ed5d3-aa87-45ce-bc96-974ca8fc59f3",
          "name": "did_json"
        },
        "response": {
          "id": "56915506-30f0-4691-9ce0-9692ad8e6055",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8f8113-c362-4da3-a4ee-f5ff670bd832",
        "cursor": {
          "ref": "8a81ce57-7222-438d-b884-f4c92dad8d18",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "28c1b167-4d16-4d45-ae55-e63c670889bd"
        },
        "item": {
          "id": "dc8f8113-c362-4da3-a4ee-f5ff670bd832",
          "name": "did:invalid"
        },
        "response": {
          "id": "04c4675a-82d6-482c-afe6-1c8e2c8c3cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8f8113-c362-4da3-a4ee-f5ff670bd832",
        "cursor": {
          "ref": "8a81ce57-7222-438d-b884-f4c92dad8d18",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "28c1b167-4d16-4d45-ae55-e63c670889bd"
        },
        "item": {
          "id": "dc8f8113-c362-4da3-a4ee-f5ff670bd832",
          "name": "did:invalid"
        },
        "response": {
          "id": "04c4675a-82d6-482c-afe6-1c8e2c8c3cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91485ade-cf2a-48af-b8e1-6428753a8a02",
        "cursor": {
          "ref": "a640457f-d503-45e3-a3dd-c533089198f4",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a9535ca6-ba9a-403e-a8e2-d4b3b52ef50b"
        },
        "item": {
          "id": "91485ade-cf2a-48af-b8e1-6428753a8a02",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "fdf3c997-0d81-4fb3-8676-65c6e7b4f963",
          "status": "Not Found",
          "code": 404,
          "responseTime": 153,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637a1adc-c9f5-4c97-86db-52fe1c56849b",
        "cursor": {
          "ref": "7cb9c0dc-a1d0-4642-b3bd-dc937f5c0411",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0ed78a64-177b-4a6b-bcfc-a4bcbdf1c0b2"
        },
        "item": {
          "id": "637a1adc-c9f5-4c97-86db-52fe1c56849b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a612b50f-860d-4c1b-99b7-9de503bad073",
          "status": "Not Found",
          "code": 404,
          "responseTime": 30,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f3d59ae-49ef-4760-92b1-61cc7ccb33f2",
        "cursor": {
          "ref": "738767d9-6d86-42a9-920f-37c9add71f6d",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ea0618f4-e817-476c-a704-72896481c739"
        },
        "item": {
          "id": "2f3d59ae-49ef-4760-92b1-61cc7ccb33f2",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e5523b6f-4bf5-468a-afe6-b550f6b3b459",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1009368e-21e8-4e5b-a464-9621280ee35d",
        "cursor": {
          "ref": "96383d44-47ac-4d60-b9dc-0d7390a5dc61",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "24ecfff2-2860-47d1-91dd-828cdd878ebd"
        },
        "item": {
          "id": "1009368e-21e8-4e5b-a464-9621280ee35d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "55ca3663-8f03-4afa-8b16-8703a5bbd147",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1009368e-21e8-4e5b-a464-9621280ee35d",
        "cursor": {
          "ref": "96383d44-47ac-4d60-b9dc-0d7390a5dc61",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "24ecfff2-2860-47d1-91dd-828cdd878ebd"
        },
        "item": {
          "id": "1009368e-21e8-4e5b-a464-9621280ee35d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "55ca3663-8f03-4afa-8b16-8703a5bbd147",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a56da00-6526-4930-8090-1f75dd686f4f",
        "cursor": {
          "ref": "f6ef6132-dd6f-44d9-8f9d-c49ce72c8b62",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "15ec0a62-0179-40c7-b861-8f154b78ad8c"
        },
        "item": {
          "id": "5a56da00-6526-4930-8090-1f75dd686f4f",
          "name": "identifiers"
        },
        "response": {
          "id": "aba09abd-8fd9-4362-94a5-9628cf24a66a",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ce8869-2b0c-46ec-a77d-067ed02e619d",
        "cursor": {
          "ref": "c4e282bf-4074-4095-ad0b-624f74320ff8",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b219254c-f7f6-4875-81d1-76d39d2156d1"
        },
        "item": {
          "id": "41ce8869-2b0c-46ec-a77d-067ed02e619d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "442de573-e06e-41e5-9057-ec6b7f85b01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ce8869-2b0c-46ec-a77d-067ed02e619d",
        "cursor": {
          "ref": "c4e282bf-4074-4095-ad0b-624f74320ff8",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b219254c-f7f6-4875-81d1-76d39d2156d1"
        },
        "item": {
          "id": "41ce8869-2b0c-46ec-a77d-067ed02e619d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "442de573-e06e-41e5-9057-ec6b7f85b01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9852dfe8-ec5d-4e7d-84fc-392aaa079be6",
        "cursor": {
          "ref": "6be93127-de61-4438-9a54-99dc1739cc43",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "26271442-b459-42b6-b2bd-069ce6c0a1a2"
        },
        "item": {
          "id": "9852dfe8-ec5d-4e7d-84fc-392aaa079be6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dfa3835e-7076-4322-9bac-1f17a6f4ffa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3f187c-7a0d-45fd-9658-f738b4e26afd",
        "cursor": {
          "ref": "2a3cd77c-5ddd-45e4-b63c-22ce5948e68e",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c1104dab-c101-4e3a-911b-6c7ff3a8b7e0"
        },
        "item": {
          "id": "1b3f187c-7a0d-45fd-9658-f738b4e26afd",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "27be6bad-93ac-4649-bee8-fb768c3be18f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8031cc2-d879-42fb-adae-bb0d8decea95",
        "cursor": {
          "ref": "0a5b8fb1-4276-4849-bb28-d4bb90194a2c",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "963545ae-3696-4c04-a022-09997aa4623f"
        },
        "item": {
          "id": "b8031cc2-d879-42fb-adae-bb0d8decea95",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8b521462-6ce8-45a0-8674-b0042d686f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9244580-f967-49ec-942a-0890de77c129",
        "cursor": {
          "ref": "f8142409-3d6a-44d1-9a59-5f03f8b787e6",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4b98c81e-aa90-47b2-99d5-0ad21194af24"
        },
        "item": {
          "id": "a9244580-f967-49ec-942a-0890de77c129",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ec6bd04f-a626-47d6-944f-aad65d067f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be6be5ba-739c-4182-8d56-0aaff5f9ce18",
        "cursor": {
          "ref": "fb65ff66-f8f9-42bd-a911-7096f0e29a51",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "78f57f0b-d539-4005-9d56-c0e9c79b3013"
        },
        "item": {
          "id": "be6be5ba-739c-4182-8d56-0aaff5f9ce18",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7dde02a2-16f3-4e75-9103-9993d3ced3cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ac4057-9c59-491e-85e5-83961420d800",
        "cursor": {
          "ref": "b5bbe404-308a-485d-ac7d-db05780f726d",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1b6ff57f-bd1c-4ee8-b45e-6b47e4a6abce"
        },
        "item": {
          "id": "a3ac4057-9c59-491e-85e5-83961420d800",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "43044130-415f-49cb-b17e-eea9f827a886",
          "status": "Created",
          "code": 201,
          "responseTime": 572,
          "responseSize": 636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "c5e7e6a6-b88b-4925-bd2d-d625fb5c989b",
        "cursor": {
          "ref": "8b5d143c-91ee-452d-9f6e-d2697f757e16",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "806cef32-4610-41e9-994e-aea3e05bff7e"
        },
        "item": {
          "id": "c5e7e6a6-b88b-4925-bd2d-d625fb5c989b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "76f6b332-9ee8-4d2f-a03a-546df44841c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0286ceb3-1486-42ad-a77b-ba476da03ccb",
        "cursor": {
          "ref": "46d8e34c-f437-4f4c-b9b2-7db7e9158196",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fdb21c75-78ce-4807-a772-566e1e1127f5"
        },
        "item": {
          "id": "0286ceb3-1486-42ad-a77b-ba476da03ccb",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0b6df8bf-8f3e-43e8-bd01-ccda51b61c5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621a11fe-ccdf-4e80-b053-dae438120dac",
        "cursor": {
          "ref": "9da54477-d84c-4af8-b1ad-1e9bfabaebc2",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "78a175ae-c935-426b-93be-40e84b15a349"
        },
        "item": {
          "id": "621a11fe-ccdf-4e80-b053-dae438120dac",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "163ccddd-03c9-4ae1-9d5c-24af5d729165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f4cb57-f7a1-49d0-97e6-aeb50d12a331",
        "cursor": {
          "ref": "12f65baa-b27a-47da-937f-e8c473093018",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c533f7af-b651-4656-9e6b-e69506067175"
        },
        "item": {
          "id": "16f4cb57-f7a1-49d0-97e6-aeb50d12a331",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "568f3c1b-a530-4b26-9940-0332ea3be997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e87b6d8-43e6-4c7d-b64a-d3427666be0f",
        "cursor": {
          "ref": "09a5cee4-b962-4daf-b283-370cda6c0b6a",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "481622f1-8886-400a-9f5d-5f94bfbc1225"
        },
        "item": {
          "id": "4e87b6d8-43e6-4c7d-b64a-d3427666be0f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bb1d1541-9791-475a-887d-9a9eeb828306",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "885494c0-953d-4345-b544-42bb5801f782",
        "cursor": {
          "ref": "2cf71ed6-e0b3-4c0c-b289-40596a882e34",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f99d6e6f-caf8-4071-84d7-be5f3f6efd3c"
        },
        "item": {
          "id": "885494c0-953d-4345-b544-42bb5801f782",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "14a75653-0fd9-41e6-88c2-509d63ebba95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6076fd97-e99c-489a-8450-d817731d7cf4",
        "cursor": {
          "ref": "335795d1-c994-4663-a405-cacff5c06c69",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0e20246d-54a6-4e25-a310-6e164bba9def"
        },
        "item": {
          "id": "6076fd97-e99c-489a-8450-d817731d7cf4",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6d77490e-aee2-4988-a400-b20c2c2dbdb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b7ba34-22b5-4365-b05f-dbed400d25b7",
        "cursor": {
          "ref": "2b7cd1eb-f2f4-47c0-b760-9a5f120fc04c",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9bfe1b18-9f93-4dfc-871c-1839c35f0866"
        },
        "item": {
          "id": "c2b7ba34-22b5-4365-b05f-dbed400d25b7",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ab930988-eaf6-485b-94b3-29c4b994645b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307e6f7f-9992-4e58-bd24-ef025a30c584",
        "cursor": {
          "ref": "365ad1fc-0244-4246-8672-9aa377794181",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0a81bfc8-1025-4b5d-a904-11a1a8c3aeb2"
        },
        "item": {
          "id": "307e6f7f-9992-4e58-bd24-ef025a30c584",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c73ea48e-d8f4-4c34-addf-4aee51710f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c8d18b-e52e-46ee-98fa-04aff521e0a3",
        "cursor": {
          "ref": "12ee7716-729d-43ad-a5e3-f35f64e55d6d",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "271c3538-c0c9-47c3-9b63-649d432ddf98"
        },
        "item": {
          "id": "a6c8d18b-e52e-46ee-98fa-04aff521e0a3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3a059159-b729-4e6a-8b0b-f6516aef8cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387e5192-2aea-4b60-be35-02bd4cd579bd",
        "cursor": {
          "ref": "e36364c0-f7d1-490c-acc8-cc0b6f64a055",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f0e8e09e-e8c0-441b-8eb6-4c38e2563466"
        },
        "item": {
          "id": "387e5192-2aea-4b60-be35-02bd4cd579bd",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "11d39488-8f36-40f7-80b8-32d2c417f2b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6259ef-799a-42ab-a952-aa9dacc14c45",
        "cursor": {
          "ref": "1caa82ee-fc2b-4bd6-9267-62d8c86ba23d",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "dbb4b069-251b-4184-9ba4-51a8d1b44ead"
        },
        "item": {
          "id": "4b6259ef-799a-42ab-a952-aa9dacc14c45",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "65db3e43-5478-4601-affe-8fca0aae9f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea743795-a3cb-4c5d-9158-fe6e1f9dce04",
        "cursor": {
          "ref": "bde3b8cc-bdc4-4f66-ab07-b3ae10854e60",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9d80842a-e115-463a-8eec-511ed80a283a"
        },
        "item": {
          "id": "ea743795-a3cb-4c5d-9158-fe6e1f9dce04",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4efd40be-a17a-425c-88a0-c5e0cfae82b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e37fbed8-fbcd-4f60-b861-a4a4b6ce8b0e",
        "cursor": {
          "ref": "46bc4632-aaa9-47b2-9bd0-cb6e63ff9ae2",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1b212123-0eb1-4e0c-906e-07726aa54c4e"
        },
        "item": {
          "id": "e37fbed8-fbcd-4f60-b861-a4a4b6ce8b0e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "fa218f45-50c6-4144-904c-7285b4d25720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "442b47c8-7716-4579-bf3c-876c8624be2f",
        "cursor": {
          "ref": "8f6dec3e-718c-40e3-b3d1-1c4f3a4d181b",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "46a2ec87-5c26-46d3-a785-03168dc2015b"
        },
        "item": {
          "id": "442b47c8-7716-4579-bf3c-876c8624be2f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "217b372f-8d9f-42b4-9b32-2886e00eaded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c7f26a-1065-4953-8db2-fc196ad56722",
        "cursor": {
          "ref": "40354706-1d1b-4f72-8b2d-1b12c44ac227",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e9e7470c-25f1-404f-869d-f98131a5152c"
        },
        "item": {
          "id": "43c7f26a-1065-4953-8db2-fc196ad56722",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "eadae174-6a3e-4cbc-b052-1506be6cc607",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "80a72b4b-2764-469d-93ee-60dea0080839",
        "cursor": {
          "ref": "95ffc59d-d028-4ade-863d-0bad90af36cb",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "03e59891-f458-464a-9ec9-52126e8edc1a"
        },
        "item": {
          "id": "80a72b4b-2764-469d-93ee-60dea0080839",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "5a1a6bbe-0b39-4ea9-a85c-f07d07eccea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7765a8fa-0260-4a69-aea3-94bd053769b8",
        "cursor": {
          "ref": "421099d4-09f4-4895-8960-0fad96418939",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "76bee364-afec-4d3b-be71-95a538b1b2c6"
        },
        "item": {
          "id": "7765a8fa-0260-4a69-aea3-94bd053769b8",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "716936bb-cb6d-4fba-abc7-17e560e502d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d993db-ca34-4b4d-8c0e-32db7a82fe0c",
        "cursor": {
          "ref": "4bba7c0e-62ea-41ce-a077-faa053c701a8",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fe8067f9-dbc4-497b-a949-251e41cfe434"
        },
        "item": {
          "id": "87d993db-ca34-4b4d-8c0e-32db7a82fe0c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c57b8772-33be-4cb7-8094-7f70f58d3876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bce85ff-add1-46e1-95a3-7ac868945901",
        "cursor": {
          "ref": "ae394401-7f98-4a29-954e-275e26d0dd6d",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f1fdda55-b6d6-476c-ab56-c0cf8a5ac66e"
        },
        "item": {
          "id": "8bce85ff-add1-46e1-95a3-7ac868945901",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3e4e9761-f056-49df-be97-79e9b923b3f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "549ff890-f656-4f36-b016-a6788663e614",
        "cursor": {
          "ref": "34c81f59-4ecd-4045-acd4-40a4982bd406",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f0de0ec0-efff-49a8-afd5-1079f1259c6c"
        },
        "item": {
          "id": "549ff890-f656-4f36-b016-a6788663e614",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "30014882-abfc-44c2-9fcb-d341dc24bfd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d07332-e518-4c8e-9df1-3217a5da3966",
        "cursor": {
          "ref": "1408e486-2759-4708-8813-5419688ad9d9",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4d2df9db-583b-4893-bcb3-7a113e12dc46"
        },
        "item": {
          "id": "54d07332-e518-4c8e-9df1-3217a5da3966",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "94d36df2-9747-444f-980e-da45ba3f2aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f77386b-f0df-45c6-99cd-1e8da3d83c75",
        "cursor": {
          "ref": "874d0ab5-7360-479b-b4f6-06f8b7123132",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "934d727a-9a26-413b-9f3d-64d9d3e1d3f5"
        },
        "item": {
          "id": "1f77386b-f0df-45c6-99cd-1e8da3d83c75",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "fdcfe5b7-9c29-4f4b-8a47-450d3a55076f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62464316-54ae-4303-8558-439f3eb8a436",
        "cursor": {
          "ref": "34805e79-3efc-457f-b9b0-cda97e31d6f2",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "68f16da0-992d-4507-b156-9d7f612569c8"
        },
        "item": {
          "id": "62464316-54ae-4303-8558-439f3eb8a436",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "259facfc-2649-456c-b286-d523340cd7ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "615926a9-78e7-4e00-abc7-cd5a82294acb",
        "cursor": {
          "ref": "1a8536bc-62c5-4d80-b11b-5d4eda8b8cb5",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0763f941-e00f-4b4a-94e1-e1eaba3ea076"
        },
        "item": {
          "id": "615926a9-78e7-4e00-abc7-cd5a82294acb",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f733c16b-f6a4-4881-af3a-0df276d71157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c79169a-4038-4108-8349-d5c41f41428f",
        "cursor": {
          "ref": "4432ddfa-039c-4f29-9a47-fd8e2fcf17ce",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "acc94181-de2b-4c48-9304-bb8f37f88466"
        },
        "item": {
          "id": "1c79169a-4038-4108-8349-d5c41f41428f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a39302e9-ff6f-4ceb-9b12-7cdbfcf7c21a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f09c20-4d25-472c-8a99-849e331ab472",
        "cursor": {
          "ref": "3f5906bd-0084-4b4b-898c-ff6ccab52105",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ad7aa1fa-8500-47c5-a3e1-8151a933f712"
        },
        "item": {
          "id": "d2f09c20-4d25-472c-8a99-849e331ab472",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "59592108-8160-4a00-8427-04f4562cd86e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3724f6c3-1622-4a17-a03e-ff6407a03981",
        "cursor": {
          "ref": "6b0553aa-107d-4c47-b944-74449c47a345",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bca5661e-078f-49b1-8413-f31cdbf7d117"
        },
        "item": {
          "id": "3724f6c3-1622-4a17-a03e-ff6407a03981",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2b241d57-5987-40dc-8852-41e57662d9d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66da30ee-e42a-4049-87cf-08978199466b",
        "cursor": {
          "ref": "eb3518bd-119d-47ea-b352-7921cc4e7fc6",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f4f8c4db-f5d0-4310-ad1a-b883e65a9fd9"
        },
        "item": {
          "id": "66da30ee-e42a-4049-87cf-08978199466b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "99759334-b324-415d-8795-c26cb6ac65ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 295,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "cf9fc956-ac8b-4cdd-91b8-bb9f90938b01",
        "cursor": {
          "ref": "0c2db032-e18b-4559-8897-76a84691a283",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "691a0d91-b489-4635-9b99-54bc3f42a51a"
        },
        "item": {
          "id": "cf9fc956-ac8b-4cdd-91b8-bb9f90938b01",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6eb7ffe0-e8a1-4c3c-9400-66ffaaacf98b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3126709f-3c78-4b6c-b7e1-c1cf7ba8a44a",
        "cursor": {
          "ref": "52057952-7e21-4176-8015-1f83a0e398d9",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c042b14a-dac6-41fb-879c-0410896ad654"
        },
        "item": {
          "id": "3126709f-3c78-4b6c-b7e1-c1cf7ba8a44a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "28c33248-ed31-45b5-b551-2995aadd8508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a470b971-6f40-49b7-b264-3d8b2abb6ce8",
        "cursor": {
          "ref": "dcea2c8c-adb6-4e87-99b1-cb36428b7ec5",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f8eda604-191c-4425-9fd2-12c3243f3bfd"
        },
        "item": {
          "id": "a470b971-6f40-49b7-b264-3d8b2abb6ce8",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0c988a86-6f4a-45d1-9f4f-a3d86cc0c965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8dd9fc-e26d-4fa8-92f4-c056d85395a4",
        "cursor": {
          "ref": "90f413e2-e120-4d3c-91f4-2598cdf477df",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "23abb6b4-1386-46db-87f9-a3db42ce5e0f"
        },
        "item": {
          "id": "da8dd9fc-e26d-4fa8-92f4-c056d85395a4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9de2b47f-6689-4a42-a166-c69829c3c44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "432c9e8f-cacd-42fe-b7ac-c913aa05ce71",
        "cursor": {
          "ref": "df71232b-6af2-43c8-a0ac-65a404c821c1",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "925448cf-f196-49ae-9017-f2de0ccee720"
        },
        "item": {
          "id": "432c9e8f-cacd-42fe-b7ac-c913aa05ce71",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9815cd78-123a-4e49-8d38-fd8fb5d693e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1564c64d-17a9-43cf-88a4-10002f07d07e",
        "cursor": {
          "ref": "c220343c-80fe-436f-aa02-361003999d20",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2f788ab7-3df6-4d74-98b8-7ef9ccd58f11"
        },
        "item": {
          "id": "1564c64d-17a9-43cf-88a4-10002f07d07e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c566341e-440d-4187-ac8a-4e51e82fa917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62dc431b-e65d-46e5-bf94-2bcb8c583b15",
        "cursor": {
          "ref": "340d147e-37ff-4125-a2e0-35c6989bf947",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6364b6d2-8b93-45ba-98c9-d2582bb9650c"
        },
        "item": {
          "id": "62dc431b-e65d-46e5-bf94-2bcb8c583b15",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b3a66a2c-14fe-43b6-a42c-1da310b6dbfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "349e8a2c-d073-438b-983d-88333df15876",
        "cursor": {
          "ref": "c809af42-3d92-4361-96dd-1f1061dab666",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "73f37c9d-f8f2-49ba-96b9-ca5ef0334328"
        },
        "item": {
          "id": "349e8a2c-d073-438b-983d-88333df15876",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "98e1ccb0-7656-47f4-afd5-d7b2dd411cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58cdd878-7ecd-4223-9c82-69d0be5de265",
        "cursor": {
          "ref": "409c400d-affb-47c5-85c9-48f3b972c4b4",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "abc5d929-4d7f-4fe7-8191-96e1014033f4"
        },
        "item": {
          "id": "58cdd878-7ecd-4223-9c82-69d0be5de265",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d04c6366-c30e-4de9-82fb-726772d2d5b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a07410c-3049-4c74-a92a-60cb41c9c680",
        "cursor": {
          "ref": "5f0975e6-4301-43d1-bf6b-a634d7688a49",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "192382fa-5140-4ca4-b975-4b07529b5f63"
        },
        "item": {
          "id": "1a07410c-3049-4c74-a92a-60cb41c9c680",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a4df5499-f9ab-4230-a852-a6f5bc39048f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51017f3-796d-4688-9f4d-8f4caeb00eef",
        "cursor": {
          "ref": "d9e1f6c9-61a7-4d9b-9977-ea5513779630",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "bb69a245-2e4d-4dd9-a918-4c518383d435"
        },
        "item": {
          "id": "c51017f3-796d-4688-9f4d-8f4caeb00eef",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4fd85437-1008-4419-a534-7891d746ed86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24760280-932f-4478-b402-bb1e64c52a4f",
        "cursor": {
          "ref": "9f92531d-6dde-40f5-ad8a-f0a2d3c7e5cd",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2ff98338-5ed0-4e25-ac3b-2794a16f9fee"
        },
        "item": {
          "id": "24760280-932f-4478-b402-bb1e64c52a4f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c4f66458-ab89-45cc-9c6c-700ce9fc59d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9cb976-91dc-46d1-bdb1-2b3a3e84589e",
        "cursor": {
          "ref": "26d15021-52ea-4f8d-b835-2e5b93b30ab1",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e8d4cda8-5aa0-491b-8813-3d47f921ed21"
        },
        "item": {
          "id": "bc9cb976-91dc-46d1-bdb1-2b3a3e84589e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f7e431e2-adca-4f9c-a72a-4de99dc08760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a770048-1ae9-40fc-8733-b52c81018042",
        "cursor": {
          "ref": "c0328f38-75eb-4323-a804-03b9f6f83999",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4be96820-f7a3-42d3-9095-314e13886730"
        },
        "item": {
          "id": "9a770048-1ae9-40fc-8733-b52c81018042",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "09aabfd0-8f5a-4944-8ba2-208b2e3f4db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc7cf45-09f9-40ef-a43d-dc4088eb6593",
        "cursor": {
          "ref": "f7e932ad-7622-482d-9193-406c67df7052",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "31c4c37e-6207-4c35-bac7-ba6ad6e6b538"
        },
        "item": {
          "id": "fcc7cf45-09f9-40ef-a43d-dc4088eb6593",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1c0aa469-b221-49c0-a83e-12235fbe073a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0869e5b2-d771-48ad-84ac-11e33a6a4642",
        "cursor": {
          "ref": "b19b0f39-9708-481f-8d7a-b1507bf662bd",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "274b28fc-91f3-45fe-b47c-e8fc0a988278"
        },
        "item": {
          "id": "0869e5b2-d771-48ad-84ac-11e33a6a4642",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "74482f8a-c335-4cec-9a0b-a14c80071752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f206a012-811f-4aa3-b8bb-36e979b54886",
        "cursor": {
          "ref": "b4b92e5b-5d2a-4090-ba58-d2d93082a77b",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "97c58fd7-8ffa-4c10-bea3-72df6c68d4fd"
        },
        "item": {
          "id": "f206a012-811f-4aa3-b8bb-36e979b54886",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "b3d22c0c-ecaa-48e2-8c60-5f94780e8967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eabdacfe-d86a-47f6-8298-9d32b11e78b9",
        "cursor": {
          "ref": "475c7c2d-edd2-4af9-b909-731d5dbd76d6",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "aad80bcd-ce22-4536-a9d6-9f5e872a3064"
        },
        "item": {
          "id": "eabdacfe-d86a-47f6-8298-9d32b11e78b9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3fa0f25e-b312-4675-a874-d650156141b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc5d6fb5-ed77-4ba6-b781-f8b5a4ffe43f",
        "cursor": {
          "ref": "78513a5f-ba7b-4544-81bf-d968de9a70b8",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5d152fdb-e6b7-4fa3-9e88-782f31e1aa86"
        },
        "item": {
          "id": "fc5d6fb5-ed77-4ba6-b781-f8b5a4ffe43f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d2d3e165-3fbb-49eb-9b9c-346810186a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6acc020-cff3-4ea8-98ba-a3c63031decd",
        "cursor": {
          "ref": "a5df8286-0d5c-452c-9585-d8e0ff6d9993",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e4062268-9bd9-4f86-9f59-bc9157bca6dc"
        },
        "item": {
          "id": "d6acc020-cff3-4ea8-98ba-a3c63031decd",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "de825afd-fe1b-4bf9-ad71-3a9030eb6fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96cdcd1e-2571-4985-859a-116dd76657e6",
        "cursor": {
          "ref": "21ae62be-289f-4ca8-8345-cc2a4d4d0a9c",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0c823227-095c-4adc-b987-088117a41192"
        },
        "item": {
          "id": "96cdcd1e-2571-4985-859a-116dd76657e6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2762721b-3a40-44e2-b889-dd5cc517f8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12cd3be9-b03d-407e-95c5-b02154bf9342",
        "cursor": {
          "ref": "604f43ea-ea04-44c0-8837-ec402bdcd2be",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "991386ef-b48d-4aa6-bfa4-6ea477830f7c"
        },
        "item": {
          "id": "12cd3be9-b03d-407e-95c5-b02154bf9342",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "841530aa-a0a9-43a8-b8d0-b54ac2828807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa67cccc-8803-4e20-bcbc-93952fe10bf7",
        "cursor": {
          "ref": "28bbf7d2-e130-4fed-af63-8faad203747e",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4df7ee55-0925-4950-96e0-11158ecb1d0d"
        },
        "item": {
          "id": "aa67cccc-8803-4e20-bcbc-93952fe10bf7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "904b092b-7f53-45d9-b6e5-28d9e7531d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863d872e-a6a5-4b75-9d98-65472f5b7cb0",
        "cursor": {
          "ref": "c3cda21d-d83b-407f-a090-01e4094f3f3a",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "84f3f1c7-b001-4b78-b546-10a03fbb8f3f"
        },
        "item": {
          "id": "863d872e-a6a5-4b75-9d98-65472f5b7cb0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a3b8ba8e-da96-43e2-9df8-2e87ef6cdc8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb183d0-e8ec-4d6a-8940-a51b425fdd6a",
        "cursor": {
          "ref": "47368037-cadc-44f9-b655-c98413ff6679",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "67cdfbf0-651e-4cbc-b187-aba9b166ef96"
        },
        "item": {
          "id": "3eb183d0-e8ec-4d6a-8940-a51b425fdd6a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "517230d7-2bbf-4951-86b5-389ef1198e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091f599d-3d2d-48b0-979b-4b6064077adc",
        "cursor": {
          "ref": "f02d521c-ef01-4147-919d-b8cb74fda409",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d307a6ae-cd2d-4df4-8343-2d749b5be6bd"
        },
        "item": {
          "id": "091f599d-3d2d-48b0-979b-4b6064077adc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "212fea88-a20f-4a6e-af6d-1fd93ddf0f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ecf8294-983e-4fb2-b045-8f1213e08a75",
        "cursor": {
          "ref": "a42def16-ea89-4d49-aa93-bbd2a84623ab",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "26fa2d0f-7cc9-486c-b1ab-99a593807b58"
        },
        "item": {
          "id": "2ecf8294-983e-4fb2-b045-8f1213e08a75",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b66fc35b-4223-4024-b96d-8aff88250841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa12e3c8-df7e-4c16-8cf4-523bbe242801",
        "cursor": {
          "ref": "9470036d-67db-42a2-9df4-7530dffdc55b",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5e63bde6-cd24-4627-9d4d-c88525549600"
        },
        "item": {
          "id": "aa12e3c8-df7e-4c16-8cf4-523bbe242801",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "65b2e2ed-93a7-4961-9fb5-5f47b79293e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b54e56-f5a0-4ae4-b0a1-54034a613a54",
        "cursor": {
          "ref": "c9f6a312-d6f3-4ed2-9ead-7c8df9a5a188",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "525b2843-3394-4875-82bc-f2e5bb25fbbf"
        },
        "item": {
          "id": "60b54e56-f5a0-4ae4-b0a1-54034a613a54",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "02a67581-04a7-4f41-9387-38ceb5ff9a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603c4f8e-80fb-477a-af59-e774acc05de5",
        "cursor": {
          "ref": "be82308c-10a0-44cf-afeb-9c77b288228b",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c8c9e72a-852b-415c-9a3c-f08e644e8011"
        },
        "item": {
          "id": "603c4f8e-80fb-477a-af59-e774acc05de5",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "69ea3989-ffeb-41fa-9c24-4b1ffc9abfb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf3877f-4882-4478-9ff6-8a447926dbad",
        "cursor": {
          "ref": "d4519cbe-3980-4f4c-bd01-865594ef843b",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c8c9962f-ef60-4aa6-a37d-b8989da5bdc9"
        },
        "item": {
          "id": "abf3877f-4882-4478-9ff6-8a447926dbad",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "0b649bd7-fc23-414a-aa89-3a9aed299515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "979bc68d-3464-455b-ab14-2442d8f9fc9c",
        "cursor": {
          "ref": "c777a030-87f3-4b6e-a3c4-87a37ac19907",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c3d50bc4-7ecb-4303-bc5b-688537ef3357"
        },
        "item": {
          "id": "979bc68d-3464-455b-ab14-2442d8f9fc9c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f3e589dc-be04-410f-93f6-88d6a8599bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c61d422-9437-4894-952e-124b9e916e4f",
        "cursor": {
          "ref": "1b075e8e-d998-4a4a-9f4b-a81e2058699d",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "37e119af-b90e-482f-bd24-9fcb4e32cc56"
        },
        "item": {
          "id": "7c61d422-9437-4894-952e-124b9e916e4f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f339355f-3ca8-425a-afa8-826b57290bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0439038f-69a2-46c2-b65b-1ed3f63c66cb",
        "cursor": {
          "ref": "0f4b04d5-4d73-4691-95f9-204be4d681d3",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b30c373c-6939-4aea-a23d-157be83f99b8"
        },
        "item": {
          "id": "0439038f-69a2-46c2-b65b-1ed3f63c66cb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "648b9e50-1cce-491d-8efb-e1f60b7630cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a21ea13d-ccc3-4100-a263-b204fcb767bc",
        "cursor": {
          "ref": "b495c003-7c37-423d-bcd2-a42f1f2696b2",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9acdf121-8c19-4abf-a8d2-1db91d879265"
        },
        "item": {
          "id": "a21ea13d-ccc3-4100-a263-b204fcb767bc",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "da10ff7a-30ce-44d8-a697-bf81ae6cde96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54c3bef-083a-4af2-9fdf-59c7e225eba5",
        "cursor": {
          "ref": "d1f8588c-0416-46d5-893d-64314d716aee",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "413ebe25-68ce-4f00-b507-d68e8d6afc10"
        },
        "item": {
          "id": "d54c3bef-083a-4af2-9fdf-59c7e225eba5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ab12de77-9ff5-408c-a156-9dd6d78741da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8071da4-3cf2-4e26-967c-f730e1af94ef",
        "cursor": {
          "ref": "3ca6065f-0b4f-4146-a399-7496999e88e1",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "26edd59b-a5a3-417d-9b32-5afd9ec95253"
        },
        "item": {
          "id": "b8071da4-3cf2-4e26-967c-f730e1af94ef",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a39c5bec-76ec-4d08-af28-8a5dc5493e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881e282e-ff01-4fba-a4a2-f06918acf072",
        "cursor": {
          "ref": "cd660c0b-6cd1-4da0-9477-8286b814703d",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b4f31932-3790-4dea-ac5d-9da2bd896aa4"
        },
        "item": {
          "id": "881e282e-ff01-4fba-a4a2-f06918acf072",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "65753223-43c5-4e7c-9889-5aff2b0b74b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 276,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b194f44e-8e54-4da8-b72f-e074f295d397",
        "cursor": {
          "ref": "aee4fc8b-46e1-4c94-9820-8fba19a2309f",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "524c33f9-63c9-4874-8f34-df8b7239fc8f"
        },
        "item": {
          "id": "b194f44e-8e54-4da8-b72f-e074f295d397",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ba0655da-a97a-4896-85cc-7ce3c4a7c55d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d559dbd-7c95-4e53-bf42-5873ff4bd063",
        "cursor": {
          "ref": "297c43fd-d7cc-4535-ade8-ea364e1e10ca",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e95174a9-11cb-4e21-9ac9-a6c17b7fe0d9"
        },
        "item": {
          "id": "8d559dbd-7c95-4e53-bf42-5873ff4bd063",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "34813581-5abd-41b0-ba47-8b0f1f203e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbcfcd94-3c43-4fa3-85b2-73ebb8c107ce",
        "cursor": {
          "ref": "8576b391-5646-4f6c-b9bf-62d80f53ab79",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "1c393844-21a9-417a-882d-7b81f003afa4"
        },
        "item": {
          "id": "dbcfcd94-3c43-4fa3-85b2-73ebb8c107ce",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "affb0528-48b6-4744-8f25-e29f9a430887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c90d7a5-2ebb-4362-852f-b0bc86216ac3",
        "cursor": {
          "ref": "c4c12c10-99ec-4fc0-87b3-e5a17ba7105b",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "43b9df85-0952-499c-bb2e-a866dfb01983"
        },
        "item": {
          "id": "9c90d7a5-2ebb-4362-852f-b0bc86216ac3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2e503074-8653-45d3-b4e5-668af18d70fd",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "a56e9726-b464-4561-9a0f-f25a823a028b",
        "cursor": {
          "ref": "c466dc02-4871-4649-be4a-d51a9ed9018f",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4b29af73-4f1a-4ea4-9a3e-2fbed36ac093"
        },
        "item": {
          "id": "a56e9726-b464-4561-9a0f-f25a823a028b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "168524a6-ee60-4313-97b0-29975d7f1b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "564d7c8f-b51e-4f34-8808-8871231fc273",
        "cursor": {
          "ref": "7b1349c6-0b77-4e3b-bf95-e5a0e890227b",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7d1fbe14-2c11-4390-ad7b-c4f03ebab279"
        },
        "item": {
          "id": "564d7c8f-b51e-4f34-8808-8871231fc273",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "87c8ebc5-4a5c-4e43-b13d-54820b1a23ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10202519-9d27-4648-987a-7b2a0d42047f",
        "cursor": {
          "ref": "ed17967f-f81f-4d5a-9b7f-a6eb6c85dff2",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "67e50d4f-9c6e-410e-98eb-5391f21ff275"
        },
        "item": {
          "id": "10202519-9d27-4648-987a-7b2a0d42047f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c65b6111-80aa-4ca2-a8ef-c4fa12015646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef22a7ea-0e00-4f79-8a2a-9bd6c38a06cb",
        "cursor": {
          "ref": "fd31d6d7-2e5b-40ad-a723-1defcca9cda1",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "31aac2dc-5869-4314-a52f-94645612c06b"
        },
        "item": {
          "id": "ef22a7ea-0e00-4f79-8a2a-9bd6c38a06cb",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e5431fae-47f6-4162-a91d-f7cdf07247a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7651c691-f63f-484a-8652-78b20f38a13a",
        "cursor": {
          "ref": "99b6772a-6910-4e5e-9ad2-6f4c20427c7d",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8d453c1d-8c38-49d4-a61a-66bc7ed5a7cd"
        },
        "item": {
          "id": "7651c691-f63f-484a-8652-78b20f38a13a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0c2b610f-01b3-419a-b410-35e20c78dbc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e94f15-d41f-402f-a313-2d425de406f6",
        "cursor": {
          "ref": "c6f3bfce-db76-4bcc-848f-5bb4467393c8",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "783c6a03-9eda-4331-963c-1426e6d46ad5"
        },
        "item": {
          "id": "e1e94f15-d41f-402f-a313-2d425de406f6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "36b40a9f-1696-4881-9bfd-34df14ba3fcd",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "6c123dbd-f6b9-4302-8a48-0ce53b6f1239",
        "cursor": {
          "ref": "ceead0aa-f08c-4ce2-836a-3517716dfe74",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c83f6e1a-44cb-42d6-a016-e6ed5f6ef678"
        },
        "item": {
          "id": "6c123dbd-f6b9-4302-8a48-0ce53b6f1239",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3c9ee226-a969-4f97-a236-8b3bb009fb46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f796b84e-9274-40ef-a29d-08b6542f0885",
        "cursor": {
          "ref": "eae739ae-9694-4dff-b94a-c059864115e6",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ae0fcd61-5fe0-4c5b-8955-e51771490910"
        },
        "item": {
          "id": "f796b84e-9274-40ef-a29d-08b6542f0885",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e2180680-ddeb-4404-9b3e-a4f9fbb135be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b8c28c6-9f54-48bc-ad72-3aa42a3235a0",
        "cursor": {
          "ref": "8ec6a1e9-5a11-4ff0-98f5-dc009f27ed20",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4088001b-5d80-4b11-8351-d10ca99cffeb"
        },
        "item": {
          "id": "3b8c28c6-9f54-48bc-ad72-3aa42a3235a0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f446789b-603c-4be4-a194-a7aff272d0cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07e30e6-d6c8-4427-9f7b-3175ea3c12f2",
        "cursor": {
          "ref": "d6185f67-9993-4030-987f-a42f4cf2c5bb",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7a8f995c-ca2f-4aad-b20a-94d1a964e8ea"
        },
        "item": {
          "id": "f07e30e6-d6c8-4427-9f7b-3175ea3c12f2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "fd706911-d9dd-4751-8527-6e1f0419bb7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566cfa2a-98fc-4f4c-a307-3aec8ef2ce7e",
        "cursor": {
          "ref": "3cbc32ea-5f76-4f3e-9908-6aca5d61acc9",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2a5e6086-4ce7-494e-82c8-a2be6e08c252"
        },
        "item": {
          "id": "566cfa2a-98fc-4f4c-a307-3aec8ef2ce7e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f4d2ca35-359b-4fbc-bd85-3b62af25a665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5009ada-91da-47cf-8e01-0ccf4f79d4c5",
        "cursor": {
          "ref": "9147a868-c8d8-49db-ad37-4d2f557d2a6e",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "664a67e6-722a-4d72-b83c-edb453dc823d"
        },
        "item": {
          "id": "b5009ada-91da-47cf-8e01-0ccf4f79d4c5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a92c171e-205e-4efe-9b42-0aa4f33a8d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2deb060-2382-4ea4-a64f-185cd7d96bd6",
        "cursor": {
          "ref": "7e2b6b20-074f-4398-8f59-871273d4d8ac",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "31ce9541-0b83-4f67-8c3c-8d14b034e507"
        },
        "item": {
          "id": "c2deb060-2382-4ea4-a64f-185cd7d96bd6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d7f3b7f1-301f-448c-ae3e-cde0db53d8ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2b2662-2ba8-4529-9254-154bbd66205e",
        "cursor": {
          "ref": "40664f84-218b-40d4-988c-16c7b5bf3d16",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "854c253e-32f6-403e-8c0a-3751bd002b6d"
        },
        "item": {
          "id": "eb2b2662-2ba8-4529-9254-154bbd66205e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "aca62205-6a24-46dc-ac5f-74a2e5904895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863c17a9-5d6e-4faa-b0be-fbe03368f3c8",
        "cursor": {
          "ref": "9dc8b500-5068-40d1-acb0-b72b810883b0",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e18a6e37-2ca2-4c1a-b6ae-ed7731b4fd6d"
        },
        "item": {
          "id": "863c17a9-5d6e-4faa-b0be-fbe03368f3c8",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e77569a9-3074-4586-bfc3-eabd595fb790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "8967524f-b16b-4ae5-acff-c9b413819453",
        "cursor": {
          "ref": "b7cb9f8c-886f-4a17-9ba6-85f9410b4107",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5938af86-3766-4142-92e2-26556a9c676f"
        },
        "item": {
          "id": "8967524f-b16b-4ae5-acff-c9b413819453",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "dda4e670-e395-4f8b-8685-71725f516fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "3a42b6f4-489e-4e3e-9ce3-5ee7e0ad589f",
        "cursor": {
          "ref": "18217a21-133b-4a52-8654-48162d5cc60a",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a973ba38-2071-400c-b566-9ea46efbd15a"
        },
        "item": {
          "id": "3a42b6f4-489e-4e3e-9ce3-5ee7e0ad589f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d0c24282-6de8-4374-870c-b6700e2ecab7",
          "status": "Created",
          "code": 201,
          "responseTime": 395,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c648f63a-9f66-4d59-a042-d892e8be5b23",
        "cursor": {
          "ref": "0a0db734-bc8e-476d-8e41-3eb8ee58c901",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ae1dd76c-1f33-4e34-9d57-dc068dff9f06"
        },
        "item": {
          "id": "c648f63a-9f66-4d59-a042-d892e8be5b23",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "f126d868-5093-4a92-a263-b3f81330eab0",
          "status": "Created",
          "code": 201,
          "responseTime": 371,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa9bf84-c635-45b8-ac91-76fb702f99bc",
        "cursor": {
          "ref": "f79c45ea-d138-4ec3-b1be-4f266e6864b5",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "625cb146-8382-4777-8222-aaa039b49f74"
        },
        "item": {
          "id": "1fa9bf84-c635-45b8-ac91-76fb702f99bc",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c95a475b-f00e-4257-9b6a-d196e8b1acdc",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a50a4d-1045-49b7-8b66-3fd16646f809",
        "cursor": {
          "ref": "467c9ebc-1dfd-4295-a8e5-06607a67c42f",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "360a7d45-8054-44eb-b325-5ae1bc47d21c"
        },
        "item": {
          "id": "84a50a4d-1045-49b7-8b66-3fd16646f809",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ab58655f-6b8f-4585-b17d-434c5d825d94",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de34552-e728-4556-be89-fc4fb6d446ae",
        "cursor": {
          "ref": "988f92c1-0f80-4378-8d22-7b1c35eed1a0",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "711b2821-9dc9-4b5a-88b3-caca6e3b727d"
        },
        "item": {
          "id": "7de34552-e728-4556-be89-fc4fb6d446ae",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d7eff3ba-b8fe-4ce9-a614-c19e5c5a4262",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca6f44f-89dc-4174-b905-e66e9c774d7e",
        "cursor": {
          "ref": "8e1aa3d1-2678-4261-9ca3-c80ac50d13f7",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a7bf197a-f5f9-4042-a4b6-da7d813b7442"
        },
        "item": {
          "id": "0ca6f44f-89dc-4174-b905-e66e9c774d7e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6f31d7e4-2262-4a89-b5f4-46f8c1b1a049",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2189bac-9b82-4b03-9286-5d2fc1798ec6",
        "cursor": {
          "ref": "ffd62291-4f2b-4d58-9a15-71c6b0fff2d7",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e6ac364d-b82e-4ab2-9bff-657a46b06de5"
        },
        "item": {
          "id": "d2189bac-9b82-4b03-9286-5d2fc1798ec6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "dbe1739f-0bd5-4ea0-9d6d-a68f340c1950",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "d2189bac-9b82-4b03-9286-5d2fc1798ec6",
        "cursor": {
          "ref": "ffd62291-4f2b-4d58-9a15-71c6b0fff2d7",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e6ac364d-b82e-4ab2-9bff-657a46b06de5"
        },
        "item": {
          "id": "d2189bac-9b82-4b03-9286-5d2fc1798ec6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "dbe1739f-0bd5-4ea0-9d6d-a68f340c1950",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "b960f31b-1c6e-48d7-9536-c56f22a7f56d",
        "cursor": {
          "ref": "62a1680d-2c0d-43c6-9320-9f0a42881381",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "135eb8c6-785e-401d-b967-400ebbf82a8c"
        },
        "item": {
          "id": "b960f31b-1c6e-48d7-9536-c56f22a7f56d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dfe5907d-ac99-4160-84fc-308bf8d1fac3",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "fd027d11-02c5-43a1-9576-24af666cc167",
        "cursor": {
          "ref": "df8f5b98-9da2-4e57-a096-a732ca376803",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "74795f9b-5899-404e-a437-dee89a8eb383"
        },
        "item": {
          "id": "fd027d11-02c5-43a1-9576-24af666cc167",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "acc92a5a-e011-4d47-882f-69b4001bd7a8",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "2fece44a-8572-4a28-abe1-fa28b03ef3bb",
        "cursor": {
          "ref": "ce77cd7a-c1c7-4a2f-9bfc-e7eeac2eb7d3",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "bf78b8ff-15b0-41bb-9fed-94736ab5e465"
        },
        "item": {
          "id": "2fece44a-8572-4a28-abe1-fa28b03ef3bb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "bb93ad0a-b2f1-4d28-b15b-ac7c07e58a2a",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "23c94deb-cf68-4464-83c3-f1a064c3ddb9",
        "cursor": {
          "ref": "bc0825ed-3954-492f-bc43-182a654e7b9e",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7f014841-686c-4b21-b5a0-66d2670a142a"
        },
        "item": {
          "id": "23c94deb-cf68-4464-83c3-f1a064c3ddb9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6c7e6b0a-ce34-41b3-a95d-89606e6062c8",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "02dcb9fc-8951-4ff2-a67f-caa9beb93dd8",
        "cursor": {
          "ref": "99cfe2dd-b1ea-459f-a370-5a06bf4ffbc3",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5319e770-0032-4264-8a4f-e375ff2ee083"
        },
        "item": {
          "id": "02dcb9fc-8951-4ff2-a67f-caa9beb93dd8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c8b7b96c-d016-4aac-ba49-88db09006a09",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "6af3b878-5b79-4fd2-96b7-de35e8cb98b8",
        "cursor": {
          "ref": "1a973b43-50b7-4947-a219-edaf99845847",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e916f1e3-c912-4293-950d-4e85499dcbe3"
        },
        "item": {
          "id": "6af3b878-5b79-4fd2-96b7-de35e8cb98b8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "67d649f4-2691-4631-aab8-b9bcf154b192",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "cb530b47-d074-4683-9360-351931fddef8",
        "cursor": {
          "ref": "13d69662-d9d5-4c57-a5ff-a7af8d35f9ce",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8a765f7c-224b-4f18-9b4c-4ac700ca8b51"
        },
        "item": {
          "id": "cb530b47-d074-4683-9360-351931fddef8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "23a8a9c5-cf49-4296-a4aa-cee4ae07eb46",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "1e4a0edf-ea8e-4800-bff4-5a47328118b0",
        "cursor": {
          "ref": "15a1d620-ed4a-4e19-87d5-a02806a7011d",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "72ac3745-d98e-4036-8a69-167facef68a1"
        },
        "item": {
          "id": "1e4a0edf-ea8e-4800-bff4-5a47328118b0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b5a3ef39-e82b-4d22-83d5-26014fe846b4",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "619fd844-b932-427d-9f1a-747a8ce74a32",
        "cursor": {
          "ref": "013e0a62-3271-4bc6-abee-8a6dc2887514",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "05800c24-774f-4cb6-8820-22af3e1b765c"
        },
        "item": {
          "id": "619fd844-b932-427d-9f1a-747a8ce74a32",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "732cbc8f-a373-4ec4-b219-6054f434b8f8",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "27ce7662-87d2-4a06-be1f-fb403e602697",
        "cursor": {
          "ref": "ef0d0061-27f6-49ea-ac82-6f37cf3850d2",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f7ffdc56-1941-47eb-ad52-66531841a9a6"
        },
        "item": {
          "id": "27ce7662-87d2-4a06-be1f-fb403e602697",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2bc2ba35-85bf-47e1-9c91-cd50340e1c27",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "e272f74f-8d7d-4dce-a125-1eec08911c63",
        "cursor": {
          "ref": "c6b18e5c-2053-4783-860e-8a1db0261c20",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9d9010cb-954e-45b8-9331-607571d137d7"
        },
        "item": {
          "id": "e272f74f-8d7d-4dce-a125-1eec08911c63",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "79934ded-0f5e-4ee4-a141-289b849567b9",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "610b1ccc-2736-458c-8840-a559b2faae13",
        "cursor": {
          "ref": "deed1bf8-58a4-4db0-b6ca-51af2d1006ac",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a499db80-f64d-4cac-8732-c97edd5946b2"
        },
        "item": {
          "id": "610b1ccc-2736-458c-8840-a559b2faae13",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "71aeb3f3-bb64-419e-a728-ac06be975130",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "188067c5-8227-43f3-ac85-a9f533309303",
        "cursor": {
          "ref": "8bff5c85-fb7c-4460-8b51-3920e840baa7",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "666ea91d-4247-4ead-88ce-a510ad98d1c7"
        },
        "item": {
          "id": "188067c5-8227-43f3-ac85-a9f533309303",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f1a22b3b-1a67-4223-80be-9c640d559781",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "997849f0-825f-45d6-a650-4c0a5a5a0343",
        "cursor": {
          "ref": "879c0bfe-11df-4857-9e18-c2cdb702213f",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8961c8c3-7e58-4145-a945-6dc3da06f330"
        },
        "item": {
          "id": "997849f0-825f-45d6-a650-4c0a5a5a0343",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e4694c1c-7542-41b7-a32b-a679ea69c1d6",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "959cc3fa-771e-4e96-8da6-1c2697914542",
        "cursor": {
          "ref": "d136bc4e-abd1-435c-b7d3-8cc85940cea0",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ceaaf726-2207-40d4-bf1d-1477a1cff78d"
        },
        "item": {
          "id": "959cc3fa-771e-4e96-8da6-1c2697914542",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "63bf2b19-949f-4b8d-a267-e5ffbf4ec3a5",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "02ad7e4d-3b55-4351-9e3b-45dea89aaf91",
        "cursor": {
          "ref": "6c3aedf9-abc8-4c31-b910-8d463eee8f54",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "82dc33e7-a21e-4722-946c-6a4cb6bc7285"
        },
        "item": {
          "id": "02ad7e4d-3b55-4351-9e3b-45dea89aaf91",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a100f2ab-24ff-4edf-b74a-da73b0dfa1b3",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "e6d39c54-c7cf-4ead-bdc9-ea701764ea96",
        "cursor": {
          "ref": "c9191d8e-addc-4fa4-89a2-d08700bd2573",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ef34007e-4f7f-436b-9f1b-b6efaf1591c3"
        },
        "item": {
          "id": "e6d39c54-c7cf-4ead-bdc9-ea701764ea96",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "46373063-1b65-4729-867f-c0699cf4162d",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "56e0ab34-fcd1-4e17-8c87-ad83dea35d72",
        "cursor": {
          "ref": "a9e49b4c-2967-40be-ac62-032b1f4eb1f2",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "eed0d965-1e30-4d1b-9a16-8d9cc9ee85a2"
        },
        "item": {
          "id": "56e0ab34-fcd1-4e17-8c87-ad83dea35d72",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a4925429-beb6-43d6-b013-38ceea85dd21",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "4ace8763-a232-4188-9f27-007e1b5fac48",
        "cursor": {
          "ref": "e0919713-b078-4eac-ba18-73644377b658",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "65d473a4-3fbe-4144-92c2-c1c93f95fb22"
        },
        "item": {
          "id": "4ace8763-a232-4188-9f27-007e1b5fac48",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "82631a5f-a711-4c9b-aff4-d757ee64beed",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "910d78c4-cbbd-4fd2-82df-99abc928e2d5",
        "cursor": {
          "ref": "4f5f818e-5e85-4123-80b8-fb4b82573398",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "fa14194a-96a0-475d-aa19-0d591ca2061e"
        },
        "item": {
          "id": "910d78c4-cbbd-4fd2-82df-99abc928e2d5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "454b8d1e-eff1-4210-a842-86fbece77347",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "f8f22f49-0164-4c9c-b80e-8abde452c50f",
        "cursor": {
          "ref": "f34700ef-144e-40e1-a6ca-589bb5840ea0",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "da63537c-ca8c-471e-8f3a-712f15acb10b"
        },
        "item": {
          "id": "f8f22f49-0164-4c9c-b80e-8abde452c50f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f1df7942-05fa-48b4-85cb-7b869c18abad",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "490eb794-5f6c-4d2d-b016-53501596fcba",
        "cursor": {
          "ref": "7d760693-f31d-4b9a-86a7-44aa88d4a1bf",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "da40bcc8-6539-4653-938b-c38f21c31c90"
        },
        "item": {
          "id": "490eb794-5f6c-4d2d-b016-53501596fcba",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4674e3a8-b9b8-4fd3-bb94-bf92aa8e5c67",
          "status": "OK",
          "code": 200,
          "responseTime": 35,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "e33a6f95-988d-46db-a2da-b36c02367219",
        "cursor": {
          "ref": "cdb50298-d616-4d3c-8157-bf972bd9a692",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "41fac79b-8e4f-4b68-849a-9253f71ba990"
        },
        "item": {
          "id": "e33a6f95-988d-46db-a2da-b36c02367219",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "db87faea-410c-4664-9828-a1a3f34a567f",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "b6f58f78-a247-4d60-81cd-41fae54d798b",
        "cursor": {
          "ref": "80e42b4f-c2cd-40f9-84c2-2c9639daccdb",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c3c2bd57-2f39-456d-bdf9-a3402fc036c7"
        },
        "item": {
          "id": "b6f58f78-a247-4d60-81cd-41fae54d798b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ebd531c2-bc8c-410d-ac92-f023c70e3949",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "efb249f7-0de9-4caf-a289-b5c1e46c3e5f",
        "cursor": {
          "ref": "7ef45482-776a-4dc4-8d78-690617661472",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a9a57249-6cfa-44ec-920d-e6439a5b00ec"
        },
        "item": {
          "id": "efb249f7-0de9-4caf-a289-b5c1e46c3e5f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d1ccf062-1116-4792-ad4c-c18418bbfc05",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "a5ee7084-9a1e-49fe-9a7b-07ab03247baf",
        "cursor": {
          "ref": "45ad918a-9bb4-47fc-a665-6e8d2e8d10b3",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2c87516a-5e09-453c-be2b-568e758f546d"
        },
        "item": {
          "id": "a5ee7084-9a1e-49fe-9a7b-07ab03247baf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "dd4ca71d-5e35-49c0-a806-e5e621f13894",
          "status": "OK",
          "code": 200,
          "responseTime": 37,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "fe74b3b9-2ce1-46bc-93af-b891bc9daf9b",
        "cursor": {
          "ref": "cfbc1dd1-8daf-4dfc-855f-0c4cb9923c03",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6673e787-3bc9-4acd-8652-21b2b1510e02"
        },
        "item": {
          "id": "fe74b3b9-2ce1-46bc-93af-b891bc9daf9b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "53a88bc2-a580-4e98-b8ad-2508c58630e4",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "b62f33ab-3f69-49d3-9fe8-9f87e1829ac7",
        "cursor": {
          "ref": "7435c880-c627-4c0c-87c4-0eb7ef176056",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4ca64693-02bc-41df-853d-32e64f4fbbd2"
        },
        "item": {
          "id": "b62f33ab-3f69-49d3-9fe8-9f87e1829ac7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6ba524c3-4153-4a35-8575-a0e36ae41edd",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "66f41702-cad1-44b2-b2dd-15bf0225bf4b",
        "cursor": {
          "ref": "97f5da73-7bb5-496c-ac95-62d2fe0aa721",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a0104c58-1d69-49b9-a161-0186ef50d9dc"
        },
        "item": {
          "id": "66f41702-cad1-44b2-b2dd-15bf0225bf4b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "30b99fa9-50b8-46f8-8cc6-4d0954af2456",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "a5c45871-f0d2-45f4-aab3-2190e448aaff",
        "cursor": {
          "ref": "16f2e5f9-08be-47b5-b8fd-61a9be5363af",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4d77156d-8deb-4e95-9b07-31108f84816c"
        },
        "item": {
          "id": "a5c45871-f0d2-45f4-aab3-2190e448aaff",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "91cc7827-0ab5-4b56-b93c-b028d5d67ae7",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "5070e165-90e5-468e-bf79-5f13999f56f8",
        "cursor": {
          "ref": "15913f0c-16d1-4989-914c-b7cfcad1b2bf",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0f20464a-0156-4b29-b1b7-23da979f3fc3"
        },
        "item": {
          "id": "5070e165-90e5-468e-bf79-5f13999f56f8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "abf2b318-a9af-4ff3-aba5-24bc332ce09f",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "73795abc-356c-4625-a70b-53e8d5c7634b",
        "cursor": {
          "ref": "4840133e-0d40-482a-bcb0-a37db652bf7f",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ee0c3d03-a367-487b-ba37-15d7d441f9bb"
        },
        "item": {
          "id": "73795abc-356c-4625-a70b-53e8d5c7634b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b64a3fcb-f282-4951-85e1-c77ee4680024",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6be955-8364-40a2-b04f-41433fa13469",
        "cursor": {
          "ref": "442c224b-23e6-46ca-a960-2f012aa581b3",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b44e8b5d-0ec0-4978-9485-a0b30a97b911"
        },
        "item": {
          "id": "2f6be955-8364-40a2-b04f-41433fa13469",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "27df4f0f-ec94-4d9f-80b4-46e816f9b5c2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 43,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4f17d1-9fcc-4914-a220-8374165ae819",
        "cursor": {
          "ref": "8b331883-a387-415c-b93e-9e578fc1c1ff",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5b7df2a1-efe0-45b4-9f5e-b396bee9838f"
        },
        "item": {
          "id": "1e4f17d1-9fcc-4914-a220-8374165ae819",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8d5b1756-f169-4e70-bc81-ef5b28fc548c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4f17d1-9fcc-4914-a220-8374165ae819",
        "cursor": {
          "ref": "8b331883-a387-415c-b93e-9e578fc1c1ff",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5b7df2a1-efe0-45b4-9f5e-b396bee9838f"
        },
        "item": {
          "id": "1e4f17d1-9fcc-4914-a220-8374165ae819",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8d5b1756-f169-4e70-bc81-ef5b28fc548c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "853bb2c8-97b2-4210-8e42-afe696c5cd40",
        "cursor": {
          "ref": "ed421def-6ab2-4698-9686-cb98b4d21a42",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a6d0e676-9294-41d8-93e7-b8a4149df94a"
        },
        "item": {
          "id": "853bb2c8-97b2-4210-8e42-afe696c5cd40",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3b61f9a0-d19d-48bc-b6a1-9dd73073ad91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddfdbcbc-4437-4087-95c4-7c0d5056a7d7",
        "cursor": {
          "ref": "017655ec-c831-4947-ba82-c68db67b245a",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ba33268f-72b4-4e76-a1ad-563727d50e4e"
        },
        "item": {
          "id": "ddfdbcbc-4437-4087-95c4-7c0d5056a7d7",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "664381fe-eaba-4a73-964a-51fde670104a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf64c6c-974f-4d8f-858a-37a0fe5e2a87",
        "cursor": {
          "ref": "4c59c2dc-bfe9-4ab1-a3f1-a69d6c86aa35",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d919e345-c636-4f7e-abd2-e2074b75a4b0"
        },
        "item": {
          "id": "daf64c6c-974f-4d8f-858a-37a0fe5e2a87",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "30b5475a-319e-4a7c-bec6-92319c92ff69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5a3038-b7b6-448f-b814-b908c9c94dcc",
        "cursor": {
          "ref": "908983ec-f41d-4c6e-b5fe-90c742d7a822",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2cf892ec-30a6-4098-af21-13d7cb017a12"
        },
        "item": {
          "id": "3f5a3038-b7b6-448f-b814-b908c9c94dcc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "98d88f1c-b8b5-4ec0-a5c9-b66fa1ab8171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae4f42b-4670-4c50-95a6-8f11789e5abd",
        "cursor": {
          "ref": "94cd56c4-ca05-4bed-8251-1b0883b42b7b",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "df30aa42-c658-4db9-be4f-aa1e1878fae0"
        },
        "item": {
          "id": "aae4f42b-4670-4c50-95a6-8f11789e5abd",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e40732e9-6f27-4f4e-b879-8aa476f08942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86ad05f-a54a-4baa-9197-694fe14232e4",
        "cursor": {
          "ref": "abf72cd4-e5da-43b4-9900-73e5dd90e52f",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4f5943e1-eadf-4721-a4b4-aedaf7177270"
        },
        "item": {
          "id": "e86ad05f-a54a-4baa-9197-694fe14232e4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "eabcfd31-bd9e-4ab2-8ec2-f4a63234afa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 702,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c2fb962-bd26-4b12-beb4-48976ce767b9",
        "cursor": {
          "ref": "7c3809d9-57b9-4b94-b4d1-c1e80ede50ba",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "1f00de69-246a-4906-b229-bdb978e6ef78"
        },
        "item": {
          "id": "5c2fb962-bd26-4b12-beb4-48976ce767b9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ba4357fc-5272-4473-a3e9-b81ecfdf8cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577c38af-b5e0-46cb-b467-a2abe97b30e3",
        "cursor": {
          "ref": "4aabe9b1-73a5-46cc-acd6-07b1730e89ba",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d05239f2-d2c9-49a6-9762-702b9401889f"
        },
        "item": {
          "id": "577c38af-b5e0-46cb-b467-a2abe97b30e3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "586ad6bc-9fad-4e5a-8ade-3981844cc592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872d458d-d4e4-47b3-9b44-e58ce65d5114",
        "cursor": {
          "ref": "049c8552-84fd-45e1-a439-b17b30f14406",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "080fac8e-a517-4217-8c3d-2001e8a9043b"
        },
        "item": {
          "id": "872d458d-d4e4-47b3-9b44-e58ce65d5114",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "44d9fed9-3072-4307-8351-ecc5241d9ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a99def5-12ba-424c-a27a-807a04c6e408",
        "cursor": {
          "ref": "1b65b084-43d9-4c80-b0f4-8d88973ada17",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "963a754f-14a5-4b32-a1da-7783ed33b1b0"
        },
        "item": {
          "id": "4a99def5-12ba-424c-a27a-807a04c6e408",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5f725bd8-277d-4c0b-a547-78289f39251e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91ce251-3e10-427f-844c-d5ef7815100f",
        "cursor": {
          "ref": "ca59493d-3e1a-4d75-a02d-bc67c9757a91",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "109c1cec-0a4b-4f8c-bee4-9d94f64594be"
        },
        "item": {
          "id": "e91ce251-3e10-427f-844c-d5ef7815100f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "baf819c9-4222-4809-bba6-79b093a7d037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e47e2f-26cc-4dcc-9743-50479cc5a8b3",
        "cursor": {
          "ref": "3144d3b9-c01c-4d16-97b5-bc920b14cab4",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a3c73071-d9b9-4c95-8425-1fc45e0fe135"
        },
        "item": {
          "id": "20e47e2f-26cc-4dcc-9743-50479cc5a8b3",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9249f421-50cc-450f-aefc-7e1e41c4e465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3f42f6-5d96-4f0d-9627-4623d016887f",
        "cursor": {
          "ref": "fc5be6b4-d182-4876-a216-fe96e8ab11af",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "58ee83e4-9e2c-4455-a77e-d462b8d41df8"
        },
        "item": {
          "id": "8a3f42f6-5d96-4f0d-9627-4623d016887f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0232a843-6aa7-4b60-b4ca-bcde06823b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d38b260b-5b9e-4b68-aa79-ce95e33ccacb",
        "cursor": {
          "ref": "42b7e612-a980-4ff7-b6c8-33690954d764",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "044ba096-6ccb-4c7b-a5b9-80533710e6d3"
        },
        "item": {
          "id": "d38b260b-5b9e-4b68-aa79-ce95e33ccacb",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d77ca37e-204c-4428-b210-3e5f2033a1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03af7701-e0ef-482b-8f46-e3d3291065f8",
        "cursor": {
          "ref": "e507d53f-8f77-44ff-b8a0-30f01a4d0d23",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "445af186-f44b-45eb-ab0a-e65024af3f31"
        },
        "item": {
          "id": "03af7701-e0ef-482b-8f46-e3d3291065f8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "8f2ed98f-a1b1-4d3e-b643-36156c8d1459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493ce28e-dfb2-4f7e-9249-82ae7f84b2b6",
        "cursor": {
          "ref": "84d5edbd-cf00-4817-981c-5e491856502d",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a9f616da-d993-4593-936d-47e27352bb14"
        },
        "item": {
          "id": "493ce28e-dfb2-4f7e-9249-82ae7f84b2b6",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "86cbca2d-32e2-4f4b-8f1c-b82163fb3026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9b56d6-7501-4dd2-9247-981a9f6d838b",
        "cursor": {
          "ref": "3521b043-8e13-43b5-9b2e-9276089e1335",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "14c9a5b8-9a0f-4a66-a10c-9383baa25738"
        },
        "item": {
          "id": "de9b56d6-7501-4dd2-9247-981a9f6d838b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f0f75d0e-0591-4b63-8ecb-691794a4e239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 354,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec909072-2db6-460b-86d8-b3afc5fd3447",
        "cursor": {
          "ref": "540aed6c-eb0e-4ecf-a667-f26bafc6bf17",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9bbc2c98-a29a-4684-96f7-9b4080ab0bfa"
        },
        "item": {
          "id": "ec909072-2db6-460b-86d8-b3afc5fd3447",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ff082ddc-97aa-4fb4-b384-c2f80b59191a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b41b23-b028-4382-80f2-cb8a35482477",
        "cursor": {
          "ref": "f6450d32-a28d-4fea-924a-e47977662450",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ad44d26a-bbf8-4138-a767-ab01e956d77f"
        },
        "item": {
          "id": "55b41b23-b028-4382-80f2-cb8a35482477",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0b05f6df-0c7f-4eee-9ce7-a2b3eae46ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6bcd30-864c-43c6-aa4e-c7dcf1e6dc85",
        "cursor": {
          "ref": "34b63edb-9398-4aa6-b3f0-0ede14105da1",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a6ef332b-5168-4f61-93e0-63862574bc8a"
        },
        "item": {
          "id": "6d6bcd30-864c-43c6-aa4e-c7dcf1e6dc85",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "66e7aed4-10ca-4e7c-a0cb-99437fc71ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe4b85a-3a5a-4ad2-aa11-f665b54d768e",
        "cursor": {
          "ref": "4cc33bcb-cd28-4f05-b08f-a98353843170",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "84c8b4ac-309c-4fd8-ac8d-cca5506abf76"
        },
        "item": {
          "id": "7fe4b85a-3a5a-4ad2-aa11-f665b54d768e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "373df428-cef7-45a5-b3d7-9f6fed235edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38fff5b6-b0df-4474-b1b5-e8e6e8af69f8",
        "cursor": {
          "ref": "887fa547-cb7f-4fbb-adb3-1bbd71cce9c4",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "986cc0cc-61f8-4a3a-92ce-576772503d0c"
        },
        "item": {
          "id": "38fff5b6-b0df-4474-b1b5-e8e6e8af69f8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b3af2a45-e403-4ebb-b720-f6603424adf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4af32c-6e3c-48df-816c-ea1b2e8f74ec",
        "cursor": {
          "ref": "362ef702-6c16-4e7c-89a6-de60854490e6",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "853361ba-8d8f-40cb-a793-efc02ef898ff"
        },
        "item": {
          "id": "2b4af32c-6e3c-48df-816c-ea1b2e8f74ec",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "71827dc9-38a2-4aa4-af3d-c7dcd346a223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d7195ed-7753-43a7-a6bb-d33b76912c20",
        "cursor": {
          "ref": "5de4248d-9014-40c7-bb5f-6ed4b4f3e437",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ff406f3a-3a60-47e6-935d-e13261461010"
        },
        "item": {
          "id": "2d7195ed-7753-43a7-a6bb-d33b76912c20",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2bacd97b-d910-4b11-bae6-fc662d6c709d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "954c77d7-a15d-4cfb-b2fc-848e3c097373",
        "cursor": {
          "ref": "42d08744-9726-4002-9533-d63bdd9a5177",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ca3a42e1-2611-419a-aff2-11051195612e"
        },
        "item": {
          "id": "954c77d7-a15d-4cfb-b2fc-848e3c097373",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7d1519b6-2940-4d4f-8525-3119f11140ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337fd420-a684-43b1-923e-0b0681573f12",
        "cursor": {
          "ref": "f7f8eee8-1381-459a-b840-0baeb2af1fe1",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "44596f28-4df6-4f4d-8bd7-0fea2cac6223"
        },
        "item": {
          "id": "337fd420-a684-43b1-923e-0b0681573f12",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0272dd2a-5509-4afb-9ef6-09e985900bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3793116-c25f-4f70-ab6d-2c5b9db9c606",
        "cursor": {
          "ref": "c0e8d0b8-2f9f-4615-b1aa-ca66ce63b5cd",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "62707cae-92a5-492f-a15b-004b6850dca6"
        },
        "item": {
          "id": "f3793116-c25f-4f70-ab6d-2c5b9db9c606",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "145e6f80-fbea-49eb-8f33-83de236c78ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eb4c0ab-1ccd-40ef-a3c5-3e776e5205e8",
        "cursor": {
          "ref": "210cccb6-0c04-406b-ba25-2ca1779ce2bc",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1366e6c0-27e5-40bd-af7b-1b92da906a5d"
        },
        "item": {
          "id": "6eb4c0ab-1ccd-40ef-a3c5-3e776e5205e8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ad57050c-2b52-448b-8440-9561adc20485",
          "status": "OK",
          "code": 200,
          "responseTime": 213,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "b951d343-e2a1-4ced-8a90-06f48d946436",
        "cursor": {
          "ref": "112aef1e-90b3-49a3-bfe6-1b87c3f7c285",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c94389d2-2a37-429b-8111-b92942ec5983"
        },
        "item": {
          "id": "b951d343-e2a1-4ced-8a90-06f48d946436",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ad70abe9-67d6-457d-9dda-50c8cc5cbda0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e68fc4a-857b-4758-aa39-87f85d008318",
        "cursor": {
          "ref": "a9cde65b-e6ab-487e-a25c-b5828bf0ed6a",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "828ab666-3994-4447-930c-e6462ed83173"
        },
        "item": {
          "id": "9e68fc4a-857b-4758-aa39-87f85d008318",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "10acf93c-d708-4ec2-894d-62d471960528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2767d213-9392-4d7a-aac7-8f1dae87658b",
        "cursor": {
          "ref": "8b7546a5-a4b5-4f8c-b764-2fb58d5ec7a4",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2a4c4c42-989d-4f70-aeec-d05b43f51324"
        },
        "item": {
          "id": "2767d213-9392-4d7a-aac7-8f1dae87658b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5c2516cd-d65d-422a-a71a-5e5fbc79aa34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41879b20-d419-49b9-a86f-c7ec0fc07445",
        "cursor": {
          "ref": "850093fb-331f-4e31-8f2d-d143fb0200d2",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b33c1113-d1f0-4887-b2b4-901e0aeda00b"
        },
        "item": {
          "id": "41879b20-d419-49b9-a86f-c7ec0fc07445",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bbdbc804-7f52-43a9-90c7-59ceb31e1d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d5895e-28fe-4c59-95b7-abc99cf73ca6",
        "cursor": {
          "ref": "a6463035-21e2-4f17-9d00-df60a2fa1064",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ee8e0fd2-adde-4606-b4ea-01c1cf853dcf"
        },
        "item": {
          "id": "90d5895e-28fe-4c59-95b7-abc99cf73ca6",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "01125b92-55e3-4f0b-9068-cdb877efbfbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2297238f-4a72-446f-a848-03154a67a1fa",
        "cursor": {
          "ref": "c122442c-9201-4779-bb95-c5d00653f748",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "541894d9-7591-4db8-bde5-2f0160d47ff4"
        },
        "item": {
          "id": "2297238f-4a72-446f-a848-03154a67a1fa",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "2db39b71-37f5-4f2c-bbb8-b7ef9b22ab3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03238735-396b-489b-8380-55ee4efb8171",
        "cursor": {
          "ref": "067b4cf7-3179-4092-8696-84b25535bf89",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7beb2a4a-bb04-408e-b86b-8c917d3fff26"
        },
        "item": {
          "id": "03238735-396b-489b-8380-55ee4efb8171",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "23b0e2d5-6658-4ad4-a8b4-9caebbae9de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48d6dae-0f8a-4cdc-9995-50fe45843e6f",
        "cursor": {
          "ref": "ff570213-a05e-4821-8970-1782e8dd6870",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5ccaa2ef-893f-43aa-b60b-93d7d5895024"
        },
        "item": {
          "id": "c48d6dae-0f8a-4cdc-9995-50fe45843e6f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8e627215-3d7b-4cb2-b1bf-5ce153896ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835f5c5d-bab3-4b32-9814-babdecc04bc6",
        "cursor": {
          "ref": "ca9748b3-3f26-4078-8a63-967ec640e4e0",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8d1c31aa-cc4e-460f-bd2a-980744b500a3"
        },
        "item": {
          "id": "835f5c5d-bab3-4b32-9814-babdecc04bc6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b0a13f1e-3935-4dfa-9782-c68dc97e014a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6da761a-a4de-4bdf-92f7-5042e7fea916",
        "cursor": {
          "ref": "5b541259-b30f-4dd0-bca5-6363b962bcf8",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "63e4f95e-2d22-4816-9c47-650cd60aa461"
        },
        "item": {
          "id": "a6da761a-a4de-4bdf-92f7-5042e7fea916",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "366511eb-bcb8-42c8-99d9-0b5e078e8d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89bf1929-3a1e-4d3f-b1bc-df6a6ac2825b",
        "cursor": {
          "ref": "f79e3e5b-7804-4958-b687-08c008586ab1",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1edd4078-f232-4b29-a028-14e7bdea91ba"
        },
        "item": {
          "id": "89bf1929-3a1e-4d3f-b1bc-df6a6ac2825b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e166a0e0-aab3-424d-9ec3-0b390643e030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9587b64b-6b96-45bd-931a-18fabcad0cda",
        "cursor": {
          "ref": "339f3e50-bb41-498e-a87a-2ce32c0ff843",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b1701f0b-2173-457d-9ebc-16df7cefb033"
        },
        "item": {
          "id": "9587b64b-6b96-45bd-931a-18fabcad0cda",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "32ba6835-d3de-4459-beb9-a95077a275eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeff4848-426b-4f19-b17a-3e73f31b36a9",
        "cursor": {
          "ref": "9aec806c-fcbc-425b-a247-92287809f247",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "172ef795-21c3-4bc2-84af-9f3bb9dd9338"
        },
        "item": {
          "id": "eeff4848-426b-4f19-b17a-3e73f31b36a9",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "24cacd5b-1bf7-4bee-847c-301324859267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2297a6-62f1-4736-a71b-cc5453a78448",
        "cursor": {
          "ref": "bcfd8749-1d27-4438-8f0e-1820d8f8630e",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "64967cc2-b78a-44b2-9962-db7181991af1"
        },
        "item": {
          "id": "4e2297a6-62f1-4736-a71b-cc5453a78448",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e1cfaa68-5281-402f-af70-7fe47ff96c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48dbe786-1eec-46ff-b891-54bab703f678",
        "cursor": {
          "ref": "e6f6be6e-e448-4c11-813f-8e38a09c088c",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "317de08d-2f5e-443b-b709-6faff16a8c5a"
        },
        "item": {
          "id": "48dbe786-1eec-46ff-b891-54bab703f678",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bc66136c-f7a2-4564-adca-164176609b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 202,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34bdd20f-debf-4249-a68b-1c465a4f4477",
        "cursor": {
          "ref": "ce27249a-ef6c-4d9d-9f64-a1cbb0685199",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9dbd5ecd-1a2f-42c2-bdb0-60129201df58"
        },
        "item": {
          "id": "34bdd20f-debf-4249-a68b-1c465a4f4477",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "612e02c0-c010-4641-a24a-67a368e9917c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "549095eb-6bd6-42f9-a1a3-fd61c3d39e3b",
        "cursor": {
          "ref": "35044677-7014-46bd-938c-713270d54297",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "55d8521a-3b1f-4626-b9f8-a54fd4fef796"
        },
        "item": {
          "id": "549095eb-6bd6-42f9-a1a3-fd61c3d39e3b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "da6311b4-2d01-4d33-b567-b8363d773778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43551a54-e3c7-4f04-a2ec-64c017031ba7",
        "cursor": {
          "ref": "e0106b6e-8859-42b9-b02b-7079dd90672f",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9bb32e9c-8138-4134-b848-0729d193f40f"
        },
        "item": {
          "id": "43551a54-e3c7-4f04-a2ec-64c017031ba7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d468ca41-80a5-4cc6-993d-2cd44f1332b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce380dce-246b-42cd-b5b1-81ae39a0090f",
        "cursor": {
          "ref": "908de35b-43d3-464c-939c-1f823abbfbea",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "178cd134-bc6f-4882-8033-3a29bd2823bb"
        },
        "item": {
          "id": "ce380dce-246b-42cd-b5b1-81ae39a0090f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d86cc1b6-0074-4ca9-aa28-b64e17b0bc6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7f583f-061d-4b84-a1f2-4d83b2a870ca",
        "cursor": {
          "ref": "3b75fad7-bb08-48f7-a76b-8f9dc8c1e342",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e0730efe-f9cf-409a-86dc-aef73a4ab957"
        },
        "item": {
          "id": "aa7f583f-061d-4b84-a1f2-4d83b2a870ca",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "bff7ff4d-df3b-49ff-bc68-213e8faf4e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2c3946-8925-4934-afd1-8bd68a1d2f10",
        "cursor": {
          "ref": "81a8e3c4-b005-4b8a-9f4f-7d2a7614b16b",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f43c18ae-52ba-42df-95e4-2c53571f29d2"
        },
        "item": {
          "id": "da2c3946-8925-4934-afd1-8bd68a1d2f10",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a5682c1f-c2e0-4018-b89f-7671b8c0cf42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6578d54-eede-49fe-af52-ad90e0f4648e",
        "cursor": {
          "ref": "70fe5241-9999-45e6-aefd-cc9e7b9a48e4",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "01381060-658b-4567-a08a-c903e1453cdc"
        },
        "item": {
          "id": "b6578d54-eede-49fe-af52-ad90e0f4648e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c3c6cbf4-e88f-4377-8082-09a1500dc0c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c0679c-384e-4b55-911f-29b92ec2dae5",
        "cursor": {
          "ref": "b8c2bc1d-7a81-4b93-9da1-c765054146c7",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d9f69d15-4796-472c-bac5-4c908eb80bfa"
        },
        "item": {
          "id": "e8c0679c-384e-4b55-911f-29b92ec2dae5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0d8c86e7-f0ef-4b6b-9ee1-4d0257923b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81481473-5d8d-4308-887d-8467c1311be5",
        "cursor": {
          "ref": "2de459a7-72bb-4c8f-8e87-c687a477f181",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "97925798-9f55-41ec-9d19-92a94f1f04b4"
        },
        "item": {
          "id": "81481473-5d8d-4308-887d-8467c1311be5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "206e2134-e150-4aa9-90cc-37bdcdf5b84d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c14f62-1855-4634-843b-a1901ff24c02",
        "cursor": {
          "ref": "30b5af48-680b-4158-a16d-4bc1942d7ea7",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2d6bdabb-4a49-4951-a190-b4094b4fc4ff"
        },
        "item": {
          "id": "11c14f62-1855-4634-843b-a1901ff24c02",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a2e78e47-b205-4259-9143-45ed320fe316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11cdca4e-b529-4e70-99d1-d4f391d531f5",
        "cursor": {
          "ref": "1f2cd916-6597-4b0a-a34d-dad647327127",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "1d016189-26cc-4b10-9887-f3215cac54ad"
        },
        "item": {
          "id": "11cdca4e-b529-4e70-99d1-d4f391d531f5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c2954171-cf4c-4a45-bc7b-579805cb3859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bafb939-9f0f-4478-a2aa-299358182580",
        "cursor": {
          "ref": "9fed8f5c-4176-42e8-95f0-be293bc196c4",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "efb564ff-734f-4677-a718-4931e39c73aa"
        },
        "item": {
          "id": "6bafb939-9f0f-4478-a2aa-299358182580",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a58c7da9-4193-455c-aaee-d4178773355f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80aa26ac-9cd9-4172-97ef-92feb938d4cd",
        "cursor": {
          "ref": "8a9f4813-6d7c-4b88-9ee1-bec64e11242e",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b080a8c3-e285-4cc0-bedf-cce5143a1b0e"
        },
        "item": {
          "id": "80aa26ac-9cd9-4172-97ef-92feb938d4cd",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "460f0cbd-0cfb-49b0-82e8-d8f023edd225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f14d352-389d-47c2-9879-ce35efedd6c0",
        "cursor": {
          "ref": "4fa1b99f-efd1-45d4-b605-5201555d8d53",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d35360aa-29a3-472c-8f10-771d9379c30c"
        },
        "item": {
          "id": "8f14d352-389d-47c2-9879-ce35efedd6c0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f5614e6d-6fa5-4f49-b6e4-b548ae1a200a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a129a3f7-cce5-406c-a148-65e8c7acf9bb",
        "cursor": {
          "ref": "3715daad-5f8e-4549-a48c-0e50c45333e8",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a365cd0b-7925-4c51-a870-3b7117a16b9e"
        },
        "item": {
          "id": "a129a3f7-cce5-406c-a148-65e8c7acf9bb",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "9c04c32b-1229-4937-8086-e0e28d431e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ccdfc3-1197-4221-b879-7c10e95b50b2",
        "cursor": {
          "ref": "d7d4b2fa-0941-414b-9260-4b1432fa55c7",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3b02c3ec-cb77-4423-bb05-d17ce36fad8e"
        },
        "item": {
          "id": "76ccdfc3-1197-4221-b879-7c10e95b50b2",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0d0e23a4-b003-4905-a82a-60b1bf3b7096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b50b98-f9f9-4c19-8a61-bcb6e3e4b3eb",
        "cursor": {
          "ref": "4eef8254-dcfe-4d20-bcf2-c3a76347f163",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4316ae91-3b63-40be-af01-eee900f1b4ba"
        },
        "item": {
          "id": "e1b50b98-f9f9-4c19-8a61-bcb6e3e4b3eb",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b8046d12-91de-418c-83a5-7068d01eeafd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "876fef24-9ae6-431d-9938-ca9451f2412b",
        "cursor": {
          "ref": "cbda52cc-df06-4a31-9223-6bf9e3cf3ffb",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c5be1fad-4f6e-455c-8f67-339aff318723"
        },
        "item": {
          "id": "876fef24-9ae6-431d-9938-ca9451f2412b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c516ae59-ced2-4330-846a-3f25aaa34c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3cff5b-159f-4b99-85fe-a5c5ca2b055d",
        "cursor": {
          "ref": "2682262c-4d23-4b55-aeac-d95330e42584",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "28eccffe-bba2-4d0e-a998-855817663008"
        },
        "item": {
          "id": "0f3cff5b-159f-4b99-85fe-a5c5ca2b055d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "431bdc84-4c2b-4b88-8c04-d865a33a69b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3592f3d-bb9b-4e94-96ed-ef652c04ecf3",
        "cursor": {
          "ref": "91da6135-eed9-405f-a96c-ea0e973bb72c",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "053fc374-52a7-436a-80f0-c7bb5005d9e2"
        },
        "item": {
          "id": "d3592f3d-bb9b-4e94-96ed-ef652c04ecf3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "dc1e42e3-c9c1-4122-aa01-8a18b893d79a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077c1e45-4470-49ce-a124-4e65eb4b2aae",
        "cursor": {
          "ref": "b0411fd1-937a-4233-af21-866bd165f34d",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "146fc14c-810e-4509-8f7b-fdca432404af"
        },
        "item": {
          "id": "077c1e45-4470-49ce-a124-4e65eb4b2aae",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1ac3778d-2145-40f9-9d13-0fc84636160c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe58a92-b33a-496e-b21a-dd1d0f2c16ee",
        "cursor": {
          "ref": "e962032d-8a85-4875-9806-9f355c76edcc",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "248fb9d2-8572-4ec9-b917-f9cf4c86ad91"
        },
        "item": {
          "id": "1fe58a92-b33a-496e-b21a-dd1d0f2c16ee",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "27e67e76-00a1-41ca-a2d2-64dbe5e45ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4429ecf0-e0a2-4597-bdef-09034bea2ffd",
        "cursor": {
          "ref": "f8fecd16-ebdf-40c0-be4c-913bf6c6b7bc",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "992a7b7f-6b65-44bd-a07d-c776cddfbcb8"
        },
        "item": {
          "id": "4429ecf0-e0a2-4597-bdef-09034bea2ffd",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "054b158e-dbd3-4e02-bc56-c927c15edbb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cbc5746-0490-4685-8c70-b494652a7527",
        "cursor": {
          "ref": "c718c01a-4cd0-4802-a22e-8e722a682611",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c90e3591-a8cc-475c-af7b-f4ea737a1f05"
        },
        "item": {
          "id": "5cbc5746-0490-4685-8c70-b494652a7527",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "80113b54-0aa5-46e8-90ce-5bb7e2b29072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee27a82-96d0-4ee9-8f98-828c55991631",
        "cursor": {
          "ref": "84b33be3-dcbf-4946-b699-fe7debe681b3",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "464aa29f-bbf8-42be-b56a-05cf9954e4d5"
        },
        "item": {
          "id": "bee27a82-96d0-4ee9-8f98-828c55991631",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c1c47e2d-c4c5-4688-8bdf-6b16065e73a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35830f99-c493-41ee-bf4d-6be526152bed",
        "cursor": {
          "ref": "271f1f5a-5a76-4206-8670-48810b60c237",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8840f779-1a85-41ec-ba1f-13b958e80cfe"
        },
        "item": {
          "id": "35830f99-c493-41ee-bf4d-6be526152bed",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "cd549e21-19a4-47ca-8918-689f4e01f228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5a7586-68cd-4dbd-9fca-2788b737991d",
        "cursor": {
          "ref": "31cde3c2-2995-49d3-ac81-532b9179084d",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "eecfbb44-9b4d-4f86-84eb-22275d348635"
        },
        "item": {
          "id": "eb5a7586-68cd-4dbd-9fca-2788b737991d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9f79ace9-b7ae-4512-bb21-7e2f92620a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b8bd18-c502-4d24-bc70-36e445c55939",
        "cursor": {
          "ref": "e2a63972-a9bf-4725-b36c-292e38252640",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f6d4826f-514e-4c82-a54f-2b0ac13956b8"
        },
        "item": {
          "id": "f2b8bd18-c502-4d24-bc70-36e445c55939",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f77b43d9-5cf0-4c34-b094-4b0bf637aa72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b76c23-1aac-4f98-9c8b-da72458f4a85",
        "cursor": {
          "ref": "eb14c8d2-551e-45e3-9cae-5bee222e4234",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "75e4382c-7f43-40d7-945a-b320711600ee"
        },
        "item": {
          "id": "07b76c23-1aac-4f98-9c8b-da72458f4a85",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4e942116-a119-45e8-a055-7dac4eeffdc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "042d4894-65ec-429e-8643-7a7efa18aa71",
        "cursor": {
          "ref": "8bbefafb-c757-40ca-9fee-1f5373a950e1",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "297da30d-05ea-4853-99fa-81522b835954"
        },
        "item": {
          "id": "042d4894-65ec-429e-8643-7a7efa18aa71",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b5e333fe-8517-47e2-9e59-b9fc73733c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2392bdbb-4446-4b92-97cb-e64c2f68d52b",
        "cursor": {
          "ref": "69951ce7-c4e7-4d75-82a3-3b3da2cd2d21",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b2598d08-213d-4398-98ce-37e91af7c54a"
        },
        "item": {
          "id": "2392bdbb-4446-4b92-97cb-e64c2f68d52b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7514f987-dcb8-4a53-b76f-9da3f4e59e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f508139-7a7b-4e31-b64e-d1762e20a885",
        "cursor": {
          "ref": "79b48c6c-12f4-4b26-84ac-60b153e91314",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d67b55b8-a5ff-40b2-96ed-d2e7d6f31db7"
        },
        "item": {
          "id": "7f508139-7a7b-4e31-b64e-d1762e20a885",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b7d6b0cd-dfa8-43d3-bb67-900efd92cb0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d19fd22-c687-4c1f-9fa9-0e1bfcff19aa",
        "cursor": {
          "ref": "cb9e78a6-1dd1-4748-87a8-b7ea02db4cc8",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0ed1c304-bebd-49df-8798-4d2497890466"
        },
        "item": {
          "id": "6d19fd22-c687-4c1f-9fa9-0e1bfcff19aa",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a41638d5-de56-4c36-8386-7e14e183260f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb449a9-4b83-4d40-b496-b51cedf3eeb0",
        "cursor": {
          "ref": "f19e7b5c-c356-423d-a8da-7f189a239a9f",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ce7d15a1-08c2-42fd-9dc4-383ae8b35135"
        },
        "item": {
          "id": "4bb449a9-4b83-4d40-b496-b51cedf3eeb0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1798da0e-3f89-4caf-9bed-f6dbbedee8eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98ebf90-a427-4915-ab0d-39462ebe85da",
        "cursor": {
          "ref": "d8b36886-20b9-4e0c-ab97-f29d1dde5a28",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "43231b6f-597e-42b4-a62d-3c23dddc1677"
        },
        "item": {
          "id": "f98ebf90-a427-4915-ab0d-39462ebe85da",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "accc4f9b-e4cf-4fa8-b6d3-816e1e99a1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "042e6cb8-fe17-4aa4-b60a-fd96e54f599b",
        "cursor": {
          "ref": "ddee68b9-f586-4d6a-9a8e-20378bdb0279",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b272c09a-3a4e-47fa-b014-caa3648887c8"
        },
        "item": {
          "id": "042e6cb8-fe17-4aa4-b60a-fd96e54f599b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1b7907a4-7ddc-413d-90a2-e5730af19c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "169e9f44-39bc-4853-8558-402caeaa401c",
        "cursor": {
          "ref": "ddecf0db-53bb-4eea-b082-976d5fd470d3",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d62a132d-15f9-491c-9dd3-05975871b23a"
        },
        "item": {
          "id": "169e9f44-39bc-4853-8558-402caeaa401c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "92ae977d-7e58-431f-aa81-1aa7cf1e4cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66cc8b2c-59a7-4ae3-9e9e-6d9a88d2d763",
        "cursor": {
          "ref": "b4b46772-853b-47e7-b253-54eb3a457ddf",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d5ac3171-9693-4a77-afc6-63565efdc4ed"
        },
        "item": {
          "id": "66cc8b2c-59a7-4ae3-9e9e-6d9a88d2d763",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a457242f-1001-45b4-bd4f-e0273a901a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b165558-9396-4661-8216-0889969f755d",
        "cursor": {
          "ref": "137bde9d-05f4-400b-a628-5176fab7f07e",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8558f9e9-8dfa-4f33-90da-7fd17a5ab4a9"
        },
        "item": {
          "id": "1b165558-9396-4661-8216-0889969f755d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "421e2a88-991f-4678-9cff-7914bad6ee55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "327faed4-ed66-407e-9064-8ff39ffaefbb",
        "cursor": {
          "ref": "cb745d0a-19f9-45a8-98a3-53674074bbb7",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c1069215-7dc9-4775-b210-a0ee522d4663"
        },
        "item": {
          "id": "327faed4-ed66-407e-9064-8ff39ffaefbb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "7ed3a11c-6208-45d8-9e8e-c4c5db4b721b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82aa0c94-36ec-405c-aa87-0a020a27be3f",
        "cursor": {
          "ref": "54047399-dc50-4c08-901b-b6e224ccb9d8",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4a1190ee-3f9f-40fb-9376-a2cdfa5d724e"
        },
        "item": {
          "id": "82aa0c94-36ec-405c-aa87-0a020a27be3f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ddff2eed-8f99-409f-b917-d21c17123cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d4ab89-e47b-48bf-bc50-9a5c003032c0",
        "cursor": {
          "ref": "41c612f8-0285-45f8-a6e5-5921ca3e1d8e",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "18b6e281-7515-43e4-a723-9a2c293239f7"
        },
        "item": {
          "id": "d3d4ab89-e47b-48bf-bc50-9a5c003032c0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0324dd1d-5e82-4573-bdb2-141b1298f117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98932d17-bfdf-4a66-8897-5557c99b7e70",
        "cursor": {
          "ref": "9d3b6e54-3428-47d2-8e47-32dcff089095",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "324d4f24-8566-49bd-b5c6-313bf9935e56"
        },
        "item": {
          "id": "98932d17-bfdf-4a66-8897-5557c99b7e70",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f4fb53cb-6299-42ac-85d1-f0af5c0ebe52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ac55b6-55d7-4732-a618-f81818a26770",
        "cursor": {
          "ref": "5a75b594-3fe0-4c2d-b9f9-88e0f6775f7f",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c13aae5e-a5d8-4a42-9ccc-b71a51dc8d34"
        },
        "item": {
          "id": "82ac55b6-55d7-4732-a618-f81818a26770",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "41317afe-ae64-4d65-a0a6-e39635874281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a0fc82d-21fe-4198-a0f5-56ea8c58da68",
        "cursor": {
          "ref": "20b15cd6-b3c5-4e26-bb2a-dbe61e58f64e",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b15323fa-946c-4da6-af32-9f037eb92a6e"
        },
        "item": {
          "id": "3a0fc82d-21fe-4198-a0f5-56ea8c58da68",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2a5a4438-b258-41e0-b8e6-8f3f35b1b35b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd97285-dee5-46dc-916c-4284119ce1f7",
        "cursor": {
          "ref": "c7347f44-7c47-4907-9843-24cda5725e1e",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "55693945-276a-4e52-9893-09f78091a4c9"
        },
        "item": {
          "id": "cdd97285-dee5-46dc-916c-4284119ce1f7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6b60432e-86df-44f4-aa2a-1c691c61eab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "005f1c0e-02c4-48f5-beb6-8f47dec4ca0b",
        "cursor": {
          "ref": "30e264a4-93d8-4e42-81a6-0cd66af3272d",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c4f9199f-06c9-4e4f-a58a-5466c254e54c"
        },
        "item": {
          "id": "005f1c0e-02c4-48f5-beb6-8f47dec4ca0b",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "aede8ea6-7fd9-4b04-9ba8-0bdc64981d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160b2795-61b5-4a11-a8f6-62f7491ffdfb",
        "cursor": {
          "ref": "c52bfe43-53a6-43c4-a313-157223a5065d",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "86eedbd3-b6d5-4a93-868f-cab307c174f8"
        },
        "item": {
          "id": "160b2795-61b5-4a11-a8f6-62f7491ffdfb",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "91ce670d-7389-4880-886c-6d65b5d0e1da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9446d5d-476b-4a51-85d9-98669c9a6ba7",
        "cursor": {
          "ref": "333379a6-8d04-48a1-a995-8b8f81788ce3",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "27f813a7-e4cc-4f8e-a845-6a97e949f897"
        },
        "item": {
          "id": "a9446d5d-476b-4a51-85d9-98669c9a6ba7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9f531527-92ed-4142-afb8-02f9e0e06e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53be1cc5-01da-445c-a5b5-cb2a82170f00",
        "cursor": {
          "ref": "0682f33f-fb31-4576-8e70-12d452f22f56",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1030ae41-ffe9-40a8-b1c8-aff0e69ebead"
        },
        "item": {
          "id": "53be1cc5-01da-445c-a5b5-cb2a82170f00",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "80269398-a8b4-4352-aa0c-48864f01e2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e61efe03-cf42-4f08-a16c-d777340618c1",
        "cursor": {
          "ref": "a1527fe9-99c9-415b-8d82-809277ddff92",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "55ed81b6-3de6-48b8-adb2-13fbd388c304"
        },
        "item": {
          "id": "e61efe03-cf42-4f08-a16c-d777340618c1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "45077494-648d-4b4a-a839-3ffb9433a39a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f246fe0-2b7d-46c1-84d2-90b0f5d9a0f2",
        "cursor": {
          "ref": "7693f960-6ddf-4807-91f2-34d161f64903",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4256b226-e622-4cf1-8562-60201c3974a3"
        },
        "item": {
          "id": "3f246fe0-2b7d-46c1-84d2-90b0f5d9a0f2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c2c3f28f-4494-4506-bbce-c19819347716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71cbecc4-78d0-4bc1-a777-894c752fe93a",
        "cursor": {
          "ref": "779ad91e-e836-435c-b001-51ea5305fe9f",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0142af51-2ee7-43d5-8571-275286a63f17"
        },
        "item": {
          "id": "71cbecc4-78d0-4bc1-a777-894c752fe93a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "bee30d91-3feb-4cee-9226-98e36eea4b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a963e3-d1c1-494f-bf78-3987491daa68",
        "cursor": {
          "ref": "19c80c43-4199-4785-8e53-e817f8518ee8",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3ab7287d-2301-490b-a4be-506f85ae3fcb"
        },
        "item": {
          "id": "92a963e3-d1c1-494f-bf78-3987491daa68",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6108a623-2370-4bca-910c-107ad3802073",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b06d6b-8825-4e2c-bd9b-6c5621489219",
        "cursor": {
          "ref": "bb7257e4-b669-4ce1-881a-38cf70517a12",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3ea62fd0-812a-40b4-a007-eb3dce64c5a0"
        },
        "item": {
          "id": "b5b06d6b-8825-4e2c-bd9b-6c5621489219",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "cd9cae57-f713-42d3-bd35-cc955c22b04f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 38,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c62ea8-2ab6-428e-8057-dc3a7181092f",
        "cursor": {
          "ref": "a255bfe6-69c2-4f6a-9bca-e4c97ba9e8f2",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "cc118b1c-9046-44d6-9e47-bd136e948b12"
        },
        "item": {
          "id": "43c62ea8-2ab6-428e-8057-dc3a7181092f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b8402d95-dde8-46bb-8d93-9d3a14bc2ff1",
          "status": "OK",
          "code": 200,
          "responseTime": 351,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad35045-1e79-4aa6-a911-8c6ea7ca92c0",
        "cursor": {
          "ref": "5f966230-68a6-4f29-b46b-8c61cad13be4",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e44c90a5-f48e-45ab-a481-b2bcf5c29be1"
        },
        "item": {
          "id": "dad35045-1e79-4aa6-a911-8c6ea7ca92c0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e5a3b9d4-c559-48cf-8121-2a14a1529205",
          "status": "OK",
          "code": 200,
          "responseTime": 332,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2986afca-695c-4374-b38f-e164fe257e68",
        "cursor": {
          "ref": "a679ca6a-16af-4983-90be-0d73ffd38348",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c6f65fde-0da9-403a-9d8f-58db6deaa024"
        },
        "item": {
          "id": "2986afca-695c-4374-b38f-e164fe257e68",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "2dfabe72-7b00-45a8-9578-6de6f990c200",
          "status": "OK",
          "code": 200,
          "responseTime": 711,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ff9e2d-9148-4045-9ea1-197a6bbb9846",
        "cursor": {
          "ref": "8b1cecb8-d601-48ae-8eb8-651a7afa9dbc",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "95b67021-52ce-49e3-b4d1-8bbd94892ee2"
        },
        "item": {
          "id": "78ff9e2d-9148-4045-9ea1-197a6bbb9846",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9228623c-41be-47cb-ba17-a7d4b5e848e8",
          "status": "OK",
          "code": 200,
          "responseTime": 341,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "af52123f-e955-43ab-a974-1ba0dca991bf",
        "cursor": {
          "ref": "4f44f11a-55d0-4dfc-a3d7-113b5d4c54cb",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f7723dc6-0d1f-4be3-94ac-c7e482becc66"
        },
        "item": {
          "id": "af52123f-e955-43ab-a974-1ba0dca991bf",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "714da8c6-a4fd-46a1-a772-57c916053140",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af52123f-e955-43ab-a974-1ba0dca991bf",
        "cursor": {
          "ref": "4f44f11a-55d0-4dfc-a3d7-113b5d4c54cb",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f7723dc6-0d1f-4be3-94ac-c7e482becc66"
        },
        "item": {
          "id": "af52123f-e955-43ab-a974-1ba0dca991bf",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "714da8c6-a4fd-46a1-a772-57c916053140",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af52123f-e955-43ab-a974-1ba0dca991bf",
        "cursor": {
          "ref": "4f44f11a-55d0-4dfc-a3d7-113b5d4c54cb",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f7723dc6-0d1f-4be3-94ac-c7e482becc66"
        },
        "item": {
          "id": "af52123f-e955-43ab-a974-1ba0dca991bf",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "714da8c6-a4fd-46a1-a772-57c916053140",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf122b8-12a6-4266-9940-711155d15433",
        "cursor": {
          "ref": "134999a3-d375-4664-aa20-95ac2a22e872",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ab4fe0c5-3354-47aa-b89e-c4acea98c7d8"
        },
        "item": {
          "id": "ebf122b8-12a6-4266-9940-711155d15433",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a439c7f3-3706-4c11-a483-f36ffd1b506a",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 38,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999b4345-8562-486a-8aaf-1175d23a3544",
        "cursor": {
          "ref": "77b9623e-221c-480a-80d3-5c1f2cb6bb66",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4c0aa303-05f8-466f-965d-173d4686e0a4"
        },
        "item": {
          "id": "999b4345-8562-486a-8aaf-1175d23a3544",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "92730b77-cda8-4020-8d76-cdce51d6b699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "999b4345-8562-486a-8aaf-1175d23a3544",
        "cursor": {
          "ref": "77b9623e-221c-480a-80d3-5c1f2cb6bb66",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "4c0aa303-05f8-466f-965d-173d4686e0a4"
        },
        "item": {
          "id": "999b4345-8562-486a-8aaf-1175d23a3544",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "92730b77-cda8-4020-8d76-cdce51d6b699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "4b79c616-c667-43af-a4f1-a6ba79cdad89",
        "cursor": {
          "ref": "ebbc4627-808f-440c-8bba-156cf8920332",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "709bafee-0dbf-4d87-bb56-99111304ae83"
        },
        "item": {
          "id": "4b79c616-c667-43af-a4f1-a6ba79cdad89",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "9d90e62d-3115-450e-88d2-b8182e40f5a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "58dd8020-320b-45d1-a990-560fc716f301",
        "cursor": {
          "ref": "0f1c2e7e-1bb8-41ea-b1b9-1bf160db0081",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f6bc0272-eab1-4db9-a390-60846b7fe2d9"
        },
        "item": {
          "id": "58dd8020-320b-45d1-a990-560fc716f301",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "43134cf7-ee76-42bf-85e6-1b8cf58b5790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "58dd8020-320b-45d1-a990-560fc716f301",
        "cursor": {
          "ref": "0f1c2e7e-1bb8-41ea-b1b9-1bf160db0081",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f6bc0272-eab1-4db9-a390-60846b7fe2d9"
        },
        "item": {
          "id": "58dd8020-320b-45d1-a990-560fc716f301",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "43134cf7-ee76-42bf-85e6-1b8cf58b5790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "fa2ed811-65a7-45f2-9a92-c0455b1dd925",
        "cursor": {
          "ref": "6fa8f65d-b80a-4961-846f-1fddf3555c21",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "fdffc228-39a8-4508-b6eb-ab80acf1231a"
        },
        "item": {
          "id": "fa2ed811-65a7-45f2-9a92-c0455b1dd925",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "81b3bb3d-6ff8-45db-b27a-4d1ba5d9cc97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}