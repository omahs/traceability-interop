{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0b350b0a-619e-4491-b4cf-25faa412545a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "40e4b3e9-4f64-46f7-804c-fae9e6d0f079",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f43dec04-6f6a-44af-b800-9f04a14fc56c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1ee388dd-8936-4c0a-acc2-2050a7c293de"
                }
              }
            ]
          },
          {
            "id": "8eb85356-ee2d-4535-ad9b-c428b01c70e2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6f64018a-e797-4b05-85df-d341ee55a2fa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bb230788-2bc8-4997-9b68-879c48e0bae2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a0beb4ec-9333-403e-a5b1-82d64cfe29f8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8365d544-d1b7-445e-acf8-315306669367",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1cae56c0-4d0d-4ad4-8131-320ef5e3cd2b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "777793bb-1a9c-4861-9b45-353808813f9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7f2272fe-5429-45fb-9d85-a5f68c262dfd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "03ddece0-5d24-478b-a247-9cc5ed6cd8fb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c6469b24-324b-44cd-bf36-1aba0b813d83"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "99441ff1-da3f-4331-b67b-b48150d171d6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bd913e5f-f4bc-43ca-a786-22dbfc36fdd8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2cd6eaef-60d2-4c66-98bd-dd8c80256424",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "26f5b036-c8f8-4047-8024-199d06947611"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ff40cab-ff3f-4d21-80c6-a5cbe31bb264",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ebc7b50-36e5-45d1-b97b-0a36b37d19d1"
            }
          }
        ]
      },
      {
        "id": "c68c6bc3-0f20-45ad-98cb-94ad75c3fe9e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7f42f90e-1117-4c0a-8dcc-0897056334fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10f54938-726e-4465-8aa3-557d6f0c4ba9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4873255f-99b9-4ef3-b22e-1189a29f7063",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb33e99b-53d2-41b7-8170-abb84229b0fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "613e0263-38cf-4d0f-9f98-dd7ef5991111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7ceca0-8d5a-47f0-8115-a956cadb703b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369b9491-aebf-4c9f-b053-cdcdeba53b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9e0f954-bbad-44c9-ab2a-81ee81568046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0efea78d-1475-4e90-aff4-743040f938c5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "393da51b-834e-4e7a-a6b5-1a4cefac6a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abeb1b1e-f322-4652-8b23-9ad72ca9f13f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "34c020f4-8bc6-4944-8750-0ffecf9c3c8c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eb8a2022-7ab8-4339-8685-ab03209b11e4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f3e2e2c-0c92-42bc-b6a5-dc759cb5c587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33ee1317-0e7f-4f60-a2ab-104078ae04e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e131af72-fc07-47ef-94a7-d08c005d2d02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "463e6e10-a85c-434e-886a-5b32a7967dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2237f1e-6f90-4361-a958-cdd905f380e9",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6b4995-5f64-48dc-a8b4-5b0516f65d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ec5b3d6-4c86-4fe5-a0cb-df233b7885dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f1a119-ff2d-4ade-bc44-cd1b42bd3e6a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "9299eb0d-e3de-4af5-b8da-5cb37c615527"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d1b6c244-1c8b-4c2f-8951-0c7472dc6847",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e59c241a-c19f-407d-bfcc-437e63b10cb6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "564c888f-90c0-4d9a-bff0-f5f31c2f60b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "39405ab5-ccaa-4b45-871d-0f48266f1ad1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4cb993a-c9b4-47ee-9d8d-a01b36084eef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "33bf754b-e119-4dbb-a183-198743da2e3f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed9c98d9-456b-4ddf-a10d-3d82504975e8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b66d14da-da69-4ee6-9f8e-99e1aaa6e996"
            }
          }
        ]
      },
      {
        "id": "92102129-e348-4dda-87fe-c8a23df35d0f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "defb834c-7c60-4a99-8aa4-5d52f9b6d41c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3cf73336-c9e5-479f-a0c8-d2758840b871",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "99efc964-2787-40a6-9622-9791e7a36f68",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92328885-03b8-47ba-b8ae-445fd6f048a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "657a5415-3839-4622-9ffd-7002511ab47d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72346cf-37cf-4176-a80e-52f4e879927c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82a0aa04-53d7-4d8e-b1fa-75b23a059179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88beecc0-27c7-436f-9033-0893b0a197e2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed905e2-5ae0-4f2b-9ff0-f3b20c8d18e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "514d0dc8-c0dc-4fb7-be2d-5ae87cb23b44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33ff75c-e3a5-4216-abf6-1ec88e2d2c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e78b758-90eb-4cbd-a6b0-6135f666acb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872203ba-1f25-4620-b9f0-4a8c0244b523",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc733a01-c4ee-48ae-8e5a-389574b83900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14bf29ab-90ab-4b8e-8252-6ab138a6e2b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e81129-b224-4dfd-b2e1-072f3e3bc266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e197e9e1-b3a0-4ae4-a9e3-ad7ca28e749d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a958545-6a91-4b7f-bdec-331bfe9f9706",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a58605-d132-4f6f-9243-a372e25f176f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4dd75d1-60a5-4794-98d9-9f54627b3024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61525119-3816-48a2-86c5-fac91228606d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3dd4dda8-47b0-442b-aaa1-d675c387d161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fab48b8-8527-40e6-95ce-fe8105b2e332",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a42e23-f60a-48eb-848d-beaa951e914b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a3d319e-3234-46ed-85bb-b46663323b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b72be77-a6bc-4f01-a352-47400e991694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38f8935c-5e30-42de-ab38-00d3db936eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec88cc5b-3147-4cab-ae3d-3715404b4b1d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70b1c7f-7778-4bba-89a6-54891fb652e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6326a499-4703-4ac4-9054-98c36d695de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d81bfb-bfc0-432c-949e-7412bce1ce1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1425c04-57b5-489d-91d4-dd811cb5b0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ee1191-2a33-4eb2-817c-8868cec06bb3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b875494a-5c28-4eb7-9ad0-e4613e91a896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e802da6e-69dc-4f53-8cd3-173e2bf8bb01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2e415c-8134-4ec1-a751-3e0b1c0bb991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4da8117a-90b3-467a-96ae-4d15572c0136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abccb395-5a80-4834-bd90-d2d0cb3b6fca",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7d2698-ce7a-4db6-a680-b8e8b6a1521e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d10d3f64-8489-4361-9a26-681e59e56fe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2f1c18-1825-45d9-bf89-271c05bf46f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a4bf1d1-7bdc-46ae-9aef-23aa3c0d882b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b971702c-a4e2-4ab3-be9d-dc0450d0a848",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79375c71-44ff-4c13-8d5b-57cb6cf21d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d08d715f-5acc-4434-a241-87ba121c3d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb664cd-7df3-46ad-933d-2ca1a1c39838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4bd43b6-739d-4531-81e2-8960af03b67f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3ed7e0-52a9-40f0-bd4e-3433fa11dc7f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a0a986-801e-4416-af6a-5f4d48caa087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e126bc51-ecc6-4c06-b535-6f759e64e740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9737955-0a74-48f0-9344-7c2c11a76f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40191bbb-f1d3-4b07-ac8d-5b893ce5f025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59acd096-5993-4f90-a61c-69ac1267569e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e6b5ef-5266-4f48-b152-38375a615a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "274c4f3d-a79a-4afa-ac4f-764f2a238bf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08fc7b83-c63e-464b-94ae-d0697a4780ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "663fbec1-d26c-4ea3-bdbb-c09fbfd805ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de39eb0-99af-4461-bffd-8bdf1ec6afeb",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af1f731-74a4-42a4-9867-98f7064b33b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03656f6a-4a25-4c0a-8dfb-88af28f5a1a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f0a3f2-4d2e-4979-8aac-da0a689a097a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6c82cae-da98-45f7-8404-628ac4894d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d11ae6e-343a-416d-a9d4-7ca556151112",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1080894-6e2a-4769-bdd8-b2dae97c7200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b71e83d2-43c4-4658-9b5c-9ba76dddb512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f973bf87-eef7-4c95-bef0-5147a10b3ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1aad9131-02c6-4edf-81d5-bd4a9881db93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08939c69-b0d9-4eff-af39-d69f6fdbd72d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68416151-a931-443b-be78-24b56dc66423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98f23e72-d18c-43de-8424-70d2cdfd5701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1144138-0f8c-49c3-a394-87025b83e61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0cff4b4e-755b-48e1-a3ba-f0d159e3e877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276fc014-b7a0-4965-a310-2bd2b873446f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64700539-8ac1-4fbb-b8f3-1cd063e899b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "460b637f-7534-447f-a290-facc8e6f7270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5269449-60ea-4e4b-851a-048b47c44fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0874913b-4c2f-47a6-8364-a8ecd6968eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23d3764-4dee-4821-a605-e15953c83027",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78d1ad5-5c69-41ea-9a78-4753db76d637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0c03cb3-9cd3-4af9-bc63-090afca3537e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1b5cbc-3488-45d8-ac6b-777c7d08b20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27783aee-8413-4e4d-8061-b079d43ab8b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8fd9428-f485-4a42-a310-065e66273c29",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d41af5-d973-4513-8906-1bf62fdb3347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ecaea4e-958f-4414-9763-26a63688c058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c42ad25-b3a9-453d-bc8d-c05e846a0cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e18afd4-c463-44c8-824d-128359b443a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f40aeac7-0bd5-438c-a153-855df913e7b6",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "377ccb5b-74bb-4fb8-a13b-24c847cb5ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "803b36a8-33d7-4b1a-9ba0-92a250b9c5f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c834d4b-0aa4-4b3c-8230-68703778412f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "226639c9-8355-45f6-b3f5-7bdf8adf6b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5d3f34-b5e9-4758-8d19-1514ab10ef56",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff2f9e38-3c0c-41c9-afca-b927ef610ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e248348-46d9-4024-8253-1bcf731a5345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a398e2f2-8a20-428c-9842-f0f35b12c86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5737e0a7-5631-4fdb-8efc-b7e924f99d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8f404f-2779-4742-9014-1f3306bf8de8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08495831-ec41-400b-b78c-3db4550e2d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f505248d-8eed-460b-a95d-960fce50c0b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581cef1b-8d01-4e83-8de8-f7ec38d96a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "27a299ef-2a16-4715-b435-7308dfb7e18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665158f4-c0f1-4b8c-9865-955d39b68699",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8370820-57c6-498e-9148-6b5acef58d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c25d17d1-da8d-4438-9fb8-580a439a21c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b7b344-8360-4062-8f6c-5e402e02eedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f80cf4f7-dfae-40d6-9b4f-ba49bce4d037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049c5331-1715-4778-9453-3cbc0ca61a7e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a123cc7d-37f0-45d6-bbc7-392dd1bf38d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68b3fcd1-3a8a-492a-94e5-504ca41930d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039f23f3-b816-419c-a316-e74387ebe890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e467cfd6-8a4c-4d8d-b877-280486a2763f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f5bb0a-d054-482d-9f4a-d084525c7b1e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c0fad0-7478-42bf-822a-1f62765837db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0203a181-7417-4c26-b221-d25d5fca1dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1b387e-a749-43e8-8d41-cbe681001f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ee550c7b-0e52-442c-b4c8-647f966ae056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32e48de-c654-401e-99cc-d89e9eb081fd",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46efdc9-88f3-4078-9842-5cc1fe345f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c11cbca-87ca-4063-83e0-8dea038901b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e37f1216-03fe-4f0b-9a99-0bffe58f2dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b498be38-0d25-49ed-a96c-669809752a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e23d2d5-9982-4b4f-852f-0d5231c91b5a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1bf892-93db-4e26-bcfa-942a5c9fb3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2f8ffc6-c4d9-480e-816f-31b856bf9a7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284d0b56-1e4e-4fa8-9a70-7807c4489f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c70fd34-9550-4a83-a97c-27a91272c3de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289aa52d-b5b8-4946-a8dd-20b3a0884f44",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7320f76a-6a44-4b9c-a0fe-755b7e52c441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "547ac546-0ad8-44c4-a280-e91049acc22e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cdc1f53-87eb-4a26-af65-16a932d034b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "54a16984-1137-4fe8-b1de-ef7282e7acad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ec8e93-30da-4e77-923b-4c647e9658ad",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44def37-3bc5-49b0-90b3-364b2ecd1714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4eed874-6659-412e-9d66-165a0dde9650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abbf410c-6d73-46b5-ae8f-043f21940fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f50182a5-0c22-400d-a2a5-ab3461a31c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd367de1-a2cc-4d62-9d43-fa4898ebaaeb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b42187d-dfe5-49ed-be10-6c4f331a1a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa5ce23f-2bb6-4db2-b72e-dce7e51e4d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceae8d2a-6fa6-4a3c-a501-983d3f1d2156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "66aba0c3-1bad-41b8-823a-05e0c64f8dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f6362b-bde1-466c-a12b-70bc54252d51",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d1c7a9-9a02-49ad-82d7-0856568f17c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83791232-ba18-497a-a5af-7f42eb8572b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2718499-e4f8-4aea-adf0-b27de26070f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d45675-5818-4f23-a286-e9e6173d0177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ef0cd1-2772-4086-a5ed-bfc2db9b1568",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf23878-eb51-4a4f-90ad-105b06629dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4455b27c-653a-484a-89a1-8c7091060ca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3fc1368-db4a-4785-a6e3-3970fb09ddef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "49e7e04e-b720-449f-ac50-202f2406172a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b129531-81c2-4fcd-889f-7bfbfdd7605b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf16709-a6d6-4796-9135-c5bba8770d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4398d1c9-35cc-4254-b9ed-19cf018c05db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7ec18f-a476-4fff-b0b2-1ac52547b604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b26f723-ae24-498d-a09d-b94a417f6681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc599c7-5506-4362-ad06-b479254f9cad",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6331b3ac-e93f-422d-8a76-60e6dd8f8a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0cf5241-95a1-4197-9b96-bc0811f5d4f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f3a49f-d156-425b-8ece-56005a59f206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfbe4cd1-2b55-4413-9624-1819a7295360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72582ec7-5dbb-4cce-8666-0fcea1a5bb21",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6359f08a-841f-4780-a078-8fc4381dc875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c250c741-c71e-4620-b5c4-82b55b3cf54d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f11ed3e-a7a9-4ab7-a278-341fecedc353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b2f71d5-3fb3-40fd-a5fb-9deb8e7c5fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b07a14d-6daf-4904-a92a-7274a94ca2d6",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "677e5eb7-92be-4b07-83f5-e31034bd8222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c4f5722-845f-4ab7-92ca-6aa2b2ce4ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a6c281-0329-4bb2-b391-041e88499911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "12447f1e-7ae3-4ff3-bf8a-e8c418b40066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e336bf-ba63-4487-88a0-b3a4cfce1b05",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "590ce28c-c079-4f8e-961a-bf0fc26e8243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed7cc75-eb31-4ff8-bd16-43c13be7fca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947bc35a-3d83-4209-a037-1f5df75c2982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d60a57ba-c2a8-4122-9d2f-403eade2e7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f7ae75-d8be-4de8-b8b1-9899c2eadf57",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f580910f-21fb-4f84-a242-2b8ea417baa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef9d2922-56ae-4070-8112-7065bf877553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd6aceb-3cdd-446c-ab51-cec893b51c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "398ddd18-e800-403f-9646-f5aca1b24b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c87b9803-3047-4915-b9f7-eef33128d37c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12eccd2-e40d-4378-b4fb-dbf7d42cf436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15d5ac3b-b738-4a5e-95b4-7d410066813c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c6aadc-bf5e-48b5-93ad-a248d0170453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "87b2b448-9a0c-4953-b3d4-ad7271da823c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda94385-afe0-4606-859e-e0f8104da8f9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e09df1-192b-47d1-9be7-283f54f8c305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d65c178e-f690-4d9f-8fc7-b8b21a56c166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92cd31b8-5673-4a3e-85e9-984ae56eea53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "41072731-93db-4bdd-a595-43da71ca3020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82fa5c01-0a77-4212-a14b-9b132f455353",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b3dc2e-6daa-404a-bfdd-b6efba12ac1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ebbe21-1971-46cd-868b-b1593f3be34b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47438a64-ebb2-491d-bd8b-ba6ebd3b2b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb264375-d5f0-4f10-a00c-9c2f18d00adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e09e98d-853d-410b-b73b-a1d227b7428a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e8a036-bb15-4db8-9f9b-52d8b28a180c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a03c5f02-8338-4fa3-9fef-52910e97a6e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b390dd3-61f6-434b-85f7-527073e4fc9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "00cbff33-b9e2-4646-a85d-2cede501f1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db51e946-d5cd-4e7e-a4cc-42570f419628",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade7336e-7fab-4cf1-82b3-5a4a4371ac65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a38a8d56-6ae9-454d-934b-22aada60118d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7e9bee-4baa-47be-83db-a90176540322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f693c0b3-e53f-4abf-93fd-571cf83975e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2733bfaa-86ef-417e-94cd-6980b529ecee",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4dc7634-10ee-42c6-a591-615ce5822537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25ec6bf7-6507-4ef8-a22e-9ffa6f38e36e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad2ae31-8ef0-4f62-bc63-d1a0e664c5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ed831bea-a096-467b-b32b-fde5a619e5f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0069c06a-9d9c-4cc4-bc80-3b9e88bed261",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d0e8d28-6796-4b91-b18f-649a4c9f458c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edbff463-be55-4bf6-8497-b970350e4387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f312ac-1b81-44ef-aad3-b992ab622c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "02e55d0a-84a6-4e42-9076-d71337fcfcb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323ad88a-3033-444f-8a3f-12018ef6faf0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "098a27da-97b2-4625-a69c-d629bc344e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87486536-01d8-44f4-9238-54b8b8979748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e32ae6-e752-4aa7-bc71-a2f0731bce17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "04c25db6-89e5-4a68-b992-e62a412b0a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91425e8-1b31-467c-b9d1-311963940409",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15624f4-27c0-4b9c-9eb7-0d2743df7025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebf0ed75-690f-4cb7-bb6f-0008dcbc1de5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674fb288-9b9d-4c65-a2d9-4535c5cc0f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "58f571c9-a34f-48d1-9c42-86e000e785dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a119671-a66b-467a-a9ab-b478fee28e44",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8995b502-42a3-4303-98be-b2ebedc41d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c230640d-d492-4453-b7e9-d1318209454e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccb8e89-e6c8-4775-ace7-3cd4c9066d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5011bf37-af22-4739-9548-2f644b4b0216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71c1572-0a8e-44b2-a567-0e3bf9584b6a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f1f5ef-e634-4ee5-9c02-c623031aa1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60cf382b-1142-45f8-837b-baf1080e0c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236b9ed1-6525-4a14-8ecc-fb6dd3d952d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "114cd8ea-d22b-4347-a19c-da44d1f4cc64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e76dcc27-9a67-4f2b-8675-793c44c30524",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1314796-79de-4704-bfbd-a8595dc1bda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df659d2-6b36-4fab-99e9-665d437c6831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2410a39b-cb1f-4aff-846e-4eb9cb57f0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e347d39d-c9db-459b-a703-e8ed056a749f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb8bfaf-8f0b-4245-9cfa-35457f27e6c7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74e7795-1b56-48d1-b188-99b0b667f768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "851a4c97-eda5-450b-9738-aaf44a73174f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018d05d3-9e3c-46b1-a349-d0b03b1cdb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b18e4a6-39b8-4b1b-a870-d11a586087ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46206013-997f-4587-8057-a58200304e42",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2892b1-4d20-4e4d-8580-85e1298f87dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e64ae3-6fcc-4c38-a7a7-85de98cfed5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b59632-d2c3-4585-b0c9-4d0e8be778e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7b056ed-920b-4307-a99c-3a783054395b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86f2412-06aa-425f-955e-5de3712d9241",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5e4ca2-2093-4875-8edc-050e593ef1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17f58ffe-ea70-446a-8660-83cc9b2e3101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ce01fb-e44a-4fcb-8052-7a2cf8056532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "880358e2-8aa3-449f-b518-dfc91221aa14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b230032-a88e-40f4-82ce-8d1f96bbebd3",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8d16be-8fe7-4ec3-aecd-4a3a57feb096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fefe17a-0b9c-48df-9e19-7f95abb59c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd28d1b-5370-4835-b94b-8b651bf95b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "be5217dc-bff2-49e0-8214-784afb9d6fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d983dac8-1735-4807-b10a-42099485fcfd",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6941b3a7-148f-4317-9230-24ac2ef18003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76103f62-206e-4159-8b93-21793f2bed03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774ff816-ebec-48e5-b619-e87e975627e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d0133ee-8550-4834-b2a6-3c9eb5a6a0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486129b1-5148-460b-bc44-bb7270a002d9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "600134b5-d3e5-4170-9b99-bac58f2c4f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df05fef6-2915-4df1-8a5c-4dfe4f2aed42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04360691-3f67-4221-b9ee-3463f62d53e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1f47ee4-97db-4231-b666-e727965c02e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11db847f-269f-4c90-b2a1-31cc392d9d09",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea55c8a-43a4-477e-87be-e36764b3b11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4212bd3c-e28a-4175-bc0e-63e8a30230f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09ec97c-0de7-410d-a77f-dd998d3fe71a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05169fc1-353b-4ffe-9874-487c6ee0b56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "369ee010-42b4-4198-adb8-71d911fb2ac9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b02933-5b2a-4820-ae86-c00bba4c25e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17a34dad-59cd-42ce-9bb0-ca18f95086b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f001380-7cd1-4174-880c-8fe3a1db1ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "07afa06d-fc0f-4684-aa77-053935265608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953502bb-583c-4fc1-a5f6-bdec547ad1db",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25cf572-b4df-452f-ae1f-94e8b028af24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e340eca-d3be-4e73-a29b-d75dca9619d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a831166-129a-4738-b93e-536f28a79fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e77d4ae7-5c7c-4824-aef9-94a90b9de474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2827234-7147-4e3d-9e13-cbca766f1c24",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "253eedb1-68c5-436a-9470-21bf52c3ba72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f08d0060-4e58-4aa6-b84b-255c49046269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e401ce0-2e3d-4b2e-90a1-ff428feae802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "98e08109-566c-4c6e-b4e7-32d1c4c989d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e0514b-9eb9-4c97-8ca3-cc1fb3a6e46d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a231116d-824c-4f33-ae87-b1f7fcfa5a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a02cbc58-357f-4eea-a94f-355e323de980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd823f9-1199-45a1-8ccd-dea9c72f5763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "577b3168-1540-4527-91f3-a46966ccb749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1113d94d-b6c2-4f6e-b83a-903cab917e44",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c454a1e6-7cd9-4694-8738-b1df59f9609b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a5c0a2c-fa93-41ec-933e-219faea0c4e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c181a4-cde7-4d03-a34e-44af52cc0ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ae226b1-e527-46ec-a294-e6f84ae727ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4095602a-ffb9-4e56-ad79-44f65210b6b6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4a9642-5d32-4e96-8243-e2e95f766a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cde500e-6bd6-406a-ac3d-155ec8d3f3ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde4a761-1a6e-41a9-8f75-8b707a419d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d2cc8d6-c9c4-411a-8342-2453710fd557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ab993b-78c3-41c6-95d4-b1267fa49429",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04fbaef-9224-483c-bfa5-4f6e86a47abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81a2920a-2a6a-4e7b-87a1-95d89a3b35de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7d40a7-cb4e-4064-8c5f-45df454cc19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5dc4f0a-383b-490b-8795-af5b51f320ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6560302-51b6-4717-bec1-023b33c05ba9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cad6fec-c2d3-4820-a822-08e2b5868b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e756b94b-f7fb-4562-b948-1b3d8ab220e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4dce4b1-74f2-403f-bba3-3cffbdaad2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "32fc771b-b995-40a3-8ea0-001c60878812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6581f09a-d68b-4fa0-8951-d34a2b967a96",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "933f493f-c78f-4217-86dc-86d442543dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24d3e56f-b241-4984-b73e-d99c41df1839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773f173a-4892-4016-8400-0df2e2a58a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "988ae69f-034b-4285-9180-3614e8221cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af10142-e79e-49ed-918f-65207dbba4ba",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e82d34f-5959-4ce1-a57e-c0ca74f44737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ebfd36d-9a1b-4b74-8540-c4f2edc20e5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c557570-c4d6-4655-8ec4-b03f42dfe70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c60f2a57-afa1-4dfd-8353-d31e7db8d096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8031acac-6715-4c3b-b2be-df956d4da0cf",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae1ca57-d1ec-4c94-bcb4-68b749e928c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f59f585-4083-4c79-acb6-f2ee0593a6b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add0608a-2dfc-47da-b15f-ff69a08d3757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "325e6f11-e1e9-410b-a662-7735aaf5b4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d75431-366b-46e0-bff7-421ad33d18a8",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788dab6b-6d11-46d7-81b2-a92187f2e5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7401b3ad-0eff-4b10-bb9b-ddc1ac30a4df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ac62af-ad5c-4b50-b8f1-56a5a66d38d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4fd546aa-ec95-446d-8c3a-c46850dc576b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f61b2c1-8587-4c8e-a1c3-c26ecda42c69",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94382f0d-8513-434a-8644-3b8d67dbb3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e491705-3305-4475-a6a7-2feca6d03cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dff0aaa-e9b9-412f-b37f-5a8d4f21f7cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b35708d-329f-4c5e-aa38-dc5fa4697d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042b1475-2521-43ea-8721-eae4125c8ef0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb14d26-b6ce-4081-9361-35bdca1eceba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ed1c0e-cb69-45e5-8133-2a5cad0a2766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f56308-e159-4a35-bc1c-0e74022e1e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c93d482-c90e-433b-9dcc-9b4f2af3c01a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f1caf7-dbaf-44d1-93ff-298234c00c5e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a491ef4-0f52-4b8c-beff-15fca3b362d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b3cbef-64de-453b-b753-60f5226e6c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f710c8db-ba45-4338-b10a-e92f3837d96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44f14b75-f259-40c5-bdee-3a25d77ce616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d24ada1-c5d2-4e51-a7e3-58ddae1efe5a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "560ab94b-c8cf-4aaf-94aa-c4dd67ad4214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c27e18ac-8bc4-4096-895d-c2f6a9c8f586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba1864f-eb5f-42de-826f-e1595bc213ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4fe01a1-13ba-4738-950e-97d8c0af4959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0b694a-576d-4d81-a1af-8008f684d3c9",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf28c1b-35cb-41f5-84d4-4f641602aa99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa9a169a-e319-49f8-9e0f-49acef8e8d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19470234-6488-4fd5-af29-5957a775f99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "62733103-ee78-48ae-b804-05108fd81f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8da543-016e-4c49-8dc9-0cf148397584",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c74da8-98b6-46a2-ac04-1605e1ae8ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae55d2df-3e88-4e34-bdb9-60471d0a3404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af27ebdf-22a4-4f3c-9c5c-7af0143cb1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2615cc11-09ac-45cc-83d1-c8836f1f6d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd457f51-343d-4310-b7db-6dd0c398b1d4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1525210-f94d-441f-92be-e87fe13c1ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bafbe65b-f276-4aec-9709-9f50bebc57c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6297d1f2-e0c0-4710-a77e-4016809898b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65fbf1ea-dbb9-41dd-a9ed-a86278b790b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f3e9350-d984-437a-9990-eed6c908fd77",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e648fb2-43c1-4fe0-a5df-ad14aee7f40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd42c7f4-92ed-4a4f-b8ad-597b00402b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601a028a-da4d-4b96-8bc0-87665881c2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d488fef6-b553-4bbe-9012-894f10f66241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ad31dc-2c01-4730-8dbb-6cc7546c764e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b1e098-5f15-4a63-b03e-454ee40e9ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b037e4b8-4dff-41a1-9c34-6f12fb7849bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3c0404-2d27-42d2-9bad-e0d495947341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9e4f3c5-ef8a-4b7c-ac6e-0b0acc2a17af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2801527c-acea-4a1b-a8c2-a9175f55d387",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01dfd4cf-224f-4a57-93cf-af789a7c51d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dd26937-687f-4d5b-88de-68d394db7c6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273a2849-62ec-4443-a962-5240309e2fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f59e4e9-10ba-45c5-b48f-eebc6115113e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c016ddf-edb3-42d6-b6ed-89373a76b48d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25cbf05-8204-4ed7-909c-04cfade17b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e16703c8-b3a7-4a39-9be5-3e76efab5ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd539b97-30c7-4e97-abf1-28167a1e35f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5217baef-b544-4c2e-9506-04dd71cbafb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d637ea-9976-4b84-ad98-330621efd4c3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ed5ee8-597f-4635-81dd-42472280f289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1137ceca-ade2-4b16-baae-45a0b5a33f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1bbec4-fe19-4b08-a202-5e7dcc4a1c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9543aa83-0199-4e7c-bb7d-cb498dab0338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "befa7884-46e1-4b1c-b718-48204967d3b2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4e29ae-8179-4277-a75b-9458f5ed489d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1fa47c6-a86e-4114-abf1-47c48d2b8402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88479ea5-df20-4d7a-8946-ca37cf383fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b3581d5-cadf-4a14-9fef-c9699b6a1e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b425633-72f5-435b-8048-8ba0aa7bad85",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf2e302-2295-4593-99d6-56cd89cc8132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc842e85-94c9-489a-8ac3-9e36107db87e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e799662-3785-43e7-9d17-611309561022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa07d567-00fd-47e5-9bbd-909b1fbeb946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3f118a-0693-4a70-bd23-66806fb7d753",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be777ef-259c-481b-a09c-ea038526b671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31bcb7f2-25a1-4b7d-9bc7-e3ebfb04c302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb90518-d4cc-41cc-9da9-a663f4f85d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bd1844f-e24b-4dcd-b002-2e4f1d01aae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01e7f970-753f-42d0-a1bb-275528c2f71e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786ab54a-fc14-45c4-8689-10d94e146777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38c284df-79c1-4c13-88c7-3c58a041e6f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444de123-e656-467c-acdb-c6fa19e414eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "27a2157c-a9d9-4507-aad1-f8e7367a3631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bae222e-aab5-4f87-8b5a-b0e7f2f6ee39",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2445fc6-739b-4802-924b-bb52fce5aad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d98dbd-31bb-46fe-acf8-f3872abeb666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb522ee-0e1d-4cf0-9fb0-f9da6c472679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2865807a-f508-4056-9931-32d6b034a76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf577be-031a-40da-b1fb-62f5df08b2f5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd38c154-0058-44bb-85f4-7c6261f9175f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c06d789-e821-48b9-8a83-e0692d4aa94b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e36e3faf-c37b-43db-8c59-8d38c09eb502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "16665215-fd48-4b46-99ef-516499a4da1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7aaf7b-fb46-4b3f-b0e7-3203e8f30ee6",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef759a9b-058f-47c1-963b-229b7540f89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d46b2188-cf42-4a91-9616-e015cb9829e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19a0c10-a829-489b-97e2-1ccdd8a2c7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9d036a7-4a8b-4ab5-9f41-899572378ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba533c1-99e4-468b-b6cd-1b6d49eb5b9c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b3a7a2-1c9b-4eee-b60c-b6787ec5c04a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c560e61-d8ca-4234-8026-a814d0d2553a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320fbfa1-2321-4a4b-b89b-f06dea0f2e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f589b3ec-e765-4424-b008-7d41b63fcd18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b0a2a9-8253-4bb1-92f6-ff17ca579151",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0933b444-af13-4cd2-aca4-f6056c26b170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a413c44-fa00-4619-8633-c07a7b29341a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e9d93a-ed5a-461b-92e4-58c1c308ec5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "603a26f9-26c6-4422-a3bf-1a0b2de469e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8f9cbd-5708-452e-b829-ac7e1d94047c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb0ed93-8171-4e94-ab70-93ffe3be739e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c335ae8-d375-4f76-916c-d63e272758dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52276b8-efc1-44bb-9a42-a55f916a8730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "80ef2f75-4240-4869-8c94-15a0e8251640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "288d32b4-a7de-4d88-8559-5a286fd0e3c5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "266723f0-9664-4da9-a616-c7f3aca94ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2b94d14-10ab-4c1a-a964-a3ca4ecba07d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66475e4f-d95f-451b-b9f5-e7e5b9c42fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c24acc5-cf1d-4868-aa5b-1ff800f67132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6997b5e9-a977-492c-9c63-ef7a1fc5f1b3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "750a87f1-a103-4459-85ac-f03e0885a27c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ba87e77-beed-4a22-a3d3-22096da1dcad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f857f35b-f284-4881-bc81-58f850f44003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb7fe9d6-0bd5-4c04-a995-df99b07261b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b592cd-3319-489f-b62c-95fd35107a16",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1520c3f3-e31d-4482-be41-d3e6cfa57b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6127d02b-e6fe-4b13-807b-6a72501a08f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e4cd20-1ff9-473d-8532-130eeacb9d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b76d36f5-12d4-47ef-8b09-c830a700a0c4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2a30e169-9dca-4ea3-a1ca-a56f1d055f79",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa074773-4697-45e7-bf50-ab47b1a904ac",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867909d3-20e3-439e-9765-77b03f6e5a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "498923fa-4a79-4c33-aab0-2cc0b57bae8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d13db3f-b63d-4dab-9629-dccc0d0da3c8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1b2a6a5c-496c-4dc2-acc1-96bab0ef7e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969d53c7-e92d-4604-aea8-1a006cb6ec3d",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75984393-1db8-4010-bd2c-e1530f27222c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fd876d8-01e5-426a-ab3e-5bfe3ea8cf25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c5f245-99fa-40de-8566-4e85d32e8fcb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "0fb6fe7b-e252-4ed0-a0bb-ceca3fa99497"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce1347a1-62bb-406c-b163-cf1beef52fb3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cfac36f-8d62-463a-9953-45b2de1db91b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "71efce9d-7ec4-4551-b5e5-56c460499124",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78d28792-0ac8-4fb5-8f41-a980ff0e2530"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "23c0a65e-4bb9-4d01-85c6-7352a1648726",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9ada71bf-6ef7-4c8c-a2e1-870700f13e73"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ee10b906-3661-4c71-b2d6-ecc49205f2cd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "74f41047-a22d-4cac-b43a-2edf2f283f71"
                }
              }
            ]
          },
          {
            "id": "853907f6-934e-45da-900a-712b44cb56c0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5a57a5af-8b53-474e-9eba-12c08cc91489",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01a32bf1-57c7-41b2-be70-74b54d7bdcaf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04d47427-a9cf-40cf-98f9-5a7c33ce9852"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3558a52a-4373-429c-aafe-2f7ade2fb86a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2db26ebb-f165-4b29-849d-a789712fb075"
                    }
                  }
                ]
              },
              {
                "id": "76d05a81-004f-4982-8f16-c3077feef49c",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "414a803f-c7c8-4d60-8842-88a970fcc826",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e505f5a-588a-4838-ad51-6bdfb27ca2c8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dcaa0b53-77c3-48a4-aff3-886aec577ce9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "494db7ca-5d59-498f-8ccb-d3dc107ef96b"
                    }
                  }
                ]
              },
              {
                "id": "8721e7d5-6505-4f14-b820-680f5d3f0f98",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccd257a9-0f7a-4ab8-aec0-e1c63e85f931",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "47098129-7b49-4b84-8850-9659174f8eb5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4d93c34-48b1-44fd-b964-ac54373d7575",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "50b13443-4ac2-4f1f-982d-ba94738ebcc5"
                    }
                  }
                ]
              },
              {
                "id": "34954003-1551-4edb-aced-debff56d31e1",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "adb0984c-2698-4c38-ac8d-ddf4ce46f72c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb141f88-adfd-48d0-88bb-b91aa66140de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a935651-8f78-4646-bf46-5f60e71e7b5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "44be5e3c-e251-4cf0-9055-5544c667ff52"
                    }
                  }
                ]
              },
              {
                "id": "3465142a-e588-4eda-b06f-3073a14fe0a8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ece90e5a-0e64-4afc-bfd7-dbfa65c33635",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a6f65045-36af-4725-86cb-0bcc590d33ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e6c845a-c1e8-479f-bfe3-18c4b016aa5c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b402c6cb-8fc9-4c9f-804c-935c8ee77ba5"
                    }
                  }
                ]
              },
              {
                "id": "a6d6c180-5388-4bc4-a5b0-72a68584d843",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cddf99dc-ef56-4e69-aa64-3b5782ec50f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf78b1cb-fbca-4dd4-a68b-8c260df55937"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18f4a701-0685-4817-b5a6-66fc2a372e97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "670a5fd1-0987-4a1a-a944-0672b41275d3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b7551bff-3e6c-4938-9668-3f84114f3b86",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d24daac8-7c64-4919-8f84-d0a323d5bead"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7d8d3b0b-4e09-4ae8-b189-fa6d2e3a4b3b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "82a2921b-7b00-42e1-85e5-f8deff96ad4e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14f84785-d77e-4f1b-b850-7c10ab364261",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "be3ed8b3-f4a4-4735-af46-cdf401923f3b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce3ae799-b178-46df-8fb5-26e0e079ee3f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55b0a56a-08f8-4052-8dc8-eb77a42f1f1f"
            }
          }
        ]
      },
      {
        "id": "de668578-ad75-4e85-a71b-200018283de2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5b9b3a1a-8404-414c-935c-243897cbe891",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7357e366-8ff7-4761-a43d-b1495b8b41d1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "57436464-2e55-47c2-805c-7e948347276f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4b14d8-d747-4a97-8fc3-1a382d8b943d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8853fe4d-b2fd-469a-b790-3f7b7181228e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6032119e-51ff-4da5-96e9-bad294b81459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc33b5f-4b00-45bf-af9e-5ac34c977b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbcd873f-7969-4eef-8733-38aced1ae930",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db31af90-aada-44d0-a333-e2a537d0dd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1edf2c28-cf25-44e8-8bf2-8548c9424708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61869439-5d9a-4824-8bbf-ca6aba2d513f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6403cfe7-dfe2-4da4-bbd6-2f96b43dd88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6123c7-2b59-4ef8-835b-413f0ab9d8a9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf5012c-0a04-4c19-96f9-14a3c51f9bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1cd207a-d2bb-4d1b-b305-ffbd5766d02a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e2db76-dbe5-4871-b157-2b93640fc832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c9d23c7-7fbd-4f08-9d27-cc7c6d437f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7020df58-7c9b-4a38-9777-55e5673b4651",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a326b5-a5ac-4157-8563-0e09283932f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a4e94b6-4a0e-4905-a4ef-f9045556d739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362c7e70-27eb-4d4b-a071-ed0c7f8c7c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4b4d293-db55-4fad-b109-b2b73437245d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a8e321-55ef-4fe6-8573-fca6297f9fd8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8a4cea-a3a0-45b0-bc87-f9b831d5200d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6abdec0-a805-46d5-a2fc-fea872164547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1435dc43-cf7f-41c0-a4e0-184403ace5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6caae50-4dcb-4426-bf8a-a40935b3f211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1785824b-7c4e-457e-9015-f1c117f2d50d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c081d6b6-567f-4f7a-a28e-d706bd29bf35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f72f3fa2-8f90-4961-be94-774f85a8f730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3550851f-02c6-4dd4-a281-974a26b3c089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "691d676a-ed8c-4306-a902-4b6dcf62aa77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973b472d-5261-406d-abd5-17cf7d9f6320",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec683e6a-5adc-4b1a-9029-4ef56f63909d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1460720-78bf-40f2-a1e3-69422c506ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f43622-df62-42b4-ab2e-a7dc94330feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0e3af85-864f-408c-9d15-41fe8e234a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e30b9a-0a35-40f2-8f0a-d374fb9767ab",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4d3720-3675-4d6c-b978-033ae4d35c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ea998d5-584d-4e56-8607-048e661e851d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5d192a3-9b6c-4cec-a103-1abcfd914f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5355fb7e-6c5e-4689-9a40-674bf3943527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58e31180-421f-4093-9e1b-b033b77e9cba",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d8f07c-5700-43c8-9fcd-511625f61c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "364eb603-208e-463c-b7db-d96aae2ee5ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266f0cda-51c5-47db-8b0d-8d94abd12cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa0a970e-608e-4455-8684-c98ada654446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f043572-6d59-480d-ac9b-a399d7b8be93",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "871fb39a-a896-411b-8068-e11e2d37f80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d6cbd61-ec21-4bf8-8ef9-781b5f5e1741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480b2c66-2694-4d8a-bc81-5722e8893c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "99b42030-4c5b-4982-9d1f-25349d3137f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c0daeb7-fd2d-432b-8290-2e539c0c2782",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95935e6-c0ae-41be-b35c-e46796b1b12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4990a357-76c8-4742-bcac-464483373d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ccaf94-ac9b-4875-bac6-2ced606bcb18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e9d8d539-0333-49fe-bcef-14068d5071ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3a6208-5bfd-4471-a7ce-1497d7e9809a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b13ce0-38b0-48a4-bf32-a77f82db0f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "574cab8b-73aa-4ab0-bb19-02ec42c6cf6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94cf7ee-5fa2-45ba-ba0d-6d199f07c665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0412dcf2-750e-44e0-929a-ed6186893f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccae2d0a-63e2-4e8e-a624-f7d575abcbe4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac1fa6a-937b-41f2-abf2-b3ccb6b5374d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94e6506-dda6-4d84-89ae-2ddf7f1b0f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91d4fb2-1bab-446d-a668-04362265538f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b9eeced-2885-4aca-9c6c-2e16739f22de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c8b9f2-5a9e-4ff2-9ae4-9a6f964af3e3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04425d40-b85e-44e5-904a-9b7c0f231672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b8ba7eb-9474-4cb8-8108-217e2345c5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1675c7-d994-4241-befd-791c4ad78d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee162e27-959f-4fd2-8077-730312263f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90040735-330b-4c51-9471-be0971f0c5f2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6ce92e-80a9-410d-9989-a31c39296322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5f62411-2a53-47ff-b989-17b86ede06ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d78cf24-2d73-49bd-b4c9-f7082bac3fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4b3dfe7-7ef5-4fbe-9f4d-ccd44d14f69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9767a672-084a-4f44-b51b-e18ca5bce287",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369a68b3-0c22-49ac-88a6-305e3698918d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c04a786a-d1f5-496d-90a5-29fe50504f8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe63be95-3369-4f8b-9828-67e6b17471a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "074dc923-9dd4-4e8a-b505-27ea7289eb7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66487524-74ff-4bd6-92c1-a9c0659dffd2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03ee11c-a8e9-498b-b33d-d214529cc265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b966a4-ccdb-4d3a-933e-1aaecc72626f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2dda984-b5c0-4173-b0ba-07e9d468f40b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5abd26e7-e9cc-4d62-a42b-c14b2097eb21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c730bd-1037-42b3-8587-ea79f4e59e6f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b73bda-9ebf-4060-8ec8-09d22244a4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7323074d-cfb9-4cd3-bd53-8b0537c31058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d99cd52-f09a-42fb-99bd-a26aec99c85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "340d6916-1a32-40a9-ba9e-31bb121be3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5ae7b5-b94a-464e-8d5d-c62dd169c69d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1db4bef-2e21-4c38-81ea-2a86c8d659c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00cf540a-d920-47df-99de-18724b3bfb58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a5a085-5891-478d-b971-280779ea6148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e030cbe3-ecf6-4a0f-aa83-11e91832654a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d08d907-d88d-443c-b96a-c3ed3abdf1a9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac70e6e-89a9-469b-9dc4-99d655f7228d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc2b8988-bd8c-46b0-b0c7-fbdd4dcede3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e696d24-695d-451a-ad5d-1d039022f748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "187a6023-95f3-4d04-811b-726b00eef1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50dca2f-829b-4e21-ab11-a67e98428829",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35823be-4df3-4d0e-9b18-87d63414b337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f56855c-9734-4489-9de3-1aa6c39b1b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd31e85-6eb8-41eb-af2b-858c9fafe417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bdbb440-ac0c-40c0-a552-91b68229d615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92f7017-519d-4ba3-8095-3c7dda365e5f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8e6fc59-c988-4483-9a86-d5b046b57023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b50be65e-3d94-40e6-b37b-a74f87445570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da94cbc-a948-41a2-add1-069dc2e517b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a88a24df-b529-458c-a983-639d73323e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43cc4fc2-08c7-4cae-8495-07ed9bbbc3d1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e61755-29ff-4737-ade8-8f034b61fb84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fb55d88-f958-4633-86bb-1411fcd91df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a79fce7-c071-4fa7-bc39-cb52b6ecbe01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "beeea071-fab5-477a-8472-a84fc2a0c1fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1b1858-92f7-49b5-9841-6d664cf28fe1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0e1abc-6750-4d9b-8d24-64e6960539b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482586e8-57bb-4adb-bc35-7869c03ff549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418cd96e-afd7-44ee-8005-a257663c0665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee310e8f-fe4c-46fd-8236-2f57b56f30fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcfb11d3-192e-48af-b973-40318353a3da",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac977f8-918a-4f6d-9dc0-87bf1577d25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfd9fe9a-dd80-42e5-9e90-3e214a78b451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40dcc5c-f685-4583-886d-580f9b84002f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33ffa0a7-059c-4b2c-9af5-8b12931ada5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc53fde-7b81-42ab-a977-c68efd33eca4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3029c3aa-1f04-4740-80dc-23a21a2ba072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f84dd3-2ad3-4a00-ab36-4aef88469a61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b203865-bf2b-4872-81a3-2908508da78c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0d2b49f-26aa-41cc-a7c6-6baafd2131ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b82a7bb7-eca5-4d91-8bdb-bbab3949794b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44832c18-d896-4de9-b551-441631871484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c8a5193-f162-4b33-ab2d-0cce95e387cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f6fbff-50b1-449b-bbbe-abc705c15719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "965a8051-f43f-4aba-a3bc-11763fe6f6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a24ef34-3674-4a8a-be63-3ff2dec4ef12",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc90afc1-cc32-480c-8b68-6b5a9927abbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc21f15d-043b-4ad1-b424-99841107348d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee820b5d-ce22-422c-9bcd-bcc984aa38ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea86a58b-7792-42a0-8da2-f91bfc882f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c024bcdd-50ac-44d2-924f-97e5e6e527a0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4424fb74-3f2d-4d96-ba96-ac86be0d63f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0795b9b7-fb02-4f01-aa5b-4af116d82798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c808003-36e5-4bd2-b28e-9ea034debccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9404ed0-37dd-4b42-9044-61ebfcaf212a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7655d5b-0992-401e-8ed1-bd745572f7b1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fc5f62-d37a-45a4-9c75-37f4b021b109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb3920ef-fbf2-4f97-b7b7-ed9b5147c355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8753dcee-d44a-4aa4-95c1-1fa7f56e751a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "caa68663-b7c1-4193-a572-f8e3fda7ddab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5346e31-8751-48d6-8cc1-bbc5d79067d4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da25ac8e-dda1-4639-bfaf-66ba6f27c1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62d42b18-b1bb-4a6d-9fa7-ccf81f6975a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2006861c-7124-4903-aaa4-d8fa7286fefe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf3d5d72-81eb-4bca-86d8-3c92f5060dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b74188-96ad-48dc-af49-6939da82ee5c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8105c6-28c4-46c9-9d67-13f650f7f107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ed4e58-22ce-4a2b-acf8-5cf6c116d9d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8710fc3-68c6-4743-a833-8d37baab2089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfbbfbbf-1663-41b2-8b9f-97b71a73cb23"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bef52e17-8b82-4db5-a9fe-549721c34882",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "efa74cba-7e5a-4f61-a8d0-f590337f9bee",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774f471a-cdef-4224-92f8-ebd02fe5abcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7212058c-8386-415e-ad2d-aa21de9783fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14a1685-b071-4a6f-8a77-0a081c0beada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48cf9675-3151-4c2d-a212-5b95c332ea90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618cf496-6e58-46a8-8836-ef1ff8d5ff32",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20dd4a97-c114-4911-8af2-7bc2af2759e1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c7382770-ea47-4d32-bd66-d5d4739058b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "609e02a4-d4da-4bc1-98fd-466958c2d4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8aacdac9-f376-43c4-98c2-458d1c65c946"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b97997d2-53b5-4d51-a6e0-0209e3c3f53d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bfb46a4e-b012-40e1-be5d-a80183f4edd4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9f1c7ef-64a5-4bf7-9ad9-2029683c3330",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74121a23-fb13-46a7-abd9-900e29bb2db7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "521c42a9-2001-4825-ac08-2f5d5629ab24",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f8cc803d-aa3f-4bff-897e-9111e08dc78c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4629bd96-4853-40ea-b919-da3261401f0a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "03d5d16f-813e-4fcd-b2d2-c0129d8456ba"
            }
          }
        ]
      },
      {
        "id": "80bce0b2-cd98-4a65-955c-6d24b27e3b06",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "51f095cb-2431-4c05-83af-4e565ec48ca6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "52fa055d-1d49-4b86-ad02-e93c5a328eb2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "17405bcc-0e1d-49b8-b3a3-ac6ae3ea3d67",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa90890-5ff5-46e2-9b12-03e84ca41786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8764ff9-bb60-4f8b-8ff9-8afdb6687446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b130b93e-f145-402c-a33c-732ee5a87e15",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "096e49bd-994e-44d1-91b7-e062b57ac32e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a951251f-69b7-4380-bc98-053f72ba0958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35589452-7636-4ccf-ac10-765edb278b44",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3669c1ef-4418-45df-ac6c-fdd77ba0910b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac2122a-5fea-4634-9de3-c0e34e8ed605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d18afe4a-0445-4853-94a8-ce9f95813d74",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e03a258-059b-414f-882c-d9129287cf64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f56f8843-398a-48a3-b995-6da96bd818cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1cd6ee-e7e6-43d5-ae20-5b6ac89a4e2e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbc8268-5569-4dfc-99c2-4c7704ccea9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c843029-01b1-45c8-a28d-4a719c7e9f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f6d8b2-e798-4c2f-8f16-85c3eabacb68",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5d7da4-7d32-4b54-add6-07a1e9adecee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24686962-d3de-4c03-bae5-e13e980afce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3a8909-2d30-4059-8385-2ae4f5f49233",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16f4d24-51fb-4fd3-a742-3c5781b0b2e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37a65e5b-885a-446e-bb5f-e10bd4a7c0d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd589b88-e738-46c6-bab7-1e606056a201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ea9b5d4-e704-43b7-b812-ad9e922a889d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a46870-4db2-4101-9428-d92d457e1223",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca57609b-aa90-433e-84bf-1648c0cee47d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd5d598a-77e8-42e0-845f-10e507c366e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83372ce-1d88-4317-b91b-c374415eee29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d3cf6bf-2883-4525-9895-13b3b80b671d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d96cc63-3bf0-4a27-9160-631908f25407",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee0b31d4-d5a3-4700-b6e8-b5ddf40189ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75ec506f-0beb-4283-bdc1-319dc3c3a5d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e264d1f4-cc05-4f84-b249-a558a0626e49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d518038-0439-414a-8734-efeaea1f5ad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49eb482-a18a-4305-8e71-e594c7f1d932",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d36090b3-67ea-421e-a939-35feac40d31a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b3792c8-c62b-4da9-a53c-6e545cbda31c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a2d937-3ce8-477b-9c0f-58ade378443e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2d0624d-dce9-459e-9477-42261360911a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0185974-f582-413d-8e2f-896f3e3398d7",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5698153b-174e-4939-809f-40f53bd99379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d990ed39-ce1a-44c8-83dc-6878b8539296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "233fc272-f413-49c1-905c-ba11869f34b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bf1d22a-f5e1-4931-9132-719115673f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5bf5663-9e92-40ba-b1ab-27cac29f232d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70bcdcd3-362b-4021-afff-a91f7aedde5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53848f85-ba8a-4977-87c9-5869a59b2d03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c5b2ad-d82d-4846-9b6b-8fd228d73f89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef716ba9-65b4-46b1-bab6-ebba7028bb84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301f6d77-4b03-4478-a522-e275055e55ec",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17016d2d-687d-4f86-b645-c4c11639a6ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffa29741-027e-4610-b949-bd44a8eab86e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "816065a6-0247-4820-b47f-29f38fb0ff5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b84ef5-744f-439a-a2c6-2f51575f9c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d27edaf-eede-468c-a4d9-7316dc91b3a7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "764451fe-f689-4652-aa41-adedad92e318",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c22a58f-4e55-4ef8-b948-9e604af0d5ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc51e287-51b6-4f5b-98eb-51e3c1f07c78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c74fab-bcd7-41ed-a02e-7e166856952c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2270ddb6-2346-4496-a618-b796538c138e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97b6e12-2e5f-4d4b-9ecc-9a6da37e3af9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1b27425-eb90-4c1b-83cd-b3bcdf9c11e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8145fbda-3fee-46d5-ae7c-c86907039a56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1226f4b4-77c5-45fa-a851-f0d5fb1946b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e88c7e7-3589-4d07-b5c3-3dc13900ad03",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae5ad68e-c56d-4938-b3c3-29c10b7cac96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "077aacef-170d-426d-8eca-3eb2686112c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9463d869-b38e-42f4-b9a6-c155e1924a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "526147c3-0da1-4512-b180-920ac71e0f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6d13f9-1f19-4afd-b46f-ce08f54b508c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96e9566-ede9-4050-86f4-86ce8e4e47b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b10b2be-0234-4c52-9c43-9a13f002ed78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab9482b-2aff-4767-88d9-6afcf614ec3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84d12557-cce3-453d-b27f-e7869c9818d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6db028-7595-4bb8-b18b-1318125ca456",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c421e7bc-ed04-46f6-8b7e-cd1c2631ba03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6abcc2fb-86b5-4be3-967a-2bbf269f68c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c541f4-0dad-42cc-b3cd-7d0dccfe5e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3061c11e-5a47-416e-a56b-06db4bf28162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658d3ea8-6f68-44db-b592-ce70e6a5efae",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6673ab00-114a-4def-9e71-47164d9c2197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e26a70-f672-45a8-9428-b94e9041a3a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3273082d-6b3b-48a9-beb9-cccc33149669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e96b155a-63eb-4bfb-a070-511239bc5c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c20849-b41a-453e-ab66-85ffb965f56d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1994cc34-4e4e-4114-92b4-67ddf87efa39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b79b3e4-9326-4343-96c6-af2c0c41f67b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d9f373-65a4-47f6-ae85-3f78a84d2c81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e817152f-f162-4f74-8a9a-dbfdbbb5f311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29ebecb-df40-40fd-820f-f1db4f3f41a4",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ebbe29c-ef7f-4b18-92b6-9723906c7eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c103315f-07e3-4ae8-a405-06ca8843e012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a3b965-7832-45e9-a8b9-88cd4e274d26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b5ccd8d-742a-4e39-8cf7-0c22710fe56d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20cc646c-97f0-43ec-866a-04a1fa41a860",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81209617-7bf0-4dea-867c-b377ee4b8fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925dfe83-06b5-4405-a0f6-6126f7d7beea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee778b41-ae7c-4dd9-a266-cf109b3ce76a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2d97775-3de8-4cd0-b7ff-f7164b2034c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54c34dd-f552-4f0d-ad83-be8241c64f7d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9151090c-7192-47f0-8608-aceb6598626d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22796981-a2ae-4b99-899c-51ddf476151a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa9bd2bb-27a5-44b5-b717-324f0ec3fed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "155c26f1-e5be-4818-9d0b-7f91b8cc4542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4246d10-5907-4d91-a403-ae789a867a44",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd528175-07e5-428d-a6da-99c92f8d7b74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c88957bb-94f2-4611-a221-1e72fef13740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "588236e0-a45e-4b68-8207-9dc7482cb235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20daea01-8d40-458b-baf4-d7740c7c864b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84091b6a-2f73-49d6-b4d4-2c969676bb57",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f018b8-a655-41bb-b0f0-470c1ad7f08d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31e13b63-ee19-4504-8fd8-96c33ab53400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48000366-095e-4d93-a015-b93fe245de8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b82631-5171-4ee8-b47f-406a5fdfbf59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2049ab8b-0e50-482c-a3f3-9404323f19b0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6dcb63e-c373-4095-a9e3-9486814829f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a59b2ac8-8807-43be-8344-b3133e2eb8f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7b6d58-4564-427b-9c34-df546e6a07bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a058bae9-3e50-464a-9ad9-fa628d42f04e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ccaeb85-24bd-4c62-8b40-1854ddd1a607",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99635fa-fbeb-4b61-914d-9598cf22b64a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9defbb9-9ee3-4731-80ba-fd0a4c3e4466"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da123890-46cc-45d4-baa3-b40aa2e9319c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "343711e2-b594-4354-9db5-5c3d5c8cc608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d86106b-fb2b-4d6b-b2c2-3535155d5b93",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cdec94c-8cde-4351-a4e9-ac4a37ee378e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcb53359-a3de-4e39-8aac-5189d21c2e67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "512dae0a-360e-4bcd-a2b7-3345e57772a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7a0539a-a720-4652-9b4c-0dea01abc312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ba1928-3912-4ed1-ab1e-f1ca962543cd",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "941d194a-6a10-4fed-b9d4-fc5c7d17af0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "528bd7ff-df75-4fdf-afc4-8e754408cf06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e6be88-6ba7-430d-832f-4659b96cfa7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1319394b-1427-4880-a962-81075762fa67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c4edf1-e36f-4cdc-b078-0521f131494c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df7fe6fb-ae88-4881-878b-d50a6183d1ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a15864e-a73f-44ff-9715-068654d85d6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7945c654-feb1-48ee-ae69-47f344ad4aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545a7dc0-e9bd-439f-95f8-5f09a3e3ee4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a48f1c-426e-41b0-bd0a-4459a39cd944",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "090a6278-1741-4700-b274-f9a11d870035",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a19f3b8-bc7d-4505-9376-b5b8bff576c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78cf1483-f60b-4c23-a2e0-128e5db632d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f4e3c17-66fb-4f04-9297-58c32de7fdec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bccef916-fa32-463a-a49f-6ee99cc44e81",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e6183f-b43e-4832-a107-2166b79dd539",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ff05835-d488-4215-bef9-eedd47a38ac4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7d137e-0552-4e92-ae44-23debc7dd5ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7888cd05-229a-45d9-baa8-defc87c2c809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb341ca1-97aa-4a97-b62b-807198cbf426",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef24937-66c2-4139-8691-4c6aeb427861",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0377d762-c9c9-4a45-ae9f-e088f76939b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f1c37a-b72e-4be0-baec-00aef9743262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b40e7a36-4665-4b83-b16a-fdc8fc0a4d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa275df-90b7-4733-8d1e-28bb918ae777",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa30973-da26-40e3-81c7-c5fac6bed5f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bb9da3d-c21a-4300-9287-7543cb4bd86b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "749b1350-5e17-4f44-bd61-2376d0938a47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd873cdb-8a8c-4f9a-9897-68423f4badc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31be068c-e695-47da-ad91-1228db6290a4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5fcb2b-0f3c-45af-bd21-f20c86ce87e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c0c818f-0bf9-41a4-b905-70ea42f2020d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95118c7-900f-4e1c-9558-7cf180f378b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea0b4d98-5247-4c34-8039-015624ef2c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d97fe93-94e7-4a38-b922-789f207b3137",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd39cf5-a6b5-4c5f-957f-14f2b8ea6b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae174281-0402-4974-99a9-efb3a84aca24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "833e5b7a-e905-4ace-bbd3-55f25153f9d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e224f7b-791e-4e54-a112-baf1fcd5ae8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39bcd122-97a8-4a3e-98c5-d898ad6f927e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f4e396-5761-49af-8dc9-3dddb49390a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e22deda-6df7-45d8-8e19-384f8e9b5863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c98149-a9bd-4061-b504-3724339c217c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5a31ad1-6aef-4555-a6ce-a5bcb1b66a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52a0519-7d3d-4c2b-aad3-70e23987aee1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb159613-fc6e-44fc-8dac-cc3643bf8642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e82c2c27-24f1-4403-a762-04e70bddf207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c38c718-dc06-4fdf-92cd-b0a0432f4dee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e70030c-6ec0-4e38-aafd-1e9016eddb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2a21ce-1f7b-4908-a7a8-bf663a841e89",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00de64dd-308e-42ec-b618-0e6350727d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96ca684f-1b9a-4262-9031-e5fd077fabea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95db6303-1505-4401-9de2-c48dd99003a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e29e8c-4da4-405e-8dc7-de8db2c0915c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1800f28-75d2-4ede-bebd-ba9fcb12245a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bcb2f8b-a86a-48fc-9e47-0e39b4a7d268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb1aebed-c216-4c36-b0c6-8d08fb199400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da6feeb-86ee-4056-9b28-9fa5c89ea38a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab22c6e4-9d48-48d4-a4eb-809d7a389818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc14a529-c1ed-48f3-ad9d-432c5aa8f742",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d822cd-4852-4590-aac0-7bc960c266f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5b8472c-eb6e-4e89-906d-244af5c29371"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91be6b7-8ed8-43f6-b709-a09703eb77b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac9680ea-80b8-4167-ba46-2797134c2b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19bad694-3687-4fc3-a585-8c3bfd2406d1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad5ca793-8ffd-46b8-9799-6c72aac2e305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7767f6f2-e36f-4274-b630-03d515a86360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0a5f72-6b6f-436e-be9e-4788c55a191d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "974a0b1b-ce21-435f-ad80-05a253e0655f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e3a46f-5acc-4b14-a8ae-c032d880d80a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93383151-c35b-4ad4-8561-15e76f7c8b3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba9dd1a1-65d9-44d3-92f0-a400d436b734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc86610b-893e-4628-a88b-4e13b8f7298e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dcfe6ba-e674-4691-88d7-0fb2bb236ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d242399-d150-48ae-9ae0-508b140f3c04",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "add9741d-445d-4eb2-96f9-5f297530caca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de62056-4dd3-4711-83d7-f0c2aaddcfa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5a90c6-94ae-4c95-bf72-2c8f1953efb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bfa7f6d-8747-488e-8ea3-49cae4f081fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d60378-1fd2-4ee0-9979-9cb84e4f4187",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7152392c-b446-4bad-8219-762433ed9eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73324fed-87ef-48af-a3d6-4496c6bc8073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6c983e-8013-43c0-a80f-0b429197871f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8bff510-de63-4473-988d-687839bf90bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435420fb-e820-4b16-add9-77ab38a0c140",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cfe91be-7d0f-418d-9368-6adaa7874c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c044b828-6ca3-4007-9716-3b3a1f480241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d3ee1c-5bc5-4420-92f8-ffb74bb2f2d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b6fe8e-0a4a-4b68-a5b7-e1be882b4f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2fff32-5869-4e98-ba96-ac9a2e99a0ee",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77152b87-e8db-44c9-bf34-78c35dbbcb9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67c4e126-190e-4d30-8644-e31f29a8a436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "008d1577-9f23-4ef7-91cd-0a943d919141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c56316-f971-45bf-90ee-af7da545923c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9685e17f-6422-4ff4-8945-5b487d7a6469",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40472887-e8e2-4436-b733-e89a8d302003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72acaca8-ee1f-4cf8-ab93-8ae4df7661ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0b50eb-95fb-49f8-a5a9-b60b26cbb12d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06da7cf0-bbf1-46a5-839a-5318b9af5686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c666710-6009-46ee-9de1-8003aab8d80e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3a81ff-b0a0-465f-8093-66f94bad44af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f014b83-1a3d-4fbc-95da-a4e0ec41f86c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac63e879-193e-489a-8af7-dd6f91fe983d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f26a9be-3037-410a-8b69-451dab8d7f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b9cf5b0-c812-4463-a8ff-3d038e569186",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b821f51-eabb-4ae1-ae5a-48a5c9269c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b4b67e-6851-4927-88ec-ea83e8ea9a43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95f5cd9-8d87-4f68-948f-d79fe5515e50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a2fc194-7c91-4df1-a935-c824e2dc842b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4cc6d5-d5c4-417b-9e2e-ab6b4934fb4d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16661f34-d8d2-4643-8781-64bf96227b32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f380de-4c1f-49ae-81a6-08968bc27fb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9749e01-26be-42e0-bcea-9af543bb4016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f33970-d076-49af-b114-15212bfa60e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b40f25-ab20-460d-b1dd-d419db1cfc9b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45561ad-86e6-4d38-ab68-bba1387f1dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51f0bde0-0ef5-452e-a21b-71df28b60cd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc5facd-c662-4f8e-bb2e-b841587fadb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9795e3a-9124-4136-9cc5-8aadf5244452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f9f5c0-ec1b-4875-ab00-d5ad1fb749f9",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6bb9e13-54b7-47cf-a714-f8290a580641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a57943d-2174-48cd-948f-c85fe676f147"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "586b8e86-1e47-49cb-8990-465302256e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "947c57b8-b0db-4ac7-91db-6a910d593060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbc408b-3ef8-475b-8a25-46f508be3c74",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b9ea55-5a46-4cc4-bb1c-4f0ebcceecd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca7b55a4-9282-45f3-8313-bd4018715104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8967b0-0dda-4d43-b5f9-4aca82972c3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16f8a4a4-df47-4df0-a4c7-e4d7dd57fd3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191be767-7ac4-4795-ae1d-289af94adee1",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8cc4c05-0b81-49e0-acff-355ce2ce3f8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e069cce8-c2f5-4643-9956-f53b6c2f9ad5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "131fe6b2-310d-4c30-b82a-6ba57ad377cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35ed1126-258e-4183-80c1-d5ce6eec3da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd2b165-b47d-4f9b-a95a-dd09febf8f4e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ffe165f-2c76-4fbb-b8fd-735e35e4c729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c7d7f2-495a-430a-80a8-f45e41db27f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c8b4f9-f2ab-4dc7-8f92-dff63fde3dec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6b86763-d0b8-4e68-b1e9-5fee3b29c881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a283ba4-a75c-44be-b171-8c4dc84fe4fa",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ff53a9-c24f-4d97-94c9-f2b1d6f2b3a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c353701b-7ca9-43d5-8eb5-206b7c689c9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32faf34f-b322-4e6c-aa6d-a5115e50d407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d163d2b5-55bd-46b6-a1d1-289149bf5116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad0cb283-7a29-487c-bcf2-1566dc52998a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660166e6-0458-4252-a42a-0a25170319d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c2ac180-b80a-4923-8e9f-ded654f4f4af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "448496ae-03e8-4758-881f-057d494c3be4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b83f969-5bbb-4338-8ab3-de8ae374c939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81bf6ccc-a96f-421b-812b-2f1d6dadf078",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9aba0ab-ad44-482b-8da3-2ab97e711edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d214861-a923-4dca-8493-f66dff5f3a35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdc8089-b406-4688-a78e-94e3b65a5909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57e4fa87-8b94-4294-a2d8-a758587ccc5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc8f4d9d-f3ac-430d-9c5a-ea227ff89ac8",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620a30fd-eba2-4411-b425-6f91741f9ac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe921535-4f88-47ef-b484-b2ff3b1cd259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b1557f-e6c9-440b-acc6-337448202d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f90f9ae-beee-4254-a3ba-61e9c5bf8a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16df05a-e061-42eb-8f38-53ec7b3f2bdc",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abac765f-cd55-4495-9490-69fd13ef245d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0f33243-55ed-4012-b6d1-2eeeee454b94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0522e0bf-f06f-4fbf-a1c4-cdaeab6ea08d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e44596d0-5152-49f3-8273-a85f0ec01a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee1518b-c37e-4e93-a8ac-ce2619294026",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1b2ea1-7966-40db-85bd-8b64a1ea9b70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99553fba-822b-4cf1-ac52-f126d0ddd847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32086f65-2287-45d4-a97f-9d99734a8b8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc8a505e-158a-460c-a244-82c29e927c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51759e47-f827-4162-b4ec-255fda73ddcb",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297e19ac-43c3-4f7e-a4c9-6beb989a9630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4915052f-8d9b-4784-a53a-06eba327ec5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9290d98b-452f-4dda-8b2b-ffc465926f59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b9c5d44-68de-4489-a59c-47488e0d4bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9608a116-6cde-478a-ae4e-59700b4bf18c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d9f3d4-514d-4b3c-9cf3-376082b5ba02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e9329af-5001-4948-af6d-9586887acde5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e219996-6d8b-4654-b4a4-5a28698adb2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04773ce0-bb1c-42bc-9e51-b952135b618f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab83c114-b0e1-4be3-9f00-f68d81f1c209",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae72f09-bfaa-4019-a023-248832908705",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2d0ba64-be74-436d-8954-d3a64f0e1f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "695b814b-cfda-43ab-9388-e34ff9efb057",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "151a3322-7998-4b78-8ddc-a4fb4c0f03e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a745d5dc-68da-4112-8c26-e4ff212cd890",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5185204f-d142-4906-ad31-928a691c357f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f21f2624-84dc-4a5c-a304-1d48820aba5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a4abcc-d114-486d-993f-b40463820074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d6002e-5d56-42ca-a4cc-58e495367cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d35458f-4741-4a45-8ba0-3b42d0a10bdc",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d27512-c42d-4f19-8ab5-b04f99a2afd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0167c2bf-9783-422c-b794-2e571b1f782a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "219d9fde-26c9-41ac-8f16-3ccd4488f8d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0759fe1f-d5bc-4bfc-993d-b12595206b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e23c69f-8e19-4110-80c9-38a79fd074cb",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a45f2f-533a-4f94-9d2a-d3248454f9c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67af5a1e-ef30-42d9-a61b-8f084880d767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4eab633-e1d2-4467-91be-2e08b6cac833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edfb3d44-b9f0-411e-9262-504939b27870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40c85ed-fee5-49ce-9687-f9944f718ad8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9175305a-5c6d-4742-b4ab-5eef11f81526",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0b469df-22f6-44a9-acf5-837beca9a8bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe27af76-c9e6-4922-8e35-21b51f0b19ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2cee71c-d683-4d2a-b3eb-8bdbe653eaa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1ac64f-cc77-46c1-b357-042ec5a74142",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbaa534e-6f73-4079-a371-f18b7780723a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2605320-a613-44b3-8e43-7beeb9641ae2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4af6498-ee7f-40d1-97ed-63de5dedda57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b23a4adb-adb0-45f3-91eb-e003c85ec05e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5d3739-dc63-46e3-820e-404bd37227b1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f727f732-0481-433b-913c-ef9e29bf52b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5dcadc4-3411-475c-8da5-f7e84a22ad8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "529a4e0e-c908-4661-9d36-920acccc1822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b78b46e9-c348-46bd-b59a-6cc2d6a02eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da11d400-d52d-4700-b8ed-9ad3a227b5f1",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d46605-a7d6-4a7a-abff-4f24dbceabab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7269549f-53e8-4453-82fd-65c33791a84d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02b7ecb-5ab1-4c82-85f1-ecf250747768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3afd8305-e5d7-43b8-91ff-bda860f79fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee390b33-9281-48a7-b346-dabb13dcdac1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aeb0696-98cc-4887-bb4e-a0ee701c3300",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca81eb92-0edd-4f20-83e9-79202de0a368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14d659e-cbeb-4b51-a90c-c679c7844fdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a701751-a57d-41c7-958d-cba644f86a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51070cc6-6654-48c8-9d76-9c548caa3489",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5879632-59fe-4f5b-8ea1-51f88d1914af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbf3726d-9726-463c-a7fd-25a15d8ae744"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40ce5c1-88c7-4c73-9a62-56e455a831a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00d42446-16aa-4acc-a651-2562adb639a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b12c04a-5950-4625-b64d-9611eef68601",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "084a7eee-7e96-4e46-92ba-d4d39f87ebe5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06bd7789-b7b1-4eb6-bc43-5c7d3b71e78b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df156f7-51ad-4d78-9387-10545f7fdab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7821d407-6e0e-439d-be90-8080453384af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14202bdb-ac10-4e55-97e0-467125f6d28b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d91e39-fce4-4e9d-a7b1-85075da7af0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0c63d23-27ba-4918-a33e-4ff222fbdc2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7241afed-a8d6-4bee-9945-052bb5fc00ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2df63dc8-0961-4d4a-8572-2dba4a54c965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd9da1f-27eb-4055-8832-de1123146f5f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019452ce-0f6d-47a0-ba89-c07205d84e98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d04e793e-71fa-43af-9f20-206a9494072a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7efd629f-b379-4ba1-8e31-4d5ef7338af2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4bd1fb7-9725-4864-a2d9-63d9ea83b2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c555d31-d9dd-4a45-afda-f5cd530f1fbd",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4497a39c-aeb7-4f8f-aa1d-d61a665bdc2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a15d6db-8282-4e50-9355-9510cab35d18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15dae0ad-c5b2-4730-8572-06c300dfcdb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41dfa116-40a2-4118-8013-5de8c4e3229f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ccdbd2-213d-43cf-96ce-41d442067fc0",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dbed284-dc93-476e-b27d-f98ca340e26c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95f17a7c-b407-4598-9ee5-a4f8dcae08c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27fcd68-1aeb-4186-9b52-9eb365e108f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4954730c-ddd7-4de5-a5c3-5eeb8bed3756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36295da-7659-419b-95ef-57951797f16a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720703bf-f57e-4636-91c6-a621f848d039",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee1531e3-f435-4a07-b254-f6f882e019e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b203c487-4e09-48c9-8436-a7e65ddfa22f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46aea113-6eba-4fce-ab2c-2bc48b479cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84831f35-1cb6-41e8-9a67-9376c92e626c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2189a8e8-1159-4baa-99af-ccde4eacfd01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a360b7df-da47-469d-87ac-039e39016a46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "323e9d59-d88a-4e69-b2b1-bb781d215321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d767787f-7895-4ae6-b3ce-f4be2e1e180b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3034f4d-0d93-4f7d-bf51-49794478f23d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6fcec9-307a-4fff-b2c2-27b440ccc662",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cf5fa9f-b448-44ac-933d-82f2e1964120"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5597407-c92e-4efa-b357-8a42119bf252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160d4ff9-adcd-470d-9787-5099a7274c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c3bc6e-c843-47db-9ff2-234aa7b4e1a2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f38a47b6-e146-471c-aeca-fea19446145b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f43754f9-36e6-4ce1-93d2-668c275f36f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee15067-bd7b-4a2a-bbfd-761f462b9c96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1ee1a05-4870-45ba-bcfa-15a4cac17695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4963c2f3-4d36-43f9-b248-d64b3a7b1c3c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7731d427-4346-4a06-8c9e-e03cd57ffc71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e1223cd-af0e-4f04-a10a-db4152f3b06f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b4f0af-d828-41ca-92ab-d0436fb8742d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72875ac3-d4fe-43fa-b1b6-7c47335a1256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba2c1fcf-7b12-42ee-9cc8-ac8697a43167",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7686738-f2e0-4272-a8e1-13bd166251ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "484c2ac6-ef53-4433-a3b5-5fb4b72df602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0db85b-17db-45b1-8fe6-76341608c922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63bca54a-83a6-446c-aa5c-05ca9e704a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423b3f6d-b292-4d45-9efd-70dbd8c6ecf2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4e09ad-25f9-4537-a088-289cd9a0f9b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f1f16ae-ed6f-464c-b3d3-5cc11a8b5d4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b285ac6-50d6-4a07-abbb-479b89827fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e3028b-8ca1-4092-ac02-228fa5d8fc04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27beb39-6465-40d2-ba56-1a029773ac00",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1fbe88c-5e42-4454-9bb9-31f139edf174",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea520c2a-681e-4cfe-abb0-1bb77a62845d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "229c57ac-1a9d-4bb2-93bf-f09089a5b247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5a8c16e-8e27-4fa5-b1e2-e9c0ea221b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95c64a1-3ab9-4017-aab5-a80675a6492e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f59095d-6a0e-497d-a376-1d7436400225",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ac9fc58-dada-4fe4-9b3a-2cf7cf74fbc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "651da573-629c-4c40-a97d-602b9e4b87d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819bfe68-bb37-46a5-86ee-f46bca5f6cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8089af4-ba06-4596-82c8-d05eed06c600",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7181d7-4d82-4c04-a10d-dde8da8b1cfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d89b91ff-ca97-444a-8064-df955b3fe3b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b233be6-c258-4046-9d04-2457e9dd40a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ffd43a5-dea3-4ac3-af5e-07719dba198a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4238431-a392-4301-89b0-bfc0b8d10838",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b459b80-6e61-4b1f-8705-9ce9f82f91ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d950c7d-b694-496d-975f-e2777a63ec6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f713333-8e6c-4cc5-944e-3638dfc8aa16",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "070344db-58f2-417d-b00a-295017488d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e34316a-2bc6-46b7-aab6-460847e84d97",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2ff8d8-3665-41eb-a2af-9d82737a8d83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfb96cef-8db1-4ed5-b554-cd6f59e016fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64edbd2c-809a-41bd-8ba4-ffb99eaefa7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da46401-17ab-4b8d-88f8-d0908b86e2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d52e37-0443-4a52-9347-a0ad00bb2937",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f97bd2c-c105-470b-87b3-dfa13dabdba5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eec31b4c-9c1b-4d28-8edf-cb4774605386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4780fd28-987d-495a-a788-d0315a1612b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c47b27-2e8b-4250-8dcf-489c55d735e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05da4ef-6eb8-4e69-9938-e83b395e8c62",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d9d356-9574-45d5-9237-51411e852575",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f34a9975-6e2a-42c3-8c69-3f116591cd7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5ca64c-477b-425f-a5c9-50380b435f20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985cdb58-1833-4f8a-b273-237b38cfd6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a47067-2655-4285-b1e2-2fcee19270cf",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbadeed8-b976-4c09-934a-c957ddc0b040",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "995ce33d-542a-46e4-a7d7-ab847bc483f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99c396d-1ffd-498c-81cb-0c4bdb36fb52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff33a586-595a-4f0a-ad63-1f16c4a4d634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c12eff-e139-4b30-9b3d-f79da7961e1e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa19418e-7d8f-4c82-a023-c7254c57d09e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07c3cae8-6ed4-48b5-80f0-9ce8f0b14399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f40f842-9229-4eb4-b9ee-e946085323e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f3724d-ea2a-45d5-b7bd-f71b0e1312a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c4f57fa-01b3-4e1b-863b-57fcaa50dd41",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64865749-6cbb-496d-9998-78c241dd4575",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f31dae08-7a08-45d2-887b-3227757e3b17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69b1016-dd50-422b-aa09-760d7ffd2f6b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54efd808-1ab0-43db-8aad-670a5e808892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d39f8f-3fff-4284-83e6-298fcd9f7f36",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a70eef-5849-49df-bae2-9c2fbb838f03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "748badac-58ba-47b7-9b56-16a9dea3df2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fcae95-1c55-479d-a938-3a38d466c697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7857f0e4-bf74-4189-b4d4-4784d48a0b02"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6dc5f159-ace7-499f-91b7-49e147bb8678",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80ad07b5-dc9b-4c46-94d0-09900e20f535"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5ac3c61-c23b-4676-8434-89ec13327bf5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ece64faa-41b3-4f77-b581-847385d1ad75"
                    }
                  }
                ]
              },
              {
                "id": "f377bdb6-b346-4da1-83a1-ce48318fb0d5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "121ced09-4854-4893-ba4e-4f5b1a21fba0",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bebc2bfc-182e-4062-97e7-c9b90c63ab1a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7fecf88f-8cf1-4931-9886-eaaae8ca6ee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4da012-3f22-46c0-8bae-706e0d413bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e5419a4-f90b-4f65-ab2e-dac17871554f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea76b07d-2e45-4197-a811-1e67d1095a23",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a651d07e-eb4e-468a-ab2b-161aa931575a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "68b81bed-3ebf-485e-a05c-c148b4959a7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a934168-55c8-42eb-b455-0abec0874533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "901fa1fc-ba65-4ebd-9704-b0c6cc27d23e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e22b1e85-27eb-4abe-8586-13f06ae31818",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e4b7bde-47df-418e-82ff-1e1908948380"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f3e43f4-1752-4f87-a75f-33b0b93368ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07149247-c35e-43df-a2c5-7960e2607026"
                    }
                  }
                ]
              },
              {
                "id": "a13cac81-4be4-4767-bac6-ba55c116a554",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "da2a030d-52e9-44b4-97cb-91e635af2345",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d4c964-8900-429a-96f5-99b5602af5e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d249b878-5f8d-4adc-9fdf-6a9fd37fe7b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e010a3-aa6e-45b2-9ce8-2216b1ef4841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7a98a22-a0ec-4243-ba41-d84c466a1f11"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3ff9ffe2-dfec-493f-91e2-f09b40380903",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5e2bde71-e940-4194-9cd1-5dc383cf678b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc1b08fe-7cb1-475b-8f8c-28a2bf971275",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4d5828e0-1009-43bd-aaf4-bafc8d05ce60"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d942d3e3-3645-44c0-aa80-edcb0cbc88b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01a703bb-3608-4bcc-af23-cd694b73cb1d"
                    }
                  }
                ]
              },
              {
                "id": "5fb1cf67-3d9e-4a07-9572-25fb9dce3eb6",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "35248825-5903-4875-9245-e675aab0d5b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "30c2eb9b-54a9-491d-8c46-ba19773200ba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8c694fa-a54a-418a-b366-4ec6adbbc587",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e42dd49-eefd-49f2-9e0d-b9fc9ff55dde"
                    }
                  }
                ]
              },
              {
                "id": "2a9c23d5-3e25-4c4d-8abd-9ae960ba60e6",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e94477d-77df-4ceb-9ccf-1a8cbe31191e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b4e959f3-cdd1-48e7-97b3-7dea55f614bf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aeff0c87-096b-4691-bf8b-3a22029ad420",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6bc1c0e4-9811-459a-813f-4f71aa02e6b8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a25b1cc-abeb-4c0e-874e-2c8c634162ac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "41bc9fe5-8eaf-4b60-b905-401abbb84325"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f56a7068-de43-4a72-82a0-bc2e1336c793",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ab507a8-0919-4dcf-a8c8-a8a3d1daf835"
            }
          }
        ]
      },
      {
        "id": "b3457d94-a860-4192-8629-8900a67e9db1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "21a5203d-2a43-4900-a2b0-081e919f159a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "79f36d48-071c-4a71-a458-09463b9c6e6e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9c4749e7-acd4-480e-9e6c-ea184ed5948e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5245801-1788-4eec-a407-e4e25f5b4560",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b73b7f0d-07fd-4e77-8c42-a12e4c2cb201"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c30308-111f-4032-8ce5-39ec151542da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43838921-a69d-4b81-a839-589f70a4c852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376ddd2e-9458-4000-9a98-dd3f32763261",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053e7f94-9956-43a3-93cf-66bb7972a2b8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7cb741ab-27f0-4455-bffd-8352ce50e469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f5cfe7-91ba-46d5-9b6f-a171e680b1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b4f3069-11bc-4c8d-9a32-d93554f59bc4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6eb84b32-67fb-4d35-8e63-b5aac56caad1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e353dc1d-6ad5-46f6-9229-cdf8518c9316"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "323df283-e5b9-45ed-a946-94479617677a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4898a8f3-87de-4400-a689-cbbb2e9501c3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc65fb07-7f2a-441c-ae88-2fa8ba71cd92",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "accbc25a-fa23-49aa-ac4c-093679f65c1a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b905f52-b5df-43d7-afa9-47bbe5262793",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "203e449d-c83f-4bdb-8b0e-9d13121f1f38"
            }
          }
        ]
      },
      {
        "id": "cb32e38c-15a4-495b-8061-c1e4312a514a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f8c0a394-9ced-43bc-bab0-d6afa6ae356d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e739a54-ad32-4b06-b85e-a4886d4bceb5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1b938b3d-7401-4e70-9ebe-dfd9ea9c5ed8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d590f314-747e-4ee0-b9ea-891004c1367c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "98da51f0-870c-4e8b-b922-6b000a49ab46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca23731e-ef4e-4849-b589-309275fc786d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bf10c5a9-9a71-47f5-9b79-48a1454f08f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d02357-8e06-4336-a2d0-7ac690735c75",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0aa642-da61-4b76-b8e6-1056ff2f5291",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e40e8622-e706-4298-9c22-afcfcd06e0eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "930e1ef2-32ab-4363-a5db-958808676c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "80055455-9bc7-478d-aad9-feff7a3609b6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51cf4a28-19eb-4faf-a45b-ea36a094df48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "175a1217-0518-4674-be0c-3bbb5debddf2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fe035ba-8e8e-4d3e-859c-e3b1010203d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d324858c-233b-4d83-a916-d52b814dc34c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48b8b03d-6f12-4a4c-b217-c1ea4ddcd920",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "99c7ccfb-c1b2-41fa-8f9a-324efc4f28e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "29444738-8a25-423c-bdab-9a1147cbac84",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6f1735cb-fde5-444c-928c-014043abecbd"
            }
          }
        ]
      },
      {
        "id": "3429bf31-406e-417d-ba5a-0caecb1ec180",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "983f20e1-5723-4a35-8215-1a28d1ae7316",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8d0439c1-618c-473f-9dfe-b81df57de9c2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2f62c475-59b2-4d3b-8e6d-cc4349dbcd45",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdf000e-df21-479d-ad8f-0f9bbd4954c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "05878b08-1327-4bf5-b69a-6a27c61dd8f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36502b0c-f423-4708-8bd2-6ec0f7edcd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "045381d1-f912-4ed8-ae3d-2a44535635a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78ea778-e69d-402f-bcdb-8ca60c02709a",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be33adca-bbb3-43b1-b898-6c7615b318b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e60aeb67-7fb1-43ad-9bc5-0afcda3ea959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ccef32-17e3-472d-a196-d6d043f18a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be87e4fe-ebcb-420e-838f-577e9d6f7df1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1bebaa62-30b1-4d60-b8ca-81d418fc5e04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "32c74b0b-09d9-486d-92d2-6a70ed7bddf4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b051bf5-2321-4967-93b6-31308240681e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16998ee4-62fc-4bdf-b9c5-093a4caaec25"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f27257c2-0a69-4890-bd01-3e8afcacf2b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "847953e9-fb98-4038-8296-4a9efc9e100a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4df10d4c-1d75-4bec-b9d9-a8d7f90a27ad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "218626e3-a107-400c-8a16-bdfdf9155a6a"
            }
          }
        ]
      },
      {
        "id": "6ee8f6d9-f207-409d-bc88-ad0761cc5337",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ceaffcc8-085b-4346-9320-ee58839e94f0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84837e32-72d2-41a7-8ef9-35da57986595",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "51c1bcd0-9162-49ab-9288-ae7e3e8aed47",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0543aff-1d90-4988-8cd6-a7043fb38e85",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "875b570b-a0a7-4de6-a276-d2ede124b741",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1915,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 261,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 92
      },
      "testScripts": {
        "total": 962,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 953,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 101.32567049808428,
      "responseMin": 19,
      "responseMax": 823,
      "responseSd": 128.48586722537897,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1670459848793,
      "completed": 1670459886463
    },
    "executions": [
      {
        "id": "40e4b3e9-4f64-46f7-804c-fae9e6d0f079",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 252,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "51e823e5-7e73-4268-962b-4a25cadf6a3f",
          "httpRequestId": "c5a57ab4-29da-4bb4-ba56-5ed47d0df256"
        },
        "item": {
          "id": "40e4b3e9-4f64-46f7-804c-fae9e6d0f079",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "18ac3923-ebf4-4a6c-9410-25be56104dc2",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 0
        }
      },
      {
        "id": "8eb85356-ee2d-4535-ad9b-c428b01c70e2",
        "cursor": {
          "ref": "c7129c41-9c37-4f7f-80b8-d0372172686a",
          "length": 252,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "50a8075a-d625-4dbe-b7cf-e024089f35aa"
        },
        "item": {
          "id": "8eb85356-ee2d-4535-ad9b-c428b01c70e2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ad79f5ef-fe93-491c-a611-10351fd76f48",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "1cae56c0-4d0d-4ad4-8131-320ef5e3cd2b",
        "cursor": {
          "ref": "e3348fb1-1711-4a00-b4ee-5e2dee01ef97",
          "length": 252,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6f6e59fb-6cae-4cb1-b68a-b0ced8c08db5"
        },
        "item": {
          "id": "1cae56c0-4d0d-4ad4-8131-320ef5e3cd2b",
          "name": "did_json"
        },
        "response": {
          "id": "249d4599-a255-44af-b153-e9ec423c7c5f",
          "status": "OK",
          "code": 200,
          "responseTime": 203,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4873255f-99b9-4ef3-b22e-1189a29f7063",
        "cursor": {
          "ref": "91d3bb90-5639-4b70-8103-6bf3e916cb7b",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "eaca2dda-c307-4ff6-b7dc-50eb1f4a9d1d"
        },
        "item": {
          "id": "4873255f-99b9-4ef3-b22e-1189a29f7063",
          "name": "did:invalid"
        },
        "response": {
          "id": "69fc6bf0-a6ef-4e73-ae2d-d7a0ee06be5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4873255f-99b9-4ef3-b22e-1189a29f7063",
        "cursor": {
          "ref": "91d3bb90-5639-4b70-8103-6bf3e916cb7b",
          "length": 252,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "eaca2dda-c307-4ff6-b7dc-50eb1f4a9d1d"
        },
        "item": {
          "id": "4873255f-99b9-4ef3-b22e-1189a29f7063",
          "name": "did:invalid"
        },
        "response": {
          "id": "69fc6bf0-a6ef-4e73-ae2d-d7a0ee06be5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7ceca0-8d5a-47f0-8115-a956cadb703b",
        "cursor": {
          "ref": "b5f7db7b-7bbd-4347-bdda-40f6046405ea",
          "length": 252,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4e25ee3e-7916-43b8-aea6-bf9e84277e18"
        },
        "item": {
          "id": "be7ceca0-8d5a-47f0-8115-a956cadb703b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b8c75ad6-3121-4bf0-8f8c-7d40d3a04dad",
          "status": "Not Found",
          "code": 404,
          "responseTime": 279,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0efea78d-1475-4e90-aff4-743040f938c5",
        "cursor": {
          "ref": "1645ab7e-af44-49e2-b9fd-8d8a6b52e55c",
          "length": 252,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "bf46b946-0c4d-4178-854d-bac8facf3a4b"
        },
        "item": {
          "id": "0efea78d-1475-4e90-aff4-743040f938c5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "31574214-fb8f-40ef-8c5c-001f7a5bb29e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8a2022-7ab8-4339-8685-ab03209b11e4",
        "cursor": {
          "ref": "a90c4c97-833d-4fcf-af44-9036fafa9244",
          "length": 252,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9ddaf25a-b862-40a3-9d85-0c4678f06015"
        },
        "item": {
          "id": "eb8a2022-7ab8-4339-8685-ab03209b11e4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e58ec01a-76dd-4588-8ca7-2968e0f03825",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2237f1e-6f90-4361-a958-cdd905f380e9",
        "cursor": {
          "ref": "a7c23c64-0077-4d57-a517-91e981cb82e7",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44ed842c-1a94-48d4-87d0-95059af4f289"
        },
        "item": {
          "id": "d2237f1e-6f90-4361-a958-cdd905f380e9",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "32c80ea4-7de4-4953-9bb4-30013d49aa74",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2237f1e-6f90-4361-a958-cdd905f380e9",
        "cursor": {
          "ref": "a7c23c64-0077-4d57-a517-91e981cb82e7",
          "length": 252,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44ed842c-1a94-48d4-87d0-95059af4f289"
        },
        "item": {
          "id": "d2237f1e-6f90-4361-a958-cdd905f380e9",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "32c80ea4-7de4-4953-9bb4-30013d49aa74",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59c241a-c19f-407d-bfcc-437e63b10cb6",
        "cursor": {
          "ref": "64ba36cb-2ec1-4e0d-b882-e80910c3d8f2",
          "length": 252,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "dfe597ca-4a9c-4883-9bd1-74fc8709a5d2"
        },
        "item": {
          "id": "e59c241a-c19f-407d-bfcc-437e63b10cb6",
          "name": "identifiers"
        },
        "response": {
          "id": "4f7eba7c-eef8-4613-b088-2e0d05550cc1",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99efc964-2787-40a6-9622-9791e7a36f68",
        "cursor": {
          "ref": "2392f25d-7f56-4b1a-be28-7d191a51a4e1",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8024dec8-acbb-476f-a1b0-d5bb05925198"
        },
        "item": {
          "id": "99efc964-2787-40a6-9622-9791e7a36f68",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e7ea3fc6-b1ff-4e79-ab46-29017c71f76f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99efc964-2787-40a6-9622-9791e7a36f68",
        "cursor": {
          "ref": "2392f25d-7f56-4b1a-be28-7d191a51a4e1",
          "length": 252,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8024dec8-acbb-476f-a1b0-d5bb05925198"
        },
        "item": {
          "id": "99efc964-2787-40a6-9622-9791e7a36f68",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e7ea3fc6-b1ff-4e79-ab46-29017c71f76f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88beecc0-27c7-436f-9033-0893b0a197e2",
        "cursor": {
          "ref": "81e29d94-10c3-4de6-b8df-d466307c06ad",
          "length": 252,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "bae46248-c8a4-4e7d-b7ea-9a3bc6383c0a"
        },
        "item": {
          "id": "88beecc0-27c7-436f-9033-0893b0a197e2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7a460dee-e24d-4381-8797-5e242fba9e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872203ba-1f25-4620-b9f0-4a8c0244b523",
        "cursor": {
          "ref": "29e138a0-b520-4896-8a0c-87b913d6c138",
          "length": 252,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2db1d579-2032-448f-9b9d-bef9b5515729"
        },
        "item": {
          "id": "872203ba-1f25-4620-b9f0-4a8c0244b523",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "745bf909-fc96-4951-b2d0-548a778f315d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a958545-6a91-4b7f-bdec-331bfe9f9706",
        "cursor": {
          "ref": "9d1796a1-974a-4c79-8d72-040b2fbefda3",
          "length": 252,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "eeb6ff93-e705-405e-aef4-66705b42871c"
        },
        "item": {
          "id": "1a958545-6a91-4b7f-bdec-331bfe9f9706",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e7db901d-5a93-4eb8-afcc-f3b08e3ba808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fab48b8-8527-40e6-95ce-fe8105b2e332",
        "cursor": {
          "ref": "1a5f8fac-9780-4c3a-9f82-9aa47b3be069",
          "length": 252,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "830f5505-264b-4691-9c7d-372c21691b9b"
        },
        "item": {
          "id": "6fab48b8-8527-40e6-95ce-fe8105b2e332",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "50328ff4-60a8-4864-8a31-8350a67110d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec88cc5b-3147-4cab-ae3d-3715404b4b1d",
        "cursor": {
          "ref": "8f0ba811-ee85-452f-b200-29d4f0c8dfe4",
          "length": 252,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8d7c23cb-dc45-4988-9bff-39477df422f1"
        },
        "item": {
          "id": "ec88cc5b-3147-4cab-ae3d-3715404b4b1d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1a27d8b9-b1d4-4b54-a357-c7b55738b9a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ee1191-2a33-4eb2-817c-8868cec06bb3",
        "cursor": {
          "ref": "c2cb9c3c-3311-4209-9f68-670e743205ff",
          "length": 252,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "bb8a3e36-6cf0-4472-959d-dfea034537e5"
        },
        "item": {
          "id": "01ee1191-2a33-4eb2-817c-8868cec06bb3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9ca80602-a12f-4626-89a2-8d4603564ccf",
          "status": "Created",
          "code": 201,
          "responseTime": 823,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "abccb395-5a80-4834-bd90-d2d0cb3b6fca",
        "cursor": {
          "ref": "de77dff9-c477-4969-961c-b451fc9c3bc8",
          "length": 252,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "62c128ee-01d6-43e3-8ce0-6984dbe2665a"
        },
        "item": {
          "id": "abccb395-5a80-4834-bd90-d2d0cb3b6fca",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "602d2de3-1868-4e8a-96c0-2f652d9f5ee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b971702c-a4e2-4ab3-be9d-dc0450d0a848",
        "cursor": {
          "ref": "d53b5c2d-ea35-4be4-b881-8e3998042f0c",
          "length": 252,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f68ef256-1969-4129-b3c2-3c2bbd2b73c4"
        },
        "item": {
          "id": "b971702c-a4e2-4ab3-be9d-dc0450d0a848",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5e4df70b-f778-4b5f-80bf-e8cc69460030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3ed7e0-52a9-40f0-bd4e-3433fa11dc7f",
        "cursor": {
          "ref": "f20c6d53-568e-41e8-bfbd-480893e0b92d",
          "length": 252,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "72cec4d4-1b7b-4abd-913a-76d70339e23a"
        },
        "item": {
          "id": "5d3ed7e0-52a9-40f0-bd4e-3433fa11dc7f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "90b0ee61-03ea-4d99-9a7b-3f7ef2d79d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59acd096-5993-4f90-a61c-69ac1267569e",
        "cursor": {
          "ref": "b2473d55-0280-41dd-b421-5309247d0b03",
          "length": 252,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "febf5172-0375-4d28-ac0f-3aa4ce7a72e6"
        },
        "item": {
          "id": "59acd096-5993-4f90-a61c-69ac1267569e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8f978563-13d0-4a49-9738-e50ea2f8be56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de39eb0-99af-4461-bffd-8bdf1ec6afeb",
        "cursor": {
          "ref": "a411a6c6-4d3f-473c-9aa4-a77a85601317",
          "length": 252,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "169c6fd7-dbe1-4aab-85f9-3ae48527d8d7"
        },
        "item": {
          "id": "0de39eb0-99af-4461-bffd-8bdf1ec6afeb",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5182f27e-9089-4d9d-9a86-d53cd5092967",
          "status": "Created",
          "code": 201,
          "responseTime": 408,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "7d11ae6e-343a-416d-a9d4-7ca556151112",
        "cursor": {
          "ref": "544566d8-84a5-4827-8390-6546d184f3b9",
          "length": 252,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "dbc4cd62-4981-47e1-9074-cbbde89f609c"
        },
        "item": {
          "id": "7d11ae6e-343a-416d-a9d4-7ca556151112",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d8a78afe-02c9-48fc-b164-61b2259a193e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08939c69-b0d9-4eff-af39-d69f6fdbd72d",
        "cursor": {
          "ref": "7c8863c7-c28b-43bf-89ab-5eb1324235e8",
          "length": 252,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "21238d32-6e07-4e62-b66d-899cd39b632e"
        },
        "item": {
          "id": "08939c69-b0d9-4eff-af39-d69f6fdbd72d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "7347a6d0-5f4f-43c2-9547-156b68412398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "276fc014-b7a0-4965-a310-2bd2b873446f",
        "cursor": {
          "ref": "56a74357-6314-4353-b523-d14980e07cf6",
          "length": 252,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "dc1eb41d-4f42-48f2-a79c-69a245fae970"
        },
        "item": {
          "id": "276fc014-b7a0-4965-a310-2bd2b873446f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "761692bf-cacf-4269-855b-54cf1f63501e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23d3764-4dee-4821-a605-e15953c83027",
        "cursor": {
          "ref": "a12aaf7a-88b9-4ca7-8ee2-24a1ad44b135",
          "length": 252,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0f854f9f-b69c-4e1b-aaba-fee686b9f248"
        },
        "item": {
          "id": "d23d3764-4dee-4821-a605-e15953c83027",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "297a3f34-9b4b-4eda-aff9-fdd8031164fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8fd9428-f485-4a42-a310-065e66273c29",
        "cursor": {
          "ref": "93511037-f20a-4714-bce9-f73534ada538",
          "length": 252,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a6f9f99e-c45a-41d7-815f-29e1d481f1b1"
        },
        "item": {
          "id": "a8fd9428-f485-4a42-a310-065e66273c29",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "62ba6d80-a9ed-4d5c-b4c6-e483dfd54baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f40aeac7-0bd5-438c-a153-855df913e7b6",
        "cursor": {
          "ref": "b2802ab3-a125-466e-8293-899b76f61563",
          "length": 252,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "89fa26eb-1057-4b60-b89d-06f8f2f488a0"
        },
        "item": {
          "id": "f40aeac7-0bd5-438c-a153-855df913e7b6",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0e776796-1592-418f-9d4e-3e1af994134c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5d3f34-b5e9-4758-8d19-1514ab10ef56",
        "cursor": {
          "ref": "cafc1d5e-574e-46f0-84f0-1849578b2196",
          "length": 252,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d0f54ab9-4c2b-4c3b-9261-ebcaacbc161a"
        },
        "item": {
          "id": "9b5d3f34-b5e9-4758-8d19-1514ab10ef56",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3d92b8ce-3276-42c2-99ab-e94328b0d570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8f404f-2779-4742-9014-1f3306bf8de8",
        "cursor": {
          "ref": "70d8f7ca-5748-47cd-aa22-683a560bf9d6",
          "length": 252,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3bd78c9d-51f8-46f8-bc65-2d33976496f1"
        },
        "item": {
          "id": "ba8f404f-2779-4742-9014-1f3306bf8de8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "df9c2ef9-ceb5-4e3c-85d9-df5dba0d5295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665158f4-c0f1-4b8c-9865-955d39b68699",
        "cursor": {
          "ref": "0e5e3a62-7e12-41ed-8047-9d10d5550691",
          "length": 252,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9227fd0c-2ca1-4599-9afe-ffa65723c0ff"
        },
        "item": {
          "id": "665158f4-c0f1-4b8c-9865-955d39b68699",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "462ea16b-e0b5-4887-8002-b9cb831cd355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049c5331-1715-4778-9453-3cbc0ca61a7e",
        "cursor": {
          "ref": "508fa4c1-ce90-4ca9-9ce9-017a3637a850",
          "length": 252,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "27e00c97-6359-4761-8bd0-95715a8c4f50"
        },
        "item": {
          "id": "049c5331-1715-4778-9453-3cbc0ca61a7e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "73081872-c59a-4740-a1d5-30cff9153dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f5bb0a-d054-482d-9f4a-d084525c7b1e",
        "cursor": {
          "ref": "0bf53e31-ce33-4c43-9d53-83120d543852",
          "length": 252,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "43f26948-c774-4d8d-b8f3-6de0699d19b9"
        },
        "item": {
          "id": "58f5bb0a-d054-482d-9f4a-d084525c7b1e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b252c2f6-8cb6-4915-9796-d03ea3db0eba",
          "status": "Created",
          "code": 201,
          "responseTime": 498,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "e32e48de-c654-401e-99cc-d89e9eb081fd",
        "cursor": {
          "ref": "32a829c3-3d4c-4ab3-bbaf-c269b700a7e1",
          "length": 252,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "19239bd4-3892-4e81-8301-14ea0f6f57bc"
        },
        "item": {
          "id": "e32e48de-c654-401e-99cc-d89e9eb081fd",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2502289b-b6c8-4f4a-9a25-505e16645baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e23d2d5-9982-4b4f-852f-0d5231c91b5a",
        "cursor": {
          "ref": "08463858-5651-4e76-84db-52d0ff320396",
          "length": 252,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "15faec03-b5f2-4719-97e7-e0dd3e9efbe5"
        },
        "item": {
          "id": "9e23d2d5-9982-4b4f-852f-0d5231c91b5a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "023b7684-6edf-46be-8e52-cf8f018c5b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289aa52d-b5b8-4946-a8dd-20b3a0884f44",
        "cursor": {
          "ref": "9d754819-191e-4faa-b6f3-ef93a074a274",
          "length": 252,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "aa52af87-15d0-409f-8492-5dbb97c74102"
        },
        "item": {
          "id": "289aa52d-b5b8-4946-a8dd-20b3a0884f44",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d43bc1af-ebbd-4cbd-8ce1-2c66e5db6c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ec8e93-30da-4e77-923b-4c647e9658ad",
        "cursor": {
          "ref": "8726eb5c-54a3-4edf-b710-5ad85fa2c734",
          "length": 252,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a1569f83-dc30-4556-b6ca-66b7c3805c83"
        },
        "item": {
          "id": "57ec8e93-30da-4e77-923b-4c647e9658ad",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f4631f6c-32ae-4890-bf33-cd75a9d3aa1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd367de1-a2cc-4d62-9d43-fa4898ebaaeb",
        "cursor": {
          "ref": "17bfb92d-2052-4bcf-9495-0ba9d8a1d262",
          "length": 252,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "137feba0-829f-4f59-901a-3f1dfd0815f2"
        },
        "item": {
          "id": "cd367de1-a2cc-4d62-9d43-fa4898ebaaeb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "65cfdf09-c1dc-42ff-b15f-264e89ce0ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f6362b-bde1-466c-a12b-70bc54252d51",
        "cursor": {
          "ref": "39cafc46-a039-41ae-aed1-e0d97b52a25a",
          "length": 252,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8bd9c4a7-ffa8-45d3-8dd4-c739c134e9c5"
        },
        "item": {
          "id": "a3f6362b-bde1-466c-a12b-70bc54252d51",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a0d12127-c8f3-4d71-bd41-f627b0a2ee77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ef0cd1-2772-4086-a5ed-bfc2db9b1568",
        "cursor": {
          "ref": "3ebcf100-26fd-427e-9181-33a88926ad1a",
          "length": 252,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "93fd9a6c-9125-40f3-856b-701ca1bd1b99"
        },
        "item": {
          "id": "43ef0cd1-2772-4086-a5ed-bfc2db9b1568",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4bc6d162-d5cb-418a-8632-2f28e0a6fb41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b129531-81c2-4fcd-889f-7bfbfdd7605b",
        "cursor": {
          "ref": "2545eac7-50b9-4a1e-ba67-7173126bdd02",
          "length": 252,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e9e658bd-f227-4576-a660-f1c46e05a085"
        },
        "item": {
          "id": "4b129531-81c2-4fcd-889f-7bfbfdd7605b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c1b62324-90b5-467b-bbe2-94f1e4249f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc599c7-5506-4362-ad06-b479254f9cad",
        "cursor": {
          "ref": "97c3e6db-eb5f-497e-a261-f8702b62085f",
          "length": 252,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e9545f45-76f6-4f8e-8e24-cdbe75b800b5"
        },
        "item": {
          "id": "2dc599c7-5506-4362-ad06-b479254f9cad",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5d8c6ffc-02c8-4fb8-a0d5-5cf4cb1939a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72582ec7-5dbb-4cce-8666-0fcea1a5bb21",
        "cursor": {
          "ref": "8d516c5d-69a2-4c2d-aacd-f4c8623963e0",
          "length": 252,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "fb1c4951-e0a0-4b45-aa56-39c1255d3cd5"
        },
        "item": {
          "id": "72582ec7-5dbb-4cce-8666-0fcea1a5bb21",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b5b9647d-9c6e-4e02-9897-cd769b65c8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b07a14d-6daf-4904-a92a-7274a94ca2d6",
        "cursor": {
          "ref": "a64c597e-3f12-4f73-a9dd-3bdd666497ae",
          "length": 252,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e7af7f67-9731-491e-aab6-2d59d07ec3a6"
        },
        "item": {
          "id": "0b07a14d-6daf-4904-a92a-7274a94ca2d6",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9a8c6a90-c651-4767-83bb-f1e86c665bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e336bf-ba63-4487-88a0-b3a4cfce1b05",
        "cursor": {
          "ref": "a624fdc3-9913-49b9-b557-2aaa858a07a4",
          "length": 252,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0cb7a8a1-03c2-498e-a315-bc2c6ef37b74"
        },
        "item": {
          "id": "86e336bf-ba63-4487-88a0-b3a4cfce1b05",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c2f40021-7c54-4257-8b1e-2a51864a587b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f7ae75-d8be-4de8-b8b1-9899c2eadf57",
        "cursor": {
          "ref": "70e2e549-f117-4e37-8cfc-d2432239ed44",
          "length": 252,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "77397890-6134-4fda-ba19-53e3fcc1387a"
        },
        "item": {
          "id": "c6f7ae75-d8be-4de8-b8b1-9899c2eadf57",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a3b411ee-3666-4297-bd67-95f78d8695e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 260,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c87b9803-3047-4915-b9f7-eef33128d37c",
        "cursor": {
          "ref": "84dbc651-024a-459a-9629-2180d801aae2",
          "length": 252,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1cafe9a8-89d7-48a2-ac43-d0cb9456a4bc"
        },
        "item": {
          "id": "c87b9803-3047-4915-b9f7-eef33128d37c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "96d4693f-6560-437c-a6e6-df0cb2e7e9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda94385-afe0-4606-859e-e0f8104da8f9",
        "cursor": {
          "ref": "60b424f1-2ac2-4ebe-bf1a-68ad32d3fbd5",
          "length": 252,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "82120182-4daa-45b0-ae26-c50c84fe0cb6"
        },
        "item": {
          "id": "eda94385-afe0-4606-859e-e0f8104da8f9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "86dd0133-ab17-4de5-b315-628190d8ed7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82fa5c01-0a77-4212-a14b-9b132f455353",
        "cursor": {
          "ref": "30a6c186-54e6-4d1c-af3f-b11f3d918cca",
          "length": 252,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "874edbb0-b876-4c9c-b475-28e5fdae92f3"
        },
        "item": {
          "id": "82fa5c01-0a77-4212-a14b-9b132f455353",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5ca47607-b436-40ab-8e6e-c955b088ea52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e09e98d-853d-410b-b73b-a1d227b7428a",
        "cursor": {
          "ref": "49bf1a0e-14a8-4ce5-9522-90b18db9ac87",
          "length": 252,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8a4b13a0-9c6b-4291-a8e9-ca9c6d50a15e"
        },
        "item": {
          "id": "8e09e98d-853d-410b-b73b-a1d227b7428a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "eb7b9bb2-a5fc-4dd4-bb0b-00ffaef5a279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db51e946-d5cd-4e7e-a4cc-42570f419628",
        "cursor": {
          "ref": "1a6cd782-c311-4822-a5fe-2c40b56b1e31",
          "length": 252,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d056e1c9-8231-4cd3-929e-32afd0ab9c94"
        },
        "item": {
          "id": "db51e946-d5cd-4e7e-a4cc-42570f419628",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7a74fe58-e92f-49ed-bd01-3f63a36cfeda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2733bfaa-86ef-417e-94cd-6980b529ecee",
        "cursor": {
          "ref": "41b637c6-bcf9-464c-926c-bb9bd1bc7ff1",
          "length": 252,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ea91658b-d49d-439c-a2a6-2a6fb460a1bc"
        },
        "item": {
          "id": "2733bfaa-86ef-417e-94cd-6980b529ecee",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8bafdc45-4e61-470e-868f-6fefa0111306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0069c06a-9d9c-4cc4-bc80-3b9e88bed261",
        "cursor": {
          "ref": "3bd33812-8ad6-4ba4-b33a-3e0dedf8315d",
          "length": 252,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6281eeab-0c7d-4bd4-a7d6-23da7933d7db"
        },
        "item": {
          "id": "0069c06a-9d9c-4cc4-bc80-3b9e88bed261",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "29302e18-ab59-4d7f-9684-edb16662daa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "323ad88a-3033-444f-8a3f-12018ef6faf0",
        "cursor": {
          "ref": "dd84d1e7-1baf-4a2c-98cb-bae325b7c34b",
          "length": 252,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6c09af12-a584-44ea-9d91-5b8be1efca1e"
        },
        "item": {
          "id": "323ad88a-3033-444f-8a3f-12018ef6faf0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "36cdcc3e-7983-4052-be8b-bc933301d2ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91425e8-1b31-467c-b9d1-311963940409",
        "cursor": {
          "ref": "1d877802-d81a-4ed0-ab02-805825173162",
          "length": 252,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "21a83a49-59b9-4a41-a71d-c17b84553bf2"
        },
        "item": {
          "id": "c91425e8-1b31-467c-b9d1-311963940409",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ce41453d-0452-4de1-8321-391b63f10a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a119671-a66b-467a-a9ab-b478fee28e44",
        "cursor": {
          "ref": "0c470b99-06a8-4e0e-a40b-1fd6b731d323",
          "length": 252,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "54d989d6-ee33-435b-8a80-3bb170cbb3a5"
        },
        "item": {
          "id": "1a119671-a66b-467a-a9ab-b478fee28e44",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ca53abd0-0a36-4927-b2ba-305ad734d3ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71c1572-0a8e-44b2-a567-0e3bf9584b6a",
        "cursor": {
          "ref": "378a1d34-b5f3-4345-903b-c42d3fb62008",
          "length": 252,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "65561f27-b166-44e8-bb77-11edebf8a567"
        },
        "item": {
          "id": "a71c1572-0a8e-44b2-a567-0e3bf9584b6a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "427114c3-ed1e-436f-8ebe-fa9f644c6df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76dcc27-9a67-4f2b-8675-793c44c30524",
        "cursor": {
          "ref": "576b4399-e7b5-4209-9984-082c887f7590",
          "length": 252,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ed5ad1b5-7d17-4b59-9282-5355b412376f"
        },
        "item": {
          "id": "e76dcc27-9a67-4f2b-8675-793c44c30524",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "496f7656-c492-4a13-82cf-0b2b20fe499b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb8bfaf-8f0b-4245-9cfa-35457f27e6c7",
        "cursor": {
          "ref": "71f68fe1-88c3-4717-a108-a03268cc9fd1",
          "length": 252,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b7a5db4f-3326-493e-94d6-1f5c1e8b87b1"
        },
        "item": {
          "id": "2bb8bfaf-8f0b-4245-9cfa-35457f27e6c7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b097a70b-23e2-4fbf-9cf2-71f6c64d91e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46206013-997f-4587-8057-a58200304e42",
        "cursor": {
          "ref": "f0e86a54-75ed-4041-8329-14d81256a931",
          "length": 252,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "401c63ff-41e0-48e0-9899-86ff355e4553"
        },
        "item": {
          "id": "46206013-997f-4587-8057-a58200304e42",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b29d8650-6016-4c9b-9114-a0f429fb5974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86f2412-06aa-425f-955e-5de3712d9241",
        "cursor": {
          "ref": "43b974b2-f29b-4780-8b08-bd89e1c7bc24",
          "length": 252,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "cf0dff9b-a08c-4661-8ca2-cd9cf8cc0ea5"
        },
        "item": {
          "id": "a86f2412-06aa-425f-955e-5de3712d9241",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b4b24e5c-7ee3-453a-abbf-5d930c1762e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b230032-a88e-40f4-82ce-8d1f96bbebd3",
        "cursor": {
          "ref": "774f733c-7410-4d50-8451-2cf7e660c890",
          "length": 252,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f02ace9a-b487-4ebe-a80f-6c36708c604d"
        },
        "item": {
          "id": "5b230032-a88e-40f4-82ce-8d1f96bbebd3",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7d2a7395-1663-4437-935e-c32368d80780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d983dac8-1735-4807-b10a-42099485fcfd",
        "cursor": {
          "ref": "91b5f400-c0bb-46ea-9005-400b3941e51a",
          "length": 252,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5d79c14b-3abf-4efc-b1eb-70e59bff6240"
        },
        "item": {
          "id": "d983dac8-1735-4807-b10a-42099485fcfd",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8e8ed33d-a704-4a3b-9c73-2babd9e9a10d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486129b1-5148-460b-bc44-bb7270a002d9",
        "cursor": {
          "ref": "8aba7f91-ec02-43eb-8c15-1364c1369b31",
          "length": 252,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f5f58040-e717-44d6-8f65-0035491f68a9"
        },
        "item": {
          "id": "486129b1-5148-460b-bc44-bb7270a002d9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "baeff2b5-9b80-4f47-8724-5dc64a4c5239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11db847f-269f-4c90-b2a1-31cc392d9d09",
        "cursor": {
          "ref": "bc9aee8a-c401-4472-a267-7105e2c8aa2a",
          "length": 252,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "304ade79-9ce6-4558-a2c2-d90485800c86"
        },
        "item": {
          "id": "11db847f-269f-4c90-b2a1-31cc392d9d09",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8c4676bd-9126-4175-bfda-4a019f3fd1ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "369ee010-42b4-4198-adb8-71d911fb2ac9",
        "cursor": {
          "ref": "304e47e8-985f-4b8e-81bb-5fa5440ac909",
          "length": 252,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "bb92cad7-e904-401e-ba0a-18be6436c0eb"
        },
        "item": {
          "id": "369ee010-42b4-4198-adb8-71d911fb2ac9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b36b6b8b-0f06-4c55-a6dd-ca79b95322de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953502bb-583c-4fc1-a5f6-bdec547ad1db",
        "cursor": {
          "ref": "3a645843-84b0-443a-af4d-b96a9731c95b",
          "length": 252,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "59dc10c3-839c-4153-945b-1e33fa714c1d"
        },
        "item": {
          "id": "953502bb-583c-4fc1-a5f6-bdec547ad1db",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9ce2adb3-66f7-4568-ab3e-e1e7201e9f9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2827234-7147-4e3d-9e13-cbca766f1c24",
        "cursor": {
          "ref": "e06d234e-9d57-40f2-8c24-cd166eb3d615",
          "length": 252,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "a249df5f-d1b3-4411-839c-1dc50f0d5fe3"
        },
        "item": {
          "id": "d2827234-7147-4e3d-9e13-cbca766f1c24",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f8428957-5d3d-4f57-bfe7-23fd9813936d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e0514b-9eb9-4c97-8ca3-cc1fb3a6e46d",
        "cursor": {
          "ref": "87839b9c-7c54-4b9c-a56a-44de3d54781d",
          "length": 252,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5cb8dd36-99ae-495e-98ac-72ca5742a083"
        },
        "item": {
          "id": "b5e0514b-9eb9-4c97-8ca3-cc1fb3a6e46d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "08d3f096-50bd-4049-9b15-d0d68e49a61f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1113d94d-b6c2-4f6e-b83a-903cab917e44",
        "cursor": {
          "ref": "7aa6ab10-343a-4a89-840c-3e11337df585",
          "length": 252,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3ac517f5-1317-4360-880e-bd9eca3e392a"
        },
        "item": {
          "id": "1113d94d-b6c2-4f6e-b83a-903cab917e44",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f8101450-a8c9-4f9c-aa62-340c4c36e36e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4095602a-ffb9-4e56-ad79-44f65210b6b6",
        "cursor": {
          "ref": "6c54a245-9084-473e-be30-e1c7e6000157",
          "length": 252,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b308d981-bfcb-4e22-a944-2fe16c9d27b9"
        },
        "item": {
          "id": "4095602a-ffb9-4e56-ad79-44f65210b6b6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c042cf07-0408-4602-8aa7-3fb29adda823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ab993b-78c3-41c6-95d4-b1267fa49429",
        "cursor": {
          "ref": "a6d87436-e965-4d47-aac6-41a76d7ce5b0",
          "length": 252,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "18f1c6e5-c3df-4c89-9846-424d7ea922f7"
        },
        "item": {
          "id": "d3ab993b-78c3-41c6-95d4-b1267fa49429",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2328c9ad-c582-4a01-9838-6fd695ec6929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6560302-51b6-4717-bec1-023b33c05ba9",
        "cursor": {
          "ref": "571c576d-c76a-4215-8528-01aa817b5777",
          "length": 252,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7cf2c79d-376d-42ea-a51a-4121650ec422"
        },
        "item": {
          "id": "a6560302-51b6-4717-bec1-023b33c05ba9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "740b79ab-21c9-4d1a-8ec0-1bc1ab6dd0c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6581f09a-d68b-4fa0-8951-d34a2b967a96",
        "cursor": {
          "ref": "d769605e-8d15-45f3-bf22-d91492d7812d",
          "length": 252,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b029c254-b494-49ba-8adb-0b7ffa956c74"
        },
        "item": {
          "id": "6581f09a-d68b-4fa0-8951-d34a2b967a96",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1a371292-7e59-43ef-93c0-7955e5d96437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af10142-e79e-49ed-918f-65207dbba4ba",
        "cursor": {
          "ref": "4006f682-8533-497f-8aaa-6e8e5716fa75",
          "length": 252,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fc70713f-7aa8-4182-8f68-701aad401003"
        },
        "item": {
          "id": "4af10142-e79e-49ed-918f-65207dbba4ba",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "73d30c72-b8e8-47c6-bbf0-edaf5c5e511f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8031acac-6715-4c3b-b2be-df956d4da0cf",
        "cursor": {
          "ref": "07f6ffb9-6f94-460e-85cf-269a2eacb9a1",
          "length": 252,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5b87ab97-5408-40ba-95cb-065acf73440a"
        },
        "item": {
          "id": "8031acac-6715-4c3b-b2be-df956d4da0cf",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1f7b26e5-3bf9-4580-a167-80dc9f33884e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d75431-366b-46e0-bff7-421ad33d18a8",
        "cursor": {
          "ref": "69bfd27c-01ee-4af1-9567-60be3faeb301",
          "length": 252,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f73d2abe-ff53-4a8e-aae7-684a11998b55"
        },
        "item": {
          "id": "c9d75431-366b-46e0-bff7-421ad33d18a8",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a289006a-0e68-424d-9d99-b3b914aea30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f61b2c1-8587-4c8e-a1c3-c26ecda42c69",
        "cursor": {
          "ref": "65e31a85-1df9-4293-94bb-b25e9b974c1e",
          "length": 252,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4fd6aae3-3ce0-4b1a-ab6b-9fb819973bb2"
        },
        "item": {
          "id": "0f61b2c1-8587-4c8e-a1c3-c26ecda42c69",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9a0a14a5-e5bc-47ed-8b7e-05a0b8d7d731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "042b1475-2521-43ea-8721-eae4125c8ef0",
        "cursor": {
          "ref": "12dd790d-e402-4731-ac3c-15d87dddab28",
          "length": 252,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1a129680-665a-49f6-871e-15262b81e642"
        },
        "item": {
          "id": "042b1475-2521-43ea-8721-eae4125c8ef0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "845597da-887b-497e-986f-b6243acaeacf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f1caf7-dbaf-44d1-93ff-298234c00c5e",
        "cursor": {
          "ref": "88c0ccae-3482-4bca-a530-d33f072e26d1",
          "length": 252,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6aa2b242-2605-4dee-818d-876faa649521"
        },
        "item": {
          "id": "74f1caf7-dbaf-44d1-93ff-298234c00c5e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "eb2cb508-24a9-404a-a22a-f58e3ae47e0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d24ada1-c5d2-4e51-a7e3-58ddae1efe5a",
        "cursor": {
          "ref": "57bd90d8-4d51-460f-9e3c-c4157e0c9953",
          "length": 252,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "fb4efe8a-d3dc-4f92-8a9d-658dad681b55"
        },
        "item": {
          "id": "3d24ada1-c5d2-4e51-a7e3-58ddae1efe5a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "fe48e9d7-869d-47a8-b4b4-62d14b3eb63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0b694a-576d-4d81-a1af-8008f684d3c9",
        "cursor": {
          "ref": "18b1cf86-0fa2-4ece-acc1-d1186ea05882",
          "length": 252,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3641c20d-7835-4837-b4b8-60be982ebae9"
        },
        "item": {
          "id": "9e0b694a-576d-4d81-a1af-8008f684d3c9",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "46bb027b-a1dc-4678-9a76-a61fd4a27cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8da543-016e-4c49-8dc9-0cf148397584",
        "cursor": {
          "ref": "4ca20eec-3462-4653-9209-c2b654ad7022",
          "length": 252,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "62f2d50c-6daa-4d9b-a222-6b7470c4002e"
        },
        "item": {
          "id": "fa8da543-016e-4c49-8dc9-0cf148397584",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "104a156c-8b93-48e4-b987-7ef1755f077d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd457f51-343d-4310-b7db-6dd0c398b1d4",
        "cursor": {
          "ref": "7fb7e7f0-7630-4162-9c31-f9eec12d2ae6",
          "length": 252,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "75430324-6dc8-4f95-ba8a-0ad9c00c5cc9"
        },
        "item": {
          "id": "fd457f51-343d-4310-b7db-6dd0c398b1d4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2157e037-f6d3-4b4c-a87b-a9b4407abecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f3e9350-d984-437a-9990-eed6c908fd77",
        "cursor": {
          "ref": "cdbe7ec7-9092-4101-82ea-372c5aa02dad",
          "length": 252,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "213f764c-a609-426c-8666-4b1a6400ab7b"
        },
        "item": {
          "id": "4f3e9350-d984-437a-9990-eed6c908fd77",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d50d9fbe-401e-4579-b25c-9758ded5e71e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ad31dc-2c01-4730-8dbb-6cc7546c764e",
        "cursor": {
          "ref": "8459c022-4a82-429f-9898-650eb2fe07c7",
          "length": 252,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "59d840a2-1ed0-47c6-a56c-d48d3f4e90ae"
        },
        "item": {
          "id": "74ad31dc-2c01-4730-8dbb-6cc7546c764e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "3754478b-2ab1-448f-8063-f97bddd85c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2801527c-acea-4a1b-a8c2-a9175f55d387",
        "cursor": {
          "ref": "57a3f59d-cb0e-4d36-b8b4-8518c8feff45",
          "length": 252,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f746c8ef-741d-4000-8e29-6fcc41618b41"
        },
        "item": {
          "id": "2801527c-acea-4a1b-a8c2-a9175f55d387",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2ec3b2ee-1e04-47a6-8b7f-f5d058d12bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c016ddf-edb3-42d6-b6ed-89373a76b48d",
        "cursor": {
          "ref": "fbb2b444-37ad-4e40-a596-9f0590d44ac5",
          "length": 252,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3cd052cf-4b5b-41fa-be8a-74ee872b331d"
        },
        "item": {
          "id": "2c016ddf-edb3-42d6-b6ed-89373a76b48d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c96c0dd6-55b5-438b-84f5-9bc0d2dd676a",
          "status": "Created",
          "code": 201,
          "responseTime": 408,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "60d637ea-9976-4b84-ad98-330621efd4c3",
        "cursor": {
          "ref": "000c38ad-1600-4783-8ff9-5ae80da004ab",
          "length": 252,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "bbcb197b-3b0b-4ead-b4db-eac0ad2cf35b"
        },
        "item": {
          "id": "60d637ea-9976-4b84-ad98-330621efd4c3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f206e9f8-3571-4599-8798-98a5ab474969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "befa7884-46e1-4b1c-b718-48204967d3b2",
        "cursor": {
          "ref": "8aa104a2-06c4-4b7f-b1e8-ba71bf82611b",
          "length": 252,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "abd76527-42e3-44ee-a983-3b87e4135b1e"
        },
        "item": {
          "id": "befa7884-46e1-4b1c-b718-48204967d3b2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0ec85c81-5264-46aa-8ed1-55838525ecfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b425633-72f5-435b-8048-8ba0aa7bad85",
        "cursor": {
          "ref": "5abd7425-9f24-42a5-a078-9c08354f89a8",
          "length": 252,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "43ebcdc3-56e4-4e25-8f86-cb0adbf05ed4"
        },
        "item": {
          "id": "8b425633-72f5-435b-8048-8ba0aa7bad85",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3dd189ee-f9cd-4869-8615-5c05610dfd28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3f118a-0693-4a70-bd23-66806fb7d753",
        "cursor": {
          "ref": "0cf193b8-a71f-4493-9234-379a73e2870f",
          "length": 252,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1a03791b-1e1e-4cbf-9aa8-62902880ce95"
        },
        "item": {
          "id": "4d3f118a-0693-4a70-bd23-66806fb7d753",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "fa7459d2-7a64-442f-81ec-b9ceb51a79d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01e7f970-753f-42d0-a1bb-275528c2f71e",
        "cursor": {
          "ref": "791939cb-6e54-4ae0-9ad1-5791cfa09c65",
          "length": 252,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "de82ee82-1279-434f-8e0f-5c1dac04d72d"
        },
        "item": {
          "id": "01e7f970-753f-42d0-a1bb-275528c2f71e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "322ad15a-73de-4b67-9e55-804e6c19daec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bae222e-aab5-4f87-8b5a-b0e7f2f6ee39",
        "cursor": {
          "ref": "12db3bc4-4db0-49d4-9569-dd1c8ad82459",
          "length": 252,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "51a1438a-c890-4d84-9719-b02014058c88"
        },
        "item": {
          "id": "8bae222e-aab5-4f87-8b5a-b0e7f2f6ee39",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2e5d193e-76c3-4443-a307-5a32376949bc",
          "status": "Created",
          "code": 201,
          "responseTime": 427,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "acf577be-031a-40da-b1fb-62f5df08b2f5",
        "cursor": {
          "ref": "25dae45d-b4d0-4117-8acc-9bc7fd6c5ba9",
          "length": 252,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "20180f7e-b577-461e-9730-3d411b4cec2f"
        },
        "item": {
          "id": "acf577be-031a-40da-b1fb-62f5df08b2f5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d504191a-79a1-4314-b3e9-db1a76faf6ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7aaf7b-fb46-4b3f-b0e7-3203e8f30ee6",
        "cursor": {
          "ref": "b3838418-3cd2-430b-be02-da0a9c77c59f",
          "length": 252,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "130bab73-3526-41bd-8314-f46c7b6ac2a5"
        },
        "item": {
          "id": "dd7aaf7b-fb46-4b3f-b0e7-3203e8f30ee6",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1f743f15-8e9c-4520-b1b6-999ca3825bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba533c1-99e4-468b-b6cd-1b6d49eb5b9c",
        "cursor": {
          "ref": "2e55d395-5bc9-4cbf-836b-e371f0e38076",
          "length": 252,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b2a6f9b7-db7d-4a60-a247-effe489789af"
        },
        "item": {
          "id": "6ba533c1-99e4-468b-b6cd-1b6d49eb5b9c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ce479006-0889-40c3-abfc-2dfe10a9b06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b0a2a9-8253-4bb1-92f6-ff17ca579151",
        "cursor": {
          "ref": "0d4f8423-d431-4b15-a59f-6a5669599b52",
          "length": 252,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4bab7243-7501-41fc-92d1-f0f438ebb18e"
        },
        "item": {
          "id": "75b0a2a9-8253-4bb1-92f6-ff17ca579151",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0b9b6929-e156-4857-8605-1d980ac5bd56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8f9cbd-5708-452e-b829-ac7e1d94047c",
        "cursor": {
          "ref": "705ff6f9-4949-40ae-8dac-0475c4f493d8",
          "length": 252,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fbeca7df-0585-4daa-9127-22ec137a299b"
        },
        "item": {
          "id": "6a8f9cbd-5708-452e-b829-ac7e1d94047c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b2ce0733-0f07-4de7-89da-7415479179dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "288d32b4-a7de-4d88-8559-5a286fd0e3c5",
        "cursor": {
          "ref": "6052313b-499e-4c88-8ad5-ed48d9a3ac50",
          "length": 252,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d11b9967-ba5a-45d1-b09d-82f17fa30021"
        },
        "item": {
          "id": "288d32b4-a7de-4d88-8559-5a286fd0e3c5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f48fab24-29aa-401f-8ed9-30c89a09a9f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6997b5e9-a977-492c-9c63-ef7a1fc5f1b3",
        "cursor": {
          "ref": "0d702c31-d9ef-429b-8911-bcaf39489a76",
          "length": 252,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "49918ee2-2039-4842-8d59-05294d9ec6ee"
        },
        "item": {
          "id": "6997b5e9-a977-492c-9c63-ef7a1fc5f1b3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7ac5a460-754b-4e2f-a118-daf6e1e63e8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b592cd-3319-489f-b62c-95fd35107a16",
        "cursor": {
          "ref": "41f1f641-5715-4a84-8ca3-4e28fc3fea0f",
          "length": 252,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "25d571c0-03db-48cd-8767-db5881f0c11a"
        },
        "item": {
          "id": "d6b592cd-3319-489f-b62c-95fd35107a16",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2c48bdae-6b4f-4594-b4f1-570b746b3743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa074773-4697-45e7-bf50-ab47b1a904ac",
        "cursor": {
          "ref": "97ae42be-5fba-476d-924e-7b32657bb0a3",
          "length": 252,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8a1aa0f8-0b1e-4ebf-a537-7e9e92ef31a4"
        },
        "item": {
          "id": "fa074773-4697-45e7-bf50-ab47b1a904ac",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "80cfb489-afc7-4bdf-a923-add9f6baaa99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "969d53c7-e92d-4604-aea8-1a006cb6ec3d",
        "cursor": {
          "ref": "5f65fe9b-fab9-4405-8bd5-da50c29045aa",
          "length": 252,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7d7c7bc6-1cb0-438e-ba6b-506eee5dd4f7"
        },
        "item": {
          "id": "969d53c7-e92d-4604-aea8-1a006cb6ec3d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e3c2968b-cc44-4e00-9286-0e6b700a8f7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "5a57a5af-8b53-474e-9eba-12c08cc91489",
        "cursor": {
          "ref": "0dece6e4-c258-49cd-8ce6-138fabde3ee9",
          "length": 252,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "97d76b19-3fbf-419f-8e58-f343e36ce376"
        },
        "item": {
          "id": "5a57a5af-8b53-474e-9eba-12c08cc91489",
          "name": "credentials_issue"
        },
        "response": {
          "id": "13b57506-7673-4a54-a5f8-72169d0d0325",
          "status": "Created",
          "code": 201,
          "responseTime": 434,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d05a81-004f-4982-8f16-c3077feef49c",
        "cursor": {
          "ref": "dac6b2bd-4cc6-42ca-8d6d-579c3d51d0f3",
          "length": 252,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8bd9f1ef-4c39-44be-9b40-734a1e6558ef"
        },
        "item": {
          "id": "76d05a81-004f-4982-8f16-c3077feef49c",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "414cf281-bb34-419d-a1d2-f5504f3b8cbb",
          "status": "Created",
          "code": 201,
          "responseTime": 423,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8721e7d5-6505-4f14-b820-680f5d3f0f98",
        "cursor": {
          "ref": "59894102-781c-4deb-8c76-7c5646dac5f0",
          "length": 252,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ce7f617a-6568-4f3f-b66c-27ba651b63f0"
        },
        "item": {
          "id": "8721e7d5-6505-4f14-b820-680f5d3f0f98",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "7bdf9974-f71b-483b-8c0b-035e1a3f86ec",
          "status": "Created",
          "code": 201,
          "responseTime": 378,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "34954003-1551-4edb-aced-debff56d31e1",
        "cursor": {
          "ref": "bd5b47d8-d73b-4b57-b5ce-17aa2fb5a74a",
          "length": 252,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9ae5134e-e0fe-4a97-bc8d-3de11be94fa6"
        },
        "item": {
          "id": "34954003-1551-4edb-aced-debff56d31e1",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "523e6005-bd9a-49a7-bfec-9d011ba11369",
          "status": "Created",
          "code": 201,
          "responseTime": 440,
          "responseSize": 659
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3465142a-e588-4eda-b06f-3073a14fe0a8",
        "cursor": {
          "ref": "629d8714-a340-4f82-9db3-243dd24c3e98",
          "length": 252,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2299c9b6-069c-4fee-99cc-e53541d0563f"
        },
        "item": {
          "id": "3465142a-e588-4eda-b06f-3073a14fe0a8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "38225306-b916-4342-9c8d-fdce5e72418f",
          "status": "Created",
          "code": 201,
          "responseTime": 378,
          "responseSize": 627
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d6c180-5388-4bc4-a5b0-72a68584d843",
        "cursor": {
          "ref": "4a9b8269-07d3-4845-9cc8-44fb2d672e9e",
          "length": 252,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a576d861-4d72-4951-83fc-126c35e1bdae"
        },
        "item": {
          "id": "a6d6c180-5388-4bc4-a5b0-72a68584d843",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a3e0f28c-a72c-4488-923a-7f8232ccd42f",
          "status": "Created",
          "code": 201,
          "responseTime": 434,
          "responseSize": 637
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57436464-2e55-47c2-805c-7e948347276f",
        "cursor": {
          "ref": "11083552-cc31-452c-b9d4-da03eb91a28a",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "39f3b43a-d441-4193-89d1-d665c91241ff"
        },
        "item": {
          "id": "57436464-2e55-47c2-805c-7e948347276f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e3087e4a-0079-437b-b050-e13969a9146f",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "57436464-2e55-47c2-805c-7e948347276f",
        "cursor": {
          "ref": "11083552-cc31-452c-b9d4-da03eb91a28a",
          "length": 252,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "39f3b43a-d441-4193-89d1-d665c91241ff"
        },
        "item": {
          "id": "57436464-2e55-47c2-805c-7e948347276f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e3087e4a-0079-437b-b050-e13969a9146f",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "fbcd873f-7969-4eef-8733-38aced1ae930",
        "cursor": {
          "ref": "e6b5eed9-4157-439c-992f-e7978cb737c5",
          "length": 252,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d04b9f9d-b3a4-4038-8f2d-d3093f0298c1"
        },
        "item": {
          "id": "fbcd873f-7969-4eef-8733-38aced1ae930",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b6b51069-195c-4a85-9873-9121d50f4591",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "5a6123c7-2b59-4ef8-835b-413f0ab9d8a9",
        "cursor": {
          "ref": "bd239d2d-26f6-427d-809f-ddf20a96e8d2",
          "length": 252,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2551591b-48c2-4676-86d1-f3dad62ec7ef"
        },
        "item": {
          "id": "5a6123c7-2b59-4ef8-835b-413f0ab9d8a9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "51607caf-1f2f-44ba-8312-e42da2705374",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "7020df58-7c9b-4a38-9777-55e5673b4651",
        "cursor": {
          "ref": "7b2acb57-16cb-4ae9-8b36-69f359762c41",
          "length": 252,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0410f254-3f40-4bd4-88b1-08734a395489"
        },
        "item": {
          "id": "7020df58-7c9b-4a38-9777-55e5673b4651",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3af5b676-0f2d-409a-b2bb-121120e024f8",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "b2a8e321-55ef-4fe6-8573-fca6297f9fd8",
        "cursor": {
          "ref": "2688983f-9ddc-4a6e-9e88-49e816bafa31",
          "length": 252,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "05e8305c-14fc-47bc-a34e-4769904ab6f4"
        },
        "item": {
          "id": "b2a8e321-55ef-4fe6-8573-fca6297f9fd8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a2428cce-2588-401c-9dc1-9c6c162429ee",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "1785824b-7c4e-457e-9015-f1c117f2d50d",
        "cursor": {
          "ref": "16bb4313-950b-44da-8d55-87ba63fdb774",
          "length": 252,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7d1c8c70-1eaa-4b2d-b21c-d3db2407d541"
        },
        "item": {
          "id": "1785824b-7c4e-457e-9015-f1c117f2d50d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "80f78d3f-75ef-4af9-99be-f1f9447a7f29",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "973b472d-5261-406d-abd5-17cf7d9f6320",
        "cursor": {
          "ref": "ca3d516a-92dc-4be1-b0c3-9327c2148c23",
          "length": 252,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4219e947-4211-4117-a688-5920e4ce83c0"
        },
        "item": {
          "id": "973b472d-5261-406d-abd5-17cf7d9f6320",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b8e93fa6-4bce-4803-87c6-b65394547120",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "17e30b9a-0a35-40f2-8f0a-d374fb9767ab",
        "cursor": {
          "ref": "f266aed5-c78c-40df-a7f8-437c05a86485",
          "length": 252,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6588ed96-f2b6-4a76-aaec-7aa81ce3a2db"
        },
        "item": {
          "id": "17e30b9a-0a35-40f2-8f0a-d374fb9767ab",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "26017fe1-6e39-4a77-a40f-0658befb8632",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "58e31180-421f-4093-9e1b-b033b77e9cba",
        "cursor": {
          "ref": "1f906a75-2494-40e0-9b14-428456363bdf",
          "length": 252,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5af2b207-ea6c-4f5b-9f9d-87a7bd9f1a4e"
        },
        "item": {
          "id": "58e31180-421f-4093-9e1b-b033b77e9cba",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6b30eb16-0b31-458c-a088-ad43f68a45ba",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "6f043572-6d59-480d-ac9b-a399d7b8be93",
        "cursor": {
          "ref": "289c7a2b-a265-41ae-9232-5ed69543678c",
          "length": 252,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5f0e660c-9ba6-4326-9875-fc8ca268be97"
        },
        "item": {
          "id": "6f043572-6d59-480d-ac9b-a399d7b8be93",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ca1bc853-567e-422b-a388-d60a8d7ba569",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "5c0daeb7-fd2d-432b-8290-2e539c0c2782",
        "cursor": {
          "ref": "8d70d8b9-cc72-44a7-afda-d0d181178dbb",
          "length": 252,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "85126400-e569-4068-b199-60a6ce889c13"
        },
        "item": {
          "id": "5c0daeb7-fd2d-432b-8290-2e539c0c2782",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5a9a4349-c8c1-40f8-abfc-b214f875921e",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "2d3a6208-5bfd-4471-a7ce-1497d7e9809a",
        "cursor": {
          "ref": "1f749ab9-0636-4ac2-a2ef-006fec5900bf",
          "length": 252,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c3961c40-3c8a-4c22-bc4a-eab7001b511b"
        },
        "item": {
          "id": "2d3a6208-5bfd-4471-a7ce-1497d7e9809a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "834ced40-462b-4823-8b4f-df5c2ea4a31b",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "ccae2d0a-63e2-4e8e-a624-f7d575abcbe4",
        "cursor": {
          "ref": "7ab4acbf-fc30-44e6-a973-83c1aae31a2d",
          "length": 252,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "88fdfa1e-aa73-4b5e-b884-d1cff92a1d33"
        },
        "item": {
          "id": "ccae2d0a-63e2-4e8e-a624-f7d575abcbe4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "420301e9-16b4-4747-873f-1d96cbd24e4d",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "37c8b9f2-5a9e-4ff2-9ae4-9a6f964af3e3",
        "cursor": {
          "ref": "650121c6-288b-41f4-98eb-03abf161960e",
          "length": 252,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "21a235ae-3dbe-4726-b2ca-a58013162a08"
        },
        "item": {
          "id": "37c8b9f2-5a9e-4ff2-9ae4-9a6f964af3e3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8ac7d93a-57e8-46dc-9cbc-48909bca0098",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "90040735-330b-4c51-9471-be0971f0c5f2",
        "cursor": {
          "ref": "2f9e025f-f2d5-4c9d-b94f-ce024621b174",
          "length": 252,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ec0b40fe-f7d5-41e7-afca-982dd245bfad"
        },
        "item": {
          "id": "90040735-330b-4c51-9471-be0971f0c5f2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "23ca602b-2582-4620-ad1d-fc75177a3bd4",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "9767a672-084a-4f44-b51b-e18ca5bce287",
        "cursor": {
          "ref": "2e07700b-efae-4fa5-9dd6-b805377983b9",
          "length": 252,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b25ce9f5-6371-4996-84ad-ec66877304dd"
        },
        "item": {
          "id": "9767a672-084a-4f44-b51b-e18ca5bce287",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "37730de7-5f4d-4f16-a376-a21839008d4b",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "66487524-74ff-4bd6-92c1-a9c0659dffd2",
        "cursor": {
          "ref": "ed1363a0-9f53-4fee-b27c-75ed1dd76633",
          "length": 252,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "23fec153-f83f-4a3c-b0cb-16156a3f5a5c"
        },
        "item": {
          "id": "66487524-74ff-4bd6-92c1-a9c0659dffd2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "72c6bab7-9ba3-43a9-86a4-cb7fb9f00618",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "d9c730bd-1037-42b3-8587-ea79f4e59e6f",
        "cursor": {
          "ref": "1fc1ab6e-5829-4699-8839-f17b98d9667d",
          "length": 252,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "51d76625-7a82-4a06-b688-2fcd55f01451"
        },
        "item": {
          "id": "d9c730bd-1037-42b3-8587-ea79f4e59e6f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "06e1e47e-f953-4fde-b116-532df8dca603",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "5e5ae7b5-b94a-464e-8d5d-c62dd169c69d",
        "cursor": {
          "ref": "e5d6ed41-f31d-47b2-bd78-789766525725",
          "length": 252,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "642ab37b-7b04-4223-af29-4fae2aa09cca"
        },
        "item": {
          "id": "5e5ae7b5-b94a-464e-8d5d-c62dd169c69d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "26fae569-d92d-449e-9b08-bef9f3d76208",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "7d08d907-d88d-443c-b96a-c3ed3abdf1a9",
        "cursor": {
          "ref": "ce79effc-5898-4303-92aa-63910eefde8b",
          "length": 252,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "33304249-5f4e-4a93-955d-ea1dc685336b"
        },
        "item": {
          "id": "7d08d907-d88d-443c-b96a-c3ed3abdf1a9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "83e44f43-ba5e-4d15-90d4-f4438b359e12",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "a50dca2f-829b-4e21-ab11-a67e98428829",
        "cursor": {
          "ref": "f12928ec-4838-4ce5-a38b-3494963fa670",
          "length": 252,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "38eea852-16bd-44e9-8dfb-94210109e6e5"
        },
        "item": {
          "id": "a50dca2f-829b-4e21-ab11-a67e98428829",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6ce04a8e-c37a-4ba8-823e-fc6fa365e304",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "f92f7017-519d-4ba3-8095-3c7dda365e5f",
        "cursor": {
          "ref": "1dd850a0-3efa-43cc-81db-bdb2459724aa",
          "length": 252,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2596acab-cb40-4e69-8220-17d70b5f1bbc"
        },
        "item": {
          "id": "f92f7017-519d-4ba3-8095-3c7dda365e5f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "21a46612-e4b2-4f86-9972-2426c1e2cb4a",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "43cc4fc2-08c7-4cae-8495-07ed9bbbc3d1",
        "cursor": {
          "ref": "676162b1-0675-44a9-a7e4-8cee28c0473d",
          "length": 252,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "906f23f9-662d-41fa-add3-9ad076cab3e2"
        },
        "item": {
          "id": "43cc4fc2-08c7-4cae-8495-07ed9bbbc3d1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "965ef241-e46f-46c8-ab0e-7263d7f497cb",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "ef1b1858-92f7-49b5-9841-6d664cf28fe1",
        "cursor": {
          "ref": "94f6a13e-469f-4a5c-a748-f9c5c81ffed4",
          "length": 252,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ad36cc0a-9611-42b5-9e63-6b4f2d2e7940"
        },
        "item": {
          "id": "ef1b1858-92f7-49b5-9841-6d664cf28fe1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e9c0828b-3199-46c8-95de-563e989445b5",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "bcfb11d3-192e-48af-b973-40318353a3da",
        "cursor": {
          "ref": "14b10454-2da2-42f1-8a6f-82ac2056d837",
          "length": 252,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f6f7ea44-ad58-49ae-8751-d6b1fb902546"
        },
        "item": {
          "id": "bcfb11d3-192e-48af-b973-40318353a3da",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "eb411f3d-b7bf-4653-a0e0-1e73ef79b667",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "5bc53fde-7b81-42ab-a977-c68efd33eca4",
        "cursor": {
          "ref": "48e15189-0013-433f-b214-88bb76392244",
          "length": 252,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c421016a-f521-4093-a4fe-c97c710b5409"
        },
        "item": {
          "id": "5bc53fde-7b81-42ab-a977-c68efd33eca4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ad5f52e0-79d2-48ac-8aa0-7d9782b917e4",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "b82a7bb7-eca5-4d91-8bdb-bbab3949794b",
        "cursor": {
          "ref": "05b75aaa-9623-4ccd-8973-0e82a015218e",
          "length": 252,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f1087119-1927-4a34-8993-ed101b2ef1cf"
        },
        "item": {
          "id": "b82a7bb7-eca5-4d91-8bdb-bbab3949794b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f26423e9-b35d-4a7b-a31f-0765c66467b7",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "9a24ef34-3674-4a8a-be63-3ff2dec4ef12",
        "cursor": {
          "ref": "fe0258ac-1858-40ad-8ed9-0eaeee6ae169",
          "length": 252,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6a9ad0bb-4459-4204-8783-747423d30f5e"
        },
        "item": {
          "id": "9a24ef34-3674-4a8a-be63-3ff2dec4ef12",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d4adabbe-35f0-4e7c-aef6-297066d5958b",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "c024bcdd-50ac-44d2-924f-97e5e6e527a0",
        "cursor": {
          "ref": "3037ca25-3a68-4689-98f2-c11002c665fb",
          "length": 252,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3f9e435f-c47a-43c3-9ade-32ccfb7e8297"
        },
        "item": {
          "id": "c024bcdd-50ac-44d2-924f-97e5e6e527a0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4d827319-c02c-4787-bd78-eb784d80b587",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "f7655d5b-0992-401e-8ed1-bd745572f7b1",
        "cursor": {
          "ref": "0b8ab9b1-727a-4ac4-b022-b9473a53da33",
          "length": 252,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9115e6bc-aaa1-403e-82c1-a195346c164c"
        },
        "item": {
          "id": "f7655d5b-0992-401e-8ed1-bd745572f7b1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5fbb206e-45fb-43fe-8856-5122335f9618",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "e5346e31-8751-48d6-8cc1-bbc5d79067d4",
        "cursor": {
          "ref": "e7debc73-6eb9-404a-b778-5200e3b3c43c",
          "length": 252,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "489db49f-a180-4dcc-aaa7-d5d5693d8f14"
        },
        "item": {
          "id": "e5346e31-8751-48d6-8cc1-bbc5d79067d4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8325bd6f-4d60-4eed-acbc-e9e369ca81e5",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "86b74188-96ad-48dc-af49-6939da82ee5c",
        "cursor": {
          "ref": "45973e8c-fc7f-4b06-b5a9-2eb8585079b1",
          "length": 252,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "229faaf9-5c56-436c-b7cd-e94ad847e489"
        },
        "item": {
          "id": "86b74188-96ad-48dc-af49-6939da82ee5c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9c54a279-8fac-4190-bd7e-85aa1fd67a08",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "efa74cba-7e5a-4f61-a8d0-f590337f9bee",
        "cursor": {
          "ref": "6d3927bf-e89f-4086-8fd4-a075dac1ae6c",
          "length": 252,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e358dd6e-07ca-4b90-9ec0-44cd87237d0c"
        },
        "item": {
          "id": "efa74cba-7e5a-4f61-a8d0-f590337f9bee",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9a95e02f-54e5-481f-a930-b21ba0f95c1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618cf496-6e58-46a8-8836-ef1ff8d5ff32",
        "cursor": {
          "ref": "b9835e18-7a87-4fbc-858c-01eccde52a1e",
          "length": 252,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a487578c-e786-4e33-b8ce-500fee0b2780"
        },
        "item": {
          "id": "618cf496-6e58-46a8-8836-ef1ff8d5ff32",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "3cbed55b-0513-4c92-a7e5-20614350039e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17405bcc-0e1d-49b8-b3a3-ac6ae3ea3d67",
        "cursor": {
          "ref": "ab15a33f-3297-463e-b688-0e7e1d3f7199",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2499175e-af52-4837-9827-610f38e86dba"
        },
        "item": {
          "id": "17405bcc-0e1d-49b8-b3a3-ac6ae3ea3d67",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "deedba0a-a3d9-4c1c-b605-8526825f61da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17405bcc-0e1d-49b8-b3a3-ac6ae3ea3d67",
        "cursor": {
          "ref": "ab15a33f-3297-463e-b688-0e7e1d3f7199",
          "length": 252,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2499175e-af52-4837-9827-610f38e86dba"
        },
        "item": {
          "id": "17405bcc-0e1d-49b8-b3a3-ac6ae3ea3d67",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "deedba0a-a3d9-4c1c-b605-8526825f61da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b130b93e-f145-402c-a33c-732ee5a87e15",
        "cursor": {
          "ref": "afcc7b03-6c1f-4e0b-b440-77efaf38d8a9",
          "length": 252,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8d841ec4-9530-466a-8ec5-789f83692bd0"
        },
        "item": {
          "id": "b130b93e-f145-402c-a33c-732ee5a87e15",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f3bd37b7-660a-4853-923a-d973fbd52a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35589452-7636-4ccf-ac10-765edb278b44",
        "cursor": {
          "ref": "58a7c948-78de-4f43-a969-bc034c136333",
          "length": 252,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6f9e123b-48a8-4a0f-be3d-23c3a6d33ec5"
        },
        "item": {
          "id": "35589452-7636-4ccf-ac10-765edb278b44",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "7697878a-2865-441e-af78-e25ff8f70b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d18afe4a-0445-4853-94a8-ce9f95813d74",
        "cursor": {
          "ref": "905ec8d3-d681-44f1-8787-7cc743370421",
          "length": 252,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4f0da4d2-917b-405e-9990-af067532111f"
        },
        "item": {
          "id": "d18afe4a-0445-4853-94a8-ce9f95813d74",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "58b5c730-b754-4992-8531-4160f2b0f81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1cd6ee-e7e6-43d5-ae20-5b6ac89a4e2e",
        "cursor": {
          "ref": "4482653d-3655-42b5-ba3c-26da5c829e0b",
          "length": 252,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "91cf3284-2d38-4d67-a078-a04557c36c8c"
        },
        "item": {
          "id": "ca1cd6ee-e7e6-43d5-ae20-5b6ac89a4e2e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "df06c7f0-d0f2-43ba-850c-c3e222a16f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f6d8b2-e798-4c2f-8f16-85c3eabacb68",
        "cursor": {
          "ref": "d77ab632-f8a2-4e74-9c10-e2ef0cab5fe5",
          "length": 252,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e12b4c9d-0a3d-47f3-94b5-23f56c467b83"
        },
        "item": {
          "id": "81f6d8b2-e798-4c2f-8f16-85c3eabacb68",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "517e9210-0512-4282-abac-b6bb67d57cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3a8909-2d30-4059-8385-2ae4f5f49233",
        "cursor": {
          "ref": "736bc883-53a4-432a-ad93-7f1b6a341f1f",
          "length": 252,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7b76d915-c315-4154-a75e-6886ce5b1a82"
        },
        "item": {
          "id": "2d3a8909-2d30-4059-8385-2ae4f5f49233",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ef697e4b-a92c-4f4c-8b50-ed3731c3d52f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 703,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a46870-4db2-4101-9428-d92d457e1223",
        "cursor": {
          "ref": "6a7bc3cb-6dc4-4487-a243-12625b55b867",
          "length": 252,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2ae411da-eeca-4b9a-95fd-c844418d9efc"
        },
        "item": {
          "id": "a1a46870-4db2-4101-9428-d92d457e1223",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f1348c20-9f82-4152-9ac7-403d2c74dae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d96cc63-3bf0-4a27-9160-631908f25407",
        "cursor": {
          "ref": "aae77714-4f9c-4950-a402-086c8535ee55",
          "length": 252,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8212c370-1d59-4111-9d58-954c939d32c6"
        },
        "item": {
          "id": "1d96cc63-3bf0-4a27-9160-631908f25407",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6fe6ae72-8ab8-4252-b321-2adce62abac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49eb482-a18a-4305-8e71-e594c7f1d932",
        "cursor": {
          "ref": "ddb0212b-eecc-4a58-9c28-b2df2f3571f3",
          "length": 252,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5db5e28f-f084-404b-b677-73c961741234"
        },
        "item": {
          "id": "b49eb482-a18a-4305-8e71-e594c7f1d932",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0a87457f-0609-4689-8afd-5b3f4d06c6ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0185974-f582-413d-8e2f-896f3e3398d7",
        "cursor": {
          "ref": "8f231e6d-1db8-48b9-a342-0a87cad53378",
          "length": 252,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "177b1414-3326-47dc-af60-cd1df8d87d9f"
        },
        "item": {
          "id": "a0185974-f582-413d-8e2f-896f3e3398d7",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5cff63eb-520f-498d-bbf9-a5ba01a2b320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5bf5663-9e92-40ba-b1ab-27cac29f232d",
        "cursor": {
          "ref": "db7bcf9c-b3b0-4915-99ec-371626e32d08",
          "length": 252,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b3750956-72c0-4377-abce-bf0734164d1a"
        },
        "item": {
          "id": "f5bf5663-9e92-40ba-b1ab-27cac29f232d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2dc48a88-4ada-476d-9af0-d8ba33a369f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301f6d77-4b03-4478-a522-e275055e55ec",
        "cursor": {
          "ref": "89d6b967-9d58-4b41-8361-306dac92a576",
          "length": 252,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "401218db-dc0e-4cdc-bcbd-f438c9c8a6ed"
        },
        "item": {
          "id": "301f6d77-4b03-4478-a522-e275055e55ec",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "25ae1874-0029-4b1f-bbce-f35315d5a00d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d27edaf-eede-468c-a4d9-7316dc91b3a7",
        "cursor": {
          "ref": "68ed43f7-2a66-4da0-8eb2-87f12269b168",
          "length": 252,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4235c517-feeb-47d4-bf45-1104ff9b5762"
        },
        "item": {
          "id": "1d27edaf-eede-468c-a4d9-7316dc91b3a7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "614fcfa2-327b-4138-b9e1-4ac9b529ccb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2270ddb6-2346-4496-a618-b796538c138e",
        "cursor": {
          "ref": "c6a1b3af-1fa0-46c6-85e8-7fdc7d000f09",
          "length": 252,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8a8e71b5-26d6-44b9-b09f-08adf3ee020c"
        },
        "item": {
          "id": "2270ddb6-2346-4496-a618-b796538c138e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a7ee1478-f39e-4d1f-a257-5ccec1a85f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e88c7e7-3589-4d07-b5c3-3dc13900ad03",
        "cursor": {
          "ref": "6b993147-81e9-4cb4-a4ce-deaf01c6d88a",
          "length": 252,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "305f3720-b719-4b11-b20e-4b93c7155f33"
        },
        "item": {
          "id": "8e88c7e7-3589-4d07-b5c3-3dc13900ad03",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ac974abc-2c5d-4583-aa81-52580928da77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6d13f9-1f19-4afd-b46f-ce08f54b508c",
        "cursor": {
          "ref": "05196f6b-3d30-4c0a-82d8-f75b49574ab3",
          "length": 252,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9e611153-4718-4326-8ac4-189c3544283e"
        },
        "item": {
          "id": "ab6d13f9-1f19-4afd-b46f-ce08f54b508c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f5ceb2e8-45da-4ab5-9723-74f1f4b34fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c6db028-7595-4bb8-b18b-1318125ca456",
        "cursor": {
          "ref": "93c8b4d6-fd0b-45bd-bce6-e3dd28b784ca",
          "length": 252,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "614407c6-0205-47c4-82be-274715bdb330"
        },
        "item": {
          "id": "5c6db028-7595-4bb8-b18b-1318125ca456",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b1c3736b-8b22-4f08-a400-0ae3888e4956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "658d3ea8-6f68-44db-b592-ce70e6a5efae",
        "cursor": {
          "ref": "11c0f9ef-3754-4789-a403-a1444dcbc970",
          "length": 252,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "20fe29af-8ec2-44d0-b862-0877a731441e"
        },
        "item": {
          "id": "658d3ea8-6f68-44db-b592-ce70e6a5efae",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6703c32d-440b-457e-b7e8-0db1ac00c097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c20849-b41a-453e-ab66-85ffb965f56d",
        "cursor": {
          "ref": "2992a924-4d4e-4c3e-b8cd-6477f2b36119",
          "length": 252,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2d75c625-4903-4435-85a1-4660fc750fdd"
        },
        "item": {
          "id": "52c20849-b41a-453e-ab66-85ffb965f56d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "89d57c87-2af4-414b-aed7-9873c319688a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29ebecb-df40-40fd-820f-f1db4f3f41a4",
        "cursor": {
          "ref": "9b2b1564-02dc-4398-8f78-b96d45664209",
          "length": 252,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "184a1b03-87f0-4e11-a3cc-742e497b9557"
        },
        "item": {
          "id": "e29ebecb-df40-40fd-820f-f1db4f3f41a4",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "532def72-7309-4e67-8312-5c866c062f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20cc646c-97f0-43ec-866a-04a1fa41a860",
        "cursor": {
          "ref": "ae90bb12-fccb-4d10-ac22-8903c8c8b0fa",
          "length": 252,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c7cea9ab-80f8-46f4-8fd2-ac6bd403d176"
        },
        "item": {
          "id": "20cc646c-97f0-43ec-866a-04a1fa41a860",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "59b7f67a-4f1b-4713-a8ba-94e9842760df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f54c34dd-f552-4f0d-ad83-be8241c64f7d",
        "cursor": {
          "ref": "a1d0db76-dd21-42c1-a047-c76d66095f65",
          "length": 252,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "28edc856-c238-4df7-ace9-c072f67e4669"
        },
        "item": {
          "id": "f54c34dd-f552-4f0d-ad83-be8241c64f7d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7dde9d25-dda7-4759-bd52-cefd82327200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 354,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4246d10-5907-4d91-a403-ae789a867a44",
        "cursor": {
          "ref": "90253aac-555c-4984-a323-295a26e8df56",
          "length": 252,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b70ae5b4-62c9-43f1-870b-4fa9185aec57"
        },
        "item": {
          "id": "a4246d10-5907-4d91-a403-ae789a867a44",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "149a4a7c-e4e8-4580-baca-b60cf578a3b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84091b6a-2f73-49d6-b4d4-2c969676bb57",
        "cursor": {
          "ref": "c886a0fa-ba17-4d15-80e1-4015542d4fcf",
          "length": 252,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f1e1af2b-b743-4c9a-b150-c16f8c3bf087"
        },
        "item": {
          "id": "84091b6a-2f73-49d6-b4d4-2c969676bb57",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4b7829a9-528f-4a85-b468-6e755b96f0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2049ab8b-0e50-482c-a3f3-9404323f19b0",
        "cursor": {
          "ref": "cca45ae1-b35b-46af-aae1-c81495d1ac87",
          "length": 252,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c981156b-fc43-49bd-884b-a65c12285248"
        },
        "item": {
          "id": "2049ab8b-0e50-482c-a3f3-9404323f19b0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3180569a-6680-45fc-a4d7-f7a410caf2bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ccaeb85-24bd-4c62-8b40-1854ddd1a607",
        "cursor": {
          "ref": "10dca130-b5a3-4489-b086-9dad9dfafc64",
          "length": 252,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "88afb5df-ce0d-4d94-b198-24bbb0e1a7da"
        },
        "item": {
          "id": "7ccaeb85-24bd-4c62-8b40-1854ddd1a607",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "29219426-19bb-4a46-abcc-99ac74b1522b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d86106b-fb2b-4d6b-b2c2-3535155d5b93",
        "cursor": {
          "ref": "ecfbbdfc-af4e-4958-91fd-c713ae76c401",
          "length": 252,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "295a12d2-15df-4ada-9fea-f88479e8968b"
        },
        "item": {
          "id": "6d86106b-fb2b-4d6b-b2c2-3535155d5b93",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2de9b0dc-5741-4333-a4dc-2c5a0171ce2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ba1928-3912-4ed1-ab1e-f1ca962543cd",
        "cursor": {
          "ref": "00b27619-daf9-4cbf-ac94-15e4d9943db1",
          "length": 252,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c6915a14-9a0e-4ef1-baeb-cde3362e1f31"
        },
        "item": {
          "id": "87ba1928-3912-4ed1-ab1e-f1ca962543cd",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0140920d-cbac-4900-838d-08dc07eb7ca5",
          "status": "OK",
          "code": 200,
          "responseTime": 207,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "12c4edf1-e36f-4cdc-b078-0521f131494c",
        "cursor": {
          "ref": "f19d0f76-3772-456c-a96a-1fdf6ef04a16",
          "length": 252,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "07edc9df-700d-43da-bea8-5d6cfa0b2eaf"
        },
        "item": {
          "id": "12c4edf1-e36f-4cdc-b078-0521f131494c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "177da4ff-3165-4067-9e51-4c93e64bdbdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a48f1c-426e-41b0-bd0a-4459a39cd944",
        "cursor": {
          "ref": "117a87e5-c787-443e-a902-f76c5b5bd652",
          "length": 252,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ec1273be-2a9f-4f56-9d3f-73750867937f"
        },
        "item": {
          "id": "f8a48f1c-426e-41b0-bd0a-4459a39cd944",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1203dd22-d89e-430f-adab-3554f032b4b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bccef916-fa32-463a-a49f-6ee99cc44e81",
        "cursor": {
          "ref": "a0d8ce15-e7ec-46c3-a121-6802249282d9",
          "length": 252,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "71461e36-5e9c-4289-9238-cedb5a649462"
        },
        "item": {
          "id": "bccef916-fa32-463a-a49f-6ee99cc44e81",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "64e65d0c-2846-4858-852d-2353182a4737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb341ca1-97aa-4a97-b62b-807198cbf426",
        "cursor": {
          "ref": "96d0a831-e5ef-4f2f-8127-b2f61ad01935",
          "length": 252,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b0b8ba6a-e311-435b-8393-37b03683b005"
        },
        "item": {
          "id": "eb341ca1-97aa-4a97-b62b-807198cbf426",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f7afa423-3a6f-44e4-91d2-8f2b958627d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 402,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa275df-90b7-4733-8d1e-28bb918ae777",
        "cursor": {
          "ref": "91e5540a-7c67-48dd-ba92-49692ecbe603",
          "length": 252,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e8b07ccd-5f27-473a-a0cb-9cb1f57cc4e2"
        },
        "item": {
          "id": "3fa275df-90b7-4733-8d1e-28bb918ae777",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "83f765f2-c898-4f8d-847d-de91b68083e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31be068c-e695-47da-ad91-1228db6290a4",
        "cursor": {
          "ref": "c8d1a153-c41f-4482-bed2-7a585cd04e54",
          "length": 252,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "620ca14a-191c-434e-9637-e1ac15fcc2f0"
        },
        "item": {
          "id": "31be068c-e695-47da-ad91-1228db6290a4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ade517e1-fbd7-483c-8b0e-2ef48ff077f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 205,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d97fe93-94e7-4a38-b922-789f207b3137",
        "cursor": {
          "ref": "ecbd6209-2d0a-4968-8153-295442d8bcc8",
          "length": 252,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4d3bb31b-8b07-4b44-aafe-48a0f821d79d"
        },
        "item": {
          "id": "5d97fe93-94e7-4a38-b922-789f207b3137",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9c497de0-24d0-42ce-bb58-3127b785d1de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39bcd122-97a8-4a3e-98c5-d898ad6f927e",
        "cursor": {
          "ref": "fa47be8b-f0ce-4ae2-b555-fba1395856a2",
          "length": 252,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "045cab38-13f2-4a52-87a0-474dcb1ba99d"
        },
        "item": {
          "id": "39bcd122-97a8-4a3e-98c5-d898ad6f927e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8196b146-298f-4ec4-bce9-1fa840298ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52a0519-7d3d-4c2b-aad3-70e23987aee1",
        "cursor": {
          "ref": "2780fde0-6ab3-4570-a5d1-befab890e3b2",
          "length": 252,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c33c073f-af02-4620-96cd-19fd32662fa8"
        },
        "item": {
          "id": "e52a0519-7d3d-4c2b-aad3-70e23987aee1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "cc5aea42-52ad-4dac-8bfc-c4decc07e9a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef2a21ce-1f7b-4908-a7a8-bf663a841e89",
        "cursor": {
          "ref": "b080189f-8aeb-4f50-83a3-a4bf4e1b8edf",
          "length": 252,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "498369a7-a208-4cbc-b92f-c4ffecff6b9f"
        },
        "item": {
          "id": "ef2a21ce-1f7b-4908-a7a8-bf663a841e89",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7fbf9886-3b86-453a-b287-9370089bef50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 221,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1800f28-75d2-4ede-bebd-ba9fcb12245a",
        "cursor": {
          "ref": "2db0664b-dd0f-4a16-b3ca-d86dfc684d52",
          "length": 252,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5b700af0-933d-4a3e-9a70-cb9d339d0a23"
        },
        "item": {
          "id": "d1800f28-75d2-4ede-bebd-ba9fcb12245a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c366ab9b-f9de-4497-bbc6-58d860b87f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc14a529-c1ed-48f3-ad9d-432c5aa8f742",
        "cursor": {
          "ref": "c890b0bc-6b95-4671-8403-587ef4eff518",
          "length": 252,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ac509819-e4bd-4015-88f5-f1c6b84df5e1"
        },
        "item": {
          "id": "bc14a529-c1ed-48f3-ad9d-432c5aa8f742",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4f79ace7-dcb9-45bb-b39b-f78be969eb90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19bad694-3687-4fc3-a585-8c3bfd2406d1",
        "cursor": {
          "ref": "1ec9d47b-c588-452a-9ed7-856d8c151741",
          "length": 252,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "36efaa7b-066b-43d4-9720-cf51c2b995f6"
        },
        "item": {
          "id": "19bad694-3687-4fc3-a585-8c3bfd2406d1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "44c8abff-ee46-4755-8277-a98dc608f99f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9e3a46f-5acc-4b14-a8ae-c032d880d80a",
        "cursor": {
          "ref": "e96b0022-35d7-402c-8b4a-2b05f921867c",
          "length": 252,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d2510984-94ef-4ccd-bd23-f342441af339"
        },
        "item": {
          "id": "b9e3a46f-5acc-4b14-a8ae-c032d880d80a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6cb3b3b6-eb63-4d3c-9103-0d73534ff75e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d242399-d150-48ae-9ae0-508b140f3c04",
        "cursor": {
          "ref": "06091647-1bd1-4e7a-842e-ed2983b4fad1",
          "length": 252,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a9161abd-e898-46a5-bd88-322d554c8f5d"
        },
        "item": {
          "id": "3d242399-d150-48ae-9ae0-508b140f3c04",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "cc49c2b8-a511-41d7-ba82-2e70398848f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d60378-1fd2-4ee0-9979-9cb84e4f4187",
        "cursor": {
          "ref": "b66b14fe-6272-4b29-bf49-47e73143c1c3",
          "length": 252,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e154ee8a-ca24-4d6c-b802-f110615e7b4f"
        },
        "item": {
          "id": "f3d60378-1fd2-4ee0-9979-9cb84e4f4187",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c36d8244-795c-4ecc-9f94-d817183ca3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435420fb-e820-4b16-add9-77ab38a0c140",
        "cursor": {
          "ref": "e4b2d60f-5a78-4464-8c2d-434065655451",
          "length": 252,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b6367769-7e96-4ff6-a3e0-189d57e2a092"
        },
        "item": {
          "id": "435420fb-e820-4b16-add9-77ab38a0c140",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "276093af-9c99-4894-b273-a76ec0ca1851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c2fff32-5869-4e98-ba96-ac9a2e99a0ee",
        "cursor": {
          "ref": "196310b8-8dbb-42c9-a1f1-d2fcd80c783f",
          "length": 252,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1f73f8fa-db8c-4bd1-95bf-3075635d7d32"
        },
        "item": {
          "id": "4c2fff32-5869-4e98-ba96-ac9a2e99a0ee",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c9bc06c4-3c4c-4855-a22b-af07ae367ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9685e17f-6422-4ff4-8945-5b487d7a6469",
        "cursor": {
          "ref": "b1ee9f45-4c9c-43b1-997b-054f06049e57",
          "length": 252,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2e645ef7-23fb-4742-a810-cf1fbfd034da"
        },
        "item": {
          "id": "9685e17f-6422-4ff4-8945-5b487d7a6469",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "deff3839-d842-4aca-be04-0e5baaa83475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c666710-6009-46ee-9de1-8003aab8d80e",
        "cursor": {
          "ref": "a6c2a5f5-d760-4e73-8b8e-4acc34c1af3b",
          "length": 252,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "38632a65-c0fe-4975-b8d5-b438d029a1c1"
        },
        "item": {
          "id": "5c666710-6009-46ee-9de1-8003aab8d80e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4f9b6dbc-c3cc-4a33-8d15-476ec0460bf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b9cf5b0-c812-4463-a8ff-3d038e569186",
        "cursor": {
          "ref": "8205a1fa-51ba-4155-a6a4-e784635d0b4e",
          "length": 252,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6980c5de-b366-4818-b132-6a79eee5b69e"
        },
        "item": {
          "id": "2b9cf5b0-c812-4463-a8ff-3d038e569186",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "90cd02eb-bfdf-4b21-89f4-5d07aa6675fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c4cc6d5-d5c4-417b-9e2e-ab6b4934fb4d",
        "cursor": {
          "ref": "f2d4e28a-1eae-438c-9b97-be703ca448a9",
          "length": 252,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3ea42c1f-f092-4f96-ab9e-f9f96dcfe242"
        },
        "item": {
          "id": "0c4cc6d5-d5c4-417b-9e2e-ab6b4934fb4d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "be3dfff2-00a3-478d-b4bb-a47d32af6bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b40f25-ab20-460d-b1dd-d419db1cfc9b",
        "cursor": {
          "ref": "8d32cd37-1ad2-4bf3-87e0-8564d31377eb",
          "length": 252,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "631a2b1f-6331-4bcb-b506-6d3dc204c8e7"
        },
        "item": {
          "id": "46b40f25-ab20-460d-b1dd-d419db1cfc9b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5bba9478-59c7-4bba-955e-3255220f08b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f9f5c0-ec1b-4875-ab00-d5ad1fb749f9",
        "cursor": {
          "ref": "5e3ede94-d7e2-4fd1-b6f8-969fe07bf214",
          "length": 252,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "515eead6-5017-4ba0-ab69-fdbc31f59ce2"
        },
        "item": {
          "id": "b4f9f5c0-ec1b-4875-ab00-d5ad1fb749f9",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "05b4bcfc-a878-4ff1-a323-0200680824fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 213,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbc408b-3ef8-475b-8a25-46f508be3c74",
        "cursor": {
          "ref": "919f568f-2583-4482-8a5d-18602660af7c",
          "length": 252,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8f7e77ff-d617-44d0-841b-c5ad5d767ad6"
        },
        "item": {
          "id": "8bbc408b-3ef8-475b-8a25-46f508be3c74",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3e9d40a7-d258-44db-8b1f-809e9e66b838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191be767-7ac4-4795-ae1d-289af94adee1",
        "cursor": {
          "ref": "50960a73-11d7-4755-8897-9e1ca724395f",
          "length": 252,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "789e987e-fa0a-47b0-8821-28d37b0d959a"
        },
        "item": {
          "id": "191be767-7ac4-4795-ae1d-289af94adee1",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "59897fb5-8994-4fdd-9ba1-b7f658cebe4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd2b165-b47d-4f9b-a95a-dd09febf8f4e",
        "cursor": {
          "ref": "d0225e37-bc03-41cd-9aa2-ca364618fd80",
          "length": 252,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ab9df6c2-f192-4e1e-b28d-42973b6aecaf"
        },
        "item": {
          "id": "6cd2b165-b47d-4f9b-a95a-dd09febf8f4e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "725ec4f1-7e67-4dd0-8198-ed42e1e3d812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a283ba4-a75c-44be-b171-8c4dc84fe4fa",
        "cursor": {
          "ref": "84b82e12-da47-4930-954c-3e19de3b1077",
          "length": 252,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6601e261-3f97-434f-811b-752fe148842e"
        },
        "item": {
          "id": "2a283ba4-a75c-44be-b171-8c4dc84fe4fa",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a63d4d29-1cb2-45d3-8695-86d9b92f269d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad0cb283-7a29-487c-bcf2-1566dc52998a",
        "cursor": {
          "ref": "7e7b6e2d-0871-4449-a2b9-782647e8bafa",
          "length": 252,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ac05c8d5-a25d-4c3a-9f62-fabcf94130f6"
        },
        "item": {
          "id": "ad0cb283-7a29-487c-bcf2-1566dc52998a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e383204f-f6f0-4732-9e95-fabab576251e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81bf6ccc-a96f-421b-812b-2f1d6dadf078",
        "cursor": {
          "ref": "d990b949-ff9e-46e2-a97b-f0c7ce244277",
          "length": 252,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cb354165-c2f6-4578-b9dd-2a22c36033fb"
        },
        "item": {
          "id": "81bf6ccc-a96f-421b-812b-2f1d6dadf078",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "dd789e79-eaee-4b31-a46f-5b0af323f648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc8f4d9d-f3ac-430d-9c5a-ea227ff89ac8",
        "cursor": {
          "ref": "687c32f9-2de4-4c6f-b31b-43507781d6a4",
          "length": 252,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "40c73b91-beda-4a39-b630-cba46bd7ceeb"
        },
        "item": {
          "id": "fc8f4d9d-f3ac-430d-9c5a-ea227ff89ac8",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1257acf8-64ba-41d7-8149-863c361dc991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16df05a-e061-42eb-8f38-53ec7b3f2bdc",
        "cursor": {
          "ref": "a3c567b4-aea6-4206-bef1-46798a1dcb06",
          "length": 252,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "57bd2111-f687-406a-bca3-b231c18c4cf4"
        },
        "item": {
          "id": "f16df05a-e061-42eb-8f38-53ec7b3f2bdc",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0ae7b982-c184-4c97-a8f5-466799f98971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee1518b-c37e-4e93-a8ac-ce2619294026",
        "cursor": {
          "ref": "f4981b22-3cd5-4c16-8a41-c1dd47681b4c",
          "length": 252,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "31fc128c-6295-4acf-9b53-bd4a362251fe"
        },
        "item": {
          "id": "8ee1518b-c37e-4e93-a8ac-ce2619294026",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a0d97371-f09c-4872-aa96-a91dc91a9ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 217,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51759e47-f827-4162-b4ec-255fda73ddcb",
        "cursor": {
          "ref": "07b95798-bf86-45bd-ac25-feab20c3e152",
          "length": 252,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "01b298df-2d83-4445-b26d-18871a80d5b6"
        },
        "item": {
          "id": "51759e47-f827-4162-b4ec-255fda73ddcb",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "80e38391-499b-4577-ad6a-760a06457062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9608a116-6cde-478a-ae4e-59700b4bf18c",
        "cursor": {
          "ref": "31998273-bb3c-4cfb-b1bf-ce66645b2749",
          "length": 252,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3ddcb411-c2ae-4cb2-9fe1-3de712f9cd74"
        },
        "item": {
          "id": "9608a116-6cde-478a-ae4e-59700b4bf18c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e73a0178-6d54-4b2a-8e34-893be7f3f82d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab83c114-b0e1-4be3-9f00-f68d81f1c209",
        "cursor": {
          "ref": "1e16ea39-50de-4081-8c19-7a7fb356bf95",
          "length": 252,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9867c1c3-ae50-4fa7-ad66-9444831893b2"
        },
        "item": {
          "id": "ab83c114-b0e1-4be3-9f00-f68d81f1c209",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "32d9da0d-ec3c-458f-bfa1-45a4f9cc6336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a745d5dc-68da-4112-8c26-e4ff212cd890",
        "cursor": {
          "ref": "884e07e0-952c-4076-8252-6e342e72908f",
          "length": 252,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4c97e294-36cb-4ee2-8828-c618b951d7a5"
        },
        "item": {
          "id": "a745d5dc-68da-4112-8c26-e4ff212cd890",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9ac2ee8c-fddb-4d02-a169-dfabd622134b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d35458f-4741-4a45-8ba0-3b42d0a10bdc",
        "cursor": {
          "ref": "a4581ced-b0e9-4969-882b-26350ee22e6c",
          "length": 252,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1ff6135c-1842-4585-9b33-042cc7c61abf"
        },
        "item": {
          "id": "7d35458f-4741-4a45-8ba0-3b42d0a10bdc",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "099d9ecc-7900-42a8-b01e-fa2e87a6a05c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e23c69f-8e19-4110-80c9-38a79fd074cb",
        "cursor": {
          "ref": "dcce8085-3d6a-4944-bbcf-9442dadbdee6",
          "length": 252,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "1bf93846-cf22-4b65-891f-d82a4d2a76e2"
        },
        "item": {
          "id": "3e23c69f-8e19-4110-80c9-38a79fd074cb",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2f63b33a-6308-4567-bf1e-d60c5f35d75c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40c85ed-fee5-49ce-9687-f9944f718ad8",
        "cursor": {
          "ref": "420d5cd4-522d-4b5e-b1a7-ad66094f68d9",
          "length": 252,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b7bbf036-70cc-4a57-84f8-11ac4ea6010c"
        },
        "item": {
          "id": "a40c85ed-fee5-49ce-9687-f9944f718ad8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1f43405e-e0fe-4f5f-b1a3-aeccf9d60f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1ac64f-cc77-46c1-b357-042ec5a74142",
        "cursor": {
          "ref": "1b6845bf-c510-40c5-9b21-a51b76705ada",
          "length": 252,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "56a5cb06-4349-45ae-843f-b00068596d61"
        },
        "item": {
          "id": "fa1ac64f-cc77-46c1-b357-042ec5a74142",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "110ea6bb-5b70-4ae6-adc8-a7519ea9d1a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5d3739-dc63-46e3-820e-404bd37227b1",
        "cursor": {
          "ref": "f67178ce-108a-418a-8e29-c31ff23d6310",
          "length": 252,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "32e63e49-dd61-4c95-9e81-23999777a132"
        },
        "item": {
          "id": "1a5d3739-dc63-46e3-820e-404bd37227b1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "047441f8-e7e8-4c39-9114-256485d2f81e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da11d400-d52d-4700-b8ed-9ad3a227b5f1",
        "cursor": {
          "ref": "c8807d11-2515-4573-a4c0-7895dcab40df",
          "length": 252,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "cfcdac30-7023-4fba-a5ac-c97cd918254c"
        },
        "item": {
          "id": "da11d400-d52d-4700-b8ed-9ad3a227b5f1",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7396000c-12a2-4af6-9e26-01e5144a5706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee390b33-9281-48a7-b346-dabb13dcdac1",
        "cursor": {
          "ref": "596af0cb-dbbe-4626-b40d-1e6839ca7468",
          "length": 252,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f25b2a6b-7ec5-416f-bec6-c5a431d5290b"
        },
        "item": {
          "id": "ee390b33-9281-48a7-b346-dabb13dcdac1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "09baeb70-1136-4396-b895-c52c003c254b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51070cc6-6654-48c8-9d76-9c548caa3489",
        "cursor": {
          "ref": "8602d4cd-1d72-4b6b-99d4-519092b85e9d",
          "length": 252,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f7cc0c2e-66cd-4600-b13b-404920f5f1fc"
        },
        "item": {
          "id": "51070cc6-6654-48c8-9d76-9c548caa3489",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "dd5f5565-b10d-402c-a4c6-9962eb688a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b12c04a-5950-4625-b64d-9611eef68601",
        "cursor": {
          "ref": "6608fd17-a1f1-47be-8ffa-9cdf5917f019",
          "length": 252,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "7fff3e10-6672-446f-8865-91b60c71a1dd"
        },
        "item": {
          "id": "9b12c04a-5950-4625-b64d-9611eef68601",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b8aa1bd9-8d62-4f65-a073-bc5cd35a41f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14202bdb-ac10-4e55-97e0-467125f6d28b",
        "cursor": {
          "ref": "91381f21-b052-42f7-9086-a62493ce20cc",
          "length": 252,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "065d3498-6853-4f0b-bf16-b3df58ed00a7"
        },
        "item": {
          "id": "14202bdb-ac10-4e55-97e0-467125f6d28b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b920d4a2-d46d-42bc-8917-b3f6c57a93cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd9da1f-27eb-4055-8832-de1123146f5f",
        "cursor": {
          "ref": "e735ce17-b7d8-4a17-9aec-d032dbd537d8",
          "length": 252,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f06cabb9-144f-4fdd-ad4b-f28bea74e775"
        },
        "item": {
          "id": "fbd9da1f-27eb-4055-8832-de1123146f5f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f43104d7-2aa7-45e7-a574-e365bd2d6aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c555d31-d9dd-4a45-afda-f5cd530f1fbd",
        "cursor": {
          "ref": "79f3c618-f15e-4e1a-a688-09f8e8c62d51",
          "length": 252,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "979c96ef-17b8-4f01-a9a2-cf38e6be8f3e"
        },
        "item": {
          "id": "6c555d31-d9dd-4a45-afda-f5cd530f1fbd",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c6d83684-8c3f-4e12-9fa4-76c0cb0d3db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ccdbd2-213d-43cf-96ce-41d442067fc0",
        "cursor": {
          "ref": "0955f48b-c329-4703-981a-7f51fd403e25",
          "length": 252,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "01d0d0dc-4452-4109-96ce-9f3b5f57b9a7"
        },
        "item": {
          "id": "d4ccdbd2-213d-43cf-96ce-41d442067fc0",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "893e907c-09e7-493b-af0d-8fd0cc503812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36295da-7659-419b-95ef-57951797f16a",
        "cursor": {
          "ref": "6cd8d26a-23e5-4caa-a8ac-b4c09b40743c",
          "length": 252,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "728a843e-7d80-408a-92ba-cd588107c5a7"
        },
        "item": {
          "id": "a36295da-7659-419b-95ef-57951797f16a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f50d8062-dead-42b7-a7b4-98fc60adfc04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84831f35-1cb6-41e8-9a67-9376c92e626c",
        "cursor": {
          "ref": "360d7c62-9987-450d-a56f-8ddd7008c09a",
          "length": 252,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "71c7a662-27e2-4c75-a750-1478d5cb08bd"
        },
        "item": {
          "id": "84831f35-1cb6-41e8-9a67-9376c92e626c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d23897fe-6a51-45b5-8b30-08542e487a2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3034f4d-0d93-4f7d-bf51-49794478f23d",
        "cursor": {
          "ref": "c27bb673-1d0a-46b5-b9d4-88597f3d6f15",
          "length": 252,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "320dcad7-a1e2-4596-ae0b-cf325eeff8c4"
        },
        "item": {
          "id": "b3034f4d-0d93-4f7d-bf51-49794478f23d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "101f92d9-f04b-43d1-89e3-38a56c3399bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c3bc6e-c843-47db-9ff2-234aa7b4e1a2",
        "cursor": {
          "ref": "26684906-97c9-473e-9de6-9c1607708877",
          "length": 252,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b3a3dba9-5312-4e3a-95e5-5b7acc9a9528"
        },
        "item": {
          "id": "a8c3bc6e-c843-47db-9ff2-234aa7b4e1a2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "83500ff3-39a8-4cc7-9771-58254d9dfc26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4963c2f3-4d36-43f9-b248-d64b3a7b1c3c",
        "cursor": {
          "ref": "b9c12caa-00a4-4b40-b5cc-dadee396f434",
          "length": 252,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b3f62368-d9c7-433f-8f65-24cc89f019e9"
        },
        "item": {
          "id": "4963c2f3-4d36-43f9-b248-d64b3a7b1c3c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "fa09dadf-638a-4db5-8909-54aa9c2955d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba2c1fcf-7b12-42ee-9cc8-ac8697a43167",
        "cursor": {
          "ref": "43ac35d4-0f3f-4af2-9954-ca305da480c8",
          "length": 252,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "470701e5-8f09-4107-84d3-f2b106ee4dff"
        },
        "item": {
          "id": "ba2c1fcf-7b12-42ee-9cc8-ac8697a43167",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0e4f27a4-a058-4a37-ac8c-cf38448a44a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "423b3f6d-b292-4d45-9efd-70dbd8c6ecf2",
        "cursor": {
          "ref": "e2698513-fc57-4eef-ae7d-40390bb0fea7",
          "length": 252,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0c3b26ea-8e77-4c0e-a2f7-2d851506dcd2"
        },
        "item": {
          "id": "423b3f6d-b292-4d45-9efd-70dbd8c6ecf2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "acf2910d-2d3b-4690-8c98-b06b147bace9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e27beb39-6465-40d2-ba56-1a029773ac00",
        "cursor": {
          "ref": "5e677063-1f3b-448d-9154-c4067fcbaf8e",
          "length": 252,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "37859ab9-2ef2-47ce-bf6d-1678d694f980"
        },
        "item": {
          "id": "e27beb39-6465-40d2-ba56-1a029773ac00",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "553694c7-db18-4cb7-95a1-872661a667e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95c64a1-3ab9-4017-aab5-a80675a6492e",
        "cursor": {
          "ref": "27466b2c-b748-49ed-bdcb-091d8decdf0d",
          "length": 252,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f549bd6f-2191-4f29-a479-465db02cb6cd"
        },
        "item": {
          "id": "b95c64a1-3ab9-4017-aab5-a80675a6492e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "63717702-f550-4912-8fe1-70b7bcd7496c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8089af4-ba06-4596-82c8-d05eed06c600",
        "cursor": {
          "ref": "15fb11fb-a267-4ab1-ac45-8a41f9f9569b",
          "length": 252,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "dce9dfc8-5246-42fd-b9d1-591f94aea760"
        },
        "item": {
          "id": "f8089af4-ba06-4596-82c8-d05eed06c600",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6128669f-1832-4eab-95a0-0aa2b82f5084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4238431-a392-4301-89b0-bfc0b8d10838",
        "cursor": {
          "ref": "c1d162c0-f565-4566-af10-068886f38731",
          "length": 252,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "fffc383f-a17b-4b0f-ab67-3dea213defe3"
        },
        "item": {
          "id": "c4238431-a392-4301-89b0-bfc0b8d10838",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5004fda5-08fd-4bfe-a57e-5365d0117afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e34316a-2bc6-46b7-aab6-460847e84d97",
        "cursor": {
          "ref": "a8a8f34b-49ae-47d9-b6a2-ea6930541ca9",
          "length": 252,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0a73361c-f0c6-41eb-a4f9-24030dc31c9e"
        },
        "item": {
          "id": "2e34316a-2bc6-46b7-aab6-460847e84d97",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "cef5b3c3-1587-4290-ac18-8ff2e2440eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d52e37-0443-4a52-9347-a0ad00bb2937",
        "cursor": {
          "ref": "3cd0d02a-d3db-401b-a66a-a5300f45a1d7",
          "length": 252,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "fc9c5ed5-f137-4b6d-b6c5-9ae89387cb44"
        },
        "item": {
          "id": "e2d52e37-0443-4a52-9347-a0ad00bb2937",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "9b49eccf-2f2d-4a70-ae04-00305cac695a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05da4ef-6eb8-4e69-9938-e83b395e8c62",
        "cursor": {
          "ref": "c75ad055-98fd-4712-8b63-225e3715898d",
          "length": 252,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "aaee53d4-8a4e-4184-b509-334bef8750e5"
        },
        "item": {
          "id": "d05da4ef-6eb8-4e69-9938-e83b395e8c62",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "689590b2-674b-419c-9dfb-ee6039426d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a47067-2655-4285-b1e2-2fcee19270cf",
        "cursor": {
          "ref": "33d91874-3de0-47f5-beea-8271a95d7eb6",
          "length": 252,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "004e895e-e341-4031-a073-5c2db5ecdc27"
        },
        "item": {
          "id": "61a47067-2655-4285-b1e2-2fcee19270cf",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e9ff7fdc-7127-440e-bbe4-078334ebdd48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c12eff-e139-4b30-9b3d-f79da7961e1e",
        "cursor": {
          "ref": "d368d85a-667d-4bcd-aa39-d493f15893f1",
          "length": 252,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f6b70bd2-eadb-4d07-8dda-80e7ad881113"
        },
        "item": {
          "id": "76c12eff-e139-4b30-9b3d-f79da7961e1e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1e89ad21-6a5b-4896-87cd-aed85608f6dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c4f57fa-01b3-4e1b-863b-57fcaa50dd41",
        "cursor": {
          "ref": "65218306-27a4-46b4-9dc2-f2f89462d13a",
          "length": 252,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "32d684c3-967c-475a-a3a8-da41e9cf951d"
        },
        "item": {
          "id": "8c4f57fa-01b3-4e1b-863b-57fcaa50dd41",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1e5dc1a1-a9a0-4142-b971-dd5f85efbb93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d39f8f-3fff-4284-83e6-298fcd9f7f36",
        "cursor": {
          "ref": "a2eb67d9-1282-4f4d-8af4-31f78faa9a35",
          "length": 252,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f17ca5ec-47e5-4065-a850-b800bd3542d9"
        },
        "item": {
          "id": "38d39f8f-3fff-4284-83e6-298fcd9f7f36",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a2b3f7a9-3193-4de1-914c-e0a01c82886f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "121ced09-4854-4893-ba4e-4f5b1a21fba0",
        "cursor": {
          "ref": "2122c036-df61-4042-9edc-5ef02efcbd89",
          "length": 252,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "65e6f233-9348-4468-ab40-3d50c252c1d3"
        },
        "item": {
          "id": "121ced09-4854-4893-ba4e-4f5b1a21fba0",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b9766cea-e4d2-47d4-bc1a-987968aca57b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea76b07d-2e45-4197-a811-1e67d1095a23",
        "cursor": {
          "ref": "abf7b88b-2a4e-454b-8d36-7e55657e7b3d",
          "length": 252,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5bcf6850-cc59-40e7-a674-eecff37b6769"
        },
        "item": {
          "id": "ea76b07d-2e45-4197-a811-1e67d1095a23",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "be117998-c400-46c9-98f6-cd1a351bea2e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 43,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2a030d-52e9-44b4-97cb-91e635af2345",
        "cursor": {
          "ref": "1f8fd4b6-9f8a-4659-9a91-0356af2fc4f0",
          "length": 252,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4955158e-5160-479e-aba3-288c216f81c3"
        },
        "item": {
          "id": "da2a030d-52e9-44b4-97cb-91e635af2345",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e3859550-50b7-4b70-94c2-e1ef0ca1e5e7",
          "status": "OK",
          "code": 200,
          "responseTime": 280,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2bde71-e940-4194-9cd1-5dc383cf678b",
        "cursor": {
          "ref": "f79c3a73-e564-411d-89cc-6233fe8a2831",
          "length": 252,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "bb0c3839-f7d8-46b2-9cd8-4aed79a034f0"
        },
        "item": {
          "id": "5e2bde71-e940-4194-9cd1-5dc383cf678b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3649e879-d43d-4677-8358-3c9d676f4899",
          "status": "OK",
          "code": 200,
          "responseTime": 429,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb1cf67-3d9e-4a07-9572-25fb9dce3eb6",
        "cursor": {
          "ref": "95d435dd-3a6a-487f-ba98-ec1d8ac8f725",
          "length": 252,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f3580ffe-9faa-43b5-918f-cf5175f59ebb"
        },
        "item": {
          "id": "5fb1cf67-3d9e-4a07-9572-25fb9dce3eb6",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "949bfba3-e467-4b94-b8d0-0b0f077619b3",
          "status": "OK",
          "code": 200,
          "responseTime": 700,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9c23d5-3e25-4c4d-8abd-9ae960ba60e6",
        "cursor": {
          "ref": "d7d268b7-2114-4437-a033-5f60abffd18b",
          "length": 252,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8c36377e-dab4-4e9f-a3e1-16a96391f490"
        },
        "item": {
          "id": "2a9c23d5-3e25-4c4d-8abd-9ae960ba60e6",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1cb5c9ab-3d99-4215-8870-c12bb0ce9bf4",
          "status": "OK",
          "code": 200,
          "responseTime": 425,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4749e7-acd4-480e-9e6c-ea184ed5948e",
        "cursor": {
          "ref": "a27618de-265d-4def-bc6c-19e883883e6e",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bc1608bf-9dae-4e20-ad1b-1c4d193c50d4"
        },
        "item": {
          "id": "9c4749e7-acd4-480e-9e6c-ea184ed5948e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0b0bee58-3401-4f14-a264-9ee38e8d487e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4749e7-acd4-480e-9e6c-ea184ed5948e",
        "cursor": {
          "ref": "a27618de-265d-4def-bc6c-19e883883e6e",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bc1608bf-9dae-4e20-ad1b-1c4d193c50d4"
        },
        "item": {
          "id": "9c4749e7-acd4-480e-9e6c-ea184ed5948e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0b0bee58-3401-4f14-a264-9ee38e8d487e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4749e7-acd4-480e-9e6c-ea184ed5948e",
        "cursor": {
          "ref": "a27618de-265d-4def-bc6c-19e883883e6e",
          "length": 252,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bc1608bf-9dae-4e20-ad1b-1c4d193c50d4"
        },
        "item": {
          "id": "9c4749e7-acd4-480e-9e6c-ea184ed5948e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0b0bee58-3401-4f14-a264-9ee38e8d487e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376ddd2e-9458-4000-9a98-dd3f32763261",
        "cursor": {
          "ref": "59f6ba34-1790-4f87-ba10-d890f0642ff4",
          "length": 252,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2a0da6a4-84ec-4c04-8fbc-788800b7098b"
        },
        "item": {
          "id": "376ddd2e-9458-4000-9a98-dd3f32763261",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "e91e6264-734e-4e8c-9e72-13310c252310",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 43,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b938b3d-7401-4e70-9ebe-dfd9ea9c5ed8",
        "cursor": {
          "ref": "3f3bf47e-9716-4735-ade0-65c854bacb09",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5fb6380c-1352-437e-a22b-5e9933d3782f"
        },
        "item": {
          "id": "1b938b3d-7401-4e70-9ebe-dfd9ea9c5ed8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "910aacba-d13c-4b30-b7be-798b3404dc14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1b938b3d-7401-4e70-9ebe-dfd9ea9c5ed8",
        "cursor": {
          "ref": "3f3bf47e-9716-4735-ade0-65c854bacb09",
          "length": 252,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5fb6380c-1352-437e-a22b-5e9933d3782f"
        },
        "item": {
          "id": "1b938b3d-7401-4e70-9ebe-dfd9ea9c5ed8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "910aacba-d13c-4b30-b7be-798b3404dc14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "11d02357-8e06-4336-a2d0-7ac690735c75",
        "cursor": {
          "ref": "c728825e-9b93-44aa-baa3-143213a62a55",
          "length": 252,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "57b0d6be-3f69-472e-9469-625cd3ab1859"
        },
        "item": {
          "id": "11d02357-8e06-4336-a2d0-7ac690735c75",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "2860a3df-21dc-452c-b17e-5c989209119a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2f62c475-59b2-4d3b-8e6d-cc4349dbcd45",
        "cursor": {
          "ref": "726c577e-ceca-43d1-bc8d-0289eeeb7cd8",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "da8e0e22-09c6-4c40-b6a6-6f8a4729ae01"
        },
        "item": {
          "id": "2f62c475-59b2-4d3b-8e6d-cc4349dbcd45",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0b32a662-442e-49de-b1ce-b73d71650d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "2f62c475-59b2-4d3b-8e6d-cc4349dbcd45",
        "cursor": {
          "ref": "726c577e-ceca-43d1-bc8d-0289eeeb7cd8",
          "length": 252,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "da8e0e22-09c6-4c40-b6a6-6f8a4729ae01"
        },
        "item": {
          "id": "2f62c475-59b2-4d3b-8e6d-cc4349dbcd45",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0b32a662-442e-49de-b1ce-b73d71650d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "d78ea778-e69d-402f-bcdb-8ca60c02709a",
        "cursor": {
          "ref": "f1fdbbb9-7f3b-4714-9f70-d5be0c37ed25",
          "length": 252,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "4b165ed2-29af-49f2-ab17-aca47ad47e5e"
        },
        "item": {
          "id": "d78ea778-e69d-402f-bcdb-8ca60c02709a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "b492c3d5-146d-49ed-8b86-d1aa36fc276f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      }
    ]
  }
}