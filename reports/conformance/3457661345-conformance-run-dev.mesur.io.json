{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "043e0cee-8b30-4d60-b1f0-ae374a021fbd",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f4f31de6-8497-49c5-aa5a-47ff4872e45b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4bc43d71-a1dc-4779-802a-28b5594d1118",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e77cc657-ff5e-4ebb-ac7c-db579cb331ca"
                }
              }
            ]
          },
          {
            "id": "c60fa381-cb32-4a56-b07b-10ebc520784a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ec160b46-1948-4cbb-8a14-69d9263cf11e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cb868b4e-35af-476c-b195-7054f14a9c98"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7a4a1275-913a-4600-9464-46de17e2b699",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0e81b6a7-4a6a-4a6f-aa2b-3cad4322c37d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "53d8f058-2084-4202-a1b3-821c6da933f1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b5c03553-6076-4f33-b7b2-cbde8cf88b87",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "48398106-906d-404d-ae6d-394a911991b2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3370b143-24e8-46ce-94bd-c2a43e8298c3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0cdaa6d1-1def-439a-94eb-e9b6ebe89e50"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8a0bd64a-ff1b-4c10-a7e4-c5df481c41f7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9ed5999d-bc56-46fc-96d7-248e278af572"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "452b489f-ad1f-4b5e-8eca-79c318696cb6",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d27b6852-df48-4fc1-884f-d84817531b13"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "09d2c6fe-ca0f-4e83-b9b4-f94f35a7108b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "951a1e47-bf9e-4220-8ea5-3e0079ac4a73"
            }
          }
        ]
      },
      {
        "id": "dcad653e-48ad-4f5c-8cb0-49e1223ebc21",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c06541c5-0f22-48a6-964c-3ff00605e54f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1324b309-59ea-4fd3-83bc-7078c140de34",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "87ffe1ac-b747-45f6-929f-65f048e315c3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab519ae0-09cb-4954-9f2e-399523cad7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1819153e-e176-4acd-85da-9d62db118d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e28c230-1591-4468-999a-821c3209382e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab72872-0371-428e-8884-011a8af66e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5bb3150c-3ba9-47cb-8cc6-d0ff8a40af1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc083aca-dc38-44f3-8cfa-8ce21ba1058d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1752cc-7a38-46b5-995e-cd619d6b9a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c302d532-4fcd-4296-b82b-70c2a021463c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d01ccbf4-cfba-43c7-9878-798e79469cbb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d32f7609-0d2b-4ca9-b40c-3b7a57db10d3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a1d2af-b1a9-4288-a9a2-51406371a4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4938c77a-790e-4285-9c5d-2e831897971f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8693e5fa-1754-493d-baf7-285086b5f698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c7a372-6201-4954-97b5-f38bf966e201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "492510ae-f6cb-4223-8568-477c23bafa22",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2418b539-5639-4143-9ec6-c7ad47d022e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d412033-0a08-4cd9-bc11-0697fc51c6f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ad593d-9f6c-4327-a35c-e9722fb84c4c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "3c324885-9c5a-4b98-9168-45df1d7ddda5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fecccfa3-3635-4c17-8897-1e7de4043a18",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b62af661-aeaa-41d8-8546-84e7cc59d039",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf14dbb7-e413-4ebb-811b-27b219753f34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ce0faa68-d058-4324-a2bc-e0ae3ffa1138"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1ca1f48-0bc3-49d0-b63a-aca5cb14d7cb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "7f3dd4f3-db29-4483-a7c4-2972ce066477"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e386b365-a069-4d48-8aab-8a4ed7afc158",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5991eed7-9637-4c08-9fe6-0e9a9c4d32d2"
            }
          }
        ]
      },
      {
        "id": "4b84e769-9a42-40c3-bfd7-9396032b1148",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e0ae958e-8435-4612-a652-9e35ebeb5282",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e24dcab4-e8e1-4bdf-b675-e72beeadda79",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9c9a3014-a162-414e-8dfe-5d1ed53d5f82",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23628adc-f29d-4a35-bd83-ac58c5fcee2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e380c1a-4408-4b3c-89f2-0127d1ba8238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2660ea-d3db-4d66-8b78-925843a97374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4eb06b10-438e-46b6-8d4e-6ca585d60fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db58a7b8-a195-42bb-bab4-7be575496624",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a27c559-ac0a-4bfb-99fc-a29b2392d3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dddd4eb7-67bb-4ebc-9db0-d24d5b56821a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d1edcb-4707-4103-bfcd-6f0b7bc618b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00f033f6-cc64-4296-80a5-51155ba300bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bf4c111-e334-4f9d-a535-c113eaf9f804",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75cf5c18-ce61-410d-aeda-161e040fd1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ae48875-f833-4795-91c0-04c4b0a9f7c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6265bda9-96b2-46f9-8aa6-49ba285f8fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9106ada1-11eb-4657-881a-83527565fcda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5767b4c3-e030-4140-9b84-ec425b98192e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ca22ff-643a-468f-b5b7-a63935d75f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b698c368-f653-4bac-854d-59e1986a4467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47187130-da89-4607-918c-3bc24be5a22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47ce2066-7e8b-4a17-b9f2-1169fda8da71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87dd0b6f-3813-4d68-ac94-6acd805a42e3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "932fbb46-1705-48d4-88b5-2dc16883cf56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0722977-acad-4254-8eef-3e972f195033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a921dc1-95b0-4b91-9e7a-050827048c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c4ed3fc-7fa4-4406-b345-98626990748d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89960ef-33d1-4df5-8af9-eb9d23280635",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc081f7-d050-421e-8692-9c5ce8835711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50173009-8e49-4237-b55b-74f4a50d6886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96079551-ce55-4230-9084-1afd28302600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9709afb-56c6-4b65-b070-4854f226a129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c46ca927-cd21-4672-a112-6df300111b97",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3e34cb-40c8-4d71-a946-0092831f8be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e599dc8b-281d-4564-a72c-f6c6c6967bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a4b47b-e97f-4d5e-8658-5e8d88d6438e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96a7fc3c-95e0-4d4b-9f0c-591221979f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44b67cc-7bb2-4dbf-bf43-5392eda8047b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "957121b4-f5b1-437c-a7cc-786cf351783b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32e41cc9-0197-4958-96e6-e460d4d03f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82aee30-696d-47c3-a32e-8cce3b80d498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f96fb3da-c748-4d8d-9c86-edc85ba407f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c4b17b-02ed-4b4b-b830-5ba485da3fa7",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4945bfa0-dc5e-4b12-bcf0-b6b3f553c1c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27dceca7-fa4f-4d04-ab64-d0757642c7cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8c4472-5a6b-4e91-8f48-08fa79fd68f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "714205f9-a844-4600-a38b-19e3d6a89c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cd711e-9034-443b-92db-36c8f8c5360f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a4c3fa-db7f-4c67-b30c-3e6a7683a65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8d57f52-24cc-46a7-8b9d-72e940ea6198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f5afa9-36f9-4c19-ac81-d3aaf83a3d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fed5cddf-5fbf-43b7-8f5c-885d4586cc4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72083396-361d-479d-a061-e728d8d74d29",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d352f90-afc1-4115-bdcd-1c0bd12cbeb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f46009fc-fe88-47f7-87db-7ca363a4632b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12e1a4e-6660-4ddb-86d2-8a8e2082f257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05d57ac5-9e84-4635-b43d-bb40ad8b4f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f207de6-9c95-4590-ae15-efd68e1543aa",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa805bce-b058-4d47-a1dc-eda106e855ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "896dfc2c-d1d9-4fb5-a1f0-ff7dea4c1a99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7da9f6-46be-435a-8a27-655594a3398b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09475477-953d-4392-8033-b2133f7a28c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68f1cfe-a8f8-40b2-899e-ddf55ac2a73c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e324312-e0ef-4473-b5c3-9b8ca797431f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99f62bb5-5e07-4626-af02-577fd661414b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce12b0b-3e31-47bd-911d-bd0d4bd412fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6007cf50-bdfe-4572-8345-e95dd9dbda16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25561a43-ae6d-4740-a67b-baade818143a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b187508-92a3-4766-a96f-9ea12d6d3bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c66b6e1-afe6-4af5-a1d7-443c8bc32520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28683311-0765-427f-a27c-efa1f786a847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cccf2ba9-a5de-4345-aa79-ed1b381431aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1233f673-819d-47dc-9a59-4bb755e2a6f2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfb6133-12bb-4bd8-9ac3-4f750b0c9ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d706eaed-dd3d-4f32-ae73-78a171c49f8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d04f413-dea6-4d42-ab83-90bcd336a531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f91d534-5e25-40c7-9ebb-34ae8782de0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41599867-9d5a-4468-ba18-09e2bcd39102",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250365a4-96c1-4f5b-bc36-c5257b178894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d56ce4a-7445-4fa2-a051-fb2294c6ddc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9fb794-1d74-4df1-bb11-90889405bf41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3044f70c-ecc5-4a6c-b3bd-686653eecfd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b925fe4a-0974-403c-b969-22b67da9eeef",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b71c58a-269f-4deb-b759-def0994a0bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68eb0323-d48b-4688-bebd-04847e896f83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92264635-a1b9-4372-bc04-3068a0a86021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f60096fc-ed6f-4d94-9ba1-745b948c568e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aefb95a5-eca6-49a2-9f2c-0fba138d1f59",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fecdd448-2e16-48d9-877c-cc0549e72c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dd495ca-0690-4cd9-87bb-413cf58c7194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df93eb3f-0ab4-4b04-a3d5-652755a35af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1680676f-2952-4b2a-9412-02488a1609e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a448839-8621-4a1f-8b7e-ce3837459bbf",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c070207-6181-4310-ba8d-a12270d00ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bd63402-e631-478c-b03a-005520bf185c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6997cf-adf7-456c-aa00-685005318b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "290ad934-5cb3-43ee-9dfe-8dae77bea1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d93876-4006-403e-919b-df9351d1cae5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0d18eb-a51a-45a6-b751-a30b1a03ac74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d68193-44b0-4dd3-a292-5512065a4c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd56e4a-192e-4e67-89d7-7459921f411f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ceacd822-1c4b-4946-8538-90f3dee67039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd3d2b4-c2e8-4a31-a74e-57c51563e8ea",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cea69c2-9e26-4f7d-b8eb-e5d6e4323c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e88b824-2ee1-4e07-9e0c-c6938a3f2e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba317ab-162e-48b3-92a1-10343b465873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75016cdd-2848-45b6-aee8-b068d964d8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9db302a-b38e-4353-ae4c-217e94a78772",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "284478ac-d7dd-4ef3-8527-4e2a7e483468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dfbd82b-fc5f-4b6d-9411-d02317334e7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ccb31b-f5e3-41bd-aedc-24a4e1a219f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "422ff79e-a0b6-4fda-a381-6a1faf53a5f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c2b14a-27c8-4c60-9f36-843ecde4548f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab28385-16b5-4151-a4e0-67f2444796cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7a2e36e-86b2-4270-994c-1a77c4be3509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f085b543-3eb6-4abc-90ae-fb223726a5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9c0c75ba-f31a-4e13-9e01-f4f3d4be50e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2923f8d0-6a70-4246-af81-50701cd7f70c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9e493e-5e31-4394-a342-79356a6400d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31649cb5-afe0-406b-b4eb-eff057f6755f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010f1979-17ee-468e-9188-4505a17161c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b9ba897-2c91-4e95-9934-e4630a1bd6c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8003b9de-c7b0-4597-b042-f9bb13ca5bd9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59aba39-3815-4f09-a802-36fc87d9568f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66bd74a-7382-43e9-8d4b-789b26e7a901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa7b303-e9dc-4b74-8455-812605679ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2345b3d-937f-4e7a-808e-c19a48c5a644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7defd8ba-3e04-4cdd-895f-6cdd89e4f551",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9049ff46-a918-41e6-b153-76ee0751c3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "344396f4-2ddf-400e-875b-f5ac054e9ab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6c1416-b898-4ae2-878c-8a7e7a9060f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d45f8b2-2231-401a-8c82-0e5c0a36f1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e148ce12-3ba7-4366-8857-cde966104408",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7895bdec-5510-4433-b904-71c459dc7001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10ec8df9-3643-4fed-9fa8-d31b38c41462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e767af2-ff3d-42c4-920f-5a687cb9f0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e1d4f1e-08e2-4a93-86d4-135cb03ac495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2403f5e-f3ad-482b-a823-255646e1f44f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf45143b-4a82-4548-8852-8cfd8c652e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2097a05-7d1e-46c8-947f-e680e5fbfc90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a01339b-7396-42cb-b35e-64d02e1d7484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd2d14b9-7abc-42fe-849d-814cc6188324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8e5a36-8b80-4cc4-8e60-c764353c2499",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67e56f1-95fa-4ef2-aa6c-2b98980d671b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27561f03-d316-4e13-9498-ba362aec6500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cfc1a81-e424-4450-b8fd-b51bfa7b2875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e211c69b-2cba-40bb-9d8a-d9b6d3d65b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a07723f-0b70-408a-8d25-8f2cf18b67a7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f77ab4f-af12-4a50-b937-a5f1ea4d25e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3c990af-0a08-4dd5-8c13-d11f66f7694c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef73267-c651-40e4-a28d-ab0bf876d15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6439f0f-6b23-4773-8ec3-7e279bfca6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7820d76a-3ee1-4b64-bb0c-e8af5a10ebd6",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3922d4a9-04fa-44b2-be7e-dc1222a74acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e33c14c-c15b-46c8-b319-2f650b4b324a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66cb93a-42fc-4822-a4ec-f52f18b0076b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d649551-76a7-4804-9d19-abdfd7ada824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7328d89-702d-4af1-a5c4-dd010218db27",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f6afee-d038-4505-858b-2d87cb2ce8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecaf95e5-1cae-4f7e-bf1e-93f5a097933e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec564f2-dbdc-4636-8246-bc798b2874e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ef91596-8910-4a10-93c8-34742d0d01f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1a6b5c-6300-4a9c-9a2d-2cd019c4953f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4e0f98-500a-43c8-a8a9-56b450f4a44a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e8d0384-7e7f-4097-a8d7-2adae1106a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e449bbe4-7186-47bb-9ab9-136e4b1e6b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b016b9a-93cb-4f99-a943-b4e203f1657e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7b232f-5f76-4f7d-90bb-49a57916a109",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffbeceac-c4cb-4a1b-a4fb-31088cd7a8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18128211-24e5-4efb-a032-27470daf86ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62be29f3-a215-4111-a83b-2de5335bc4b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "375297b7-305c-49c6-a9d0-08ab35a974df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cecd294f-0a38-44ca-8b4d-c93ce0338570",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca08e813-9065-410f-9c58-889ad7fc7cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "301cd604-de5d-4ec9-9e8d-0b466957c64c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a66254-a014-4245-a7ff-0354319eb149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a420f741-614f-4981-9708-3812d7b43fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34bab8b-cc68-426e-8323-f416d93da7fc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d10a40-81aa-49e9-87c7-c568ca61b55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f34d2b64-5b52-4259-a3b6-f78ec798c1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abfffae8-f0ca-4a61-a105-77b1acf8e073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "16db8a68-1b3d-471d-ac43-0be492928aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360e87e6-d100-44c8-90bf-9752648247e8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd7297d-06e4-45c5-a1d7-753b66c20586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf636c4-37c5-47f0-b469-96ae382deb30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c061a868-5989-4bd6-ac6e-ee7aae9077ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b87b0e2a-1a1e-43e3-bed1-894843b860ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba32faab-e96b-4b53-b3e6-828dce9abdae",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3c0d40-fcd6-410f-a043-968a615d44d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d616f520-5b67-4145-8231-ac55a79a9e0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9dbca2-cabc-49a8-9f4c-a6c3c6417135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "99cce4c1-5001-43f1-a9ed-d04ab0e6bbeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7eaede0-dd7c-4aca-9948-fd12f0133be3",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5687a5b1-97eb-4a9a-bcac-cfce2a62851f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "996125ca-35a1-430e-a112-dfbb5471c4bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad72e3e-dfc8-44e6-adbb-e4b97adaf9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1baf9fd1-301b-41c7-a7b2-d353d40cca47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d88c36-8126-44e8-87d0-6c6f13340023",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6dfc07-8f09-4088-b8e6-14cb343d43bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52a9c0c3-da5e-4759-ade7-72c5e39d8ece"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0282eb73-8bbe-4c0c-bf7d-a53caf926d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "04d5af9a-bfcf-41f2-b509-c122e09b39c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b38ff2e-7656-4a1b-a3d3-986572433dff",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0c9145-2f0a-4ea8-864d-00e0cc3af778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd2455b-65c6-4ef8-aac3-b069d75b56c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f7bc5b-796b-4921-a2eb-636b201e9156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d57fedb-222a-4751-ae00-e6303896cb9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b18799-48e4-4fd1-8885-57ca61b62428",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbdd83d-7089-4642-b39f-fcc5f25dbcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14587700-dc4d-44eb-b644-2c38124f98fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5801464b-5da3-4f8c-be7e-aed2e577d39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "61039805-97fb-4037-b6a6-73bada40e8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b9c9d1e-9bac-42b2-b779-f025f7b63d64",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7233cf2e-00c4-481c-9502-f8131e51196b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f9d6a4-a4d6-4437-a59d-9be306ddb8d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fcc6a51-683d-4562-86d5-cfb019fb773e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1afe2c25-44c9-4174-bcf3-eb1294e0766e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a208f1e-0698-4dff-9024-610f417798d8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9ee4d4-cf66-446e-9fe7-8bb12183985a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc45a720-059f-4e5a-9cb7-a1a7ea0dfbcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039fcd7c-fe5e-48c0-ab28-1e2880fe94e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb9c4c6f-85da-4ea1-a0dc-742a1ddf75d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f9de15-7795-4cdb-b520-227876698c05",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f293479-3102-4334-83ef-63cbdead17d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e5e6cd-6c4c-4442-8385-6041bab66cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c1bf96-6e53-4a30-b19c-3144b6df0fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b4bffdf-07f4-4b62-acf5-88787f9d790d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6256e70c-4f6e-4e36-8350-7820982c4ac6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b1f867-7218-4147-8fff-7b4b5a4f8d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbf396b2-b10f-4194-8ddd-59032f6a25f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a47bbb2-0e7b-4615-93ec-c076d130f210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "16457cb5-9765-415f-8351-9e64a87b7b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe47525-d3c3-48a9-8cd1-1ee775227edd",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85784927-df99-419d-92c3-ddbe717ade0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5275b233-87e6-4d77-886b-f6b4c3579835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e60c634-91bd-45b1-9155-3df1b6e3eafe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7bb55c5-fb2a-4410-a399-65c4d2528375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d323ccfd-06c5-46c0-a77f-4ae9781377f8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d00977-ab46-442d-85cb-bc399b2e8ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61ca27a5-2428-4046-a834-a39800708b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c2378a-8257-4516-82a4-88694668b71a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aba4ee84-50b5-45f9-bb44-933fba1bc378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc75e12-47be-46a7-93b3-8f134ea99ec2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6489f05b-9e7f-4329-b7d3-2a15ccf8efe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d8c894b-d0ad-40ed-b254-c0c8c4b184d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb49fae7-1f62-41b3-8aa0-062b7afa395a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "65c53a1d-0f12-4f2b-9c98-e53142c01e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731042ac-343b-4562-81e7-53dbb4aca958",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0545423-19e8-428f-9011-f04bbc98c14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebc89676-895e-485a-a454-338ac4c404cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7442deae-160e-4d25-abb7-94e47f774424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4dca1468-e2f6-4669-9797-2e2c665769f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0469865b-e759-4e91-983d-11fdb85ddc0d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f2ffef-a342-4a9f-921d-ffaa16e11f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab5d53b-ff34-4901-8656-a0ac96dad111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3b1446-67dd-4276-8781-0d1839b9fdc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f52e452-db1a-4ecb-8993-9777f3006a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95eeaa11-8d81-45c5-abf9-2d037e5eb2ee",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b66ee1-2e19-4657-bc68-028dde445968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5be6269-75f5-4650-b63c-6ec4b0a27174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c005914c-35d2-4151-bfc1-6293ced106e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffeb79ea-e088-486e-8087-2c1ccdfe3f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7105f380-b755-4759-b9d7-43007d9e6ead",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a9ec14-8b16-4829-bb54-2701febde4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9f665af-6d4c-4dcf-8e92-b433a382dd96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b25267-e8e3-4d2d-827d-159adf03a1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2b0fce9-9150-4b57-ad46-a0074a473df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "499fd91e-e7b8-494b-8a7a-a471e5f85b5d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c511b7-a071-4c17-9bfb-533c4ff0ab42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1dc793a-271f-4343-af1f-64bfa4296225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8604f55-41b2-4e6c-b53e-6f1646c2554b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cba3c68b-9cd8-4e54-b131-6079501746e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de65d456-8158-478d-ae5c-1b5f6bad657b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1112afb3-2ed9-4320-892f-a5174722eaf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da54a1f0-c899-4e45-8fa8-eccf6f3b589c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "325af304-fcd7-4898-8cb7-6163b295b457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a9c6e39-e97d-4835-a908-63c6048de81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23d8818-e53d-414a-9d12-007d9a20bf8c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af052f8-4f7f-4c25-977f-8d29ac3017e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acdacf0f-c34a-4558-87d3-3b2b6552bcb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebba4e04-0202-4fe5-a2fa-6d186b3d3f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4852bc2b-f953-46ab-8f11-d5d2f1c1f873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31c6438-bd45-4874-a10f-f143c12fbc38",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59187bc-6b3d-48b1-bc67-574352354c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89740a5-8a74-4f5a-a6de-fc9087dfc677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c244cfb-48f0-4f8d-97b8-f1aea7a21ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a410ab07-dcc4-4789-b501-c08b2ffc4aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a22eec2-1800-473c-8095-6f592309fd85",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c7132be-ef45-4500-a9df-662fce0a6ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df6075e-5e45-4a98-8e9a-27e56bc0ae6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f407ee-5395-47df-a3db-4c8a3b672357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8228a291-9826-4870-b294-38848510d372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79c9e7f-9775-4a83-ae9f-4b1cea5a2e39",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04681857-c003-4c08-b67f-a8f0f71f756f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a981f0-9fdd-40a2-8418-fadcb94601a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef484f26-41bc-4610-b8cd-e81d265cd83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "702046e8-8db3-4c49-92ec-47d66d6ba06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9ba70f-b120-49df-9182-3b496cf99ae2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09db4b57-428e-49c1-8e48-d4a4c35a2699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e827e9-9a67-4331-bc16-dfcfe4123f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5bb962-21db-48ef-a796-67f888c69920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a71f657f-6c88-4bed-b9de-f283d18a6c28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "811c90c0-4d04-4013-883e-0cb1b4384a99",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bb483d-fa5c-47e2-a6d0-4173e8f87f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85cc9fd9-1afc-4111-bf15-b2c19ed6d15e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7710d14a-86c4-42c3-b321-a451646bcfa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "68383b01-221e-4b3b-a83f-05d3562f7b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1b5a2f-eaa7-464c-98ab-f6c0d33da638",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0528dc36-d859-45b7-88c1-2c7b05f0f791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "babb2979-8f2a-4d59-be08-a7836cd3c60f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf09c30-0351-41b9-ae7f-354bbf8c1c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b05af9dd-d8f1-419b-ab09-51a69b3e7469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ed4edb9-a18e-414a-81b7-da845292f665",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c635f75-cd3e-484a-8d2e-4b9b6e9418f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af9dad31-524d-407c-915c-9e226f9ec016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "738f2b9d-b57e-47c8-a582-645a7085b5dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "57b9920b-fdf3-4bef-8153-f934948c2da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74dc3d5d-3b37-49d1-89d4-9bb828d9380a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22b74b7-baeb-4222-9ed5-33e726ef8231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd204d5d-ab0a-44cd-811d-5a9b6809ba97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7304bb96-f005-4fcc-8348-cd3e89c2d7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e7900c8-d96f-417d-8c5e-a290de959fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a3893b-c82c-4ff8-9487-c6cdbc8bad9b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f463a6d1-26a3-4e7a-912b-513dbfc8723b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a91fafb1-6254-4bcc-8154-9d827a549c1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301803d4-5739-46e0-bf71-a2b714ac4d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f02b4950-c31d-406a-82ba-32b5154fa042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7203573c-169f-44a4-91b6-2c2274874c80",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57171f1f-d577-48ce-a753-8551c40a8b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2091238-1d83-433e-8406-5c3e3fed9b39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175e5af3-849b-4b60-af90-22c1e66feef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47e38188-97a2-49cd-ac89-f5a420ee6668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2159882e-9022-478d-931a-f8d04226e816",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da29472a-f686-49d7-a008-6f4f793ba3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "227e6a45-f461-45b7-90b6-28af0cc614a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015b94d8-ed7c-44fe-871f-f3dac59550aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "692c55e6-238a-45ce-bd61-836387a0104a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6a9242-f850-409b-9696-2d9bd7080ecc",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162e98ae-cfce-4ebc-9f74-7812197a63f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27d8064f-55fb-4491-98ce-96a97a575eba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41bcc720-bb37-4fb4-93df-3da3a9558593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1dde6202-0667-4101-8bc5-163bea9691db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d04d1a5-1459-4ea1-a483-bfb848057e92",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a82783-48e1-4941-b6cf-b9d4c0e7e983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b3092a-fb2a-4572-a042-0d95ddd860c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea43592-5654-4560-97a1-0123b0d84e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "98ebdddb-5b72-4267-b36e-c5de2e773373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25754df7-cf81-4e72-ba46-ebd7b65d0484",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "218f2afb-18fd-4534-8ec0-257ae929fc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f03500c0-df69-4a74-8f0b-5db71abcef74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7650e35a-1e3e-4970-bbc6-eba318c919f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82cb4af4-e79f-4684-9683-4d433d52d5d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097cc215-96ea-4505-a924-7ef5a5c63977",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a9ded0-1205-48c0-99c7-ae715413ba5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec58399c-7301-423b-b65c-0deec85098a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407b925b-c20f-4775-b8ff-c1ef18be368a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e38794e-c2b2-4d91-bb08-cab0a3dff0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81bbe924-f513-49b2-8635-d5ce7baed3cf",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "640d0f3a-0849-4c3c-b0e5-e447ac2f79bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "974afcad-63f4-43a9-a7bc-d7b010621b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0337c71e-81b1-44c8-b94a-b2b9dab81008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9b8eb6a-cc32-4695-b4a9-92fba19ccda1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa5282e-c9e0-4bdc-89d6-c4ebc95f3457",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee21f19-b3cb-4e4f-a43a-98c2e52946d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "369fcb9c-0da5-4681-ae82-da65461e2066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6094c620-6815-4013-a705-2bdc97a6d4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "543ea9d8-0b8a-4abe-b814-9f7eab55c5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd18414-dbd4-49a8-b3f2-f069ad27373c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6603c7c-011b-4553-ab28-099d956b7d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad6fc59-34f9-4085-b89f-d26a9bb68932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7eb394-a043-4d01-81cd-60d8b219a624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5b27fff8-6698-4c11-b3ff-02630352324e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d905ef-b17a-4273-a799-32acea06ed91",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5307a47-d9fa-4f29-b5df-78cbde015f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ce2bde-3c1c-4e8d-9456-9d9a58e80a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826d0ad0-9234-407e-a155-097eed93beec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "51ae7fcf-94a4-45af-9eb0-22aca3573940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0ed4071-cc24-4afb-abeb-bc8645f20398",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "617f9d85-6fc6-4a2a-bb36-03dd93d7da97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e765d8e8-3e83-4b3f-bb41-40a93273dbd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02fe32d7-c1ad-4712-b013-8539b09e0f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "778f17b7-3972-47a5-8216-0556a67bcdae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e6baa2f-a35f-4a51-ad1e-5b8ee9303aa9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece24107-d8d8-4270-88e8-0ec0bf440516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f2aaca0-1689-46ab-b635-fcbd97b13677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82492c6a-cafe-4294-b91e-140b3de73d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "41074161-3f3a-48ac-ab14-803f5abce30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5009dac9-405f-45bb-a350-906cb8fcf8ec",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "916e7495-6692-4fe8-9ea3-f31d1345a0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99a33224-ff3e-474d-816e-5ef9c5e59465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c477fe8-7bfe-488a-ab2d-38994319da3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7cbd97f-127f-4ae5-bf9b-64231ba5e527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9f7eb2-7230-4177-a4ec-e83ba09309b0",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5337cfff-fab3-4132-a178-06ac6ca00756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88173f9e-804e-480f-94e2-4f72d251882c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "229d5b2c-c807-4ba0-916a-369fb65e2b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc56e26-b861-4a18-ab6a-44279fdbc3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259b0238-bf5f-482a-be68-ffd972d99c8c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d404280c-00bd-4fa4-9b88-70c4c0fdf06f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c735d8be-787a-4eb6-9dec-535d140fddf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e86505a7-afcf-4793-97ea-ef8b73888ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "88fbba6c-eaeb-4e61-a287-39a641c163af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8204356d-710e-44fb-8db2-4b89bda707db",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "456962c2-11be-47b9-a204-89961271a6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c0eb27-a6fd-483e-9f37-a883274d1344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8cc21a7-07ae-4c39-8242-651f68b4bbf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d6d759c-42af-4e08-8bf5-3918fee35db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885f4e91-0996-4f2b-911e-0f04d7647355",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e800111f-1e71-40ce-aeb0-dcc95dd4d3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08e38b4e-63c4-477c-a473-8e26516b5a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98ceaed-2313-41d6-916e-44b201a3d2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "60368d5d-2dab-4e4a-9d11-78bb97e1cfe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e92816-bc4c-44de-abe2-6f105f2bc717",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b2cafa-8732-46cc-9256-3baa75a0b703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb1d50e5-5e96-4961-8906-2982eeaa607e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caec7eff-16c5-4ce4-bbc3-fbb4539b2669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "74824c65-ad81-4e58-962a-343092477fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb69ec92-eba7-4083-9402-22c858aca0ad",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "142fadfa-96f9-4dce-9704-2199df673cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e6ea0d-13de-4dbc-ac62-340f374294cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9180e8-2916-4313-a98e-abd66c3d8c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fc492ac-7276-4da3-8849-eb5d0ef83dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6283d34b-6558-4c6f-a23f-33ff6d1baef4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56162b7c-d3ed-4f6a-8015-30d90877a962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0834a28-33ba-4240-a64c-44d524b35965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d91288-31eb-4164-acc1-c25202c57c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1d64fb4-5139-4d77-b83e-f2f809e15254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2337141a-f0a3-4219-b7bd-81fc116b5beb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3162066f-e280-4e8d-9f50-4e0d57bd56b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e32ac90-af8d-4920-8965-8e04d59d2b3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd412cf6-a9d5-46fe-befc-989b40611fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e443d6ae-bd63-4b3c-b68c-6dbd923b9cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c809984-1d2b-458a-8299-8976d73008fa",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e0be01-eeca-4455-b482-a8c776a066ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed8f8a37-b198-4147-9348-d4a05424e463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df6e652-5301-458a-b7f6-e671ea3027b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8151e7e0-a77f-4fb2-b556-ff8223cf61db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d9dc42-6aa8-4064-abe8-e2746d79453d",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27e979c-21dc-4a48-b4f3-00053b1c6a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a49c99-cea8-42d2-8d01-6077616fb9e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a16ed9-ae43-41ee-a6c0-e78a919de422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2e9c300-5d79-4f96-b49b-1363eb5fe8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a1131d-1aca-4329-9ca1-7b35f57f4366",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "701cb5a6-1429-4ec1-8309-44a601d44150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6acce306-a50e-4373-8bc7-f1765f97d55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ecfbda-c745-4a05-953a-24558a2be604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e95ab47-d7bc-4e85-a1b5-c29560fd0f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191f041d-4b22-477a-ba56-6a2ab8ee7162",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3421cac-6674-4332-9a28-197a2e07782f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17181786-44de-4e7d-a544-83c57610e066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b697a6-de58-4a25-9467-373bc64eea9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5dcf0162-d906-42b6-ae5e-1c6c0eafe17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe30cddb-e444-466a-a575-68736476a34d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8550dd-af3e-4071-9181-440978de2b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c57b3aa4-e963-42b5-8aad-f84999dd009d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b830ad2-9752-439c-8352-4677ae5f9aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "801259d8-bd9c-4c33-9843-3cf78c9172c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ac5638-5472-4ddb-9d12-91dda8581f80",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5ebd32-bf05-4933-8d9f-499f7078cd90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bc5f7d9c-45a7-4d72-9aee-b4bb5cac975f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb96de5-70a9-4fab-9e2a-cbb8b53805e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0f386d-a998-4dd9-8392-0ddb6e055b4e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d5d0260d-eb32-4113-9ef6-e93399e823a9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee277b38-f2c9-4f3c-bd51-315554b298de",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8c8c9c-9c49-461b-8de5-c1136dbb8e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b449f421-e371-437d-8d14-b454e580e707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830dfa5c-8c3d-4d93-b40e-e8d8012036f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "80855d97-d704-4076-b6ef-fef0150bde5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b9a275-ca1e-47e0-9272-00c350779889",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1332b07c-07e4-4381-a281-de1a4095dcbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "169d446c-e4b7-404b-85c8-04db4e803d72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57bfd409-f4ec-413f-8168-4bf581a71f91",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "9a2a9ea6-40ae-4e2e-bc60-5a9ddbdc6eb9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1378eb2e-631e-4803-8f5d-9c4daee90feb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d657579-a950-44e1-88c8-8ba2add8302f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "afb978eb-8eae-4578-aea9-f06e0dc95a6b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c35b5d8-178b-4201-9b35-69542c4c336e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "96933a1f-5933-4d6b-8cb0-e55e02e83610",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "22515e6a-7405-4659-ac17-886a23a6d0e5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e6c28d17-afad-4ed2-a274-2b075ce23ccc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4252e749-c176-4ba9-9605-940abc52162c"
                }
              }
            ]
          },
          {
            "id": "c7072128-5ece-4bb1-8d34-25231bd9f1fe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9659599b-daa5-41c0-bdce-2c688236cf0a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3c1ce3d-5122-473f-819f-f50f8241f11a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "620b3629-7a6d-4b7d-92c1-e27473f6e83d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fcc3434d-0607-4cad-ab6b-5cd86c6969e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bb924c53-cdcf-41a1-8a08-7e7287f4f4fc"
                    }
                  }
                ]
              },
              {
                "id": "08c2db73-9186-4482-80c8-cd93244fd04a",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6552ddc5-012c-4384-bec5-601ca63188f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c7b03d1-56eb-467d-9e8b-c564ea905f72"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa49ee5b-baaa-4d3c-ae2b-24e49a4c1544",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5cc1a5a3-e333-4ad1-84bf-1c8df4997a56"
                    }
                  }
                ]
              },
              {
                "id": "ad0d1238-7074-46cf-9194-62145a0f13ec",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4a776da-7c69-496b-9980-521fa1e4c29c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b295eedd-20b2-452a-b5d3-0c24d002e48a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9861d986-49c6-4191-9cdf-625adee045d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "258d8f2c-da0b-49c0-8986-9b8ab8dc1fbe"
                    }
                  }
                ]
              },
              {
                "id": "a74835c8-19ab-4ced-82bb-ab1d784dea6a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "594b20dd-f5c9-457f-99a5-b48b8ff378af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "18f7aaa6-0dc4-42a7-b7d6-055c0a75b2d3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9afcef03-f81d-40b8-a016-17c7f594a12a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "eb7f4d4c-eac0-49c1-a6d1-175f8dc2243a"
                    }
                  }
                ]
              },
              {
                "id": "d446f951-5ab8-44d9-9022-2a066420088c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "929defad-3518-45b2-9dde-53aff21d34d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "212aa45b-67d2-4343-a795-bd19b859e6b2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5dcba2f7-acd9-4bc0-a681-a733e8407af4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "aec31f56-ada4-4f14-8e1f-fc2b7ae634b7"
                    }
                  }
                ]
              },
              {
                "id": "8256225b-6ab0-4b21-a286-e0cae0560563",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67ff801e-d88a-4485-b15c-fb5341c5ff50",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6521eefd-f97a-4f5c-aa1f-4e5df9f8fc39"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7947e02-8a92-4232-bd5e-6f250faed358",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aa179708-c943-4ccc-baa9-a3833e1daf13"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "62589d88-5a23-42c4-96f4-a0328ff151d9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2e1f46f7-e239-4da1-a96e-35635519ef67"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f8a0942d-3fb1-4975-99f7-4b7e8519d766",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c7036e88-cb26-461c-980b-34dbd3c21133"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22ccb3aa-47d0-4444-b5c1-84377c583644",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "518937e8-5784-4b29-b3d2-12d040a8a93f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18877b21-32da-43c2-b463-821bc69a6887",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3258f21d-27b5-4b5d-b1c0-c759bed4401c"
            }
          }
        ]
      },
      {
        "id": "6ce6a7c9-cd9e-468a-91c1-8b1daadc5f56",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "aa50a3f9-02b3-4dfb-a946-953bd9ba4f24",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2a8f00a7-158e-44c7-9378-d91c3b815fd3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b5367340-6a2a-48b8-8914-66644d0d85af",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d944b0-f3e4-495b-b6cd-1af7d15f632f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d58e2280-cb42-46cb-8c0c-5f7db21456f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9243ce9f-bcd5-4bac-b2e7-551b300ae567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e7fdfd7-74a0-4076-b4aa-6423a6ca0be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df37db3-0132-48f0-b869-d7540ac0fa15",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8914bee8-973d-4fd6-a9c8-00f4cb1fc752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70a24f97-1688-49c9-bdd0-1e4345a86342"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f23c4b-3d59-4d81-9651-d8536c867cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e189c61e-67ba-4208-945d-147795fd1a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c21957-0de2-48dc-83ea-d5c4c12e999a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "065cc474-dfc6-4110-b36c-c773dd149a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b555679f-c448-4bef-bbb5-7e768ff0f255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8947a694-3dad-4a13-9dee-cfed8c1f76e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3da203c1-0008-49cb-a135-9d89bd023cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138799f9-f7c2-48b2-a1b3-f6549b9a2364",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cee0921-0c22-488c-a2eb-05b12a7c820a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e47cfdc-0602-449b-ac69-27cdae179678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12aac8ab-b744-44d0-90c6-a62a47add4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db266903-372c-4e9a-9a2e-344e1ee12858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23d75a6-31ec-4caa-86aa-c2ee064cf629",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f407696-46c1-48cb-9e7d-d4394140073f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "633d2eb5-fd43-409b-9ce7-24d7e3ab1614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91cbf03e-b0fc-4636-9d65-9794fd151cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a8ea39a-33ec-451e-ba51-8e7f7159c381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0013c5b-451d-4f42-9c87-6d8c0b5d7b0c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a41c79-4c41-4aed-94a3-97330b7b553b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e470c4ad-224a-4bc4-ba94-a011ed9ba89e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f892bb-9acd-4c2a-82a5-020dcdc80db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5110d8-7b12-4467-9214-f4b6a739daff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c8c623-e5b4-45ac-b3f5-9417686380eb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881ff3f7-3a9a-4c4b-9c0c-3355d9be8559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add758d9-ce39-4934-87dd-eb4459382065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8248a204-2619-4255-a410-6d87634f9abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b3e07b8-78ef-44f0-8da8-9735e43a6fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282db7da-0f82-4889-b08c-37f0ee3ab61f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6c0f80-6dbc-4f8f-a853-fedc83197e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ca03cc-4fa3-4820-9047-18cd08442583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc6e36a-122a-45c2-8aec-002b0d20de86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5540ef9a-1533-4abe-83de-44055e0a9394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04aa99c-812e-4493-b37f-6805e4847a64",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba943818-85ca-4789-a705-82dd6dad7852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87812d9f-5650-4ced-9ee5-8c5610d4ce88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a869f46a-0c97-49a5-9b26-76c1cf25f11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e9a8c2e-2117-45f2-b634-69db300ea18b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b04056-fd92-4e6b-8c06-3843711bfbb6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b155016-be94-4236-ba55-c69c2c3a16d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "559b15cc-c04c-4b47-8b44-98ea0acf3a5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e6dc2f-a45e-4941-8840-eb0a296c8c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b42ccc9-3e42-434a-a9be-27d42ee1dddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9449ed9e-cfa2-4fa7-aa06-16cae3fb4fb6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd45f76f-29a8-4dd2-99ac-007182678f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a97c4c7f-c495-47c0-830e-14f9e6d0ed54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948a0687-0e06-422b-9e1a-a3d1fb04da2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4687de7f-6b6d-4723-9f92-1a4824128a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0abe6513-3c3b-4b6b-ad2d-91cf02c9e0c6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89faad51-a8ea-4dc9-82da-015c52ede79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "495f5bd2-9bf5-43ce-bbec-9f4cea120620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ccadcb-aaa8-4a8b-970f-b5ff3d16da24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf482896-04bc-4b3e-994c-ca744c7ce0b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd41f5e-dd06-4874-ad73-c23b0a2f679a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1cf4b76-2377-47d3-b4c0-9ccb1ce2bcfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c212c9f-e981-4f7b-9611-9643f0384fdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119248ca-abbf-4c0b-8be9-d64586446313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "721c0351-bddb-4815-a046-84336efec9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b920651-b142-49ac-905e-e3fcecb60c4b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd314602-dd46-4bea-ab65-2e9473e0023e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f0c80e-e2ad-4f9d-b9a2-2ed8da1bc0e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc81255-5314-4228-9256-2c858cf621bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b087fa-91f0-4253-8a23-45ff69ab0c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc4a7c8-6dce-4777-896d-9a3c9f366477",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9313fa1-9fa8-44b5-8096-4c13af2f82e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2add0875-a22f-4a10-9e59-fa489f9ca36b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69afe227-2368-41d5-a3b3-9a9e739f0f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6086a631-5ea0-4d08-9e06-e95274d5f323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21321606-f794-4861-9d37-66d6b5c19df2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42329734-6749-408c-9608-5663d8dec64c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf5855e-440a-4ade-80ee-40452b5daabd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be77801-e3c2-403f-a231-cfcbb5b7642a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "348054d0-6708-4546-b502-b807da5085f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc35c51a-0fa9-4c47-89e0-3ce5168f0ad8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34791e17-08cd-4ca5-9b06-a5ab4d2e7385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ade13fc-e5e3-4928-a1a1-2939ceef3c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0604ac95-bd57-416b-8319-868fba3604af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "785470cf-e803-4908-9af8-544bc65e904a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6222a470-d60f-46cc-8e68-9e332386f800",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec441ce-c109-435a-b743-275520c47311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0965d33-dbed-4773-b375-4f19a8e371e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be79e6fd-d79d-4f2c-87fc-9a33a16b9cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "45043faa-d35c-4884-92c0-35107778a1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605f39d7-2804-4f35-88bd-8e08b1d8801b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75fd7b3-81f4-4ea3-9bd0-e90e557d9839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c14a0442-6c85-4682-8475-586129a89f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc85fa2-3040-4bd5-83eb-96f8b9917727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5042135-1f92-4b8b-8d70-aee738b25467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c916bb5-f07b-4543-b221-e9686aa2e51d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e30354-f569-448b-acec-755bc8eaa89d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4867e7a-a9ff-409e-839c-57d8cff2d9f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562d7b82-b9a7-40c8-bad0-df993c6c95be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "782b867a-7cc6-4b5f-8641-057217f4ae65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76230205-6d2d-4dd9-bfd3-718c8ad8fbad",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "845b43cd-96da-4a8f-8bff-0436d4a1c5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bfd1951-ec29-4ac6-96b6-e63952b9f609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d6e8f7b-d44a-4680-b1ae-26a01647eb3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c9b4df0-d5a2-4bcf-8b5b-91f3bd5aff11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b0c488-3856-4cfe-8c39-e7e6b7cc22d2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "496015cf-8421-423d-8d63-fed508e97ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a39fd8c-b03f-4559-b602-396c65fdc950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f560d4-790b-489b-9698-6ac43254a2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de90588e-f0e4-45fd-bf99-74b912de1397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e388d1b-5353-44c5-a4bc-1ad23b194dcf",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b85077b-014c-47aa-92ea-d9052b740eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af405951-5a71-4aa3-a49e-303cf261191b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd150cdf-10e2-4a5d-b12a-81f7bc050598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e68d08b-9f0a-4def-9f0d-529cddc93cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e8d839-241b-450e-9c6b-ced6674cc444",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215088e6-c1da-4df6-9755-0c1308c0537c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5492cf2-779b-4f19-8731-3f3581d185db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e6ef8b-6398-4fa2-ab87-287c9a8144b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3e601b7-39b7-4258-b230-00a2b70bdde2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dca8754-a0ac-4fc5-8281-de674df9f9f0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "630bfa03-815e-4551-a2b3-720d9e49a632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c066318-1fe5-4aa0-b977-75e9d2a8b067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4a5af3-301c-457b-b6dd-4ae491b7db24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a68f957f-29d4-4e8d-9800-fb6475c084a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b823df-c47e-4dca-aea7-aad01d699d70",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7374ec38-c7c7-4a57-93ea-48cab2715989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d9d75b6-385e-4a34-8ff4-9e91cdf5c5cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d90b1372-0095-4db9-a65e-f9cf7ccec1da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "831d3635-e4cc-4f57-80f2-5c15faff37e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805177a9-5e64-42c6-be2d-ebb453125bab",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ad2fba-e504-419c-8ab2-468f7a023d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eec7036c-95ba-4729-820f-1388c0480194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf89ea5-a0c7-4aaa-bb3e-6d5e3de59176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e5909f5-8c7b-4ff2-b3cd-4675bcde4278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7812f15d-618d-4751-bf6c-a50e32be1f70",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5303e3d-5ea7-4719-8d7a-d94e58ec67e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ce03d1d-ebed-4794-92ce-d9022dfdb27c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278ddf2a-86ae-44d5-960e-bb072099500c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d212285a-8e31-4531-935d-903177dbaac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d534bc72-b008-403d-96ad-0d0588a3788f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5485f1f-9cbc-4b26-b2dd-a44b1daf5b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a910d0d-5bff-4e2e-a769-e6d27cedb067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e947012-8786-430a-a33a-a0f10c27ecfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ec353d3-8ae8-452b-8b27-8c27ea2895ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568e69b5-a749-4a14-a7d1-1fa6fe4e2bd5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfd21d6-69f9-4782-b22b-1aad28b48a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a300b591-9a7d-4903-a0da-f736310268f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5a0cb8-00ce-4eaf-8df8-554ef9bac2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "392aec52-c7ce-4e43-add4-6047934e5f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "105e3608-1889-4b69-bf66-8a3ab32847c9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "220375aa-db92-4eaf-8732-9e34832b748c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a16cf97a-a361-47e6-bb65-b7213882838d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b3aaf9-68c9-4555-aebd-bcd8d7d4acce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "823a3001-cdde-49df-86e6-0ed6ac1af51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3fd9a4c-17d3-4b67-8c6f-cbf6db143dc0",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e200dc37-2c54-448a-af1d-f68c66bc0734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85562c64-de9a-4cf7-add9-0f155189bdf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6609e32-a26a-4287-9745-5576cf4b15c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "feeff47a-cd95-4cd0-abe9-aed740c4d737"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8960808a-b14d-4131-bc72-93fca359b614",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1c41dd7-fea8-42f0-93fd-76eb58c3bf95",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2fd7c0f-952c-41e2-9884-515c65f90574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ca0cf91-023f-4b48-a101-11558a74012e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c1cce9-a0f8-40fd-b06d-1b4bb00655f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91545801-07c1-4a36-9443-b7a13bd9a9f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6568deea-c409-4886-8675-9de2ded8eb8a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df8a7ee-43b7-4489-adc8-e906c7ea0492",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "91307e2e-7148-4ba5-b3f8-78b0c29a18e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "394d1423-9c98-4f2e-9321-a0305a02f3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11966efd-6410-4536-8a0b-85979466b479"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9879d531-c408-42a5-887a-56e20fb92731",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cab0c942-6519-440e-a531-50a39e38167f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "926fd3b8-47b9-4173-ab62-5fcc7af122b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64f17cfd-b7db-4d5f-9437-81296be8ca31"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb02a5ed-86d1-4a10-8955-4a7d4e80c096",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "60acc3c9-96f7-4ddd-8fde-fd03f1afa5f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8bd584ce-2fb2-4fa1-be25-32e349f61cf7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4b5fbde1-c63f-4a08-b339-6cd89639d7dc"
            }
          }
        ]
      },
      {
        "id": "31a15e51-d342-420d-ab33-d3a5e46a89b3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5ee5b346-47ee-4e45-81eb-f8a4c1b78132",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c71b22d5-4cb0-4860-8c46-6bb3795fdde3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cbc51c6b-3b90-43be-b13c-f5a8fdeee5d1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb48207-6f14-4c2c-8d62-2f15ce20e5df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c269043e-e422-497a-9cd4-73f9b91a71be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5393cf63-c847-4299-8eae-ac3b88f2dabe",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "568f064c-2dda-4f63-8f35-ee6a9a47646c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92da9a66-ebb0-4e34-b4c5-e9a9634eaaef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d5e088-c435-4a86-85fd-11761da42874",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c3b6ef-71ec-4d66-8d01-b8cce24b7c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead3565b-af28-4431-accc-0661f929f7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82088c76-4362-42c8-b69e-e961ba2e8c05",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "908d62f0-30c6-4c3f-8485-e50ff05b8d78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b818d68-d994-4004-a483-ef041300a3b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adfa9543-60a5-4ee9-a6bf-8d10f59aa13f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c4721e-88e0-46f9-ae1b-0493d88dd0cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a03901d-60cb-4713-bd52-ebc9f801d092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1630087-d88c-4aa8-bae4-2f03afb466d8",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddcea4e1-0def-490f-8bef-021c744b41e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a22150e0-d6fd-4cce-a9e4-ef859d34b07a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e6ce87-da3a-4a08-a8dd-5236038402a5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe832463-f901-466b-88e3-df1004793369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cbabb5e-e075-4715-abf6-e92bd8cfb71f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95cfff44-30df-4298-99f8-ff1b743a8347",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb37daf9-8341-4d4f-b776-358b7df5aa5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cd6df9-4027-4db6-9965-8122f21e88b6",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73030fcb-be2e-48d7-b9dc-4832c0dbdc62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75d5527a-957d-45af-be32-49889134d96c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b582211d-df79-463a-bb66-466ca1147348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "010ad894-6c7e-440e-812a-1c8de39a45b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b9f52d-3260-4a53-bdf1-ab1c75d7456c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d1cb2d-619c-47c6-bfe7-ef6c87619758",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "375d9707-8a8e-41c0-bdb5-7fca8a62169a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3248d957-2b33-478e-a24b-ef8c951664ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96705b1a-93cf-4298-895b-3dcfa32bc425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61714a1d-7555-45e6-81ce-ec0c6e554479",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d6e87d-1abd-4e4e-80b8-af9450c9e8a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61b45316-0ed3-4235-b719-8f92dfd39076"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa0bfd8-e985-43d9-b96e-e53e43492379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c1e058f-cee6-4f6f-b6d5-bf55fc1809bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe4692c-67e4-4213-95ef-23a2c16c9d5b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d8dd15-59d0-4ddc-a950-41bc795f6ec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d61cd9d0-5435-46b6-9167-b612a46a7ec3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2b6d74-8f47-4005-bdf1-6560ca05c9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cca08a7-29af-4114-93af-79876858624f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b0d64b-5e25-4a81-82a3-03936c786bd5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f126948-24d1-4cad-ae44-b9211fd9e415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb5e7af3-3df4-4542-829d-f1662a20ff84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e2cd0c-e750-4cdd-bdee-29e06419f5c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dae9e05-be98-4efd-bbd3-46ea3f4c1853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2691e7-a601-4b99-bf18-b50fb57873b5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3f707c-e4b2-42f8-825a-c10018fb1f1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e5a944b-b4ea-49f5-8db3-a28675aded1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f576208-adaf-49e0-9463-a4995a8b9b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7edf951f-f851-4d4c-93b7-5fe8a179ae40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a599b1ce-80f2-411d-8e1b-68d80a2500f9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb66270-9830-4c12-9d80-f8b953a3c62b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f702b8a-f3ee-4a4f-9a05-51b785c41392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f2ac69-2b21-4d79-a402-90581320a838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e19f25fd-9b0d-4b73-a3b4-7aac685e1b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b3e031-aa68-445c-a0ad-0cc29d656a24",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d10fd94-1310-481d-b8e3-36e79f0de44b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06442eee-cb97-47bc-946e-cac27f3f4d7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09480fc2-330e-4ee8-827d-02a7c63043c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "459ccb9e-f909-4eb1-978f-7d7e5b880214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5405fc-e3e0-48f6-b5d4-b445b0e8803d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62063547-1102-4fec-98f7-ce108ea53e4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d293932-f5ca-429c-8787-07be5b4879cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e0618e-6ba8-4846-b7df-b651d58d765a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17463617-59b8-49d7-ab63-d24e462cf43b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb911bcd-e7ac-4d52-b081-04812ee96260",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5feadd56-db18-4765-9e39-d54b23c788b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a155549e-cdd9-463d-83c1-8261ebb60135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d7daa4-2475-482c-97c5-6721f9ed88cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd6e531e-bf95-4354-97f7-e418ab013ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43093558-2602-4735-9fec-8e9ce2d56a73",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6a6d3f-5320-4e61-b8c8-22ebc1e628c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c79090ea-8efb-4679-9a8e-e20d9a0ea55c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03fbb59-0dc0-4cd9-a3b3-711902a6020e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07ee94a4-15e7-49ab-8708-c7b0ee447cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8214f408-e826-4796-a8af-238d813edb5f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808ee82b-0f41-4fc4-ac6f-743891a7a961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ef2340-0e03-48bf-b4eb-3582a79bb1f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "532c70be-dc07-44d0-a940-4b2956f17b87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22fa46e-38fa-496c-9f9d-493fa7fd951e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8b1181-b5bd-462f-b88b-d82168f2a495",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8367148-027a-48f9-b929-7a2687cd179a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a828222-3f65-4a7e-8db4-978329926719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79255d1f-0c05-413e-adf3-3259eaf3d317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d3a445c-cec0-411a-bafb-e77ed1d1ec1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ab11f5-4aab-47bc-9aed-21eecbb49c6e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99c2edf-3da8-4c9d-8d64-79fdce2e4f35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d85c8d92-6a7f-4895-99d1-063a486e8ee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80744d5-5d9b-44ec-80d7-5dc99d59ddfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aafe5078-0220-4b80-a37d-828d91f925b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f155aa3d-5227-4dda-979f-1134b15d366e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e602e36e-8f9e-42e0-b108-f9a318b40aef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61b85069-a31c-4e23-b283-ea1b4434db08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc2ae631-7724-4802-9162-b009444783e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28322a12-120e-4364-b27f-65bdea12118f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57435034-a92f-4284-b0cb-08b1164f206b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ff2896-f1a5-4343-85aa-aadcba68e8c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4183f16-ed02-40f8-825e-d32d60218532"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80cc2ea8-0624-48ae-a45d-140f20ae15b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089676a2-137f-4580-ac7d-701026327a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a6009b-cbb3-4291-8de2-1b72b3c6eb46",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b68c735-0c33-45e0-a2cd-caa585646e45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a16f5fe-1ac4-482c-912b-01c675bd5c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34dd6a10-be44-4628-be58-6df41d170466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3defbce6-ecf3-463f-8a7c-a25a2b772f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efbaa530-530e-4c60-8da6-abb3917a0428",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba5f244-b70c-44b8-9e21-40cefd8db570",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "950c4c0f-6dfe-43b4-951c-072459b2f48d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92bc56b-f929-49ec-9a20-6837b2e4a493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e4aa06-f7a5-4908-b583-b9eff90fb046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95cf123-3cb5-44b0-ab57-83c1c2809538",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60a4ec3-27ff-499a-86d2-3914d47663cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8370adf0-8c87-4d5e-90e9-8aa9764549ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74465442-9238-4882-8f73-f6a695c967f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "561e942b-4fbe-4631-9041-c07507fe490b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a282ec-a7bc-4793-86a4-6f4cb3e64974",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4acee2e9-0419-4204-a14b-953dc26e7f83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "821226f3-6f63-4b99-959a-b6c4452cc61e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54bf3fa9-66d0-459a-a94d-cfd30637bdd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9a9c1a2-a9e0-4cb2-ad78-5ca1838d7eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36652e59-cb37-4628-95f2-8c854876cedf",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849ec00f-789c-45b9-8f20-f41108d9b74e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd35016c-8472-4bdc-a69d-ec0ed852237d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59063a79-6ca7-4562-b424-8e26994ca3ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19138105-00b1-460d-b822-4218657f5449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99f5bb0-7365-4ba6-bb94-031cad0dd0dd",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f262316-483a-4df7-a9a8-9138425f97a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31ed1955-977b-4db5-989b-cdc2fce46789"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee5e6d2-367f-42d9-9aee-a8cf95a4d5fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a88b82b1-f4d5-41e6-a26e-34b0ece8b080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23835092-5f3e-49ea-aff7-7e98fd05f22d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f084b51-e304-48a3-adc2-c69aa5eae84a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81b89495-c15b-4386-a2bb-cd4236e721a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a00194-2405-4e29-8344-81b2517a8330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a694af0-e1ae-4b0e-ad66-37219b7030d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837f37e9-15b3-4288-b698-ca6db67b8948",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11b1735-9d58-4e56-928e-109ae196f37b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "931c3ca6-967e-4053-bf60-8caa9df29b7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "984b5b0c-2efe-4aa8-9ccc-6ff0310a8723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7a05c9-744d-4968-aaf2-0ccd83f56758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a84ef8-8381-4018-8867-d5f2f0374a96",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae4c9fa-48db-48e2-8800-1541cab66673",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77ef27c0-6b83-49c4-9057-2a8449a078a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df859a05-4b05-404f-8e04-28d33720f83a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "103f2abd-101d-4b09-81a7-4770042eb2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6fe684-9473-48a7-b14d-1cc73255fadb",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08151cbc-3001-40ca-8010-4432a49d59df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f63909bc-dde0-4778-9570-f37d2554ebe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e8f1fb-447a-450a-80f8-eb42017a0a8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b837f5c-d176-439b-aaeb-bb82c1fd98f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102a8dc1-bd87-4b2e-bd3d-4b3301bb11ad",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62a1a8f-7268-44eb-9488-36d75d7bde97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47c7eb9e-1600-4767-ac1f-4e0471691576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "723426dc-90c9-4140-b595-a5e01977aa60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b84b56db-0422-4c0e-b83a-7b3b7cedc130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e113a3-6068-4ec2-b018-0f16272585b6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1339d391-2acd-45f3-86ae-32b1547f8baa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "557ce67e-00d4-4a5c-886a-d37b8c9070b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbdd8d5-9540-4209-9e21-0f6688e6b5f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecaf3cab-ebf4-4c22-9ce4-d98ad69d9498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7f0fbe-92a1-4d13-8276-b0a85d41091a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094f92be-cb37-4a5a-a114-dde080ad889c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07aefcd6-eeab-4fd9-b617-8100c06cc1a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec11b1b8-9661-4bc6-97cc-4a5c0b2542f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba13e38-de8d-4aea-b605-77499be7a575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73abd57-950b-4315-9e89-418c3ab6a9ef",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82bfbbf-377b-4996-aa6d-c2315647ec31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf0f78e-e856-47de-8546-2bfa09b55866"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c175d69-5af0-4d2e-a7de-45ebdf5b3232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77308a95-5023-48da-b81c-9b883a39088b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e98ced0-1768-4c28-a04d-c29b8de3fad9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7164088-9e3a-4335-b4b8-6f88418f4bd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8886fe02-eadb-43ad-ad41-7ba1618177cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d63c8a6-15a4-4222-955a-2b9abc17d893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b1d1d7-ecb4-4a39-afb3-dd8f13fe98db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ef0a9a-b976-4a53-9b1e-3d6b6276af54",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54df66c1-a582-434c-bda7-8b7fae18e73a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05e5b0f9-32b4-4624-9a51-379c650ce5aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3242e6b-9716-4e9f-bd58-991fd7970a75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e71e0bf-e353-465d-8f2b-cf494e9c50b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8488e0f-0be1-49b7-890e-9630b33c66d3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41ce413-37f9-48b5-a995-a4ba2fcebd53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f675776e-fec5-4713-b7ff-e8a1491b2c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "674e8eda-b0d6-4686-a7d1-ae49ab4db8de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "215b2ec9-c443-492e-8424-5621f9a578bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f85842-30de-41f8-98c0-0c24cc0db709",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbbc77f-b2b9-49cc-b083-c2dcb5c9ee14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7dc609c-7342-4bb3-802a-af0a6cf6b802"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5808d19-05bb-47e0-a9fc-1feaeed811cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f42f43a-7719-4e0d-bf50-bc8b37c0b80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aab305b-82fe-4967-802a-a22505b147b9",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc6663b8-d57d-4ca1-a0d9-a0ea89b32ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a43929-f783-4137-af9f-06efb42662e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea9fa9f5-984c-4108-9648-c52de0ed7eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c11f7692-3f73-4a53-9d13-453fb82fc2e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b85996dc-cbd9-4b1f-b02b-d9d89eb34df1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6e6dd4-d1fa-4f31-b835-1b1c8f2c2fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e43a7b60-5c38-437f-a101-c3b3fb8255b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4099b4-d1c2-422a-a8c3-4fad3288da22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aada1a35-6439-4b42-b2b7-a9ca1a6b379c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11558df-3dc4-43d5-9969-a403055c590c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8532c5f-27f8-4134-9e0a-c100028706ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1ea3c6a-6e0a-456a-8067-37217623a614"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb34304-6f52-472a-b0d6-03959e48e130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9d20adc-c8ae-45d5-a336-12bfab5b0027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10e0625-28f9-4bf7-9809-7ce54ab05f9e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db75c2ef-81c1-43f0-9f0f-0d5900789107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15916894-e983-4fdd-a64c-f032ee6f8259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "138b3594-b438-4bcd-80d5-3364b335fdc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64af51d1-f599-49f6-ac63-a80bb20e9a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b718bd15-17eb-4b2e-a1c1-b56677737879",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75bb7c54-7cc5-4ef3-9bf7-757c7f9c29b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f580f268-d159-45b8-9ce9-4dd2204cb5e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32890db9-bd60-4067-9c5d-c232e195e6cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5b3f5bb-65dd-4fdc-ab35-ea21b45688e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac165022-11d4-4206-9180-a93ebe778db1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b74dfe4-0053-4798-8ff8-c29a3428a614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab2f1d2-e1f6-40d7-a058-d06d3ef26283"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "113d349c-f031-4892-a565-726e45e8d539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef580771-05ae-4ac0-b565-189a2774369b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8bbfe7-f158-4485-992f-089471d01088",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54bc8d8-63b2-4b7c-b8a4-dec3bbc0d083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0222190f-6114-4eaf-a586-6aad3800e992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9a8e5e-1ef0-4887-9893-28ca2ca1b43c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e764802e-9a0b-4655-9b16-5bced855d1e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f37513a-292b-4fa7-a208-09f3f9db825c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786e03ec-f1aa-48b2-9c69-fb7a2892bdfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d3708c7-c24c-4ffb-b9a9-6cf70eae9c64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa999fa-f4cc-410c-a8ab-5ecef1e502ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c7af629-4c09-4a9f-b5be-b98d58aa7506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a1faa7-6e69-4947-85b6-921e88486da1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a687c28f-59ee-49dc-b1cb-ca79c0b8c812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784d1a44-2b13-4c0c-b5b2-255b42b398ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1606f982-8d98-4e2d-b04a-4174dd0acb6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c18eb714-b359-478c-8732-fa23be012874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f176ef3e-abb0-4d2a-905d-e40367b39464",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9368d6-d832-4f0c-bc0a-be90479d7007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c39325b-795b-4847-831f-ad5c793b8fd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2360332a-652b-4094-b83f-ed85e5b3bb66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40e5aa10-dfb2-46f8-b433-08840abac40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c2dcd76-5810-44f1-a9fd-e9a6b3925477",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aefd346-af2e-410e-8d8c-e951292dd594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b55038c-cc93-4c5e-bb41-d5b39c18c647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1c186e-df74-48c0-8abb-d43abee4851d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c44305-b4ec-47d7-83ff-5fae3eb15f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73cdc38d-87a7-430d-b05e-e14e9ff2b089",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d469a9ff-92df-4f76-ad59-f5b1f7b7d4e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "555b188f-5c25-4066-b959-70287cf58b99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74385d09-bec7-4325-855e-f69e3d94d6e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b99527-6862-4992-931d-74cfc30c7f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43c3bb35-4748-4e2c-83ce-c10694bc779b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe27f19-f83f-4b94-91b8-11e868e4a9e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a3cee15-c497-461a-ade4-0a45f66e29a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6eaeb2-d02d-414b-912b-597dc1c06122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "629d4e55-ef36-4b0e-adb4-f5953c295a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82d8f5d-163d-4a09-9dec-0e2bc7730561",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89abba28-a8c2-4a4d-9170-7eff34b5fbf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d63d28-a565-4346-b43e-43c38f846a7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58638b78-741c-4335-8f23-ab0e695ee0bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf79d86-a8c7-4eb1-a494-e2362968f60a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba52f22-c942-4198-b7b4-04036bab2ecc",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11b4a10-2924-4c3d-8c57-c32969ad7a99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b650469-a86a-4d4a-9c80-ae59cdc5b0be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3de62bd-c959-4571-b832-ba67f86c5533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01513d56-3b96-473d-a90d-95b86bc4bce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6129972c-3bfb-44b4-8c2e-462826ecee7d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7cf8c1-e969-4b81-993f-4539bdccf486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34bd51ad-1f7a-4864-9c97-1733c053530c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9486228-dbdc-470a-8ef0-838f21a31b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25137d52-c3b4-4626-8ad3-722ce9dff7b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50226f8e-5f36-4f47-9f3e-6c6c7e8b626b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "379fa90e-6356-45c9-8de5-eeeac3606d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b7ec348-abb3-42b5-9943-0b8e695a2565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe5df4d-a627-42b0-bd04-6f0b5f92f4e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e22d8a42-9c6a-4cb6-a3cf-697231e5ab6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e0df46-299b-45e9-9328-e1f752a07610",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ddaf6f2-65df-4e56-890d-b8be314dd44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7365cb2-7b7d-43c5-94f8-ea1b9ae4abd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5079fb95-62a9-4cbd-a890-e6a0bf23ce17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff8f36b2-aa10-4899-bb53-15cb492c03a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029e5aed-03ef-4849-bcd1-d68fcd2e3855",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e574023-84d5-438a-827d-094084cd3f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "355b0e45-f076-48de-a8ce-d505ac773718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2bcb1e-004e-43a8-ad64-0fb0d614619f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed82f8c7-6973-424a-9fda-16e0cd75857c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f8612d-e4b2-43e0-b35c-8a80f1dd3343",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d5d5b1-7ade-4e10-bd76-da38c9f3b36f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "948fd32f-b3d3-45c8-b2fd-85dd1019a22a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba9401eb-62b6-4626-a5a2-748421022705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bde8eb2-057c-45b1-9e56-764c24b31d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb8136e-b8b3-477c-a9d1-6440d859842b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e0c726-073f-4254-9280-73672b3e6cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf9fc01e-7ca5-4a22-86d0-067870d34a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89bc05e1-f81c-4f13-9027-6b8a6dc92915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42b6fa5c-f741-4682-88e2-c49d891cb610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6205762f-3964-4290-9266-3ea2570e1510",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b118bc-0c0c-4cdf-9d03-b0506f81058b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b0223e3-1a0f-4e7d-9f90-337171b252b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b991ed24-3d82-4675-be95-97061179da87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b845630d-dc2b-4529-9826-83186db1e762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4cee62-302b-4df2-ab39-96a26352adff",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6dac68-0450-4f8e-9980-052406408345",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d683298-c374-4f2d-bbad-3ecdb9424289"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b39b4c-59b6-45b6-aa4d-6da38b5ace40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b758a39-5ca1-417d-9b7f-a11b86cf8c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feeb614b-5d97-4e0d-b8f0-4003630f36e9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17044bfe-3e27-412a-8fea-b078d16ad3b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "547762e9-4b10-431e-821e-a27f78500c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8c03ce-fa0d-44ac-86ac-d4e8f6fe35d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c97f7968-3919-4057-9066-ce466583b4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e73673-5552-4981-87f9-a5a68c939221",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb05829d-08d7-4c25-828c-2edb727bde7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49496357-740a-45a1-903b-cf6a22b678bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "740fbd65-a98e-4112-904d-16bbd8f55391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1bbaccc-3892-4721-99e2-ad9501774fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7855fd06-5689-459c-ba6b-9bd23609e3cd",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7179093-74d6-4abd-877d-90dcb148d5dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c93b46cb-7c9c-445a-8eb3-8e6532538e9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2776eae0-53e7-4649-9147-f5aae75f9526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4a0e6bf-159b-45fc-b67c-94e7345a551d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5654b854-3d04-4ba6-b104-1fe41aa85ec0",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5360b97-c913-4ff1-bbca-8c1b3cd2cdff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae70bee3-b6a3-44e4-a8ba-f11b544b21af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7af57a-b65c-4b8d-8c28-db38002a7052",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d1f8f3-e43b-46a8-9ec2-2114f8152060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a7e6bc-5b1b-4c68-8ff0-0dd57064d86c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f144f2b-4f02-4587-acba-7e88cdfff283",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afc7d8d7-12ea-4cbd-80fb-8c17990adabf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25bdbf18-e3a9-4d39-9cbb-7eab08cc89ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae870507-0fec-409c-84f0-89b3e531622c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03dab984-4fb1-43db-8257-7517dae99478",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "442becec-9047-4e2a-b73d-212ef22e119b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19e8209d-f8ef-433a-bf27-40b32f6d6493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d5bdd2-51fc-48a6-96c6-c54c2ca01de2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a78c7e-89be-4776-a53c-8088dfe60b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e79a3b0-2184-46ad-8c84-995a577d2caf",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d139e26-116a-4a11-8c55-2cd4372b42e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f243457-7f96-4814-8752-f7687cfeec07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92be2d9-2c88-4d9d-88ae-20d8b0433068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bca63fd-bf6d-47ff-b891-6467b4b55d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b451e04d-4a6a-4423-90a9-7b7e0179b13f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5be0cfd-5672-43b7-a408-dae4bca3a04f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b27e2590-19b8-4c58-806d-64253be1d5d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7172c6e-1fcd-4837-82f7-18a81bcf56e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ae6120f-8f89-4198-97e9-84bf881951c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4fdc946-2528-4c62-a820-b258d45749e4",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0010cf42-766a-4ee4-ba96-b2fd78ddfe23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b77cb410-0176-4cd9-8b75-33a5c2a9ff21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1d4848-7752-407c-806d-75301a302963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d8acab7-ab03-452d-86a5-3a0675a03d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9464f62-77a1-4ab7-b298-033eb4217a24",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f188a3a5-53af-482c-af8f-0a32c45a541d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0abc8868-1e8a-4663-a493-3b13b423cd49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17727437-d10e-447a-99ea-ba127853b327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3542059-0a4b-4e61-8c5c-ccf3fb40ca16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a312efd4-154f-4f37-b07f-9cd92f3ae48a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ddfddf9-31bb-41af-90bd-cc1b8bd6c725",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1656c51c-87c6-438f-aa50-7091532c08b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca53d543-9af9-4942-8270-bb36e051be85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07b9feed-97fe-44c6-a1b4-b67ebb9ba0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f1ee0c-dd25-4c07-bc72-d303d28f675c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8e46f7-224a-44d2-9203-6b10a1f76cd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5529d7b4-f711-4cf9-81e2-3c5929a1c550"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f85a502-1588-4ffc-8ca2-0f1b610e83d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68964c5e-00bc-46d6-a7b2-322e9750f68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53b8a71-0681-4fb8-b364-4f6548e0de4e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42401e26-8feb-4a13-baff-97acc5935faa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a75699e-db13-4e86-a120-54a15814856b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba67fb6d-a800-4066-af7a-d5fdb9f23bd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d0bab0-082c-469d-bf43-d24420e3002c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf366151-e947-4da6-8a40-6914d0e71d0f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc51dd1-6115-4feb-8180-ebf3f148cae6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c328d30-6245-4920-a99a-950068288460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf1b76d-66a7-4dff-a97d-c4ca79d3b57a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d169f18-ca59-4de7-8913-759b932a9eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a095d0e-5ffb-428d-b7dc-bb5510128806",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70873d8e-2f0a-4d4f-8ca5-fbaa8e59dce6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a1dbfd1-f00b-4b1c-8110-1c8ecb475daa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "681f7ffb-8445-4d49-9dc9-55a2fe028ebd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca8c6815-2a78-4025-94fb-1595b9f38f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcaea7da-22c8-46b8-b42f-3a8faa830f29",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17593b7c-788b-4934-b33c-7d696983d0e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "838fcd5c-8c22-40f6-8059-e9bd6185a35d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "105704ff-b4cb-4190-b5d5-1af48f97c126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4483da49-06e5-4a90-80b7-d7e8d567e876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db3469e-fe98-4265-9268-5028d8ac12e6",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd4d314-5dd4-44ac-b088-88aac807fc89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c120ba82-1237-4a45-957e-ae9259dd1000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298e6f58-193d-4a58-b8a0-45daeeda89ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ed0fab-886c-4500-af0c-cb532a473d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec341fea-1c62-4555-8902-9f0016133f0d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f7cefa-84e0-4677-a270-d172ba31759c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "636a8016-8365-41ca-9ec5-7aa6ed3119d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1abd58-a8f6-4f7e-9b5f-cd9d718d91b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec4b565-f400-43fb-9391-a5ab83d12b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41677f39-df22-4da4-a10f-0ad563a08609",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869cbd43-1bec-4de6-b762-93462c638178",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f8dbe78-25a0-4e8b-8363-4f06f05e9cd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d81791-d01c-4e61-8958-a194cb60df8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3248a684-81b4-4fc4-be12-38e0744a2c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69ece30-2357-491b-ae25-9d5217b9874e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06581013-6567-42a7-a480-1aa95996d958",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9441bb1c-5b65-4874-88c5-e36e8366f5db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbec1f96-8f63-489b-bed5-925e2c5456a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa41623-0f32-4ed4-981a-12d5e89e290f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b85c6601-da7f-42b2-912f-9bed0027a7b6",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a60854-014d-4aa2-bbe4-7d2219c57c91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80402d42-218c-4975-b47b-70574e4f539e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2f0249-88a8-4192-9992-ce8284493933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c5d13d0-f958-4ceb-bc58-ee488b1ef002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0561cf09-3714-47f0-b583-e6ef934a9bf3",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18d3aa5-7f92-4420-be7b-62da57cc0072",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f72e0f8a-a20f-4c8e-aeaf-0f54750a82d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f005a4-f0e7-421a-a970-64c0237cf0ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f9257c-d945-40b9-a0bd-3916e9cb798c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60ce823-ecdb-449a-b0cc-9f0712e82d0d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b9fc3f-fde0-4446-afe8-21705f612d39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63160e4b-6944-447f-ab07-54416d2c493e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf276fb-a030-4754-bc23-3ba3ece1274f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e378de80-7eba-4c95-9585-c8b338382cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ece445b-be02-4514-86f2-b7257d6f80d8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b693d6e-cb82-4499-9d08-4c52a39cb94c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad6edf7f-258b-4ce5-9a79-35da98db8cf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b0201c-7bcc-4688-a0b7-015c61acb9e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5caa231e-2b63-4d1f-9aed-de442d35f30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235afea8-3131-4fcb-a287-df753cf81438",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba8a064-912e-48b5-8c04-07aeba220437",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7fb457d-e508-42d2-b93b-52bd742cb722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0a996d-8a7d-4c0f-b788-657ec361620d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2adcf3-1c19-47a4-893a-c65215342baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4fdb90-efce-4f57-a2e6-8ddea9e52f4e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d190712-2b15-4853-9f82-ca5dd46247fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d802887-072f-4881-a1d6-bc8005f79c7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2137b773-78f0-4647-9437-edc7b2c7cd11",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f38d43a6-5998-4407-b68c-8912de4d2652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e423579-007c-48ad-8c66-349a73b4d69a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a156893-ad3f-456e-b78a-3bbb17fe98a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d9d3271-d19d-44a4-8be7-f94bceead7a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6eb749-c364-4947-9b39-db530317e2cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb13673-9f6d-4fbf-8e8c-2b79e15f4f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79fd963-52f8-4e00-9a3b-8a49b581cefa",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b76019-85b1-463b-98ad-738db2a2dc62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16d28e02-4bc2-4d8a-959b-ffd0032a5b22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7b163d-c745-4d53-a873-9a32af26cd95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efb48a34-cc93-4da3-b054-5cfdeefeb566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd6a256-1119-4c0f-8c6a-79028757418f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a086a3-79f5-4675-b864-e0636530228a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f626f278-35d2-4e03-a583-bf136729680b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ded92c-3ddc-4463-81da-cb2536014d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad9e2652-4baa-457e-b249-d1f9935f1dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4464b0f7-34c3-4058-bab5-938e729b5c80",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b220bb4f-9161-4905-876e-bacb24c44c41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf196841-beda-421d-911f-cc437951a16f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c9a85ed-3892-4f24-ad66-18e7a3f5f396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70ae17fc-ac22-4349-8495-42c9c62d0672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15232b8e-d310-45aa-89cf-46f87ed3bdc2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97d50b6-19e7-4b4a-91de-fa709e224cc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14effb9e-c1ad-49e4-97c7-8b7ff7347a96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed328a6-c1ca-43cc-8f30-b920e59e4a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "649121de-bbb2-411a-b9a8-00e3884743d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a9afd3-02c4-4b13-92ed-4df857e6b636",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ba461e-afc7-4afb-acfb-0eed84943632",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33994be0-e742-4912-a00d-6b766ae0bfed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e07ba7-346c-4950-9fd4-9f3ff7ea4ee0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b157b26-5fb1-49fa-919c-19ed4d0fe683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6d54fc-fba2-4f3d-95f0-bef930f4283b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db90de4c-89fa-4272-bc49-789cb1afd276",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bef390de-088f-4cd4-80fb-5afec1f7f93b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5699469f-0e38-454c-8863-bcab52fe106f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ee9a3e-dc90-4b23-9423-49727ebccec3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecc636dc-3917-42a1-a749-fadd5aa99cf1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "478a2203-f3cc-4f75-ad20-4bd255f7a09a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8595abed-1d3c-4bf1-ae83-944adf5a1269",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04a2bbc3-3bf1-4f0b-a9d0-ce1d0f90d9c3"
                    }
                  }
                ]
              },
              {
                "id": "2d8077a5-2351-441b-af7c-692b4f7e1f14",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a8869c81-474e-49cf-a00c-7b2cc76f9f3d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb8b002-045e-4eab-8a24-40659a716033",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "04730782-1dcd-4071-9ed8-2315f01b8ffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "195de47f-7bb0-458c-bbfb-23736f30542e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3981d86e-6edd-4acb-bf14-7edb3505f64e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f3807a-2793-484c-b849-1ef3b950428d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15c1150-16bf-458b-95d6-2f88e1a3d27c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "046f0afc-bea4-497f-84d2-b38cb9fb14f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca5a1b4-25fe-4b15-9862-eb8894ec3bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3feeca11-d29c-4ca7-a1e0-5ee66809d9ee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "065825ca-e769-406d-ab04-9c4597817068",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3aebd39f-ff45-45ba-b812-d4dab0e25fd4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "52121e6f-8951-4e6c-8016-c0fb7d0b460d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a71cbb67-ffae-4f2e-ba22-df7e669e0058"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "d7b0dc22-4813-44dc-841b-c2214ef76dbf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "859c146d-adbe-4053-ac6e-6c707798fbb9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86834ad0-aae6-4749-934d-a0b1ff40361f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "45f73a92-d74f-47fc-ae1b-ad21a93300ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e7db87f-a965-4b4f-91a3-3878e5f220df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97531338-5903-427a-8733-9075a9aff65d"
                    }
                  }
                ]
              },
              {
                "id": "f1f7b615-833c-49d4-bc8c-570ba1d9bb18",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "812d30ee-7eac-4178-bb61-27edc23812ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bd96994d-ca31-4286-ae43-daac454e3e1a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bde169b2-cbf4-4b4b-a00a-8b9c52aee62b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d02fd713-10eb-43bc-a5a5-0038956a4b26"
                    }
                  }
                ]
              },
              {
                "id": "4cab011d-6819-4a06-86f7-cc6a6e2fa875",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6bd2e8b2-f0f7-4a8a-a202-58b14809e1f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "00406147-96ce-485b-9b6f-6df7f443fbff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2517b27c-bee2-45ae-a1af-7290786a2278",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "457d53f1-635f-469a-9757-27aa8078d0e3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9148434-a57d-470f-87f9-b569b4f6b11c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9712e720-47d2-441d-bbbc-d5dee1cdd96e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "166f9cc6-ce9c-4112-9750-df79638c1243",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7d94349-37d9-4535-8587-190695b3e224"
            }
          }
        ]
      },
      {
        "id": "ce972f92-9d6e-4115-8ede-2180e6dcef48",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "be4353bf-ebca-4c0d-a081-8cd49f918ac4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "666f7279-4cb5-4b80-808b-83c9fd47be28",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cf46e96b-f804-43d4-b8a0-e595d756be41",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f7e802a-9db7-4c65-b0b5-77660a3ee474",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2c5baecd-0204-40c1-b9bf-ea526dc3f5de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d05d767-3d35-4e99-9fae-8026b6518d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e55a46ed-f0c0-4659-b561-602358c748e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8154fb95-d887-4857-9184-67ee4f886a27",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe182ec-f31b-4422-a4ce-ace2026017ce",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "013483af-d84f-4c1a-bab1-bf34970892c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4e89e8-e039-4e0a-b995-12737462dad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e937d9bf-4a70-4373-a785-b5db3cb28e64"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94fdd86b-ee1f-4173-812c-88c91f63c7e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a63db890-5745-4636-ba43-71e0f22a48c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7aa62a3-2058-4396-b34d-00b0ac75c337",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64d5dbf6-47bd-4d40-9e78-d210d57c9b33"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8de7f043-6123-489a-ac5e-87cf8c3fc23f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d342664c-4567-4a74-865d-6530fc240a79"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73902228-52e5-4139-b660-2ea530a1dba4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af843bf9-0954-4d7a-a803-39c9044fbd72"
            }
          }
        ]
      },
      {
        "id": "1a26286c-15fc-4c17-b8c3-c4233086e9db",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7eb506ec-2905-40fd-829e-2d421c1d7812",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5e6e5c5f-ecb2-4a7e-8c64-8779da7060e7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0041e7c3-ae39-4066-b138-91c2120efe9b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09414cbe-2d6f-4cbb-aa3b-2215e6610ddf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dfa7b225-3f23-468f-b117-aa4007b7643d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3dbeab8-2bc5-4da2-b215-479969413a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "263b9254-ace1-4417-9fef-704bd11bfc04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e228b4c4-2771-47d8-98b2-419e8e075e15",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e01fb8-11b2-4ac1-9333-a9ac93ff944a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4c506d32-909e-4073-b91f-f6aaabe1374b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "079d9712-2abe-42cb-8d42-ac24c924639c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae32fbf8-d112-43c5-abef-fed4027ece57"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "04616913-8367-4eb6-a08f-c9b3169c6d59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5cc3f73-2bb3-438b-bc41-f5d8fc415e42"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "31a07fd3-95ee-4d42-916b-4d7cfe03d1fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "181374c7-020b-4359-952c-7ee1dc52f60a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "185d4931-6fb5-444f-8c24-ce7d4595d4b2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "032582c2-0f37-4537-a55e-50cc8de7183d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db2ebfc3-db85-499c-bec2-0ce0ba139b04",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2dace112-fe81-4bb1-a74f-de0fb9c3331e"
            }
          }
        ]
      },
      {
        "id": "2e827892-98bc-4b25-a387-dc611fb893d7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "74d658d0-d1a8-4e9c-8a60-72de63a86aa2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b29697a1-efc7-4217-abe2-b0ff6914b98d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ebebf3ee-2290-4c52-af77-c60b1fec33c8",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d397dd3a-7dbb-47f9-a8ec-08a3622fd047",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f24d572a-4de0-4f5c-8107-27ec9a08a18e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a7ffe88-0ac6-45a3-9df8-15c5256afd0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95f1add2-af1a-42c7-bbfe-815f90f1589d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6094e0a-8ba6-474f-855b-cd207cf170d0",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b519dc9-8a60-44ab-8615-dfeec53ec82a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1a9be28d-afa6-4e86-8668-da6a0fe5f06c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bf6901-018e-48d8-8378-cd9b4fe369dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6eee578-564f-4cf7-8e76-5d41db31c52b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89962ad1-29ee-48f4-9ed1-62e0f47eeebc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef4f68d4-d6a8-44b5-a1b9-3833911e88cd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b154cb1f-3c69-49b0-b6a6-1279634b1f97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f61a095-70b8-4e32-8ee6-771fc0476e74"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "308deb99-8b1b-4bdb-82f5-3341411138d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5fced786-07f8-40c5-9c89-60fb812bcc13"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf13a3fe-09f8-45f3-a1ef-bcbb2bd39aac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ba42d99-6868-4470-b7eb-ea95b48eec54"
            }
          }
        ]
      },
      {
        "id": "a2971417-a881-4565-ac75-ec2c9c9fff1c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c791a15-7eeb-4ed1-90a2-e9dd5ef63e38",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6208c4f5-2506-408b-b4fa-eb730d3c1f09",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e16a814a-d395-4d6a-a01b-f7bfa383e413",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5e8998ef-294e-41f2-a4c0-7d11a4ff9172",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34275103-7e25-4ebe-a587-7df27b771c1d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 103
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 120.6423076923077,
      "responseMin": 6,
      "responseMax": 609,
      "responseSd": 108.10752721632481,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1668386598389,
      "completed": 1668386643265
    },
    "executions": [
      {
        "id": "f4f31de6-8497-49c5-aa5a-47ff4872e45b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "df663f8a-f99f-4133-9740-42074b843ca7",
          "httpRequestId": "0d373480-d4a5-4ff1-a65e-2cf89d8a9ce9"
        },
        "item": {
          "id": "f4f31de6-8497-49c5-aa5a-47ff4872e45b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8445c034-65d5-41dc-b283-e5b00afadec3",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "c60fa381-cb32-4a56-b07b-10ebc520784a",
        "cursor": {
          "ref": "c29c1c95-a4c5-4112-a536-e12ae63ac328",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8bd2f395-7750-4da0-839d-bf536bec5040"
        },
        "item": {
          "id": "c60fa381-cb32-4a56-b07b-10ebc520784a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6696ac38-143c-4819-a1fc-cb34fe7546b5",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "53d8f058-2084-4202-a1b3-821c6da933f1",
        "cursor": {
          "ref": "1bc0cd64-fe58-49cc-95d0-ea55bdd1132c",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "72d3638b-64bd-4b98-af14-ae2357832cc2"
        },
        "item": {
          "id": "53d8f058-2084-4202-a1b3-821c6da933f1",
          "name": "did_json"
        },
        "response": {
          "id": "f068a582-d8af-4426-9cf6-811a6735b43b",
          "status": "OK",
          "code": 200,
          "responseTime": 214,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ffe1ac-b747-45f6-929f-65f048e315c3",
        "cursor": {
          "ref": "149ac5d5-ed83-4f14-9ad2-ef00471d9e74",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1803fb2a-9bc8-4278-b570-1b71ac86b1e3"
        },
        "item": {
          "id": "87ffe1ac-b747-45f6-929f-65f048e315c3",
          "name": "did:invalid"
        },
        "response": {
          "id": "4faba136-b57a-47fc-acef-74df1acf7171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ffe1ac-b747-45f6-929f-65f048e315c3",
        "cursor": {
          "ref": "149ac5d5-ed83-4f14-9ad2-ef00471d9e74",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1803fb2a-9bc8-4278-b570-1b71ac86b1e3"
        },
        "item": {
          "id": "87ffe1ac-b747-45f6-929f-65f048e315c3",
          "name": "did:invalid"
        },
        "response": {
          "id": "4faba136-b57a-47fc-acef-74df1acf7171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e28c230-1591-4468-999a-821c3209382e",
        "cursor": {
          "ref": "21584f3d-db64-4edb-b6eb-85685e3607fd",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "68acdd87-49ba-4c4d-a978-4681afb25260"
        },
        "item": {
          "id": "4e28c230-1591-4468-999a-821c3209382e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4d250d19-a587-452c-a686-8f67326de4fc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 168,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc083aca-dc38-44f3-8cfa-8ce21ba1058d",
        "cursor": {
          "ref": "c8a1f56d-8983-4888-bac3-72e9335c47d1",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dfdee4a3-c1b3-40b7-bba6-7bc468931567"
        },
        "item": {
          "id": "bc083aca-dc38-44f3-8cfa-8ce21ba1058d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d4de59de-7662-44b2-8af7-daab2fe6b379",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32f7609-0d2b-4ca9-b40c-3b7a57db10d3",
        "cursor": {
          "ref": "e3bdc880-2264-4409-b39d-69cb6b53af01",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b4aef103-8fa9-49a0-99f3-dff65e660e86"
        },
        "item": {
          "id": "d32f7609-0d2b-4ca9-b40c-3b7a57db10d3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1564abb9-5ee6-43c6-9a2f-f75ab0dfc019",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "492510ae-f6cb-4223-8568-477c23bafa22",
        "cursor": {
          "ref": "07253948-b1bc-469a-94d5-4748b4fe5313",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1ab3dabb-1b33-4362-afbe-8997c1250090"
        },
        "item": {
          "id": "492510ae-f6cb-4223-8568-477c23bafa22",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "063e31b0-edbd-4646-b4b5-dc68ff7339b3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "492510ae-f6cb-4223-8568-477c23bafa22",
        "cursor": {
          "ref": "07253948-b1bc-469a-94d5-4748b4fe5313",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1ab3dabb-1b33-4362-afbe-8997c1250090"
        },
        "item": {
          "id": "492510ae-f6cb-4223-8568-477c23bafa22",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "063e31b0-edbd-4646-b4b5-dc68ff7339b3",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62af661-aeaa-41d8-8546-84e7cc59d039",
        "cursor": {
          "ref": "6a00226e-f4de-4a54-9b63-0d7c215c4f73",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8e34cae5-fc64-4ff3-9794-5aed49b31c84"
        },
        "item": {
          "id": "b62af661-aeaa-41d8-8546-84e7cc59d039",
          "name": "identifiers"
        },
        "response": {
          "id": "39f6711b-0523-4095-a52c-f85d90e466b4",
          "status": "OK",
          "code": 200,
          "responseTime": 168,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9a3014-a162-414e-8dfe-5d1ed53d5f82",
        "cursor": {
          "ref": "07a18d4f-7f34-4be0-992b-5fc1fd9c3ab8",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2ca525d3-9f10-4eeb-9bcb-e9cd7753b849"
        },
        "item": {
          "id": "9c9a3014-a162-414e-8dfe-5d1ed53d5f82",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2eb81f89-51ca-417e-809c-ccffbe120e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9a3014-a162-414e-8dfe-5d1ed53d5f82",
        "cursor": {
          "ref": "07a18d4f-7f34-4be0-992b-5fc1fd9c3ab8",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2ca525d3-9f10-4eeb-9bcb-e9cd7753b849"
        },
        "item": {
          "id": "9c9a3014-a162-414e-8dfe-5d1ed53d5f82",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2eb81f89-51ca-417e-809c-ccffbe120e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db58a7b8-a195-42bb-bab4-7be575496624",
        "cursor": {
          "ref": "c29d3105-95dd-4079-a68f-f97f6d6db6a6",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "781c1fa4-6834-4488-b162-1d92a5a743f1"
        },
        "item": {
          "id": "db58a7b8-a195-42bb-bab4-7be575496624",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a0062ea9-089e-416d-8fc2-cd28ebf4dc28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bf4c111-e334-4f9d-a535-c113eaf9f804",
        "cursor": {
          "ref": "b443b01f-fe83-4781-a406-97caab2df434",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7760c6f1-0d87-4cdd-b18f-186eecb8ff33"
        },
        "item": {
          "id": "1bf4c111-e334-4f9d-a535-c113eaf9f804",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "90dab128-27c2-4163-ad01-e2604e9c64f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5767b4c3-e030-4140-9b84-ec425b98192e",
        "cursor": {
          "ref": "9b0e07ad-0ca8-434b-bb13-ffb74eabf98f",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "03624241-60a1-4034-91f0-57c9a3e0a116"
        },
        "item": {
          "id": "5767b4c3-e030-4140-9b84-ec425b98192e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a732fb84-25b3-453f-b0cb-0bed6c1cf1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87dd0b6f-3813-4d68-ac94-6acd805a42e3",
        "cursor": {
          "ref": "a75257d8-9610-4cad-a187-4b4d967baefa",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "db5ffda7-b837-4186-9512-bb75b82a1cd8"
        },
        "item": {
          "id": "87dd0b6f-3813-4d68-ac94-6acd805a42e3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "045f3bd5-8b02-41ce-af34-106cff058474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89960ef-33d1-4df5-8af9-eb9d23280635",
        "cursor": {
          "ref": "74fa16fc-59ca-4ee5-b261-5106215b12c1",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4bc0f078-2f27-4f5c-91d4-3103f7e7f527"
        },
        "item": {
          "id": "f89960ef-33d1-4df5-8af9-eb9d23280635",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c0a65dd0-e829-4527-bd44-effc5afdb7e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c46ca927-cd21-4672-a112-6df300111b97",
        "cursor": {
          "ref": "b6bd5690-5282-4c39-9d5d-5ec3fd9fd25e",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "210483f7-8595-43e1-9742-212acd2a9a3c"
        },
        "item": {
          "id": "c46ca927-cd21-4672-a112-6df300111b97",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "34295a78-d93f-42a2-b28d-d32c3238ab5b",
          "status": "Created",
          "code": 201,
          "responseTime": 510,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "d44b67cc-7bb2-4dbf-bf43-5392eda8047b",
        "cursor": {
          "ref": "09fa7f12-c47c-4212-a509-4e78f830d809",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "570d4904-2217-4f5e-9a5e-cbb11c09f013"
        },
        "item": {
          "id": "d44b67cc-7bb2-4dbf-bf43-5392eda8047b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f769686c-691f-4bd5-bbd3-5f58d5c67f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c4b17b-02ed-4b4b-b830-5ba485da3fa7",
        "cursor": {
          "ref": "9772a86a-1d5a-41b3-8aa0-f4ec9b49e31c",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a0cd3828-b759-430b-ac01-adfcd980a040"
        },
        "item": {
          "id": "18c4b17b-02ed-4b4b-b830-5ba485da3fa7",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "73dd6ce2-8433-4213-ae84-9cb1ec9a12f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91cd711e-9034-443b-92db-36c8f8c5360f",
        "cursor": {
          "ref": "1787004b-01ac-4b34-a3a2-e6b3cf446209",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0316556c-b198-4f88-88a2-6d7126b59c82"
        },
        "item": {
          "id": "91cd711e-9034-443b-92db-36c8f8c5360f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "59e17318-8671-4670-b346-8cc034f407c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72083396-361d-479d-a061-e728d8d74d29",
        "cursor": {
          "ref": "e236708f-d167-4fcc-be71-aae81f20841c",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "66aa34e7-fe27-476a-8da7-f0adcf55ac8e"
        },
        "item": {
          "id": "72083396-361d-479d-a061-e728d8d74d29",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6314bf95-2c26-4387-9cda-db265cac5492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f207de6-9c95-4590-ae15-efd68e1543aa",
        "cursor": {
          "ref": "c49a21a8-c25b-4e28-a6da-1ec1582e450a",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ac82e1bc-f705-4ac5-9224-239befd2f588"
        },
        "item": {
          "id": "8f207de6-9c95-4590-ae15-efd68e1543aa",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "06549f8e-d245-4399-bc9c-82a292fff880",
          "status": "Created",
          "code": 201,
          "responseTime": 336,
          "responseSize": 609
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "b68f1cfe-a8f8-40b2-899e-ddf55ac2a73c",
        "cursor": {
          "ref": "79d03b29-2c8c-43f7-b2ee-6e42abe74d5c",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7bd4d07b-f3a3-45ba-98ee-6db6284d7819"
        },
        "item": {
          "id": "b68f1cfe-a8f8-40b2-899e-ddf55ac2a73c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8d3f0b27-3ff2-475e-8d00-b8ced8277dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25561a43-ae6d-4740-a67b-baade818143a",
        "cursor": {
          "ref": "a04f0914-9d29-48bc-8310-d1e1a9a0ac4a",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "336a3d6c-2626-485e-81f9-9dea4f34af05"
        },
        "item": {
          "id": "25561a43-ae6d-4740-a67b-baade818143a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "37f84574-3aa6-433b-90af-0da7f8567ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1233f673-819d-47dc-9a59-4bb755e2a6f2",
        "cursor": {
          "ref": "361bb22f-0404-41b6-8795-c277876b6ce6",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1bcefe23-ad3f-4269-ada5-5dbbb6e1d1a9"
        },
        "item": {
          "id": "1233f673-819d-47dc-9a59-4bb755e2a6f2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "00225eb7-743b-4593-a6f8-ef45f1a15d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41599867-9d5a-4468-ba18-09e2bcd39102",
        "cursor": {
          "ref": "59c45c29-3d31-4752-8460-54f757bebe4a",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8b840eea-a177-46ae-ac69-57e343ba4bba"
        },
        "item": {
          "id": "41599867-9d5a-4468-ba18-09e2bcd39102",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "dcc49812-5d8f-4752-be01-6a8cf2a42d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b925fe4a-0974-403c-b969-22b67da9eeef",
        "cursor": {
          "ref": "5c698be4-9d47-49c4-b4f5-4f23b054b46c",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "503bfe21-e479-4636-96ed-b6020870a13c"
        },
        "item": {
          "id": "b925fe4a-0974-403c-b969-22b67da9eeef",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "832b99c6-818e-46be-a264-4a4550bced13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aefb95a5-eca6-49a2-9f2c-0fba138d1f59",
        "cursor": {
          "ref": "afa9fd89-7a68-4e5f-8532-9ff1ef2e4e84",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c9d71674-c8d7-4988-b7af-6decf3434f22"
        },
        "item": {
          "id": "aefb95a5-eca6-49a2-9f2c-0fba138d1f59",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3e2b25d0-d395-467b-8140-a2dba9432160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a448839-8621-4a1f-8b7e-ce3837459bbf",
        "cursor": {
          "ref": "0a6481c8-3bea-445d-b6a8-394c1298efbe",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8f5a4644-3b0f-48e0-935d-1915b354d903"
        },
        "item": {
          "id": "4a448839-8621-4a1f-8b7e-ce3837459bbf",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fed3310e-3693-4bed-b6f3-802a54c2881a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d93876-4006-403e-919b-df9351d1cae5",
        "cursor": {
          "ref": "c0097a17-007a-43c7-9e87-c440e94962f5",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "37899c0d-012c-4932-af16-c6e80d8dfa8e"
        },
        "item": {
          "id": "37d93876-4006-403e-919b-df9351d1cae5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9d1430da-1bae-463a-8153-b7ae23cdc1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd3d2b4-c2e8-4a31-a74e-57c51563e8ea",
        "cursor": {
          "ref": "5e3c7dc1-6e66-44c7-9469-9ff60107a077",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "678e3dfd-a3f0-47f2-9800-9a75a29dd2db"
        },
        "item": {
          "id": "dfd3d2b4-c2e8-4a31-a74e-57c51563e8ea",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4e35d3e7-c26e-473c-9a54-981eb6845188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9db302a-b38e-4353-ae4c-217e94a78772",
        "cursor": {
          "ref": "f2b7d44e-1df0-4f60-968e-ae150db68fc8",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "191e63b0-8842-40da-a493-a02f9ca086e9"
        },
        "item": {
          "id": "b9db302a-b38e-4353-ae4c-217e94a78772",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "bdffeab3-7856-4d29-a0ec-8505c186305f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c2b14a-27c8-4c60-9f36-843ecde4548f",
        "cursor": {
          "ref": "6589a8db-6d49-485c-b2cb-482ea2da32e1",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b04202d9-1f57-41a1-8e59-2b989947a186"
        },
        "item": {
          "id": "c2c2b14a-27c8-4c60-9f36-843ecde4548f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5747375f-8453-49ec-a99b-a99f2bc88670",
          "status": "Created",
          "code": 201,
          "responseTime": 541,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "2923f8d0-6a70-4246-af81-50701cd7f70c",
        "cursor": {
          "ref": "cc658c1c-9914-4422-8b17-eab067a48a52",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ec1458ba-b3f9-46db-87bf-6852fb063325"
        },
        "item": {
          "id": "2923f8d0-6a70-4246-af81-50701cd7f70c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "edc3f3f2-f290-452b-80d0-cc3478ff1505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8003b9de-c7b0-4597-b042-f9bb13ca5bd9",
        "cursor": {
          "ref": "8a2e4b21-1677-4395-aa11-6ace7f06d253",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1a3d24ab-8312-48cd-a5f2-6c8a07ce6a33"
        },
        "item": {
          "id": "8003b9de-c7b0-4597-b042-f9bb13ca5bd9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e55a1a21-78e0-4ee5-b497-f499df33bb33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7defd8ba-3e04-4cdd-895f-6cdd89e4f551",
        "cursor": {
          "ref": "82966243-80f6-427f-a3de-50a0d38aacd3",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a1dc1121-dea5-4e16-8ac9-a9cdcd970875"
        },
        "item": {
          "id": "7defd8ba-3e04-4cdd-895f-6cdd89e4f551",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5ae2944d-3806-4190-90bf-e419766bc0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e148ce12-3ba7-4366-8857-cde966104408",
        "cursor": {
          "ref": "c046c071-22ef-4015-8dd6-d3b73320412e",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "204c0c84-24ae-48ce-a526-3bb0a5e6f4f3"
        },
        "item": {
          "id": "e148ce12-3ba7-4366-8857-cde966104408",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0baf5b0a-e93c-4a02-97e7-352973188131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2403f5e-f3ad-482b-a823-255646e1f44f",
        "cursor": {
          "ref": "0795d4ed-067c-453f-a398-2cc8718dfe3c",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c4217e24-cb99-463f-90a0-4c7e84635dc8"
        },
        "item": {
          "id": "c2403f5e-f3ad-482b-a823-255646e1f44f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "69a3ac18-68ba-425c-9570-88775b23d246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8e5a36-8b80-4cc4-8e60-c764353c2499",
        "cursor": {
          "ref": "2e677689-7cfc-452b-bdb5-6f13bf84465b",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ed1be745-ead2-48ec-92e4-9b501b47d4cd"
        },
        "item": {
          "id": "db8e5a36-8b80-4cc4-8e60-c764353c2499",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4299f4f1-cf1f-46a2-a661-1348090a94d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a07723f-0b70-408a-8d25-8f2cf18b67a7",
        "cursor": {
          "ref": "cbff76df-ccce-48d0-8ef4-868c009e8c39",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7aaca73e-a448-43ed-8961-536a97991fd6"
        },
        "item": {
          "id": "9a07723f-0b70-408a-8d25-8f2cf18b67a7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e6f33bc2-71ad-4f07-8718-fe6d892ce86f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7820d76a-3ee1-4b64-bb0c-e8af5a10ebd6",
        "cursor": {
          "ref": "4b442ae5-3e26-44e9-b5ad-f4497f8a23e2",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e259274f-49a8-4d12-9de3-5d54012eeebc"
        },
        "item": {
          "id": "7820d76a-3ee1-4b64-bb0c-e8af5a10ebd6",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2538e2d9-15bc-49ae-a257-b11a87ce6135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7328d89-702d-4af1-a5c4-dd010218db27",
        "cursor": {
          "ref": "bd4268a8-471e-4d9b-9591-5d165735f9dc",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d620b99e-56f8-4d94-ba2a-f582f0e01067"
        },
        "item": {
          "id": "d7328d89-702d-4af1-a5c4-dd010218db27",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5417ea66-ae00-4e66-b99a-a71cc22735e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1a6b5c-6300-4a9c-9a2d-2cd019c4953f",
        "cursor": {
          "ref": "aa34de85-f0c4-4433-9c79-c98357bc706b",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cad83490-ce0e-4f64-b6bc-15540aee3803"
        },
        "item": {
          "id": "7c1a6b5c-6300-4a9c-9a2d-2cd019c4953f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a044cb5e-582f-41ce-a0b1-9ba83b827e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7b232f-5f76-4f7d-90bb-49a57916a109",
        "cursor": {
          "ref": "6a50b75c-71e1-4e25-a442-135bff81510b",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3d72f141-96da-4cb8-a3e7-edddb0598ed3"
        },
        "item": {
          "id": "9f7b232f-5f76-4f7d-90bb-49a57916a109",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "115ae136-eeb1-4259-900c-c641f580791b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cecd294f-0a38-44ca-8b4d-c93ce0338570",
        "cursor": {
          "ref": "195291b3-11c3-4d0f-9471-0acaab269247",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "753c72e2-e090-4c1c-b099-a6851dace612"
        },
        "item": {
          "id": "cecd294f-0a38-44ca-8b4d-c93ce0338570",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "79b0940e-af55-4118-b87a-7fb4552d2bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34bab8b-cc68-426e-8323-f416d93da7fc",
        "cursor": {
          "ref": "127f5a6b-cc94-4d62-8880-2a27d206b54b",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "de97c586-3b39-45de-a2de-3011ac24cb50"
        },
        "item": {
          "id": "e34bab8b-cc68-426e-8323-f416d93da7fc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "170e061d-95c1-445c-a909-5282d4d1c497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "360e87e6-d100-44c8-90bf-9752648247e8",
        "cursor": {
          "ref": "ffca25c7-2439-4420-a80b-5d3036dee560",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "478742c0-7695-4659-be75-b4273de87402"
        },
        "item": {
          "id": "360e87e6-d100-44c8-90bf-9752648247e8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "440da18c-bbb0-4590-a879-6cfdb794643c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba32faab-e96b-4b53-b3e6-828dce9abdae",
        "cursor": {
          "ref": "30ded0ef-d61a-41cd-84e6-7296d65265c7",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "241d9442-f12b-4f2a-a3e6-e6ea70cc63de"
        },
        "item": {
          "id": "ba32faab-e96b-4b53-b3e6-828dce9abdae",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ac559ab4-3d19-4439-98cd-a5b0061eb6ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7eaede0-dd7c-4aca-9948-fd12f0133be3",
        "cursor": {
          "ref": "d80eb621-8d67-48e8-81dc-e4151554a59d",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "72fa1858-0fa5-415a-b500-e90fa72a6245"
        },
        "item": {
          "id": "e7eaede0-dd7c-4aca-9948-fd12f0133be3",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4cdaf49f-efdb-4ff4-9828-7692f17ef81b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d88c36-8126-44e8-87d0-6c6f13340023",
        "cursor": {
          "ref": "dbd9b8c1-75c2-454d-9396-ca042345c83f",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "33e0bbb5-63ad-494f-a33e-58f94200b5ec"
        },
        "item": {
          "id": "85d88c36-8126-44e8-87d0-6c6f13340023",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7a949b17-6e6d-4b32-b362-ba6cc6a8378b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b38ff2e-7656-4a1b-a3d3-986572433dff",
        "cursor": {
          "ref": "ece9d40a-8a36-441c-a729-fc8825f4e095",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "42b3dc33-f5e8-4493-9b65-2696954fc148"
        },
        "item": {
          "id": "6b38ff2e-7656-4a1b-a3d3-986572433dff",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9b5f489a-b353-4c6c-b6b2-ded5142e6e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b18799-48e4-4fd1-8885-57ca61b62428",
        "cursor": {
          "ref": "45974539-fe36-4001-9a25-187e058c4ed4",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "880a0842-ea70-4560-a228-5e23925fb09d"
        },
        "item": {
          "id": "52b18799-48e4-4fd1-8885-57ca61b62428",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "089bb807-1d53-49b9-9c9f-64ecdbf155a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b9c9d1e-9bac-42b2-b779-f025f7b63d64",
        "cursor": {
          "ref": "12b92cf7-d01c-4973-a886-b425708f1225",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e7fffa7f-39b7-42a0-af04-9e01823a32f5"
        },
        "item": {
          "id": "7b9c9d1e-9bac-42b2-b779-f025f7b63d64",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f3f975f2-8982-4355-b411-2f2595c85406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 321,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3a208f1e-0698-4dff-9024-610f417798d8",
        "cursor": {
          "ref": "2d261f2c-a4ee-4167-8ad0-86abb20e0d6d",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f0ee0b01-be3c-4801-9d31-bcca4efb47bc"
        },
        "item": {
          "id": "3a208f1e-0698-4dff-9024-610f417798d8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "af3308b6-00a5-4cb4-8c6c-aa33b09df04d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f9de15-7795-4cdb-b520-227876698c05",
        "cursor": {
          "ref": "a4166b26-3fde-4a85-89ea-ced6e490bd31",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6522535c-6a3a-4607-9c2a-352eb8ab97d3"
        },
        "item": {
          "id": "45f9de15-7795-4cdb-b520-227876698c05",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "67c09eb0-5ddd-493a-a4d7-9865843c1200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6256e70c-4f6e-4e36-8350-7820982c4ac6",
        "cursor": {
          "ref": "ad05c6a6-5fa1-4384-ac05-227f220cb974",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e1050d9c-b2a9-4fe8-aed6-338292433187"
        },
        "item": {
          "id": "6256e70c-4f6e-4e36-8350-7820982c4ac6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b9a263df-dfb9-4b8b-88e4-59a64348df18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe47525-d3c3-48a9-8cd1-1ee775227edd",
        "cursor": {
          "ref": "119eed7d-7473-49fc-a5c0-3a4d7fc5fa4a",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "70f9ef46-b3fa-4691-b77d-a79a0c74931b"
        },
        "item": {
          "id": "9fe47525-d3c3-48a9-8cd1-1ee775227edd",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "381fff54-f1ad-40b0-96bb-db96be49ae03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d323ccfd-06c5-46c0-a77f-4ae9781377f8",
        "cursor": {
          "ref": "f1134be8-e5d7-4192-8494-bfb9a9cbfe27",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "71caf21d-7d2b-402f-88ac-ec803fa2d52e"
        },
        "item": {
          "id": "d323ccfd-06c5-46c0-a77f-4ae9781377f8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "34e6ee7d-714c-47aa-9000-3b6505f9fd41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc75e12-47be-46a7-93b3-8f134ea99ec2",
        "cursor": {
          "ref": "a93fde57-2312-41d5-84e8-00c743432d0a",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b3abfdfd-eefc-4659-96db-365b60bfcea3"
        },
        "item": {
          "id": "6cc75e12-47be-46a7-93b3-8f134ea99ec2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9a8614df-b542-4bf4-9fe6-68ddffa1e8a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731042ac-343b-4562-81e7-53dbb4aca958",
        "cursor": {
          "ref": "4b54a633-cad2-4dbe-be19-947641ebbd9e",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9817b85a-3e91-4cd6-9471-5cb80fd921a8"
        },
        "item": {
          "id": "731042ac-343b-4562-81e7-53dbb4aca958",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e6db1f18-9934-4c9c-b4dc-e0eb7bc32821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0469865b-e759-4e91-983d-11fdb85ddc0d",
        "cursor": {
          "ref": "e7cf0a37-72b1-4c86-96e9-6b720852ef05",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a4e913ee-7b7e-4a09-98aa-49c4e001e525"
        },
        "item": {
          "id": "0469865b-e759-4e91-983d-11fdb85ddc0d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e621ad77-81e4-43ff-b3a5-667fd854ce3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95eeaa11-8d81-45c5-abf9-2d037e5eb2ee",
        "cursor": {
          "ref": "69e5236a-be14-40d5-a030-285a12616e92",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8d541e48-dc02-4184-8c15-4ddbc3cdc328"
        },
        "item": {
          "id": "95eeaa11-8d81-45c5-abf9-2d037e5eb2ee",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d8995108-18cb-4cc6-b62c-56e2d524a85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7105f380-b755-4759-b9d7-43007d9e6ead",
        "cursor": {
          "ref": "cb64abd2-0d6d-4969-ace5-d057f98dd8b6",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "34ccbdc5-5362-4df6-9585-025c1650f399"
        },
        "item": {
          "id": "7105f380-b755-4759-b9d7-43007d9e6ead",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "56deaa97-77eb-4753-9cb4-58f0f549816b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "499fd91e-e7b8-494b-8a7a-a471e5f85b5d",
        "cursor": {
          "ref": "030f1243-12bb-4163-b4a1-c0213cf40dbb",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "487d1cb6-a1a9-4f65-b00f-9ec952679bc1"
        },
        "item": {
          "id": "499fd91e-e7b8-494b-8a7a-a471e5f85b5d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6aaf3d6b-e10b-4f90-a98d-d352a9630b2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de65d456-8158-478d-ae5c-1b5f6bad657b",
        "cursor": {
          "ref": "344db668-5d62-4184-924d-eb6e0cf32460",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2ee4a84c-3580-46ee-a69a-02efe1c8887f"
        },
        "item": {
          "id": "de65d456-8158-478d-ae5c-1b5f6bad657b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6ecc0bb6-eb07-42ac-aa8c-fd90c9e942ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23d8818-e53d-414a-9d12-007d9a20bf8c",
        "cursor": {
          "ref": "f9c85d1f-352e-43a5-bbf5-67b75fdabc5f",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a06e8978-adfd-4c22-b477-c392d41d0f0d"
        },
        "item": {
          "id": "f23d8818-e53d-414a-9d12-007d9a20bf8c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e70a0e26-8ef7-4826-aec1-f936834538fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31c6438-bd45-4874-a10f-f143c12fbc38",
        "cursor": {
          "ref": "ea595b05-4c70-4221-8540-43115d70c787",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b1ef66a5-bfc9-443b-8d48-496a7f260366"
        },
        "item": {
          "id": "b31c6438-bd45-4874-a10f-f143c12fbc38",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5aa357a9-598c-4b85-9676-5405531f17d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a22eec2-1800-473c-8095-6f592309fd85",
        "cursor": {
          "ref": "599f12a4-538a-4c31-b608-ff2a7506dab7",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "15799cf3-0086-44a0-b7bd-9f19f3a65fd3"
        },
        "item": {
          "id": "5a22eec2-1800-473c-8095-6f592309fd85",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "2996cd7a-7f3a-4dac-ae7d-fe523f8655dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79c9e7f-9775-4a83-ae9f-4b1cea5a2e39",
        "cursor": {
          "ref": "e68df878-f934-4fd6-94f1-48417d87f973",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "bd1035dc-8d4f-4b35-8ac6-8c66448dd9d1"
        },
        "item": {
          "id": "f79c9e7f-9775-4a83-ae9f-4b1cea5a2e39",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "927cd3cf-a2dd-43b9-ba04-019d9a222ff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9ba70f-b120-49df-9182-3b496cf99ae2",
        "cursor": {
          "ref": "ac87e5d6-1238-4732-9174-e8507585423d",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "dc9eba41-ac1c-4c6c-912b-c74b94d59b14"
        },
        "item": {
          "id": "cd9ba70f-b120-49df-9182-3b496cf99ae2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7425ee23-7ea8-4105-98e5-ea25005aecd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "811c90c0-4d04-4013-883e-0cb1b4384a99",
        "cursor": {
          "ref": "d6f54918-1871-408d-bca0-03a05ee6fed8",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5c8c8076-2ee8-4396-a692-329100a5573c"
        },
        "item": {
          "id": "811c90c0-4d04-4013-883e-0cb1b4384a99",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "980823b6-5a9a-4762-8f70-031d4148f770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1b5a2f-eaa7-464c-98ab-f6c0d33da638",
        "cursor": {
          "ref": "194f4ce0-4f6c-4eda-bbd4-76d281275a6d",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2c0f05ce-9cc7-4a15-bf1a-7ba3de17587c"
        },
        "item": {
          "id": "df1b5a2f-eaa7-464c-98ab-f6c0d33da638",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "82be9d67-9bc9-4950-bad0-32d97c692470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed4edb9-a18e-414a-81b7-da845292f665",
        "cursor": {
          "ref": "c370d383-1308-41cd-9b62-9cfd75e8a47b",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "88541c7d-be9c-4665-8593-64c9fc7fedc2"
        },
        "item": {
          "id": "4ed4edb9-a18e-414a-81b7-da845292f665",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7bbfcd70-4e3a-4e93-b563-5bf10d527994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74dc3d5d-3b37-49d1-89d4-9bb828d9380a",
        "cursor": {
          "ref": "b8a8f9c9-0a70-4075-ae65-6bf1bbc4deaf",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8fda33c9-2533-4536-94e9-dd98fc62ff8e"
        },
        "item": {
          "id": "74dc3d5d-3b37-49d1-89d4-9bb828d9380a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "15c28051-2f39-4d6b-bc40-fd8825e9ae12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a3893b-c82c-4ff8-9487-c6cdbc8bad9b",
        "cursor": {
          "ref": "9fa4d184-d45a-496a-94fd-61213aacc9e0",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e0d873ca-a6e6-48c1-82f2-defea58fe23b"
        },
        "item": {
          "id": "68a3893b-c82c-4ff8-9487-c6cdbc8bad9b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "26a4d248-42e2-45af-9885-ba57ef6371fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7203573c-169f-44a4-91b6-2c2274874c80",
        "cursor": {
          "ref": "fd199f0c-8a5c-4b92-96ce-6af79f6abc7c",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c28e3914-b555-4586-9883-fbeade44edfe"
        },
        "item": {
          "id": "7203573c-169f-44a4-91b6-2c2274874c80",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "cb11909f-27a2-48be-a9bd-7319b647e1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2159882e-9022-478d-931a-f8d04226e816",
        "cursor": {
          "ref": "8faddabf-a7ab-496c-9586-175c13d603e5",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "76451eca-f944-4a3d-ae1d-46e8ea9c7582"
        },
        "item": {
          "id": "2159882e-9022-478d-931a-f8d04226e816",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8d72f613-e3c8-4028-aba9-c34ded0ff33a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6a9242-f850-409b-9696-2d9bd7080ecc",
        "cursor": {
          "ref": "cac04be8-d622-43a9-bd2e-2f5c1a98d3bd",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e50ffbef-9c5f-4982-8f49-16ff83c48f39"
        },
        "item": {
          "id": "fe6a9242-f850-409b-9696-2d9bd7080ecc",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "879d559f-a1bb-4c8a-b1e7-7a85c49c0ed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d04d1a5-1459-4ea1-a483-bfb848057e92",
        "cursor": {
          "ref": "d3c92a14-9a8f-42fe-8d17-133136f83dcb",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "72084560-fedd-4026-ac02-86499ad8d61b"
        },
        "item": {
          "id": "8d04d1a5-1459-4ea1-a483-bfb848057e92",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9be793ab-e287-4848-8102-5bcfc15428a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25754df7-cf81-4e72-ba46-ebd7b65d0484",
        "cursor": {
          "ref": "5ff8202a-ac26-47e8-bd20-07fabd6d2375",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "c732ff5d-b4f5-4afc-be31-a2abd0c06227"
        },
        "item": {
          "id": "25754df7-cf81-4e72-ba46-ebd7b65d0484",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ae50093f-dfce-4317-8e3f-c44bc7f7fa32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "097cc215-96ea-4505-a924-7ef5a5c63977",
        "cursor": {
          "ref": "6316c37f-1d9d-449c-8e72-44da657151ad",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b7a09ae8-e36d-43b1-997a-3c9ff9fee99f"
        },
        "item": {
          "id": "097cc215-96ea-4505-a924-7ef5a5c63977",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "344a1499-50fb-48e0-a41e-c212e8dd49f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81bbe924-f513-49b2-8635-d5ce7baed3cf",
        "cursor": {
          "ref": "43a563d4-8cce-48e2-b83f-13235a913204",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d38e1e79-f10a-4c02-aff3-818dbd9f79fd"
        },
        "item": {
          "id": "81bbe924-f513-49b2-8635-d5ce7baed3cf",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8ff7640e-07b4-41ee-9c52-dbab9bc94641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa5282e-c9e0-4bdc-89d6-c4ebc95f3457",
        "cursor": {
          "ref": "6e197fd2-54ff-438e-97cf-b6d2e5fd35d5",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "745fdfd4-9508-4e55-a8fd-93c58cde4af0"
        },
        "item": {
          "id": "3aa5282e-c9e0-4bdc-89d6-c4ebc95f3457",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "df4e3d33-f75a-4976-8e15-e5777517bcca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd18414-dbd4-49a8-b3f2-f069ad27373c",
        "cursor": {
          "ref": "3fc5b802-2416-4982-962b-822dddd27d23",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d3421bf4-1291-454a-bc99-d3783fb579f1"
        },
        "item": {
          "id": "dcd18414-dbd4-49a8-b3f2-f069ad27373c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "11a2dbe8-c2e7-4c0d-8826-dba0294f74cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 313,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d905ef-b17a-4273-a799-32acea06ed91",
        "cursor": {
          "ref": "031ea57d-f879-4e73-beab-5f7f36bf5503",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "baccf47e-7ad5-4298-ae02-5eb97ab8998b"
        },
        "item": {
          "id": "a9d905ef-b17a-4273-a799-32acea06ed91",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "d1fc8a43-ecde-464e-b5a9-86bd67a9005c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0ed4071-cc24-4afb-abeb-bc8645f20398",
        "cursor": {
          "ref": "74c2b1c3-a390-4d06-9fa7-6124fe8257b5",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "506d29b6-b3cc-4dad-ac66-221e3d989be8"
        },
        "item": {
          "id": "a0ed4071-cc24-4afb-abeb-bc8645f20398",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9ccb06a9-d5ae-4f03-8597-1360140a484a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e6baa2f-a35f-4a51-ad1e-5b8ee9303aa9",
        "cursor": {
          "ref": "730d136b-8a19-4cd3-976e-de8a5cbd5a0d",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0a2f40bb-be42-4415-8c4a-5a44232968da"
        },
        "item": {
          "id": "7e6baa2f-a35f-4a51-ad1e-5b8ee9303aa9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "33e55cf8-fff0-4772-87f0-45be4c31b0a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5009dac9-405f-45bb-a350-906cb8fcf8ec",
        "cursor": {
          "ref": "899d329b-206b-44f1-b1a3-8e58d5183da5",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "19ccb211-0f5f-471d-a9e6-b00137d3c084"
        },
        "item": {
          "id": "5009dac9-405f-45bb-a350-906cb8fcf8ec",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "86d8e093-8ab8-49f2-baba-c5617764bc34",
          "status": "Created",
          "code": 201,
          "responseTime": 375,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "cc9f7eb2-7230-4177-a4ec-e83ba09309b0",
        "cursor": {
          "ref": "d30f2193-0367-4bda-9c6b-70ef72ee0374",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ee61302a-0111-4648-b2ae-e72f90ddc227"
        },
        "item": {
          "id": "cc9f7eb2-7230-4177-a4ec-e83ba09309b0",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9f56c77c-3658-4c85-a0af-f68d23fc3430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "259b0238-bf5f-482a-be68-ffd972d99c8c",
        "cursor": {
          "ref": "8eb2825c-7c85-4f4a-82db-705e0bf11a69",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "249323df-84e7-41b0-aa80-d1b07f003502"
        },
        "item": {
          "id": "259b0238-bf5f-482a-be68-ffd972d99c8c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "841876a3-85e1-491a-856f-8bb34cfcc95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8204356d-710e-44fb-8db2-4b89bda707db",
        "cursor": {
          "ref": "cc6ad589-1ca6-4551-8aa2-1429835f7f1e",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7c4e307e-f885-40b0-8e5d-cee125cf0fc3"
        },
        "item": {
          "id": "8204356d-710e-44fb-8db2-4b89bda707db",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b85ca0e9-1fde-4e5f-ac3e-96162f3c6812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "885f4e91-0996-4f2b-911e-0f04d7647355",
        "cursor": {
          "ref": "b5fde929-530c-468f-bf3d-c094a17073c6",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8fa94951-f15d-4b52-9db3-0ca6833ef3b8"
        },
        "item": {
          "id": "885f4e91-0996-4f2b-911e-0f04d7647355",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "03a256d4-a56b-4df3-934c-f2f3262429b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e92816-bc4c-44de-abe2-6f105f2bc717",
        "cursor": {
          "ref": "5d8a62a6-586c-4eec-917d-9f7d7ffbc83c",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "397d911a-3860-4c80-9cb7-1a0464609ff2"
        },
        "item": {
          "id": "96e92816-bc4c-44de-abe2-6f105f2bc717",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "54716cbc-0718-4936-838b-51030e44a3db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb69ec92-eba7-4083-9402-22c858aca0ad",
        "cursor": {
          "ref": "e6fb3ebc-0be7-4969-ac76-d48a2d79146a",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f5a94fbb-983c-403c-b322-a47e92557efe"
        },
        "item": {
          "id": "eb69ec92-eba7-4083-9402-22c858aca0ad",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "cf841ad1-9760-4313-afd7-cb4e49b6b6ca",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "6283d34b-6558-4c6f-a23f-33ff6d1baef4",
        "cursor": {
          "ref": "6bc09d7e-b0cb-4af5-9b90-9dafc5d1be3e",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "894144d7-1dd6-4e06-95de-9c405876a28f"
        },
        "item": {
          "id": "6283d34b-6558-4c6f-a23f-33ff6d1baef4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7dfd211f-2cb3-4b93-b220-5fa4e091e78b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2337141a-f0a3-4219-b7bd-81fc116b5beb",
        "cursor": {
          "ref": "9df247c7-1d3f-4783-89ab-0ab134282191",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "308c89d3-3d04-4c83-b2c5-fe66dae38eb9"
        },
        "item": {
          "id": "2337141a-f0a3-4219-b7bd-81fc116b5beb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6455028c-d53d-4108-897b-63111eb7b310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c809984-1d2b-458a-8299-8976d73008fa",
        "cursor": {
          "ref": "27c3ae10-85da-4df0-89f6-2775337f9a0a",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8201d8c8-b522-4720-b2fa-2d87cefe8d52"
        },
        "item": {
          "id": "7c809984-1d2b-458a-8299-8976d73008fa",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "932b2344-2f93-466b-87de-0463302a4b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d9dc42-6aa8-4064-abe8-e2746d79453d",
        "cursor": {
          "ref": "5c8a1ac6-7f5b-4c9d-855e-6e535191e680",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5d8deb25-8deb-4b7c-bbfe-82a66e0d12a6"
        },
        "item": {
          "id": "e4d9dc42-6aa8-4064-abe8-e2746d79453d",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8da00c2f-c0b2-42ce-a8a4-79b605b0fdd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a1131d-1aca-4329-9ca1-7b35f57f4366",
        "cursor": {
          "ref": "525b4b02-61d1-4354-b212-b51a8be9547f",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "deec4e12-0f05-46f8-89ec-a2da30760c85"
        },
        "item": {
          "id": "99a1131d-1aca-4329-9ca1-7b35f57f4366",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "6509d29d-d224-4c99-b933-a8d804c0d97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191f041d-4b22-477a-ba56-6a2ab8ee7162",
        "cursor": {
          "ref": "9d50b8a7-b40f-4150-9751-7c2b209a912a",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b4398293-e1f3-48d8-bd99-db50f93a9f89"
        },
        "item": {
          "id": "191f041d-4b22-477a-ba56-6a2ab8ee7162",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a1d6b8a0-5c75-4674-9674-eac94b084331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe30cddb-e444-466a-a575-68736476a34d",
        "cursor": {
          "ref": "62071905-099a-4f5f-b740-68ae6fc71ff4",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "96c0c696-82c2-47d6-9854-3ba822ba8ce8"
        },
        "item": {
          "id": "fe30cddb-e444-466a-a575-68736476a34d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6654ac43-27fe-46fa-aca8-f9fd8c8a6c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ac5638-5472-4ddb-9d12-91dda8581f80",
        "cursor": {
          "ref": "9528b4d7-03ea-40e1-8161-001524ea540b",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d74ff1bb-91ac-4f40-ba52-e54b161004b2"
        },
        "item": {
          "id": "42ac5638-5472-4ddb-9d12-91dda8581f80",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "fbeef792-7318-4f77-90b3-008d5daaf24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee277b38-f2c9-4f3c-bd51-315554b298de",
        "cursor": {
          "ref": "4a333966-72c4-4ae9-8a51-d5de4fb020a2",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5e21ac80-7e91-4c35-afc2-adc16fcb0821"
        },
        "item": {
          "id": "ee277b38-f2c9-4f3c-bd51-315554b298de",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "87d2ff3a-faba-4f66-b5bc-7f572f7e2665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "73b9a275-ca1e-47e0-9272-00c350779889",
        "cursor": {
          "ref": "055d6a4b-4283-43c7-9a71-19444a7a45d5",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8edbb8d1-6fb9-401a-bc79-16e57d74e754"
        },
        "item": {
          "id": "73b9a275-ca1e-47e0-9272-00c350779889",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "56884452-aee8-4a3e-9af7-c70f779adacc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "9659599b-daa5-41c0-bdce-2c688236cf0a",
        "cursor": {
          "ref": "b4e49cf9-1bb2-49c0-a3db-2742067a49e5",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "fe1a3fd4-17f5-4918-98f7-63b04051625a"
        },
        "item": {
          "id": "9659599b-daa5-41c0-bdce-2c688236cf0a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "cefabbc0-0de1-4b6e-81d5-66c2814d7f7d",
          "status": "Created",
          "code": 201,
          "responseTime": 505,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected undefined to equal 'did:web:dev.vc.stg.mesur.io:v1'",
              "stack": "AssertionError: expected undefined to equal 'did:web:dev.vc.stg.mesur.io:v1'\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": ".empty was passed non-string primitive undefined",
              "stack": "AssertionError: .empty was passed non-string primitive undefined\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "expected undefined to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected undefined to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot read properties of undefined (reading 'created')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'created')\n   at Object.eval sandbox-script.js:6:104)"
            }
          }
        ]
      },
      {
        "id": "08c2db73-9186-4482-80c8-cd93244fd04a",
        "cursor": {
          "ref": "69877dc4-7abe-40ff-a2f5-265b30f8c54a",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9a6c6ae3-a3ee-4978-83d7-e9817274072c"
        },
        "item": {
          "id": "08c2db73-9186-4482-80c8-cd93244fd04a",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "4cfd059c-8ac4-48a0-a12e-f34b63852dc1",
          "status": "Created",
          "code": 201,
          "responseTime": 388,
          "responseSize": 616
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "ad0d1238-7074-46cf-9194-62145a0f13ec",
        "cursor": {
          "ref": "f54493e6-6fc3-4f4a-983c-1b8bbeba4e32",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e1e7b7fd-95d2-475e-8531-ee4a6f71b6d8"
        },
        "item": {
          "id": "ad0d1238-7074-46cf-9194-62145a0f13ec",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2160af53-81cd-4b54-98ef-54a6d0d43e48",
          "status": "Created",
          "code": 201,
          "responseTime": 371,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "a74835c8-19ab-4ced-82bb-ab1d784dea6a",
        "cursor": {
          "ref": "cad5117e-78a7-497c-99b9-7e6a1fbf173c",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "12ba3699-7317-4687-adf4-054e085d36f9"
        },
        "item": {
          "id": "a74835c8-19ab-4ced-82bb-ab1d784dea6a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7cb1771b-045c-40a0-a815-9cb3c0c7ede5",
          "status": "Created",
          "code": 201,
          "responseTime": 413,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d446f951-5ab8-44d9-9022-2a066420088c",
        "cursor": {
          "ref": "e6dd1c4b-195b-4fec-ade1-95806b2d749b",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "28454e0b-852d-4e31-84ab-6de02e34dd94"
        },
        "item": {
          "id": "d446f951-5ab8-44d9-9022-2a066420088c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3f35be39-862f-4369-a83d-8806931803be",
          "status": "Created",
          "code": 201,
          "responseTime": 390,
          "responseSize": 553
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot destructure property 'created' of 'pm.response.json(...).proof' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'created' of 'pm.response.json(...).proof' as it is undefined.\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "8256225b-6ab0-4b21-a286-e0cae0560563",
        "cursor": {
          "ref": "d2cb656f-ccfd-4808-925c-2b415cf58b88",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f8a5e2a1-0b0f-44fe-ab5c-a22896890bc3"
        },
        "item": {
          "id": "8256225b-6ab0-4b21-a286-e0cae0560563",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "bdb1cbfb-57a1-4259-98d5-2b3fa8a8ebd6",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "b5367340-6a2a-48b8-8914-66644d0d85af",
        "cursor": {
          "ref": "7cf7f4a2-77b8-4ad4-9d79-6ce95dad41f2",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "26e8fd01-cdb8-4b72-910c-aac1a7ca6066"
        },
        "item": {
          "id": "b5367340-6a2a-48b8-8914-66644d0d85af",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bb269e58-199b-482c-b080-209aa9bc4df8",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "b5367340-6a2a-48b8-8914-66644d0d85af",
        "cursor": {
          "ref": "7cf7f4a2-77b8-4ad4-9d79-6ce95dad41f2",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "26e8fd01-cdb8-4b72-910c-aac1a7ca6066"
        },
        "item": {
          "id": "b5367340-6a2a-48b8-8914-66644d0d85af",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bb269e58-199b-482c-b080-209aa9bc4df8",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "4df37db3-0132-48f0-b869-d7540ac0fa15",
        "cursor": {
          "ref": "d8ee19bb-7dd2-4672-bec4-1baeeacd1f69",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "97154ba6-bea7-488d-b8d6-687327db2eaa"
        },
        "item": {
          "id": "4df37db3-0132-48f0-b869-d7540ac0fa15",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3a4628ae-be5c-4bc6-aced-7d2a230b2429",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "61c21957-0de2-48dc-83ea-d5c4c12e999a",
        "cursor": {
          "ref": "2fd23a9b-aa03-4965-8074-cce73b1c74e5",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3105cf26-348b-4db4-8b04-543519bf35a3"
        },
        "item": {
          "id": "61c21957-0de2-48dc-83ea-d5c4c12e999a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "341ceff9-279d-4139-9f9e-2ddf786f65cd",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "138799f9-f7c2-48b2-a1b3-f6549b9a2364",
        "cursor": {
          "ref": "a29c2c7f-78fc-4f28-95c8-e8f6fe73d5f3",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "33451736-54fc-4a56-9a41-45622cfbe5c0"
        },
        "item": {
          "id": "138799f9-f7c2-48b2-a1b3-f6549b9a2364",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6003a5ef-a8ab-411e-b504-a28b9780bedd",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "b23d75a6-31ec-4caa-86aa-c2ee064cf629",
        "cursor": {
          "ref": "dbf49c38-72c0-4734-8478-9dc9b289d2a0",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2998c3d7-8557-4480-a360-6937df19b21b"
        },
        "item": {
          "id": "b23d75a6-31ec-4caa-86aa-c2ee064cf629",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a33cf3b3-e125-43d7-86f4-ca8c10060715",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "e0013c5b-451d-4f42-9c87-6d8c0b5d7b0c",
        "cursor": {
          "ref": "90cb7598-34af-442e-b2c9-18f572030317",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7676ed3b-fcd7-4623-a004-c6cecd178362"
        },
        "item": {
          "id": "e0013c5b-451d-4f42-9c87-6d8c0b5d7b0c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "481b9b09-1fc7-42d1-8b8c-5f1ed2efa86a",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "16c8c623-e5b4-45ac-b3f5-9417686380eb",
        "cursor": {
          "ref": "b2a61480-2bd0-43e1-875e-071c197fd3c7",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "2f1b3d04-c810-4137-b205-c585f4697b01"
        },
        "item": {
          "id": "16c8c623-e5b4-45ac-b3f5-9417686380eb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4647d0eb-610d-4723-8fbc-e0b54b77e349",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "282db7da-0f82-4889-b08c-37f0ee3ab61f",
        "cursor": {
          "ref": "59f2eb13-c0b4-4ce5-842e-6742a7d92893",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "08c3b340-4718-4eb6-a137-39cefe5c0d3b"
        },
        "item": {
          "id": "282db7da-0f82-4889-b08c-37f0ee3ab61f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "dca75854-b30a-469a-8b8e-5b17ff8b6a76",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "d04aa99c-812e-4493-b37f-6805e4847a64",
        "cursor": {
          "ref": "a0fcab9a-2703-45a4-bddb-3438cd7ac1c0",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "61d65c65-4ffd-42f6-afd5-97cdff1bf2b3"
        },
        "item": {
          "id": "d04aa99c-812e-4493-b37f-6805e4847a64",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4f264db2-4636-410a-87c7-0c1222d502f1",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "39b04056-fd92-4e6b-8c06-3843711bfbb6",
        "cursor": {
          "ref": "6643b5cb-1d03-4cca-a41d-8e311032c4cb",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "848e711f-82ed-4531-a356-c48dc9019517"
        },
        "item": {
          "id": "39b04056-fd92-4e6b-8c06-3843711bfbb6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c1df64b4-51e6-4942-9329-b49f6ecab2f8",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "9449ed9e-cfa2-4fa7-aa06-16cae3fb4fb6",
        "cursor": {
          "ref": "82ee200b-815b-4815-ac13-edcb54522c05",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e3bb5216-cd43-4f44-b55b-0421b2489792"
        },
        "item": {
          "id": "9449ed9e-cfa2-4fa7-aa06-16cae3fb4fb6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6ed31a7e-016a-49b1-aae0-0b3c755576e4",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "0abe6513-3c3b-4b6b-ad2d-91cf02c9e0c6",
        "cursor": {
          "ref": "19eef14b-4020-499d-a0b2-5a62001b8d98",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f0ff7933-0400-4852-b8c0-f2f62d8bc51e"
        },
        "item": {
          "id": "0abe6513-3c3b-4b6b-ad2d-91cf02c9e0c6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "fe5537f8-eeb7-43d6-94a7-8a2bd0e78fbc",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "ccd41f5e-dd06-4874-ad73-c23b0a2f679a",
        "cursor": {
          "ref": "57943aff-6bf4-4b43-8e95-e36f3f0442cf",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e8b27121-b69c-43d5-9294-06d5e4c3d588"
        },
        "item": {
          "id": "ccd41f5e-dd06-4874-ad73-c23b0a2f679a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "48fc7adc-63ab-49e8-b458-7d42b417fb5c",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "5b920651-b142-49ac-905e-e3fcecb60c4b",
        "cursor": {
          "ref": "d584353f-4679-4afb-8c39-6fff88cd962f",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "656e4f07-edd6-42a1-9518-8d436fb140d4"
        },
        "item": {
          "id": "5b920651-b142-49ac-905e-e3fcecb60c4b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "62aa2acc-8ab6-4cf2-a3c2-892c8e8dbbd7",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "3fc4a7c8-6dce-4777-896d-9a3c9f366477",
        "cursor": {
          "ref": "1386716d-d9e6-40d1-852e-ca70392c002a",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6f09a63a-09d8-40d3-aa8c-5caca08c7dd8"
        },
        "item": {
          "id": "3fc4a7c8-6dce-4777-896d-9a3c9f366477",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c83ddc80-1b87-4cfd-8846-0aeb29ce2f0c",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "21321606-f794-4861-9d37-66d6b5c19df2",
        "cursor": {
          "ref": "22fef62e-9f82-4c8a-9abc-b329babfc38d",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4b1f08b4-b558-4094-ae0c-728e3f8369ee"
        },
        "item": {
          "id": "21321606-f794-4861-9d37-66d6b5c19df2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "32c8c85c-745b-49ac-bec8-37ae6ee75558",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "dc35c51a-0fa9-4c47-89e0-3ce5168f0ad8",
        "cursor": {
          "ref": "1113d07f-5cb1-4a8b-b326-0ba7462c3a57",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c21e4133-eea5-4ed3-a058-5bb085cf3d80"
        },
        "item": {
          "id": "dc35c51a-0fa9-4c47-89e0-3ce5168f0ad8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "09960a50-3924-4f69-aa25-ee1fe67c1b35",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "6222a470-d60f-46cc-8e68-9e332386f800",
        "cursor": {
          "ref": "401cfd0f-2348-475c-87e7-a9e3b6448cbf",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "95ee7b49-34a2-48c9-99c9-e5095c0ddb75"
        },
        "item": {
          "id": "6222a470-d60f-46cc-8e68-9e332386f800",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "99bece24-17ed-4a92-baad-9deacbbdabb7",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "605f39d7-2804-4f35-88bd-8e08b1d8801b",
        "cursor": {
          "ref": "265d4f7e-168b-456a-9c72-b7ffc6c71ab8",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "06774e66-c5d0-4c79-a211-4a9e99ff6fe4"
        },
        "item": {
          "id": "605f39d7-2804-4f35-88bd-8e08b1d8801b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a537a16e-dd96-4aa5-9dee-b3c4aa3f61fc",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "7c916bb5-f07b-4543-b221-e9686aa2e51d",
        "cursor": {
          "ref": "bc5e09fb-4002-4c4c-b513-641a8853aa14",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6b7b4100-3be9-4cfe-9d18-df578b8bb227"
        },
        "item": {
          "id": "7c916bb5-f07b-4543-b221-e9686aa2e51d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "56211dee-8beb-4bbc-896a-7a4dbc6170b7",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "76230205-6d2d-4dd9-bfd3-718c8ad8fbad",
        "cursor": {
          "ref": "b05bacd0-daa5-483a-b3c9-581dc0e6ff48",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "bc49c43e-8066-46e5-8bf8-cc7e56ab6192"
        },
        "item": {
          "id": "76230205-6d2d-4dd9-bfd3-718c8ad8fbad",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fd08dc3a-ddf7-4e2b-81a2-99947ea5b8dc",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "88b0c488-3856-4cfe-8c39-e7e6b7cc22d2",
        "cursor": {
          "ref": "0cbe7987-aa99-4ba3-b800-5fde78fcbc3f",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d87d6d1e-2f7f-42f0-a5b5-4a6c301e2cf2"
        },
        "item": {
          "id": "88b0c488-3856-4cfe-8c39-e7e6b7cc22d2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ac84ffca-42ed-41fd-9e33-3e6cbe3253d4",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "7e388d1b-5353-44c5-a4bc-1ad23b194dcf",
        "cursor": {
          "ref": "3969f5b3-354e-4938-804e-a98d0f735a89",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5ce829fe-973b-4251-8891-daa0d0e8b3c6"
        },
        "item": {
          "id": "7e388d1b-5353-44c5-a4bc-1ad23b194dcf",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fa5ec222-d1b2-4615-aff4-1ec6be36f0ef",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "d6e8d839-241b-450e-9c6b-ced6674cc444",
        "cursor": {
          "ref": "991406a4-7d78-4cc3-8351-f62b3868d220",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "bf7f9781-725f-44e1-a59b-7db19151dc67"
        },
        "item": {
          "id": "d6e8d839-241b-450e-9c6b-ced6674cc444",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1609a944-5e24-407b-ae66-b2a0bddbbc54",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "2dca8754-a0ac-4fc5-8281-de674df9f9f0",
        "cursor": {
          "ref": "9e7dd79f-abd3-4495-ac7a-e4443976d097",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8fe23082-e710-4651-8f1b-dae6e500f42a"
        },
        "item": {
          "id": "2dca8754-a0ac-4fc5-8281-de674df9f9f0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "62dd0a81-b420-4d3c-9695-56f514bdd5a7",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "38b823df-c47e-4dca-aea7-aad01d699d70",
        "cursor": {
          "ref": "31d444f5-ed00-42ac-ad7a-1eee3869ff06",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "18ac713a-ff02-4b27-8fd7-7539b463d635"
        },
        "item": {
          "id": "38b823df-c47e-4dca-aea7-aad01d699d70",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1793cc72-5be9-4ddf-9cb8-487dfa6983f4",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "805177a9-5e64-42c6-be2d-ebb453125bab",
        "cursor": {
          "ref": "67d312fe-ca34-4f03-8374-5e410319fe4c",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3ecacab4-a5e5-49fc-9cde-7c28a8865091"
        },
        "item": {
          "id": "805177a9-5e64-42c6-be2d-ebb453125bab",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d85acee6-8c7b-4a20-9a77-3445064901b4",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "7812f15d-618d-4751-bf6c-a50e32be1f70",
        "cursor": {
          "ref": "912602bf-d6ff-4b3f-b389-786a43de999b",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "bbf4d09a-7d08-47ba-8dbb-a8fdaf4fd98d"
        },
        "item": {
          "id": "7812f15d-618d-4751-bf6c-a50e32be1f70",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e89d985a-fe0b-4d38-b9ba-0f4f9a79dcca",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "d534bc72-b008-403d-96ad-0d0588a3788f",
        "cursor": {
          "ref": "49d92215-bee8-4ef3-b82b-c1389cb30e63",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e50fb3a4-09f6-46d0-8dd9-9a73eb43390f"
        },
        "item": {
          "id": "d534bc72-b008-403d-96ad-0d0588a3788f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "31a339d5-efb6-4062-ad96-009d48262f8d",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "568e69b5-a749-4a14-a7d1-1fa6fe4e2bd5",
        "cursor": {
          "ref": "cc430cda-5881-44b7-bde8-cd226f12db91",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "46c25546-a92a-4e82-9329-48dc6079dfe5"
        },
        "item": {
          "id": "568e69b5-a749-4a14-a7d1-1fa6fe4e2bd5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5b39cb15-e650-4b4f-b8e8-b17acc3ce0e7",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "105e3608-1889-4b69-bf66-8a3ab32847c9",
        "cursor": {
          "ref": "88e2f82e-4e12-4896-b4b2-e399efd494a0",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0aa64a84-2297-4851-9e15-9830e39391e0"
        },
        "item": {
          "id": "105e3608-1889-4b69-bf66-8a3ab32847c9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ce5038d0-9c63-452a-aab9-8b8498476058",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "b3fd9a4c-17d3-4b67-8c6f-cbf6db143dc0",
        "cursor": {
          "ref": "cbf14743-2e7c-4660-b363-b1d057538e92",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d1242bfc-d8eb-4542-98dd-b6ac37696b66"
        },
        "item": {
          "id": "b3fd9a4c-17d3-4b67-8c6f-cbf6db143dc0",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "554a810e-eafa-4e4e-812f-33803ea2f5ae",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "b1c41dd7-fea8-42f0-93fd-76eb58c3bf95",
        "cursor": {
          "ref": "e9b725a1-67bc-4c8e-b7fe-687ef755a72e",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "fabc0596-65b4-4c3a-b9fa-3a52bd7a79f6"
        },
        "item": {
          "id": "b1c41dd7-fea8-42f0-93fd-76eb58c3bf95",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3bce9306-a441-49f8-9566-91d425cb18bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6568deea-c409-4886-8675-9de2ded8eb8a",
        "cursor": {
          "ref": "4ae08559-4b00-458b-b903-8fe5ff2bba20",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "58ddd9ae-03b1-4762-b06f-fbd79812a770"
        },
        "item": {
          "id": "6568deea-c409-4886-8675-9de2ded8eb8a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f3922903-6272-4d38-b642-eb14f9b7f291",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 79,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc51c6b-3b90-43be-b13c-f5a8fdeee5d1",
        "cursor": {
          "ref": "648e2379-898c-470b-832e-911d7ed8b2ad",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "220a327c-8f73-4b26-980e-ecea99502947"
        },
        "item": {
          "id": "cbc51c6b-3b90-43be-b13c-f5a8fdeee5d1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a3e53734-50cf-4653-bc02-225474287179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc51c6b-3b90-43be-b13c-f5a8fdeee5d1",
        "cursor": {
          "ref": "648e2379-898c-470b-832e-911d7ed8b2ad",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "220a327c-8f73-4b26-980e-ecea99502947"
        },
        "item": {
          "id": "cbc51c6b-3b90-43be-b13c-f5a8fdeee5d1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a3e53734-50cf-4653-bc02-225474287179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5393cf63-c847-4299-8eae-ac3b88f2dabe",
        "cursor": {
          "ref": "6cc52678-03a6-4dd7-8a0d-709cdf70e421",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7b6fe552-4bbe-4400-84e2-3007186e6a93"
        },
        "item": {
          "id": "5393cf63-c847-4299-8eae-ac3b88f2dabe",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "22de5f53-4846-48b6-af53-85a07aae72f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d5e088-c435-4a86-85fd-11761da42874",
        "cursor": {
          "ref": "080c9d80-d593-440c-8d97-969286539e40",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "eb367d36-3386-4ad8-8056-48041c42e702"
        },
        "item": {
          "id": "65d5e088-c435-4a86-85fd-11761da42874",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f0ea4b99-0320-4db7-a6bc-7bcdef450685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82088c76-4362-42c8-b69e-e961ba2e8c05",
        "cursor": {
          "ref": "0f8ebfd5-5434-44a6-93a1-9c86219ee259",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9d9ed299-a096-4f9e-bdbb-27a7a2245421"
        },
        "item": {
          "id": "82088c76-4362-42c8-b69e-e961ba2e8c05",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "80d5ce7d-1015-426f-a96d-86a74170c71e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adfa9543-60a5-4ee9-a6bf-8d10f59aa13f",
        "cursor": {
          "ref": "16ca3deb-a8f3-4c6f-9c7c-a2f1ba651229",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "794ba1b6-8277-4d3a-b606-1760aa032161"
        },
        "item": {
          "id": "adfa9543-60a5-4ee9-a6bf-8d10f59aa13f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ada44190-6128-49bc-a88a-b5d4442ee773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1630087-d88c-4aa8-bae4-2f03afb466d8",
        "cursor": {
          "ref": "87d22bba-f25f-4a36-8d8b-383943939e84",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "56bc481b-7cb2-4059-9ddb-210ceb5d2769"
        },
        "item": {
          "id": "b1630087-d88c-4aa8-bae4-2f03afb466d8",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7428f69f-d77f-481e-af32-35dad1c123e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50e6ce87-da3a-4a08-a8dd-5236038402a5",
        "cursor": {
          "ref": "d85412c6-79d0-48fa-ab93-3b58e3e6e38c",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "17ad7648-0886-4d28-9cd3-0bb8d93de9e5"
        },
        "item": {
          "id": "50e6ce87-da3a-4a08-a8dd-5236038402a5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b23e0379-9a36-42fb-8d0e-40e3e8c14a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 609,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cd6df9-4027-4db6-9965-8122f21e88b6",
        "cursor": {
          "ref": "cb631ca2-e0c8-48c9-8d02-5afc9498a01a",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "72a687e3-22bb-4b41-84e4-4cc7c6d64d00"
        },
        "item": {
          "id": "51cd6df9-4027-4db6-9965-8122f21e88b6",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ae4e61d9-004a-4819-b349-44c4c1cdb9b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b9f52d-3260-4a53-bdf1-ab1c75d7456c",
        "cursor": {
          "ref": "778c6dc1-9a8e-4dc8-9e35-0257640dde60",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "dd27d71a-51f3-4cd9-bbb8-a1f549f0945f"
        },
        "item": {
          "id": "f3b9f52d-3260-4a53-bdf1-ab1c75d7456c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "97541ec1-83c2-4e86-b53e-ca6d33c318b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61714a1d-7555-45e6-81ce-ec0c6e554479",
        "cursor": {
          "ref": "48c52eba-ed1a-481d-936d-ba29522a2268",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1c184e8a-c5d2-4cba-81e7-ec0d6272f63b"
        },
        "item": {
          "id": "61714a1d-7555-45e6-81ce-ec0c6e554479",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "28b96f6d-456e-4953-b45d-a0d60b32c769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe4692c-67e4-4213-95ef-23a2c16c9d5b",
        "cursor": {
          "ref": "b002719f-4b8e-4d30-8e1a-f91ff4dcbb29",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3c0883cc-94a8-4824-8334-6ea38132e752"
        },
        "item": {
          "id": "fbe4692c-67e4-4213-95ef-23a2c16c9d5b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0d14cae3-afaf-4f4b-abec-32dcfcf4bef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b0d64b-5e25-4a81-82a3-03936c786bd5",
        "cursor": {
          "ref": "d0ad3a92-99a0-4d16-aed8-d92e652e4a79",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "40b4dc43-cc4a-4073-a2ee-82b58377e7a4"
        },
        "item": {
          "id": "86b0d64b-5e25-4a81-82a3-03936c786bd5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2982a13f-c32c-4097-92c0-0bcaa378f4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2691e7-a601-4b99-bf18-b50fb57873b5",
        "cursor": {
          "ref": "b2a47f8d-57ba-41c8-9614-497de7ccbc89",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "20f8424e-660b-4727-b925-28e2c0390c6b"
        },
        "item": {
          "id": "0c2691e7-a601-4b99-bf18-b50fb57873b5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a7f4b8ed-0c75-40b7-aaf9-d7419f1953e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a599b1ce-80f2-411d-8e1b-68d80a2500f9",
        "cursor": {
          "ref": "819d7f21-96b0-4235-9f01-68639ebb9348",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "54e7ee48-0c98-4d97-8907-6b5f476db221"
        },
        "item": {
          "id": "a599b1ce-80f2-411d-8e1b-68d80a2500f9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7d1801aa-22af-453a-a185-1111ee9b71ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b3e031-aa68-445c-a0ad-0cc29d656a24",
        "cursor": {
          "ref": "8171e9e6-89e6-4e94-a385-ea05909d26a7",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9f594719-8a06-47b6-bcbf-1a856710edb3"
        },
        "item": {
          "id": "06b3e031-aa68-445c-a0ad-0cc29d656a24",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b9d96eb9-ea1d-460a-ad69-400bb2cf6688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5405fc-e3e0-48f6-b5d4-b445b0e8803d",
        "cursor": {
          "ref": "2b1fdba1-e43b-43f0-947f-1781980bf0d0",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6a96bc9d-dca4-4ae5-89ca-2d0749ffb118"
        },
        "item": {
          "id": "3c5405fc-e3e0-48f6-b5d4-b445b0e8803d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e6afea49-0fb9-4d59-a4dd-4128761891c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb911bcd-e7ac-4d52-b081-04812ee96260",
        "cursor": {
          "ref": "94f38c53-ea1f-456f-879f-2edc981aa04d",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e9314779-bfd9-4c1c-a9b8-9c0de01775e9"
        },
        "item": {
          "id": "fb911bcd-e7ac-4d52-b081-04812ee96260",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6daf8f60-88cb-40fe-8a4e-0273329dc97c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43093558-2602-4735-9fec-8e9ce2d56a73",
        "cursor": {
          "ref": "ee3f7191-0f7a-486b-8576-ff12a8565a8e",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0b38d957-b25c-49e0-96fc-250e49f223bb"
        },
        "item": {
          "id": "43093558-2602-4735-9fec-8e9ce2d56a73",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "67ba9679-954f-4b87-a93a-7620737cce0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 376,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8214f408-e826-4796-a8af-238d813edb5f",
        "cursor": {
          "ref": "b7b8dbf0-34e1-4b9f-882c-3c66ab2d64f9",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9fbd567a-050d-4f76-ae4b-fd274082f45e"
        },
        "item": {
          "id": "8214f408-e826-4796-a8af-238d813edb5f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8cf8fec3-bd3c-4de4-a8e3-14e55921ae82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8b1181-b5bd-462f-b88b-d82168f2a495",
        "cursor": {
          "ref": "0d5b7441-ae9b-4f5c-a2d2-c998c2a371c2",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "6289c88b-c385-4a51-bafd-3d0e66984445"
        },
        "item": {
          "id": "8e8b1181-b5bd-462f-b88b-d82168f2a495",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "27400643-4a00-4f25-bbdf-3ca5a6f72372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ab11f5-4aab-47bc-9aed-21eecbb49c6e",
        "cursor": {
          "ref": "48dc4019-cf3e-4df7-b6c4-61e18a439c20",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "867f0255-87f3-40e2-a6d7-34f57f432f1b"
        },
        "item": {
          "id": "82ab11f5-4aab-47bc-9aed-21eecbb49c6e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0b989cbf-74b1-4daa-9d62-577548c1d347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f155aa3d-5227-4dda-979f-1134b15d366e",
        "cursor": {
          "ref": "fc203baf-b0f4-43ee-b10e-89a2fe777201",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9560c169-7055-49dd-aeb2-bd38da29fb0c"
        },
        "item": {
          "id": "f155aa3d-5227-4dda-979f-1134b15d366e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "75c912ba-8b70-4a50-b49f-179bb146fdf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57435034-a92f-4284-b0cb-08b1164f206b",
        "cursor": {
          "ref": "4bb23d58-1a4f-42d3-95f3-f16bc6beaab0",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "146a6ccf-c157-45ef-a778-445572a61783"
        },
        "item": {
          "id": "57435034-a92f-4284-b0cb-08b1164f206b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8a1fd809-38b6-4d5b-a44d-58b8051661aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a6009b-cbb3-4291-8de2-1b72b3c6eb46",
        "cursor": {
          "ref": "ddba7a77-74b2-4367-96b4-f32ff7dd536e",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "3217b76b-fa38-4126-aa08-b41d4ce7b4f6"
        },
        "item": {
          "id": "68a6009b-cbb3-4291-8de2-1b72b3c6eb46",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8a56f518-c746-4bb2-8ba0-0b0e714c117f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efbaa530-530e-4c60-8da6-abb3917a0428",
        "cursor": {
          "ref": "1197412f-5fd1-4247-b494-d458a23566db",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "148dfa32-3db3-44bd-8599-56e92e696570"
        },
        "item": {
          "id": "efbaa530-530e-4c60-8da6-abb3917a0428",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "343754e9-3370-442a-86da-39352b8a7ecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95cf123-3cb5-44b0-ab57-83c1c2809538",
        "cursor": {
          "ref": "c9f964ca-d383-467b-915b-74781cfc8fef",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "265804bd-f6af-4340-8876-ee9265e641ef"
        },
        "item": {
          "id": "a95cf123-3cb5-44b0-ab57-83c1c2809538",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2cf06248-581e-4d2a-885c-32874e3cd047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a282ec-a7bc-4793-86a4-6f4cb3e64974",
        "cursor": {
          "ref": "b737462f-752a-428d-ba94-01f2c40b5ec1",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "138fe0d9-a9d1-4cfb-8970-24b689b310f9"
        },
        "item": {
          "id": "44a282ec-a7bc-4793-86a4-6f4cb3e64974",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "434e2b0e-a2d4-440a-a914-dfab3341227f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36652e59-cb37-4628-95f2-8c854876cedf",
        "cursor": {
          "ref": "84095b73-3295-4463-adc3-6af942bd74e0",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6e2968cc-1465-4156-88ab-5f96b3edc03f"
        },
        "item": {
          "id": "36652e59-cb37-4628-95f2-8c854876cedf",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "eb011077-bb5a-4e16-b300-c5c42b28ad01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e99f5bb0-7365-4ba6-bb94-031cad0dd0dd",
        "cursor": {
          "ref": "40f6556d-b14f-4186-891f-2779d7e5eff2",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "cd08eafe-b8cf-4559-bf4d-50b4549ec9c0"
        },
        "item": {
          "id": "e99f5bb0-7365-4ba6-bb94-031cad0dd0dd",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c1f6142d-4423-487b-ab10-c63ed6eb6e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23835092-5f3e-49ea-aff7-7e98fd05f22d",
        "cursor": {
          "ref": "d7bb3398-c52c-40e6-b8cd-0cbadae3d92f",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f55036df-2304-4abc-8c76-5d1987197f68"
        },
        "item": {
          "id": "23835092-5f3e-49ea-aff7-7e98fd05f22d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "79e1c772-f78b-40b7-961f-a5246c41e2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837f37e9-15b3-4288-b698-ca6db67b8948",
        "cursor": {
          "ref": "3d7f496a-0d39-481e-bb46-8603f7fbf719",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e87a8da7-ab29-4677-ad69-46afc950ee03"
        },
        "item": {
          "id": "837f37e9-15b3-4288-b698-ca6db67b8948",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "86519acb-8795-4234-9e7e-386374045acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a84ef8-8381-4018-8867-d5f2f0374a96",
        "cursor": {
          "ref": "69cccd3c-302e-4fc2-b700-e6075eaec4bb",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "179ada8a-8018-49b6-87eb-bfd4f8b9c1e9"
        },
        "item": {
          "id": "85a84ef8-8381-4018-8867-d5f2f0374a96",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "75e952d0-75a5-4957-9f87-08efa4f977c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6fe684-9473-48a7-b14d-1cc73255fadb",
        "cursor": {
          "ref": "4375e6cc-a452-4e8f-8fc1-89a74dfd38d1",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "57c661a0-a78f-477f-a819-0caa39aea965"
        },
        "item": {
          "id": "1a6fe684-9473-48a7-b14d-1cc73255fadb",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4f28ffe9-1941-4862-9e7b-444ee686c953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102a8dc1-bd87-4b2e-bd3d-4b3301bb11ad",
        "cursor": {
          "ref": "c3ab0ad6-ebc9-4957-be16-4e0f727215b8",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "32391bc3-76ae-4023-bbb1-0206e2b2c88a"
        },
        "item": {
          "id": "102a8dc1-bd87-4b2e-bd3d-4b3301bb11ad",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5e4b9b2b-8a07-4782-aa05-3325d423a204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e113a3-6068-4ec2-b018-0f16272585b6",
        "cursor": {
          "ref": "e7662b29-e34d-4aaf-b4d5-d4fbf0ca2184",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ad4e7c87-b88d-482c-92b1-4efcee4b05df"
        },
        "item": {
          "id": "82e113a3-6068-4ec2-b018-0f16272585b6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ba8bb55e-0f8d-4afe-8ff8-d53ee7c3e5e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 234,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7f0fbe-92a1-4d13-8276-b0a85d41091a",
        "cursor": {
          "ref": "edea2ae3-79bb-48b5-a660-c38371941ec3",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "300b9af4-a40c-428a-98a1-698e28466b39"
        },
        "item": {
          "id": "3c7f0fbe-92a1-4d13-8276-b0a85d41091a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ad0a7cad-6d62-4174-baa1-fb7122d180f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73abd57-950b-4315-9e89-418c3ab6a9ef",
        "cursor": {
          "ref": "1636364d-aa64-447d-9546-c8bae620e0b9",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0c31ad9f-2294-4f25-a86a-38f56729e360"
        },
        "item": {
          "id": "e73abd57-950b-4315-9e89-418c3ab6a9ef",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c8c36a17-1289-4675-a240-acc5cf389a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e98ced0-1768-4c28-a04d-c29b8de3fad9",
        "cursor": {
          "ref": "a8c7a078-caad-473a-a7b6-2ddbd37f23a9",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "5c6fdb29-f3fc-44a1-891e-666ffd1928be"
        },
        "item": {
          "id": "8e98ced0-1768-4c28-a04d-c29b8de3fad9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2ab5af08-f7de-4d15-b1b2-3d4a0ba5754c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ef0a9a-b976-4a53-9b1e-3d6b6276af54",
        "cursor": {
          "ref": "f884af97-9ec8-4e84-b67e-05afb6a6ff7d",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e327399a-37c8-41d5-b88b-7a56b0ba80d5"
        },
        "item": {
          "id": "73ef0a9a-b976-4a53-9b1e-3d6b6276af54",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a1c4e77f-ff62-4b7e-856f-a6bb04f7c8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8488e0f-0be1-49b7-890e-9630b33c66d3",
        "cursor": {
          "ref": "c4079b0d-f20e-4420-91ae-18ec735a6dfc",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fec2b64e-24c1-476e-a061-6b76657a7153"
        },
        "item": {
          "id": "c8488e0f-0be1-49b7-890e-9630b33c66d3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "00b61442-e0db-49e9-a919-104620694010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f85842-30de-41f8-98c0-0c24cc0db709",
        "cursor": {
          "ref": "8f05f065-44e5-44f2-87ce-2b0ad11247e6",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "cc9fcfe7-f342-4bdd-a6f0-66d4b3ddfeab"
        },
        "item": {
          "id": "29f85842-30de-41f8-98c0-0c24cc0db709",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b16b693b-124b-4007-b22c-f17e5f3ce9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 299,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aab305b-82fe-4967-802a-a22505b147b9",
        "cursor": {
          "ref": "9f289b90-251b-4060-b2cb-3396f8463126",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "bdb4aa10-6969-4d2e-ab90-848207d06205"
        },
        "item": {
          "id": "5aab305b-82fe-4967-802a-a22505b147b9",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e2125f23-1aa2-4108-b8fb-f887ddf18570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b85996dc-cbd9-4b1f-b02b-d9d89eb34df1",
        "cursor": {
          "ref": "6a923825-24a0-4911-8a68-6438516ed4f5",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8f35dab9-ccd4-48a6-bb91-f761745af572"
        },
        "item": {
          "id": "b85996dc-cbd9-4b1f-b02b-d9d89eb34df1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "15a5782d-1395-4637-bf85-07f0e71338b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11558df-3dc4-43d5-9969-a403055c590c",
        "cursor": {
          "ref": "4fb9dc42-c0d1-4836-9a75-f7cd72bf1e5d",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "dcb286e0-42c4-4f79-8b5a-3b9868a631ba"
        },
        "item": {
          "id": "e11558df-3dc4-43d5-9969-a403055c590c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d73380aa-4f0d-4a46-b04f-2c38b5ae4984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10e0625-28f9-4bf7-9809-7ce54ab05f9e",
        "cursor": {
          "ref": "98c4652e-4651-403e-9b9b-dccf1ee5f8b6",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5a2501a4-e0fa-494d-b826-cec5436a38f8"
        },
        "item": {
          "id": "b10e0625-28f9-4bf7-9809-7ce54ab05f9e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a52e1f63-152b-47b1-a38e-0cf1331c9b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b718bd15-17eb-4b2e-a1c1-b56677737879",
        "cursor": {
          "ref": "e134fb5e-de3a-4be6-ba10-35a72308ed57",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4e7994ec-7005-47c9-a285-3f765556d3d1"
        },
        "item": {
          "id": "b718bd15-17eb-4b2e-a1c1-b56677737879",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9019bc70-8a9e-4d42-a6ba-c97f8ed686e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac165022-11d4-4206-9180-a93ebe778db1",
        "cursor": {
          "ref": "5ef859e4-2f36-4d67-8fc8-a39b5e68d6bb",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f8308251-e91c-4545-8ef3-948a03432f2a"
        },
        "item": {
          "id": "ac165022-11d4-4206-9180-a93ebe778db1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0b02c229-a712-4816-b8e0-a704816e2d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d8bbfe7-f158-4485-992f-089471d01088",
        "cursor": {
          "ref": "ab0d8a52-42ae-45ba-b60e-149de2742b5f",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c1743c6f-0cc4-4c9b-a65f-3a131e30a851"
        },
        "item": {
          "id": "4d8bbfe7-f158-4485-992f-089471d01088",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0402f0ce-205e-4e6b-b599-2fb839f4ca61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 231,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f37513a-292b-4fa7-a208-09f3f9db825c",
        "cursor": {
          "ref": "83870d4b-0c4e-45f5-8e30-288a62e44538",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3d850419-2787-43cf-a868-d0cfa2f03062"
        },
        "item": {
          "id": "5f37513a-292b-4fa7-a208-09f3f9db825c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "968bf170-913c-4e68-b4b4-f407d41fb430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 390,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a1faa7-6e69-4947-85b6-921e88486da1",
        "cursor": {
          "ref": "4028dd71-e710-4f3b-93a4-bfc72fde19a5",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7ad96fb9-9dbe-47d7-b923-9335262b8b0c"
        },
        "item": {
          "id": "06a1faa7-6e69-4947-85b6-921e88486da1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9af9a666-79e4-4aef-9280-0a0fc230f7a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 225,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f176ef3e-abb0-4d2a-905d-e40367b39464",
        "cursor": {
          "ref": "a1917b24-fe47-414d-a0bf-61ece378589a",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "eaf3fd74-4c17-4de9-ae31-6dd2170b331e"
        },
        "item": {
          "id": "f176ef3e-abb0-4d2a-905d-e40367b39464",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e17aa7cd-1065-4cd4-8e43-ba283b7efa76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 229,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c2dcd76-5810-44f1-a9fd-e9a6b3925477",
        "cursor": {
          "ref": "2aa4b40f-a94c-4e66-891f-8758604b697c",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "303e90c1-128b-4cba-ab16-74afcfb787d8"
        },
        "item": {
          "id": "8c2dcd76-5810-44f1-a9fd-e9a6b3925477",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ceecc62e-cfec-46f8-8b87-b7bcc0cb682f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73cdc38d-87a7-430d-b05e-e14e9ff2b089",
        "cursor": {
          "ref": "1ba736f8-d45c-46a5-8e76-7630a1745c57",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b47edc70-c059-4b9c-86c5-3dcca4e4317b"
        },
        "item": {
          "id": "73cdc38d-87a7-430d-b05e-e14e9ff2b089",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a108f2d0-d909-4e32-9f21-35a25ae21269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 233,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43c3bb35-4748-4e2c-83ce-c10694bc779b",
        "cursor": {
          "ref": "f7199e16-8bb9-4baf-9f1c-054a4bf449ca",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b10db9f3-6b21-45af-986d-a524e9a3fa24"
        },
        "item": {
          "id": "43c3bb35-4748-4e2c-83ce-c10694bc779b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1c021b23-c87b-4988-bd57-1bf23384dc22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a82d8f5d-163d-4a09-9dec-0e2bc7730561",
        "cursor": {
          "ref": "0fb17ba5-cfae-4038-85cf-8458881ecb90",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "47eaba62-8f04-482a-ade0-c2991aa2ef49"
        },
        "item": {
          "id": "a82d8f5d-163d-4a09-9dec-0e2bc7730561",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "019de8db-8eaf-4737-989a-083729ae95d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba52f22-c942-4198-b7b4-04036bab2ecc",
        "cursor": {
          "ref": "da8f738f-2490-4431-8d89-c4e42b58582d",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c668bb59-c245-4df7-a610-1566df226bc3"
        },
        "item": {
          "id": "7ba52f22-c942-4198-b7b4-04036bab2ecc",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ab3673d9-02ac-4267-abac-2d72cc00a024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6129972c-3bfb-44b4-8c2e-462826ecee7d",
        "cursor": {
          "ref": "d5f4a9a2-5633-405e-a9d9-fd1124344579",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a5cb8b43-3a30-451c-97ec-0806f5bf4e53"
        },
        "item": {
          "id": "6129972c-3bfb-44b4-8c2e-462826ecee7d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3ac04ade-5821-41b7-aceb-585095650442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 280,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50226f8e-5f36-4f47-9f3e-6c6c7e8b626b",
        "cursor": {
          "ref": "7a25d375-3d94-4904-858e-cdb6595c5b73",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "92406538-efd2-42b0-b84e-9133b8f532ec"
        },
        "item": {
          "id": "50226f8e-5f36-4f47-9f3e-6c6c7e8b626b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c4356445-62df-4cb6-bea7-7b1e7b2f5698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e0df46-299b-45e9-9328-e1f752a07610",
        "cursor": {
          "ref": "049f5394-0021-4b98-ac27-7a901ec383a3",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "4a035fcd-5409-4b07-91da-8fd9db1fa2a2"
        },
        "item": {
          "id": "e0e0df46-299b-45e9-9328-e1f752a07610",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "93d89a8d-10da-4d4a-8fb6-0de8a9d93876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029e5aed-03ef-4849-bcd1-d68fcd2e3855",
        "cursor": {
          "ref": "3d59bcd9-4d37-4181-9682-75768f3e6308",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "afc9a022-1d73-4ce9-98b7-2e0ef71df7fe"
        },
        "item": {
          "id": "029e5aed-03ef-4849-bcd1-d68fcd2e3855",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f2056f08-9e4a-493c-a4eb-deb4aa641f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f8612d-e4b2-43e0-b35c-8a80f1dd3343",
        "cursor": {
          "ref": "374b1158-3e26-49d0-86a1-716d26c6c1b2",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b9b75a83-ff19-4096-bacb-3243a466aba4"
        },
        "item": {
          "id": "52f8612d-e4b2-43e0-b35c-8a80f1dd3343",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "22af56bf-02ed-4641-bd63-518cd0043ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb8136e-b8b3-477c-a9d1-6440d859842b",
        "cursor": {
          "ref": "891ba37a-3f88-49a9-8ebd-fe755c785250",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "67f5effc-4058-4933-9fae-f087c71553c1"
        },
        "item": {
          "id": "beb8136e-b8b3-477c-a9d1-6440d859842b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "08a5c4aa-3f83-4775-9f08-dec8a72910e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 312,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6205762f-3964-4290-9266-3ea2570e1510",
        "cursor": {
          "ref": "920f18a9-55f3-47f7-8a75-7d55b8f1d181",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0a28bc7f-48a4-4684-a237-57ec70585b80"
        },
        "item": {
          "id": "6205762f-3964-4290-9266-3ea2570e1510",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2178e2f7-5828-46c4-958b-01654f81989a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4cee62-302b-4df2-ab39-96a26352adff",
        "cursor": {
          "ref": "719fc19a-1ce7-4869-bac3-a5bd54c2babb",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "066192bf-1e7d-474c-8018-3f259dc9d86c"
        },
        "item": {
          "id": "5b4cee62-302b-4df2-ab39-96a26352adff",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5397bd1f-5627-431e-89d0-2539a64270fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feeb614b-5d97-4e0d-b8f0-4003630f36e9",
        "cursor": {
          "ref": "28dcb344-3931-41b2-8c7c-1658cb1c352b",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "75552226-9270-40ec-bda1-c50c0b918f54"
        },
        "item": {
          "id": "feeb614b-5d97-4e0d-b8f0-4003630f36e9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6e24b6db-a790-43c9-9b28-84a001cf87df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e73673-5552-4981-87f9-a5a68c939221",
        "cursor": {
          "ref": "93cf0a9b-c959-42a9-aacf-71af454f547c",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "cd7a2cb9-a45c-456f-8df2-a293c06f1527"
        },
        "item": {
          "id": "53e73673-5552-4981-87f9-a5a68c939221",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "77a9d570-9900-4365-b210-6d698523db2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7855fd06-5689-459c-ba6b-9bd23609e3cd",
        "cursor": {
          "ref": "47882106-43cd-494f-92f2-8f8290b52425",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5cba2981-9cd1-419b-ae00-550d5c806a86"
        },
        "item": {
          "id": "7855fd06-5689-459c-ba6b-9bd23609e3cd",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "aa3021e6-20bf-4a09-9784-1fd16c015666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5654b854-3d04-4ba6-b104-1fe41aa85ec0",
        "cursor": {
          "ref": "bd8d946a-59f0-4f03-accd-8ac9177b3cc1",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2678ee78-4251-446b-854d-4e9fd9f7c262"
        },
        "item": {
          "id": "5654b854-3d04-4ba6-b104-1fe41aa85ec0",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "eb93d824-82aa-4bf7-80c3-5fe8e1324066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a7e6bc-5b1b-4c68-8ff0-0dd57064d86c",
        "cursor": {
          "ref": "32109bd5-e4cb-4023-89f2-6c7c61fae67c",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0478986e-59ce-4110-8900-1a77605c66f7"
        },
        "item": {
          "id": "18a7e6bc-5b1b-4c68-8ff0-0dd57064d86c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "977567e2-e973-4b2f-9af3-1eb5c4cd6f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03dab984-4fb1-43db-8257-7517dae99478",
        "cursor": {
          "ref": "ddac2aa6-c50a-400a-b631-b0938f02416c",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a4dc3124-57e8-44e1-b629-41ccc41e08c3"
        },
        "item": {
          "id": "03dab984-4fb1-43db-8257-7517dae99478",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "04669699-a506-4c85-92f5-d8c67e5bfe4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e79a3b0-2184-46ad-8c84-995a577d2caf",
        "cursor": {
          "ref": "d04c3704-e0c4-4094-9981-2f61ccbcdb96",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "18996567-0982-49de-97a7-95f074280fd2"
        },
        "item": {
          "id": "2e79a3b0-2184-46ad-8c84-995a577d2caf",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3beee5ba-3140-40b7-a772-942356f7872e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b451e04d-4a6a-4423-90a9-7b7e0179b13f",
        "cursor": {
          "ref": "1dbb10fb-6d8c-4f97-acd9-731333c4c9c8",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fde932c2-37b7-47ba-a5d5-6d22501e70c1"
        },
        "item": {
          "id": "b451e04d-4a6a-4423-90a9-7b7e0179b13f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "72d3dcff-0f3f-4adc-875d-c977b9a1c03d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4fdc946-2528-4c62-a820-b258d45749e4",
        "cursor": {
          "ref": "1e4526cf-07f3-467b-825d-750281d7c01b",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e512731e-6b6c-497b-b754-b03c07f7b9ae"
        },
        "item": {
          "id": "a4fdc946-2528-4c62-a820-b258d45749e4",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f1ab0a61-4dc0-4f04-b455-63ad0687c8f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9464f62-77a1-4ab7-b298-033eb4217a24",
        "cursor": {
          "ref": "25fd52d6-6f98-4763-8602-179842fd7b33",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "171aa0ac-27bb-49fb-9e16-5e3e2bffd857"
        },
        "item": {
          "id": "a9464f62-77a1-4ab7-b298-033eb4217a24",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "71590fcb-5b95-4380-a1d7-e48ad2ce0b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a312efd4-154f-4f37-b07f-9cd92f3ae48a",
        "cursor": {
          "ref": "ee70a1d3-49e4-4f8e-8d68-54c25023164c",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f4a847eb-20f8-4388-a01a-fdfece6626d8"
        },
        "item": {
          "id": "a312efd4-154f-4f37-b07f-9cd92f3ae48a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3ad6cd7a-49af-474d-9092-79822716b37d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f1ee0c-dd25-4c07-bc72-d303d28f675c",
        "cursor": {
          "ref": "64f982fa-d795-41f8-beed-0efac5f9a341",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3d511403-7f58-4852-a450-565d5da9d9a5"
        },
        "item": {
          "id": "e2f1ee0c-dd25-4c07-bc72-d303d28f675c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "410e9773-a0ee-43d3-9542-32385360d77b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53b8a71-0681-4fb8-b364-4f6548e0de4e",
        "cursor": {
          "ref": "f8d53595-c76f-436e-be2d-b204aace5159",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "949c1e36-1ce6-4543-8a1a-891d55065fc0"
        },
        "item": {
          "id": "b53b8a71-0681-4fb8-b364-4f6548e0de4e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "79008b96-a811-497e-9cdd-6975d82e8419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf366151-e947-4da6-8a40-6914d0e71d0f",
        "cursor": {
          "ref": "b6f18043-7f4b-41eb-aba1-342edba85468",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "df7fd8c6-159d-4a06-90d2-ff4a90c6bbd6"
        },
        "item": {
          "id": "cf366151-e947-4da6-8a40-6914d0e71d0f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b124f846-7ff1-49df-9989-d3b2eb91e275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a095d0e-5ffb-428d-b7dc-bb5510128806",
        "cursor": {
          "ref": "3bc2ed44-12b9-4717-87cc-fa0f9f03f1a4",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ecb92255-64e6-4be0-acd7-4473f82f6478"
        },
        "item": {
          "id": "4a095d0e-5ffb-428d-b7dc-bb5510128806",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "64b437f9-3119-4d11-94af-34a1bd4678fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcaea7da-22c8-46b8-b42f-3a8faa830f29",
        "cursor": {
          "ref": "b92bf657-0d19-49ba-b09f-5550a7f53421",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6235aca8-1931-4fd2-9bd5-102aad690828"
        },
        "item": {
          "id": "dcaea7da-22c8-46b8-b42f-3a8faa830f29",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6ea4af9c-6ef0-4b22-b7ec-e11783aa66e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db3469e-fe98-4265-9268-5028d8ac12e6",
        "cursor": {
          "ref": "16346e18-9aa7-49b3-9eeb-3851fd01f657",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "10a89921-18d3-44ff-b520-1ee977602803"
        },
        "item": {
          "id": "1db3469e-fe98-4265-9268-5028d8ac12e6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a1e8f307-3f69-4b70-a117-1e02a151dfc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec341fea-1c62-4555-8902-9f0016133f0d",
        "cursor": {
          "ref": "2390c6ac-cd57-4469-b4f5-b99e310cf0c8",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "49828969-6079-40d6-9afb-6a73f231e8f4"
        },
        "item": {
          "id": "ec341fea-1c62-4555-8902-9f0016133f0d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "57f1e915-afcc-41a9-a220-f9823cf8fa0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41677f39-df22-4da4-a10f-0ad563a08609",
        "cursor": {
          "ref": "873e0116-e8d4-4c57-9b57-52f652e647c5",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c14c1e65-f261-43dc-bf74-4f4961e1eaa5"
        },
        "item": {
          "id": "41677f39-df22-4da4-a10f-0ad563a08609",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "57651cfc-9496-4c91-9bb5-29c694fd8f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69ece30-2357-491b-ae25-9d5217b9874e",
        "cursor": {
          "ref": "5ca263b9-bd6f-4f88-84bf-7cc90a7aa86a",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "70807f6b-7e06-4efd-abb4-a609469e46ac"
        },
        "item": {
          "id": "c69ece30-2357-491b-ae25-9d5217b9874e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "52658ade-33e5-4255-8295-5be11d4209c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b85c6601-da7f-42b2-912f-9bed0027a7b6",
        "cursor": {
          "ref": "93fe51cb-c1fd-470e-a970-f09c6674b2e0",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "60469fb0-fd12-400c-8f0b-5ca3e543cecb"
        },
        "item": {
          "id": "b85c6601-da7f-42b2-912f-9bed0027a7b6",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "65a0e5e9-3fa4-49e1-b5c9-ae86e2692cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0561cf09-3714-47f0-b583-e6ef934a9bf3",
        "cursor": {
          "ref": "9ca29d71-e6e8-4b06-84ad-af5ffb6bc7c7",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "60c3b130-e979-4998-88a8-cb35b7d3e528"
        },
        "item": {
          "id": "0561cf09-3714-47f0-b583-e6ef934a9bf3",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "527c5afb-d1a9-4514-a6ac-aa138fe6401e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b60ce823-ecdb-449a-b0cc-9f0712e82d0d",
        "cursor": {
          "ref": "83850fdc-d619-42f0-ad95-38e14f1ff067",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9f3f617f-2309-4401-a890-76bbe059068a"
        },
        "item": {
          "id": "b60ce823-ecdb-449a-b0cc-9f0712e82d0d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "386c7218-ce9a-46eb-bd9c-021128952a5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ece445b-be02-4514-86f2-b7257d6f80d8",
        "cursor": {
          "ref": "5975416a-852e-451d-ad65-91f3ce387a80",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6ca5b366-07fb-44ef-94f7-6b4ab850ef2b"
        },
        "item": {
          "id": "1ece445b-be02-4514-86f2-b7257d6f80d8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "01b02dd5-1585-41b5-ac5c-80965b5ac287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235afea8-3131-4fcb-a287-df753cf81438",
        "cursor": {
          "ref": "3258c46d-d803-4119-b745-2d8a25025c07",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "42aef79b-aed5-466f-be86-548abfa8f332"
        },
        "item": {
          "id": "235afea8-3131-4fcb-a287-df753cf81438",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "43877d62-71a6-464f-85de-705dd8d29f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a4fdb90-efce-4f57-a2e6-8ddea9e52f4e",
        "cursor": {
          "ref": "2dad03bf-8867-4703-81db-fe1e479355c3",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7db0d5f4-07b1-407c-a937-5808611c0309"
        },
        "item": {
          "id": "7a4fdb90-efce-4f57-a2e6-8ddea9e52f4e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cb46e299-537b-411d-815f-ba8e42ead0bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e423579-007c-48ad-8c66-349a73b4d69a",
        "cursor": {
          "ref": "b03e5c0d-6038-4bcb-9eb4-92230c390421",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5d48a9b1-4ecb-4621-8937-11aa26ee7a96"
        },
        "item": {
          "id": "8e423579-007c-48ad-8c66-349a73b4d69a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e9bb0d39-109c-4418-b616-4eda71702d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79fd963-52f8-4e00-9a3b-8a49b581cefa",
        "cursor": {
          "ref": "a1395ea8-052c-479f-96e5-b405403be029",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c71e803c-6e1e-4630-bf5a-8d25ca968196"
        },
        "item": {
          "id": "f79fd963-52f8-4e00-9a3b-8a49b581cefa",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "43308094-130b-42a4-8159-79ae78193fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd6a256-1119-4c0f-8c6a-79028757418f",
        "cursor": {
          "ref": "ec155660-6942-41c9-b196-75e398b52180",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e5061363-3cc6-4227-ae77-428ca5f6b043"
        },
        "item": {
          "id": "edd6a256-1119-4c0f-8c6a-79028757418f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cb3ea119-8ee1-4632-9515-d37537a177db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4464b0f7-34c3-4058-bab5-938e729b5c80",
        "cursor": {
          "ref": "314eb828-212b-4b03-811b-160cae529666",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7230ed2d-3716-44ed-b197-9b9c56abcfa1"
        },
        "item": {
          "id": "4464b0f7-34c3-4058-bab5-938e729b5c80",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f938c871-29b9-4d10-880b-54da8393aa69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15232b8e-d310-45aa-89cf-46f87ed3bdc2",
        "cursor": {
          "ref": "9c6e399f-7a6c-437e-8232-01ac6446cb64",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "498b5576-8950-4b37-9a84-65d0188c9405"
        },
        "item": {
          "id": "15232b8e-d310-45aa-89cf-46f87ed3bdc2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "bb663d89-b91e-43d7-aeac-bf861d3b028c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a9afd3-02c4-4b13-92ed-4df857e6b636",
        "cursor": {
          "ref": "7188d982-39b0-4e27-b62d-74493bb1b89d",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e7c7b4f1-f8a1-4c20-8fac-a3bc3fb91523"
        },
        "item": {
          "id": "16a9afd3-02c4-4b13-92ed-4df857e6b636",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0c7bfb43-58c6-44c8-98d6-55d7a576b8b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6d54fc-fba2-4f3d-95f0-bef930f4283b",
        "cursor": {
          "ref": "f1785a42-eaf0-4ee5-aa3d-83670112d227",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "8c341d0a-7b84-4038-af73-b72b9bce7ddf"
        },
        "item": {
          "id": "7b6d54fc-fba2-4f3d-95f0-bef930f4283b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "224482a5-44a8-4db2-adde-3af80f742bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8869c81-474e-49cf-a00c-7b2cc76f9f3d",
        "cursor": {
          "ref": "ebd4cf94-0a25-4da0-a1e8-817e54e5b2b9",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "804ff54e-5844-4f6e-9770-f720b88445c0"
        },
        "item": {
          "id": "a8869c81-474e-49cf-a00c-7b2cc76f9f3d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9782dc29-f7bd-4ab9-b593-3965ebd428c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f3807a-2793-484c-b849-1ef3b950428d",
        "cursor": {
          "ref": "dec1ff68-5029-49ec-b74e-de6bc93c6d61",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9478bd70-47da-4d08-862a-5091667849a6"
        },
        "item": {
          "id": "36f3807a-2793-484c-b849-1ef3b950428d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "22824404-5308-4bb0-8368-649e6926ff8e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859c146d-adbe-4053-ac6e-6c707798fbb9",
        "cursor": {
          "ref": "a917560a-ed90-4bad-a51b-09e99e89fe30",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d881ef7b-4233-4176-9e81-23c01b7f7ad0"
        },
        "item": {
          "id": "859c146d-adbe-4053-ac6e-6c707798fbb9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "02281900-ea44-4651-b7c7-4a005b023403",
          "status": "OK",
          "code": 200,
          "responseTime": 498,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f7b615-833c-49d4-bc8c-570ba1d9bb18",
        "cursor": {
          "ref": "94a6cb1d-5167-4fb4-aa02-c4b1a99ff072",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "38b9fbfc-7784-416c-8485-44b6c450a536"
        },
        "item": {
          "id": "f1f7b615-833c-49d4-bc8c-570ba1d9bb18",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "7dec79d1-c9a6-43ba-afc7-21cb951146c1",
          "status": "OK",
          "code": 200,
          "responseTime": 362,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cab011d-6819-4a06-86f7-cc6a6e2fa875",
        "cursor": {
          "ref": "91ff616a-4fda-40c2-951f-28c0a58291c8",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "93aaaf64-aa0a-4afe-984b-5e73c7f32258"
        },
        "item": {
          "id": "4cab011d-6819-4a06-86f7-cc6a6e2fa875",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0bc368fd-3921-43ea-b4e8-df3fd6f5036d",
          "status": "OK",
          "code": 200,
          "responseTime": 526,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf46e96b-f804-43d4-b8a0-e595d756be41",
        "cursor": {
          "ref": "ae2bc440-7714-4b83-bb10-601768711cb0",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "96495116-e076-4e0d-83e2-8e5f278246d7"
        },
        "item": {
          "id": "cf46e96b-f804-43d4-b8a0-e595d756be41",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b81fa82e-21bf-4d95-a466-a19d70f1c49b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf46e96b-f804-43d4-b8a0-e595d756be41",
        "cursor": {
          "ref": "ae2bc440-7714-4b83-bb10-601768711cb0",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "96495116-e076-4e0d-83e2-8e5f278246d7"
        },
        "item": {
          "id": "cf46e96b-f804-43d4-b8a0-e595d756be41",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b81fa82e-21bf-4d95-a466-a19d70f1c49b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf46e96b-f804-43d4-b8a0-e595d756be41",
        "cursor": {
          "ref": "ae2bc440-7714-4b83-bb10-601768711cb0",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "96495116-e076-4e0d-83e2-8e5f278246d7"
        },
        "item": {
          "id": "cf46e96b-f804-43d4-b8a0-e595d756be41",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b81fa82e-21bf-4d95-a466-a19d70f1c49b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8154fb95-d887-4857-9184-67ee4f886a27",
        "cursor": {
          "ref": "f28900b1-48d4-4aff-84d4-ceba56fdc2cf",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3d22fc55-8cd3-4352-9fb8-deb48b0e1d2c"
        },
        "item": {
          "id": "8154fb95-d887-4857-9184-67ee4f886a27",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "dbbb5f7d-100c-4350-a768-3c8365fe4e21",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0041e7c3-ae39-4066-b138-91c2120efe9b",
        "cursor": {
          "ref": "d9c358b9-d366-4e2d-aec8-9304b8d5d76a",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "322255d4-ba7c-4440-a2ae-00c2447c8f5e"
        },
        "item": {
          "id": "0041e7c3-ae39-4066-b138-91c2120efe9b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a35a44e4-e8d0-4fdf-a092-f99ec397f331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "0041e7c3-ae39-4066-b138-91c2120efe9b",
        "cursor": {
          "ref": "d9c358b9-d366-4e2d-aec8-9304b8d5d76a",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "322255d4-ba7c-4440-a2ae-00c2447c8f5e"
        },
        "item": {
          "id": "0041e7c3-ae39-4066-b138-91c2120efe9b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a35a44e4-e8d0-4fdf-a092-f99ec397f331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "e228b4c4-2771-47d8-98b2-419e8e075e15",
        "cursor": {
          "ref": "fbaed2f0-9d51-4eb4-95ef-bfdaa738a087",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2796c9f0-362c-463b-a7e3-901fdf580567"
        },
        "item": {
          "id": "e228b4c4-2771-47d8-98b2-419e8e075e15",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "71f9e468-5ba2-4093-9871-eec7e4d3161c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "ebebf3ee-2290-4c52-af77-c60b1fec33c8",
        "cursor": {
          "ref": "bb97b26e-5e63-485a-8ab1-8eff0fe12bda",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0857c60f-5428-4190-84c3-83a8f0da4c3d"
        },
        "item": {
          "id": "ebebf3ee-2290-4c52-af77-c60b1fec33c8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a31f0d3f-bcd9-4734-9f3f-d3f4d22f91b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "ebebf3ee-2290-4c52-af77-c60b1fec33c8",
        "cursor": {
          "ref": "bb97b26e-5e63-485a-8ab1-8eff0fe12bda",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0857c60f-5428-4190-84c3-83a8f0da4c3d"
        },
        "item": {
          "id": "ebebf3ee-2290-4c52-af77-c60b1fec33c8",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a31f0d3f-bcd9-4734-9f3f-d3f4d22f91b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "b6094e0a-8ba6-474f-855b-cd207cf170d0",
        "cursor": {
          "ref": "805b94f0-6b16-44fe-ad29-b8f31d01a3a9",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8ab55f40-77f4-4662-8857-860b56311db1"
        },
        "item": {
          "id": "b6094e0a-8ba6-474f-855b-cd207cf170d0",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "19f698e6-8859-49dc-9eb4-a254eef987b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}