{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "76929edf-4860-4ad8-beae-9fb940c34fa3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "48cf71a5-fe6e-418e-b338-2429f171b39f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9dc0cb51-ec46-4a17-9a61-87bd5b406fd7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a8f2aaea-40c2-4e02-bc6a-598582a503c7"
                }
              }
            ]
          },
          {
            "id": "e1c857d7-0ff3-4b97-aa0c-bfb5de563bce",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cc4a6876-096e-4b77-9cb2-bc1f40fbd637",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f6907b47-c68d-4e52-aef7-fcb4e04e3695"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "79a4fbe5-8061-48eb-86a6-957778d8dda2",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7d67608f-0ed6-4b14-84fe-3896faad4c7f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1674e823-1124-4a87-a56b-82453abcca19",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f2da15b-1048-4403-8f38-a3c48892c11d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "034a352f-f388-421b-a89b-09d031ac1605"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9376b422-9c49-423c-8898-756d110e3faf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fd577a98-b059-4c8a-94b2-8e95910bd5f8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7f94909b-d615-49e7-a090-b1d993dd7cf2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "06ae1455-017e-4ff5-9f78-0ea8c20fb17e"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b43b1dc1-4f57-4ba1-8281-abc8ad55093a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "cff63b7f-d6c3-43dd-b55b-1e756f9e0be5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f387e6e-d431-4968-814d-859d32d6a940",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb2ef80d-60a9-40a4-8a57-577ebbba328f"
            }
          }
        ]
      },
      {
        "id": "b7721f12-9a3c-433a-9dca-da2c8c03df79",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "69370664-9146-4afe-91d1-185bf8728f56",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c6ef0d40-974f-483d-bc91-958f82b38071",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "29fd9bff-5eda-434c-80b0-730c348f012d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcbe425c-e390-469a-9b51-44142942dcd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82963b51-ce7a-4838-99d9-2e208ee9fb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30d91a5-ee22-4681-b89b-6ee0a0903742",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff98bd7-7fe0-49f0-b931-002bf24b86b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8dfd6e39-c166-4f81-97e3-f9518627757c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a54e595-c384-4fd4-b4d6-c070c9422bb6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34162a82-932c-4f28-9a86-19a0d6923609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62979897-0d25-407a-8c21-cacf43716002"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ebd76597-2050-4041-b95d-4e0b94878de1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc7e8713-35d4-4e99-88f8-33f5ddbfc6d9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a100587e-6435-4948-a4e4-631e6a54f9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5bae6f34-80c8-4d08-adc5-87662946dfcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17fd6bc0-6e39-4f92-a1ac-b8f4b67797f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6888cff3-4157-4649-948c-ee21de9dcf3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba6b625-6309-4cbf-912d-3aa3b6be230d",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62392d57-c0a3-488d-ab52-c86a2a5af935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ab69bf5-2def-44bc-ae03-94f138e5b874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1765f5bb-240f-4eeb-87a0-1de71fdf1e41",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "694ef9c0-d4c7-4035-89a3-1899bd7019a5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2a83b780-90ec-46db-9833-fd8eab916272",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1d656843-b0c8-4e5e-8d84-f91b3f99863f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "763f4169-0855-4d56-a9ca-97d4dccc80f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "03dc2f7a-f67f-4901-8f08-7d7aa03efd82"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e3bd422-efa0-4527-8a64-d5dafd3d498e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "81eec3f3-20aa-4928-8816-bca99a63033a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b05647b-dcfc-4b3a-8ed5-30456b13facf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1564a7b8-81aa-4652-b7d1-27aa3f502155"
            }
          }
        ]
      },
      {
        "id": "b441dba5-6776-4d2e-bedb-8486389f3d17",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9eb24d43-3a3c-4e19-8cd5-3c99778e1426",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6a2e8228-3879-43d5-ba53-5be2a91404c4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "cd17139a-3844-468d-8e00-af069106c267",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd89e9c-887a-4f2e-bb0d-9513aa045015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf21408-ff47-4d88-b26d-6e9dc14d54b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1351b1b-60ce-4061-a17b-83c4a40dac95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96a30aca-45a6-442a-bcfc-1d48e7166226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40519895-a613-4a1c-a8b0-c63bd5add6ad",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c99ad29-050b-4943-aa1a-9bfb1ea72568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d27d2c4b-303f-4731-997e-3f6c3c0eee57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a9cefe-ccd2-41ed-ae7d-f5d9bb89a990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0726760-5ad0-46fb-a83b-3bca0e2cad36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b5bdc6-2ee9-42e7-b74c-4097e05d5887",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1745bb5-46aa-4a2a-992b-eae567decbd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d077f049-b25a-4fc7-8e5b-e5fa8aa3a1a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592bd744-29f3-4bbc-b8e5-8b61d302648e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9fc86807-5294-4382-8ab5-f89862c6d4d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec33f36f-8745-43a6-a1e7-7cf94350fbb7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d35510-b05b-4df7-8d68-ff0f95d1e69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b96adfb-33b6-4f4d-8dff-0cab60cb9ffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003769a1-95aa-4dc8-a274-dd3b877f209d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44eb2d22-4618-44b1-b577-1974b234a2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df94f58-0e2a-4d0e-92b4-f280cbeacc25",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d8c09d-dfcc-418f-b573-a0099996457f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ed4cf9-c1ad-49fb-94eb-12638374eaab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d3504b-70bc-4ca3-a881-cfbd05765b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1729f4c6-8bca-42c2-ad5c-e639bc407eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2140515-0f8a-49fe-9b28-0e104593408b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a547fe9b-9e57-4c87-bbe3-ace920064046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a775179-e767-47a1-9a14-1c45070c61d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c10ec65-185c-4ccd-9d7f-8b8fe01a8997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f658b07f-083e-4435-b35b-a6e5ebf07498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db92ecec-1077-4e1d-bf94-fa50f985eff5",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf9bef4-8334-46b3-98cb-e44294b92b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fcec417-2977-4e95-bff0-05600f5b49c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a41f51-b81d-43c4-a81c-8cd58b732608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afbd0bf3-4105-4072-a5e7-3e83b5937d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01700317-24c8-4bc9-b458-f042bbb80922",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f7fc89-73a9-4b24-8379-a44edb047764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d7ccb1-a943-4b89-a7b6-6462495942dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e122f7ec-f8ed-490a-9b91-670779b10a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26279eec-4c1c-4396-a97d-b56d24f5dba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28e1a01-6d49-4156-acbc-64ad9dcf009a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe751cb-8245-4577-ac2d-a1e9cb365e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "585b478b-9989-4d10-9c3b-a4a0fa1f209c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888b6c1f-2310-4827-bda8-c0206e9ed46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "703e7bc4-49d9-4a35-a81e-83dd4a9ddb33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10bcaaf6-a426-426b-b032-8e22705e2fde",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83549536-9923-42ea-8c44-7c98190c3645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac94f359-b3d5-4f5c-be4f-ed4376304d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5682ed19-f3bb-489a-a972-35e1e1eec994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb3b2474-e13a-4bde-9879-7516d558baa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd311a7-a5c0-4d0b-8f68-fdaed45eb912",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45be878-a451-4379-8c1c-e8272a3101d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "017df85e-fc53-473f-a410-84fe7e2885c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad598734-6320-4acb-a0db-49b82d3bf2c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1dbc7518-e6c9-48b1-a7e4-7ef575ec3691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61df3676-cae8-45a5-aebf-dc86d353e8e9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f813d80-fb29-4edc-8034-ed181a0a224d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eaf4f08-224e-411e-ad79-bcaa2a70fea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2020fc25-3270-43b9-a33f-d9e73d3bb0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b5547c7-a3f7-4318-9764-2f3ad5996513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9ab24d-eaee-4e6a-a972-b9e7c1c60736",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1783de-7637-478e-86b1-e1dae305c273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "714bfa9a-c1a1-4a8a-9af0-01767b3c4989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4462b28e-5d84-48f4-91ba-3470561fc867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3deb8e6c-1872-4054-ad54-f5ea42c69e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0919919-1b38-45eb-a25e-6136364659fa",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a12b5d1-98f0-40df-8791-5219334ea3fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afdfa2e1-3ca9-4869-986e-5a8f44d8222a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa1d3f5-e9c6-4ec5-8526-7ced4cb4c844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e95abe7-bd89-4402-9aa6-4b1ac6b5a8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39019637-56dc-4119-896d-2c81543ddf93",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ba8789-ee80-4d7d-b84a-64185dad96b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "119a0f20-dafc-4ca8-ba83-14ada14c4653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65e1451-7d24-4b4c-87d0-4f2b265d3f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "694439d4-5830-42b8-9bed-4d4c13d292dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb7aac7-7e75-4dcc-afe8-7bb0853ea739",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b2a27bb-150e-4779-9b4a-6c4b7a3df486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d53f16e-2c84-4e16-aaa1-7341b225e048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3769e46f-d9ea-4661-8574-1f8125a2c795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2259d121-8a6f-4e8a-a990-cfef6b3fc749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54679fd5-d7b5-457c-b4a7-c8587b051e27",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cce7620-2b87-4495-b7b3-1911f4696211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b52fa3b-783b-4809-8feb-d15e23846e96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168fa43e-990e-4f19-8b47-c195ff107aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bae37cca-f83a-4837-80d0-4709fed3c988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304262f4-5d9c-4fe9-aed6-b0b0289fbb56",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f70c42f-784c-42ff-9cbc-d9f766bc9f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "427a7086-c5ce-4630-a661-fcfb00726f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78cb550d-913b-4b63-9e7f-a78ea18144d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "528e88b5-05ff-460c-a664-55ae435a4a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0030150a-aed7-43f1-ae7b-b8b2dbb4894e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce7c482-f2a5-4777-938f-2d339e6e0407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3990a95-b970-4eb6-884d-5ce8f26f0bcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b089489e-4f35-487e-b3dd-9688ae8236e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38fcb37a-3f02-4c1b-a77a-cb533e93291d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c9df665-79ed-4d46-84c6-40dcc56336a5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b839966d-c512-4ab1-861d-a8fbab7bcc2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b06cfe7-1177-42b5-8894-e4cbf9a1230e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f68fdc-c6c0-4670-8f61-c37ac087a8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e95b284-6466-48ed-8510-d792b30e3249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9cbf754-234f-4633-9b97-36889ffd3e59",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989a7c86-0364-478d-8d80-d9ddc707edbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "280570d2-8ac9-4136-ad53-6a5012bfba38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db08f54-8062-46e9-81cc-dcb8e3410cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e07455b-f744-4ebd-a9d9-e9da6bc29403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc5835e-92ba-41da-8937-8e8f4426dc69",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8b5ab0-16a0-4365-bd18-d3c61d066dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70be3b09-6a01-48f6-80f4-4fd52937fa21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe84ac61-92f0-4973-a802-34fcda5eb8b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb36fac-86ba-46ed-9a12-0cd8bd8ab30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbc002d-46c8-468e-a6d1-eb160477b2b5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d782f34-1b6c-4c7b-828b-68713a3932f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "849ceded-d63c-43f2-9ab0-fe07bd0e94db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb92d473-a588-45be-ad99-ef0ee5c2b920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "63059805-1c09-47cf-a396-87248c743234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dac3ffe-3fb9-478c-9d5e-27b836c867d0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2cb642e-4c17-4974-b705-4cce7eea3bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0480f0-80fd-4f8b-8ac5-84af1fadebb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c129d4-4c69-4163-9585-a143ddc926c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa47ac2-5a81-403f-b00b-ee0edf459ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d0d103-3fdb-4d5d-bba9-fb73db55f209",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ede9de-eb81-4adc-b135-8c08f952735e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad3b129-f95a-48e3-869d-9d3d5bd27a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1468223c-eb40-4b52-a34d-8e5ff8122a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a07ac1c-686f-4ee2-94ad-e08781f76027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf8b9b3-8c81-4eae-a956-9e99c9bf33c8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a25e318-5187-4b80-a74b-7666b0e67e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc3a4856-5dcd-49ad-a264-e454cf4b05ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd8a7e2-f429-4195-8b17-68fa4ba4ae50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "44f64bdd-1175-4f2e-b44e-f040dcd4c80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9745e8dd-7522-460e-9249-bb14aaa0e19c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14f5c6c-d1df-48de-9a52-a839f2b0e567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3877ce29-3d88-4424-bb29-795869039127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a131120-bc06-44e7-8756-31749c39eebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc621b33-5f3c-4d35-a39b-c5f6c83ca151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e793253f-0f2a-44cf-b9a4-8a94a0d306d0",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9fb972f-ae30-4ec5-afd4-c00ed1c9d17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5af96a0c-f69d-4e04-9751-18c2991919ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d5e7c5-6a0d-4921-9155-98741b446506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "76da8a04-4021-4a8c-8c39-ee53fb82767b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06c0d25-18dd-47fa-88e5-e09b0c9eb1c5",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09eafb29-f395-4c52-8fe4-81794d20e042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "918f6a9a-f2a2-4bde-b505-ce0e2fed8b14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a58901-9e5d-42ca-9a47-768ee8ce0ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "919d65c7-7050-4bb7-a41a-7b82e24898b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf2a0f7-b38c-4a74-b43f-5e989efa2f3a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "243ed51f-01f3-4c6f-9a0d-d3c35e97d16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abcc1bcc-4c30-431d-bebc-c148b5644b8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa7d666-5175-40d0-ac0f-588b7c064f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5873f1f-4408-4159-b372-11c507f98028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59ae176-9ea3-4c1f-92f5-a286345872cf",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0c993a-d0a3-4c33-8480-c4081ee268cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "847c43e5-8bf7-4c3b-9abc-964055db8519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5bd1bb-cece-42d5-9232-e24554bffc55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd3d5e5a-5940-49a9-9a8f-74fd01519fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "399f2990-ebf0-4a6a-b35e-74562e754929",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50ccd24-c8fb-45bf-8d24-6cde8cfbf842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11a60d66-5a44-4267-937f-3f5ebfccb179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ad4f748-19a9-4a45-9bb3-9d51ac24e6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21074d24-321d-47ec-9df9-686de677eebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c0dbb7-eda1-4151-852d-530178061e4f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019402c6-9d2f-4893-8c5d-a5ff10c37712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d6b692f-8ba5-42f1-8662-2c69ffbd3779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e8735e-a260-4053-90ab-2f02cac7cc1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "999e9dfb-eb36-4f2f-9b65-6ab46cfda2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5567818a-3e86-4383-953f-b494bb801e02",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca813ebc-34f1-4804-bdfd-4c7e5932dfb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4c5b18-2fc7-4db5-ad71-d7c0ee1241bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87523a3e-9017-4299-b286-071224b13daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6927ddd-fbf7-41e5-89a7-b66938d5c5c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b59e3bd2-9514-4834-8bd4-37f9d5e620d5",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cae009a-3b6c-44fc-ada8-f8995386314d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e820aeb-6c94-4504-a430-435728fa2f9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9b7a1f-adbc-4ec3-b5d4-cb07872146be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "83d065e1-6f84-41e3-871e-44bbd70df74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "901ddffc-9ec2-460f-9d80-0895a4bc53b4",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7502843-6bdb-4a06-a0fe-adf10b4c7de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "715cf99d-a9b8-48b4-90f2-3c5f26055a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc18e8f-9c3b-4616-afa6-1bb266ea1e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "99bdef00-0f3a-42bc-9787-3712785481b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ded918b-5a6b-414b-8164-f2266583960e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4c7756-37f3-452f-94bc-87a1ead8e710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe46dae-820f-4b55-b22b-1cbb4426487f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4f4dd3-3d63-47a7-a4e2-2040bceb77d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a44b686-d09d-400c-809e-54b5a2685d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39d5cac-9798-4300-8fc6-efff16f8bf3f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9ba645-ff7c-4031-8981-a27ab69b79e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1904db48-29df-4752-836e-6a3a29a9e385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887d4e91-6e71-44ed-9472-73174358e0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "58a930ba-83b5-4467-b778-55c8b27d9247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c390cf-a471-4398-a0a9-f95600767df1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "519cbe40-933f-440f-a312-5a5b38ef4d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0583049-0fb6-4de6-a437-19e51bab0966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bdd50ad-8068-4659-813a-d38f110bc414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "79488f8c-792f-4f9a-9ed6-6a4cc7173112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da0dcf6-b3b5-49cf-bcd8-0b63e7b45054",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf38738-2673-4d5c-8161-743ac38c16f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f87fcfa3-8444-4a3c-a845-47d2539bbc32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ff8cc8-5593-4d2e-915a-90531bdbe173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "658a7092-c1c6-40ab-9119-570a18d68564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d969e5f0-ea2f-4613-8846-5ae507e9a24d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef31945-c35d-474f-81a9-b77c1a196cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b85aa8-e59e-4521-8663-e7218f3af9ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6842473-18fe-4c40-8e0f-71f3b08e123c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfdda3b2-295c-4f3b-aa24-36ee3f030365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c929a84d-efce-4edb-877c-0407c09c5790",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81080c8e-750c-4e14-a70c-ea67a2728d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b115ec3-1f96-417b-aded-f513a1f1cb49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5421a04c-c361-4f7b-a1d1-1dcd543ca83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "261d7dfa-1171-447b-8508-857b8e7ff6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6519a805-e8a7-4a13-9b2e-954f5e29822a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804bf3e9-046e-489d-a9b6-9bd8498a5cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "838b15e9-edaa-4774-838a-442acedf7234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496ac49d-fcdb-41fc-99a9-acdd55b94d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c25f364b-0810-4b40-835f-c7c35b91b827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64386a54-c068-4fb1-ac83-154b8669d350",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5899b0-9966-4c88-bd6a-9d1d45724293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7fb507a-0419-4fcf-aad4-db3c07224a4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b85efb7-fcc6-44c1-a0d6-582f57eebfa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e305a2d-1103-4f0e-ad88-acd9d14d2b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86cd6d16-5ed4-4609-8fb2-afb27b9fc70b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "498e615f-7879-4bdc-81fe-fb6b14e30e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e60f58-3302-463a-81f3-29ce11c08674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e4e3ae-cdaf-4735-94a9-15fc4c197168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "005eaa01-2355-410a-ba84-59e0297c4252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12bc558e-3449-492d-973b-abb4ad2455bb",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4ff5c52-3e3d-4c43-9be5-0441d9dffeba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96803e0-fbb6-4f59-af8b-2ac8656a10b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a83a635-e2a1-46a2-98dc-ed60b283a6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "27412a3e-ae24-463a-849b-fc42c72700b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "003a4238-75e1-49a6-85e3-8be4877db957",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26cb9521-5a50-4453-9e6f-e8dd7050e9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56381bf0-c537-4043-bfde-fada988742d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b77515e-2533-4ab4-86a6-cb3683504185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d246dd7-e5eb-4788-9006-2ccfb5968b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429a99e8-4759-4c7d-b270-df6f651ae336",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2e52af-c957-4d57-ab0a-b1ddfcf5d110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7067aa66-a7c5-4d9d-a9e0-f7b6c4e78738"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3111e792-76d6-4fe7-bea2-0f006c4888fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c4375a3-bcbb-48fc-a60b-0faae8917ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f191c5-474e-418e-86d0-fc907a7165d4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2b83b6-83a5-4fc3-b562-c08bf1c1bb3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfbed668-6a16-44f0-8dd0-834db6092db7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746b7c5f-e7c2-4342-9265-accd2de913f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4ee2541-7a56-42bb-b62e-cc1036b92e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78f6b3d-c182-4ab7-b8cf-66448dcfe621",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d459c146-55b2-4712-bf75-9b84800aeab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44fe5d77-5242-4c41-9d7a-b2c507f01475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6049142b-736a-4e8e-ae2f-8b04be5b3dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "43122fc8-ae46-4969-b6f0-dfa9921c391f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a78ea77-aece-45ba-a71f-d4f0dad54dfb",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd922420-d919-4ddc-a6bf-f4262acf4a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff971f1-6aa4-4651-8200-ac904b7bc3a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab3fe92-a73f-4f42-830a-a6aae49d82d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e02ed056-ec17-40a2-974a-5c99c213c0f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "116b8bde-4b46-4dba-93cc-fa0458a8b518",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9189886-7fe5-46ae-86b4-8fd1c69cb1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cad772a-c173-4d92-88d8-9b4560131a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d646b1-3ce0-424d-a118-ba63d9dd62fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "62021c38-20fb-43ea-b8d2-f3d901f6742b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c5338b-1521-42c2-8c18-c9897938596c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65ffca7-a3c5-4f27-8e0b-f11904ca7c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7254a16-f91a-465d-a0bb-9be6cbe0c2b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6e9854-d8e2-4378-98de-24f5e8e9ced4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a20247e-8d66-4b81-885c-0b5a7c335f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ccd6fef-e726-4214-84d2-68f55ad6e8d7",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6498464-7386-42a0-a0e5-9e17b244db05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dfcdaab-509d-481c-93c8-6c4a36bd6445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "845c06b8-a486-4688-8110-5bdfc0e3a36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9861b163-b863-4246-9b35-e80e85605b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc4f86f-8da2-40d1-a2c9-b18d7bd128af",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65bd3458-e5e6-4c9d-a992-ae5e81eedc6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5a5a9eb-2de8-4593-af3d-e341ca5aad4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7270a1e-1310-44c3-a650-d6ed6d5b0f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f011b326-f7a6-4193-b3b0-191f1edad4a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4af5d56-aaf5-4ac0-a397-4998e1e5213a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da9d892-ed8d-4825-9e39-c8ce706ba58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98b9775a-5711-4af4-9842-a7ff975fa603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dac4006-2a2f-4f92-87e0-2dc8cb1141cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "645d2861-a274-47bd-9cb2-5abf590ee3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f47d6e-7fd8-4984-a913-031ce387da61",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "438974c1-1b69-4ee9-828a-8d251056d067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67cbd79a-d5ce-4ce3-94c0-7b5805cabaf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f1ef2d-a969-4522-948e-7c6ffa75009d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8beae276-c472-41dd-8b7c-0f6cb600b7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97902962-300a-4955-982b-7b53a823e61f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9ac2a6-491a-4849-8306-2f12ac71213c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8b09dc3-63e6-4b47-b314-d380b407fde7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b20a8a-4a3d-40f0-81bc-5a9218911a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "652fa6a0-037e-48f2-b3e7-58cdc3066578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56995b52-21dc-423d-b083-cc30bbdca1b0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4643be-cdb5-4c1c-bd69-9cb80606150a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e6791c9-eea2-4743-a433-93bd60b78ae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc7d8a6-c784-485e-9a42-df0ff1d5ecf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fe561a2-148a-4fbc-8fe1-b25231c351d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa62c3a3-7d2d-4a7d-b8a1-eedd2d46957d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39903b7-5bfc-41ce-9b9f-95fefc4d9b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "994cc718-1bbc-4ecd-9233-b05a3a0f07f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b0f29b-2c99-4b67-aefd-4520c0221370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "21efeada-88de-495d-aef6-d6f4e403c748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08165db0-c456-4771-9710-ce67154e9183",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b53eb6-0e37-4a35-a136-be72f0d3ea67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67469301-74ec-4c4f-bc1b-3ac9a7e5dbd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbaf8217-2f68-47be-ab71-d0137716bd54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c3436cc-de13-4b58-bb4a-4e89ec2f1120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05a081d-2692-4c35-8eba-f1b1fe0096d6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0058eb-6fda-4e00-81bd-d03a58c09a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0308533f-3071-4027-b137-0fa67ba85f4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c965a1-86e9-4682-a0af-7210a1c0540b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb549146-cdc9-421d-93de-f8357305a0e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d312da72-f912-412b-826b-cf3f0c1f2c6e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa0fae3-3bc4-4270-881b-623b6918f18b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc7018c3-5c61-49b9-90dd-cbce9371bd02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0067ca0c-6e99-4f1c-a8b6-b554084ea7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef4e14db-5a2d-4c31-aae6-97d8e9285833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24b284b-ea5b-4d74-95fc-94de834319cf",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb4f4e3-2907-4cb5-b99e-209368070312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63841f7-b961-4076-be44-fe53575c79aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d5854db-f1ba-475f-89e9-e5d046247a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "772cf8c7-3d7a-49a7-b4b1-0196a2858d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc9921a-4c9a-4a10-b1d2-2bed78ed971e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04bfbed3-be73-4489-97f5-b64a9f3bad28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14d235a7-b508-40f3-96d3-59625cc3e098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e681c4f7-cdc9-4121-bd33-057c98b8b8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "14c1fb47-d7f8-4575-a3d3-00eedd75983c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2a8fff-262e-4ed8-bce4-03af31abf7e6",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7fb621-12b5-4431-a2fe-082d4ae60488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c093030-5ee4-418c-bd78-37ed21a2f688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a110d4-5995-4fc5-bc8e-d42a5c73af0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf68e17-4de9-45cc-bb11-6218b191b440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73bea36-9a34-4e99-8dda-67ec7e08d3e3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe905932-e9ee-4f47-a342-11ecdd745a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b913ad24-5f2f-4c78-a128-92fd38b93f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38483c44-2e32-4b69-8599-2f78c316b37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cfd5e085-8c44-4985-9796-e8f8463eae56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1569a207-8bca-4b9a-8933-1e4313c2eebf",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d77b835-c0ea-442b-b13b-5a614908bf9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "666bb1a0-80a8-4a2d-9fe0-ca1d609ee609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "023e245b-442f-4486-8244-ebb6ecbd8662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7ae00c3-a74e-41a2-ad09-48af073b37e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932d8d29-8416-4c5b-82c1-e073cd809bb2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd9ea29-051a-4ae2-95b1-6aa6533dc576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e83024-5c1b-4a84-975a-64ea06bb86e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5faa70-1742-45e5-b331-9f0fc543425b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c441fd4f-1558-4166-a269-e37371d65b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd3362a5-accb-49f2-a3aa-4022f8cb6162",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b0e7c1-6c73-4efa-bf97-b730f17ae56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59ea5107-4f0b-4c26-9797-e5223c4679a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7816365f-21a7-4f2f-a9e0-4ef038ade4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "831151e4-6099-4cc5-b328-b138b8fb4541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0230f9f2-6373-4bfd-a419-3ed261adaca8",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd94a26-c5cc-439f-983c-9e58dabc1606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d962385b-bcd2-4f84-a38f-254369d25395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a10276-25fe-464f-bf56-c562fdcfbde7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "09d58aac-1aa1-4ff8-921b-284de82851f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d58c80-94d0-44fd-83b6-710a7d6a9683",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fd4dba-822c-421a-bdc7-50e54451f807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c7a4a50-373a-47b4-9769-034eefac1ce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5c474e-e065-4873-a64a-e41a138d9baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f689d230-0814-4416-ae9d-db484b2d3719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf325f7-8a78-4759-a79f-e6fba0a4d15a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b810618-481b-4089-b50b-cdc1f5586c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c051543b-ad97-4cc0-8307-9f3cfd953f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe13732-b6f5-4ad8-9296-e475e888a264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d87d64b0-0ddd-476d-8d9e-a612913e501e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184bb996-a3ff-47f3-ba19-c07831daa380",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa9209d-130c-4222-9112-54dd38fb284e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297edabe-a6bb-4749-b98c-cb95c30d56e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35276fea-e9de-412f-85ad-391f30d0e385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ca059181-27b6-499d-b8d5-be2ca01e1dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a254b6f8-96e0-41b4-8ec5-21ef01d3139d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9e37c8-3b7b-4d28-aca6-c4a166737f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e9d5378-3171-4657-90a9-627687f13a3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcf3093-23d2-4d31-899d-ed64103da3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "46a9ed3f-20a5-441a-ae55-b5f6e3304afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514c7805-c012-4f81-ab8b-bacd1d3c9604",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2c3b3f-8f36-46e4-b501-a0486ac2dd27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e152ad8-194c-4f4b-bb7e-0400575092b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff178a9f-0d21-42bf-b78d-f00ac31adca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "46c3c363-2b71-4b8d-ac4e-14ed0807f393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71750ce7-cebc-4287-92c0-9eff585a8686",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28247554-5b47-46aa-a8ef-b5afbf38cace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e655d1b-b944-46c6-ac83-181c18a526d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e255116d-a2bb-4939-b81c-41d6a8de8933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "672ccf0d-6d11-448a-9336-e0f28857a548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df9a606-e549-4846-936a-d1c242fbff06",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1657b18d-22d1-49e1-8013-f3e766b6d101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e3ea67c-cd87-4827-a585-9ab2293371f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a898181-7433-447e-a218-47054a3adc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "621af724-40ce-4f8c-91bd-b98035116398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dafe36f-9c8a-45fa-805e-b3c4eef96b38",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0ca263-cb1c-451d-92de-218b0f9a6546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0055b39c-b23f-4a97-a5a3-d32343d25eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c957ad-ead3-4304-b346-1cb143b2de54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "db9d05e9-339a-4b57-a93d-a7bd8b7c4e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef1650d-f353-4bb5-90d0-2245aa0115d3",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9319999-bfbb-495e-b028-c810db3c8fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c971bbd-1193-404a-9398-1b5a27ce00c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6825b5f-9b6c-49b7-a182-0c923f6b915e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7b4d8b42-478c-4fbb-a9da-036c040c25ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174b988d-e6ab-47d1-b0e4-4411f0b82bed",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0890f82c-2d94-4bb5-a775-dd0bf3ddea41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb7d1792-7bb3-48e0-843d-77fdd3d5e993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4052ecba-b5bb-4822-b4e5-d35c19fc9e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2d6f861-21b7-4dd0-841f-a6d8076001f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa9ab66-bbd5-4fcb-81a1-98051e678517",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "322d570d-20d5-488f-8a06-75b00e9a05c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e62b03cd-2b69-4991-8eb8-d5323df1ea34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969131db-c014-4828-b617-9c73020d8f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3769bdc-b198-449e-8bf7-dc159ff0009d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9358a625-263c-41db-8db0-718ed2a2eebb",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18efea0e-c274-45c3-b13d-835ae19000ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "438503da-1ad3-4c61-b486-72e229beeb08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c28e52-faac-401f-8961-606e69a5e035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "caecc367-737f-4272-8ad1-6320211520d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a67d988-4624-449e-8dd1-0f7559198529",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c993e07-cc9d-4300-8769-68192e03b36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c07727-b68e-4d98-956e-2dbec35d02b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b46d8539-9ce5-42cf-bb56-84b822865aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa001c17-d323-4e0b-8af4-cd206f6ea68b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c3d0b6-e22e-4c27-a3e3-e4a204a6bde1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08ad965-2042-4886-90f0-4d735ad0a2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e791545-5146-4c1b-b68a-06db55828ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c765607-2192-45c9-9680-3c82a331365a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "deb91b74-d228-41dc-bd5f-c751847e42c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed1c3199-d2c7-484a-b417-1aa87481427f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3df8f43-324f-45bc-b1e6-e1570e3a2f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e63d6aa9-27bd-479d-8449-60d60af832ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73a70cd-d0a0-4d14-884d-5cb8a01aa598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7fb2cf2-744a-43fd-8f0a-74d499dc8f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5b9b8e-e9f2-4c41-bccb-3345e085e7f1",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eece05d2-3850-460f-bee4-9f667dc95279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7857389-ed80-4bbc-b6d3-e67a1fe28170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8237e4e1-9c83-4507-b655-5b59d290fe37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1ec5cec-fbd6-45df-93cc-a595873ae941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d3c00a-b41e-4577-a625-1ff1ff1f2872",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7100f44d-6fbe-4de7-998e-b610adbefa94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051dee63-1c5f-470f-aef6-1f2ba3b18b21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d74b56-f5f1-4c78-b311-e95dc40356de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8aee558b-89ff-4f64-8ce4-24669e22cdd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d51c670-2d90-419c-aacd-35bc52587812",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb9036b-3bf2-4ff1-9da7-133c7dd25ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5961585-6ef6-40be-96f7-2b9dc20c39cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f61f9ef-7a63-401b-9bc3-ff24dd1ed625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c66283e-372d-471b-ae30-03a5fd6334c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb6c3c3-0d16-4e57-9d42-9d43f210aa4a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca7ee45-cdd6-421b-b920-940a3f0a7a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8836c4d-2e4a-46e1-a219-408e0067dc20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a607ed6-d942-455a-b695-7c7371ce6ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6c78073-399f-4965-adab-7f1d0063f624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd349d5e-7437-4ae4-bfd9-7b8dac1352a3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc52ef1e-afd0-4e92-a3db-d00f8e81e507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7d87c35-ff1c-4986-92ac-e3031f52ae4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446df2c3-a273-4f64-a778-fe9ac2ca6986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "79b8e7bd-dbdb-4a15-9ef8-d6dff604a418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88349a4-904c-4f7d-afef-91c9e0a2e19d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fde8e9-f834-45fb-8d47-8c305ebe6158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bc4413f8-c4c6-4dfb-8ac8-69401082e8cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8fd6c65-50ce-40bc-93ea-ab6543c06a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "71dedd16-9b25-49ed-9f2e-5d11f95b9f20"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "77fc365d-7fe2-4539-ad9e-f02b8cda2521",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "28f72af8-1303-4d6f-8cd8-198510d7b49f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9f64e0-ae25-41ab-b46c-6393bbab0257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1622bcf6-2859-4540-91d0-c49cec3cddb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "952f2b29-164b-42ae-ad44-dfc3171804fc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3856c42c-9407-480b-bf86-35535b3013d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466d97f9-5487-4272-b30f-0b634bf6da45",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb93b7f-b421-451a-88f0-aacf370bf8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd17ee04-bf38-4b85-a522-9e05070e2bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c9bda7-baa0-4882-ab09-3e935901ba0e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c7af30e5-fa6d-427e-a093-3af391a19249"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e160424c-9c67-4648-bbed-ecd733abfb10",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12d70e6e-e680-4b39-9e1a-65ca31b88956"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "059c9c03-4caf-4261-8cde-55494857807d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e532b3d5-2135-440a-9cb4-321e642e9799"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "68751df2-350d-4680-9005-b87fd6583931",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a9cea164-d89f-40c7-8301-1c00bbe9eb68"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ac8d482a-b664-41e4-bc6a-fbc44d14da2e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f8073888-43c4-4d4c-9a6d-acea62930854"
                }
              }
            ]
          },
          {
            "id": "fbcfe52d-db6c-4673-8b3f-1d8c7faff3c7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4217cb4d-0261-416d-bf51-ba5d9e305e60",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d77e4b0-2127-452c-abb8-485e9a6acf5c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0810d438-4f0c-484f-ba58-384d8b97232e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c26078b-7f11-49c9-84ae-346c16c518a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "057a7013-dd07-4cb2-8cb3-4ae6d1709b7c"
                    }
                  }
                ]
              },
              {
                "id": "f2d30aaa-ac1d-4740-9cf6-23de0bfed015",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c7da7fa-9ac0-4e62-8947-48233b11d3b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "53db4c8b-15fc-4693-9ce8-79febe2fd9af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f95a51fd-bde3-4f43-a427-62404921962b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8fca9d90-99f3-4e3e-a436-cbc1818a8c7e"
                    }
                  }
                ]
              },
              {
                "id": "6ba7f3b1-6e7d-4626-bea5-14bc6e61050f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93f2d35f-9d3c-4b42-86f7-da95325d98f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1897e72-f5fe-4f0e-a5df-9f77eec4ed50"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d895a29-dc89-4571-bf56-fec1cf9c794b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "386bf701-d094-4120-aaae-46b21b062df4"
                    }
                  }
                ]
              },
              {
                "id": "24060386-366f-4e24-a4e5-8d4ac6c6d438",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "200d5c57-34b2-4990-b3bb-4d0cb1d4f50b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "117b0ad6-908f-4bd8-ad78-404ee74cfff4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1150db3-0a5e-47e8-a93b-ab6eadfaf129",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8dcff58e-dc82-4b6f-aaee-e27463fab5b9"
                    }
                  }
                ]
              },
              {
                "id": "c61edc73-a879-40e4-82d8-a3d9a655859c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a7334a6-58d6-4a2f-87db-c999e2bd2d79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5135920-8029-4dd2-bb8d-36f8fd06567e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1063c9a9-c674-4b34-a900-d3dc7ed35350",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "759f91d5-42f6-4a05-a2ba-3e4ffda77be9"
                    }
                  }
                ]
              },
              {
                "id": "bb11067f-d7fc-4028-bb0d-51d2313236b0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ac6ff0e-aaad-49eb-9379-124e2e423091",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "443472b0-8b41-47b3-ac67-b1ced6eb8550"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47fe2693-1c3a-4d3b-b17e-52e0079066d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3b2a24f1-164b-4678-8a5f-1aafa4b952dc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ec876b2d-9e08-40a8-8d97-7eb5a823a637",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3e79e062-4b51-4a17-845b-0cebea1aa0c0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "acd69532-301d-4550-8cad-08b43be35ced",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5e5d944c-527f-409e-bba7-31f00cf3687e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4153a336-a27c-46c0-b33d-d155c22f0792",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "53911bc3-f1cf-4227-8e92-d2cd990d70fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f29e022-2512-46ef-87fd-0e3f7eef5ac5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cec03f2c-f37d-44c5-9452-84a9dc6f8d7a"
            }
          }
        ]
      },
      {
        "id": "494c73f0-305e-4fb0-ae03-7b9c81e5f293",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "718e66ee-2d9d-4771-9ec8-954e5644b885",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aaf34108-80db-4445-b478-fe1d26a80e1b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "184a62a5-4932-4afa-95a5-1a143c7f9a1d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb2a94a-30d5-48f7-8db4-546a72d34649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42178bb3-2df4-4b69-882e-cfcfe1090625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde15189-1ab7-43b8-99fd-919ab33ec787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "82573f9c-a6af-492c-b2d8-532df3c0afe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713b81b8-1c72-49a1-9f49-03bfee653023",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38570877-89ae-47ad-869b-43db35777333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ad9cd2-d91f-4bc6-8277-02ee730789db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6426f441-5e83-4ae4-b7ee-e152c38de279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b30d9b2-8c12-4ab9-a89d-b4e1a71e2292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9cb057-3705-428a-a24a-60ef33a2a1ab",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f369948e-b536-4e6e-83b0-15f822ded18b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dbbe9c6-b5e7-4ba4-95a3-9c6d654c3ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2e3716-48bd-419e-bb81-4110bd561cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b496d16e-4b65-4eb1-a398-3025961db0d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec98552-35e3-4123-b022-4a11c3e66d5a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28498566-8bc5-48ad-8af4-0f268aac5883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1924e8b-7f24-448b-839a-50a46ae7eb97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd98fa2b-7191-4fc1-8998-cd106af35021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c824f6ed-8786-4a19-ae5d-cae916ecb843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c0f5c6-7bc4-401d-9e55-437db7190c88",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a9fb89-9208-402b-8347-bc4f49f0e8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ac38e54-d247-45a3-a071-de976e09ab71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a1bcae-87da-4cd2-bedc-0b37ba891266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d974cd8d-0ae9-4e81-8414-88e1145e56f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f5b62d-2fa3-407b-9a5c-551ae79a1e41",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "676bc3f7-be98-4412-81d9-558dc9e2622f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b7b41e-3a7b-4ffe-b3b8-47c3c79e5749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54ee290-fa6c-4140-879b-e04c6eec67e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4572ee94-2e9c-423b-baf5-65e3db2f5eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4f834a-7629-4b0b-b803-a3db6fa2f43c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2255831f-8291-475c-906c-814ca8aa6b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ae1540-b378-4304-aa34-6223aa109130"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3e4d52-8de6-4453-833d-48919b3c60ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3649471f-1cc6-44c3-a319-177dc3fa4348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f001fe8b-3bbf-4a07-843d-7841d9686e26",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da52f6b6-f1c2-4181-9353-24b575d8cf58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17cb741f-b962-488a-866e-e3909a3c266f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb96a24-bcd2-4272-b417-0892a11521e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b17db59-f214-426a-9248-66e99b3b5341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffaa8966-a824-41cc-b2e3-d0568d7040f8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea28b95-434c-466b-9bb6-1333e6a59768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35c24ec1-e732-4402-a983-c77dfc588c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250329a6-099d-4e5e-bebf-3428c4f5ea35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c2805ab-9b9d-4347-82c3-ef0d63b88476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7c780f-5b25-4444-8984-d18c15fabe29",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd40e75f-2f76-4583-964b-9cb3028ea528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe248e5d-1328-49ad-b230-4b81388a5905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef622b65-950f-46df-ae04-83b378f267d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46cbe592-f049-42b4-942f-f5cbff514cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bdec4c7-7fae-4837-a5e2-0f32be07ab77",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fcbfc93-6139-4121-9a6b-8cf521bab134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7add4917-62f5-409d-bd8d-bbbb99934057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6d64c4-2601-4a52-8446-3fa7b3c65342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "abf31336-6d0e-40b9-8bd9-5cfab198285e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f39cb94-e602-4ba8-84f0-913e85d71865",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "030cb19f-7e5a-4fae-9e85-397b6bc92237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d40d7c1b-27a8-4f69-8062-13bfb2a62d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e90ec3-d548-4768-ba02-3d9a554a6aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "22310007-b59f-4e97-a0fb-92650b0b7f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9380611f-bc9c-4a55-8170-3be2317ed5ba",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a544c8-c10a-4eb7-9896-6271844eba0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caecb0bd-5c77-482b-8f8b-44ceca3ced3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac399dcd-fb79-4c4d-bc9d-330f8abebc1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3eee4968-7e9d-464b-ac0e-db294cbcc573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2107a934-8127-468e-ad19-c29cde8d9b85",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8c83cb0-b45d-4dad-83bc-1a2ba64300d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7784869d-389e-4aa3-9e96-5d182298bd0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a771a9c0-8032-4519-ba45-d28ba23e40ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e803553-da80-4036-bdd3-535e8d3d2f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42ffd7b-20c3-40e8-8470-90eced117e0b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7aedb6-b796-4a43-9acc-fab86691e1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa4976b0-01fe-41dd-8119-da5123172cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "defad3d9-c5d8-4452-ab0f-4de3458c1115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cb005b2-8412-4726-9f11-de426860d686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "400c928b-2824-4637-87d5-31936a2a3a98",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ccf5b7-ebd0-493f-849f-b7be7dc8d796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9967f2d-b034-42c8-9b2d-84f99e8c7fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de46670-f163-4305-b700-92697a6afe32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "746deaeb-03b9-42ab-b0dd-84977f0eae19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428ccd3a-0167-4124-af7d-ec5f46e50589",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7c4f51-c3ec-41df-be1d-b5d312c8eb7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e443176b-2785-477a-9548-368f516a1108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27cf0b4a-4e17-4ceb-b44e-e8e032a80372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5326f84c-4fb7-45e1-8901-8c93fa9050eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b7f188-245c-4303-8aa5-42aef66eaeac",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b871558e-deae-4d5c-8a5a-d7a61872f17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d1c594f-c573-4624-bdac-e1b527a50376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24320c8d-e6df-44e0-b5e6-7c5b7b5dc5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dacd8e5f-dda6-4b8a-967b-81c8db6406b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10437abc-2ddb-4088-9a93-17258673051c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b78b8c-eae3-499b-a401-8ec98ed7da17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46465c20-fd21-4da1-9bff-4cd37f57a993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa71f5c-2cc6-47b6-ae2a-a3eadbfa5e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94d4215c-0c75-4a71-87f8-2ced692194b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "622842bc-27ed-41d8-9700-7e6c7b40eeca",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df35c966-2cf3-4059-9979-08251abb5d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b806ef52-7b79-475d-9fd2-9dff7a67f1e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb177c8-d5ad-4cf0-adc1-ecc91ab1b2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc49b987-cd51-48de-85cf-da5ed353a9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26853caf-0fb3-4288-a8f2-58800bfeb0c2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc523cf-b5ea-454d-bba7-f4a6c24d93aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ff6b29-ffba-4c7a-a2d9-10a0f713adde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349c0eef-595d-4f6c-bd29-9d226005e9c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90a1b9b7-c104-49c1-9ab1-a162a097c8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8451f9b0-054c-4b4b-99cb-93a2c72d3be0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "035838e0-e888-43de-a080-69f87c7a76be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf9658b1-3cdc-4356-a7e4-8e724d854795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce2c22ea-8603-40bc-95d1-d673c8f3a6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bfe1805-7194-4ae8-8ea6-132863a7764e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3b9372-97fd-4822-be88-ec62bc89b2e9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6c3f03-0385-4f63-aa08-facb1ea46cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8b2c8da-2779-4859-9e6c-fa9532649ebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb201eb-3b9d-4ad4-abe2-6d8f9a9814b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "465ece45-073f-4c2b-bbe7-439e3be9deae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb33023-6c05-4b6c-8ae2-d438480b9e85",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4819f47c-ed11-4c25-8746-f9bd08129ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed5638c-bde1-46f8-9c60-aade99a78dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4da19ee-6b00-4c85-b5b2-08890ba755f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e71574f-64c9-4c8d-82b0-5cab48fcdcd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e553d3-1c01-4eef-a39c-11f05e3ec08c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38fcfdf-b283-46b3-9225-863080ec999a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "133fd8ca-9600-45e8-b64e-cc83e1f71d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eec5b27-d3d0-4bf6-9a7b-ef99b94f8979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "36b7e9dd-1c32-4408-838a-2f9bdd4fea69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f104908-315a-481e-b9ed-c820e447670b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2018e6e4-0f62-44ce-9696-419d4e934d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acc6b802-e0ce-4101-9477-86eac20aa75f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007eb0f4-f792-4878-8e7e-1cb618dcd133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5df00c21-aa33-419d-8b48-2b10e66bea23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ba9a64-e624-4613-89d2-63ac61312015",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c09a9d9-0101-4407-9638-935178d8bef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a322a14-c932-4bf5-84be-8a88f8d0a9b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e098bb7c-ab9c-45e1-b6e6-6ebf50ece7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f8e5ce-05d5-4694-a71d-e35f8fdfc198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6b7828-dd21-4a7f-a245-a5ac59fb79ba",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0f61da-c803-4c81-8b1a-f32eb782fe28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f1854c5-5db7-4964-a3e8-09af03a53d66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c09056-4430-4f45-8690-c4db965a4584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15486971-e971-41fe-97f6-21463b2cec00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d81ebe32-6c51-455b-9a58-8b3f6ac38bc1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "922b5ba1-f5df-462f-802e-9fec7e5f70bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db20cea4-ad5a-4b3d-9816-8182b23751c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9452ef-b4f9-4c6e-8676-db4a2693f74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c276aea-dcf0-46ac-8410-9800f4a4081f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444f9680-8c7c-4bba-afb4-645fd78de314",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bd6820-c7da-49d4-a199-664fd10dc2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a19f919-70cf-4faa-8983-a6d7182a9016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d5dc9a8-e49d-4384-b887-a29f15869fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5de48e2c-3350-4c7c-9f92-770c82fb8693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3ebea2-00c0-49f2-957f-015b6f043c81",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d7e7e5-a5ce-442b-803f-fb4f253452e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10cba080-a080-4f68-8992-6040ed100ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348f67ec-44f4-4bc9-af61-5089dd90f5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffabd1a7-fc6f-48bd-8a30-ee4bc6fe4520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5c599b-fe10-4e05-bb9c-8452758953c8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2d80d3-57e7-4d15-b9e9-1d30bca10916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cfd8e0f-5830-4471-8f96-45061c0b0f84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44baee02-090d-4f12-8a19-f9a90c20c6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eec4567b-0c68-401b-8bc3-a9676b6b6052"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "08659c7e-43a8-40e0-8897-e6dd14f825d5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "06945f82-e6e0-4ed0-ac86-380d697375e0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0ecac9-8a4e-41c8-8343-b65009ec1fe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "401b93e4-1d78-4bfa-8a8b-7af442d04bb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f73dac5-1a0e-4713-8571-4febd0f025e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce091f3a-61a1-4ac0-a816-c460af91dc4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0318b92-cf90-4375-a45d-e978903d0741",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4381d53c-0569-466a-b4b9-24ab40e33e7c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "09487c2d-5373-40d6-8000-b296d9bcfb61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30aa6ec7-7794-44d5-a67d-adf27941554b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6ac485e-4c2d-4629-8c1e-26d4ca257ee4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f325f808-2ad9-46c6-8f51-e2dcc9a597cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6869ccde-65ae-4d19-b526-84dee5b969cd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5964cf68-a6c6-496c-b12c-cc3fd5dceba0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d429348b-ef56-4f5c-9bd8-f64c4d7eaa41"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a722d3a1-e0a1-490c-b0fe-cf0221ccdf6a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "44682037-a30b-42ff-9a55-ea5049a2839a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f469c9ec-5a20-4d5c-853e-cec2ed1ea3ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "294682a1-d88b-4778-b063-e189bd147e61"
            }
          }
        ]
      },
      {
        "id": "b64db163-69c9-43fe-ac74-a7f31d784fdf",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3ea07902-89de-4c93-afc0-5ace0c12eaba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "50d5c365-1c6f-4387-921a-23bed26a4b11",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bd4a6a62-498e-4cf5-a8e0-fd386bbf75b2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22305aee-956c-4a96-bd2f-fa1accb1ece3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f74b2e7-557d-461e-8041-20984af4a3c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48145c35-00d2-4d3c-a75f-45dffa5081da",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a8b2e7-18df-4e75-8b61-6b02085e9209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fabb3c6-f5df-43cc-8b22-e787c1b8a11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9b0333-6da7-4a12-a414-82bedca392e3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b41b89-ec53-472f-ad1d-23baeddee805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64f0886a-c8af-4a82-9ee3-cbc0683f725d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6950583f-80de-4797-b426-295e853a53cb",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6d2695-393c-479e-887d-7996f07ec73f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2820e094-7ee4-4e7e-a9fa-50995db40608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb58ea2f-07d4-43fb-8109-b6fdf0165acf",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e5d398-d604-4100-8f18-907548afc694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe642b0d-0804-45f0-b8a6-fa70f3673c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d057f150-ff87-498d-b0b1-8d982b1e62a2",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c512fe5f-fb21-433a-ad34-f17e5e3215b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197a5f63-15d6-4fd9-849e-1aae397a7b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a951dc-45be-41b6-aee5-b77469f0f90a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429aada9-17a5-42e2-991b-0a3f856a6557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "664f3a53-0dae-4fe5-8bce-9fd2abf724ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd1286c-fe87-455e-9e80-2a0b7d7db273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29365cf0-7085-4ac3-bd54-1e137c329b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "209f8e2c-cafe-4c8c-91ba-26e64ef78921",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47867824-7959-4363-8e56-5399af311526",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4ee7ad3-3741-4a5d-b1af-f6e3efba259d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4392d37a-3c05-4552-a648-845e527d6fb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc2117a-7339-42d9-9b79-6e0bf13ec3f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d5ea8f-cfe7-4808-90aa-1c79f8c494f7",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fee188a-26dc-4048-85df-41fd869a55a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4fec6b3-4e05-457c-a6ae-09fb161f287a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59714e6a-ce1d-48cc-aae0-987563619596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d82156d0-bb64-4249-b461-66df364dba89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a60d5f4-5f8d-428c-87b8-aa158044336f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5c09c8-b5c7-4725-a605-99972725c396",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18766c9c-c117-4cc6-9ef4-2f453902dd67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11415ef7-6ab7-40cf-b5fb-0b203609fd9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04f1d882-555f-4eb7-8bff-06ced14c79e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f779ce09-9ab4-4063-bccc-be19c34aa1a2",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af92323-d75c-4b52-97d3-bf3add8a611e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c740fd0d-b526-4495-a93c-4f4364110edc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1d8807-b952-49cb-af65-25041f1aa6ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6c86caa-71b8-4863-af50-e5f6f24fb5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b24285-13d9-44aa-9b05-382c8cda1eac",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d8636b-a70c-4d9b-9841-5778ceef064e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fcfbfab-791b-4c31-9833-4aa4e03a661d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "617bafe5-ca72-4ded-85ee-f9052dde8a1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5efcdd77-db37-40f3-8dee-81194b7729b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75029c78-88b8-47ab-9456-81772aced915",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aae17b2-480b-4f44-bd3a-bafd12b05c84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbc1f2ec-3a2c-49b9-a3ba-158a8f80ecb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8aba99d-4445-43fc-96c0-d210fb304f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "076f1a73-a8e9-4580-8cfd-656e29e1ac97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8c8df1-0a6b-4d21-bcb7-419644b5fba5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bcffa4c-7336-4d0a-b368-165a5805e40e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "385f24ae-2340-4c00-b83a-b790b1312e6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e66175-efc4-4e3e-8c6e-b6ae400e48e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d534fb-38f3-4b4d-8f0d-6d66e90b7b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5cd9373-246f-420e-83aa-8614ecd932d3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec4885e-4175-482f-bf34-60feeaed413e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "432ead7f-e00a-4d02-b444-ed9db46145fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff470052-353c-45f9-b91d-d60592643e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85a4b320-191b-4275-bbe3-8e8db628abe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55fc135-f785-4561-841f-a86a6fa2eea6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f77554-3f1f-4aea-a303-74a78512a020",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acc04d5f-3819-4144-abb2-047bc8a1160f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d5d1ed-acd5-4df0-bc64-d3888d403c7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d12262d-0f80-41cc-ba1f-5ed2a5bc164c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a5456c-1c47-4723-a34e-91d1fbe002f5",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b4d6246-7f93-48ce-91dc-4b97da14e2c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab754f7-9609-471a-a2bf-a971919055ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1649e765-1c62-4cee-ad26-1c052c247921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "948c1a29-de3e-4d5d-b7d4-c4e2acb7fb5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6908eb56-b65e-47a7-bcb2-9b885dce5c3e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4196ae0b-ac38-428b-8256-cf580eb33c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f63ae7d-7ef5-4e84-83fb-7adb750b2952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25969869-487d-46b2-86a0-baccba7fe94f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e1dc00-0d81-441d-9873-0843daec9937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b380b56c-96ef-42d1-9150-f658abff083e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe1b363-95de-4ba2-bcf4-1744c2d7feb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "546d2f64-330d-43aa-a326-842770f062bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "699b525b-314c-4e88-b78a-6b0eda1ed3b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde55e8c-6b98-4add-ba21-0d918db7931e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e26f5ac-205c-445c-9d48-f1276d5dc298",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631b33c2-381b-49a3-804d-a01e7527a941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4147553a-b24f-4035-945e-316a73a34e0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46987bda-4e0a-4dfd-8b8c-c24d7b44d3bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4fab1e5-983d-4ea1-a0eb-b57b53ab6aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80dd9662-1c15-450f-9ff8-33e8043bb4f5",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8abd8b-546f-4e13-92ca-62f0897b868e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d5108b2-4ce3-45c2-87ff-d67254ea81fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2aab0c-2417-4737-8e96-4abd50ecd348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c67f2547-d7c8-48c7-bb3d-6a5f77c1b168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24810241-0eda-4549-9c01-486170ba4785",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf12612-287b-41bc-acb9-8b59405bbb6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ee9bacc-5d4f-4474-aa91-90c810e27d68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cae69b9-2565-4e67-9f65-a7677c11a942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d452d562-649f-4808-8da2-f3f1e26978c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f684a6bb-b887-4a63-945c-c2bb8ffca7e8",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99503bdb-78f5-46eb-b721-790b35c1a659",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d17b1d3-d708-49f2-9f09-8aea03eb4b50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b141149-d55f-49b6-8c78-dc36835927fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2dd87ae-dbe8-4478-a88d-56804eaf4850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2594d4ff-98ca-466c-bc82-86f4db618c17",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8868fa60-36f5-49c2-9d55-3207647582d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "468d1c90-a125-44ae-8903-a66fdace3dea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "066ec438-4ca2-478c-9976-e0fc87bd9dd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "946754ec-7ba4-43e2-9f24-8b0162f638fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463d2de3-a22a-45a2-a151-dd382df1e470",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711d626a-0b79-4c18-b15e-24f8c4ce027d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f67aa096-363b-4b3c-8012-24dfcc0ff0f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f33b47d-c564-438e-8294-6bc63a72f2aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50295bb4-855a-484f-883d-419225db532e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ea157fa-072b-4bd1-9099-48193c1b6760",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9867d343-9b99-4385-80b8-22fe531df89b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6bfb87e-4848-4481-a17d-d15aabe92b44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69d48cb-0c7a-4170-b74b-e604388bb9d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b95ec33-b116-419a-8651-734e564fab69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce2527ab-0068-492c-b21a-20593007e645",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13dcc8ab-3caa-43a9-ad7d-bbf61765b686",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec9ee2f0-12fc-4f6f-8eda-2aeda5f8d324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0d1bff-1769-4214-b2fa-bfc17c2d97f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa6a3fac-0afe-4973-9423-56f9ac4a55cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5289f10-591f-4898-8b81-10b92d54b9ee",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e949be8-bbb1-4451-8d91-3f912ec502c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "449ef673-f0f5-4833-8dc4-229c8219a840"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1388e9ac-6929-4bb0-862b-81fa50f63cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21fe2e28-896b-499d-9a36-0daa75faabaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4814daa8-bf5a-4554-865b-c7797a12a74c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2c97bb-9544-480f-a9e5-ada8a47faa39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f5ed632-fd86-4590-8953-cda56b48ae07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef464087-4355-4d39-ab28-6f7dc6b49888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d49272c-ffc6-433a-9e43-42992b7fb7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ecac4bb-1647-46f4-8aca-b96b7c674775",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21cce1fa-b22e-4c5e-8bb4-c3f8609feb14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1644b87a-6d18-4c2e-813f-66b5c7d51709"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcfd0849-1f24-4916-bfce-1e20132a29c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a694a06f-1c8e-4163-bfa9-4315a300ac72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e48469-b072-47a4-9ff7-c7c481456e79",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31741953-c6b6-4904-9dec-b83f75f02506",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14859bc4-9cf5-4511-9085-cd094e1e9248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e395e310-e5b1-428c-b094-957294cac76b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e772461e-402f-4a25-8de6-812a09a09d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfe0933-c7b4-4475-b9ba-14901d114673",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb178df-2375-44f1-a33f-0af5e96a53b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06d753a5-e2d3-4bd3-97a6-6a87fa9a96ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a456d31f-32f4-4bdf-822b-ce181e944480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14097bcd-44d4-48d5-b22f-e82ee877ba46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92fe5dd2-c54f-403e-aa22-90469b0e6e03",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7109af8e-4eec-4ab0-ae65-6eafbdd47aa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dce31c95-b794-4120-9126-3915c5821c8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f06cbfc-6e85-44a8-a7b7-b2094f63cbca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baaa7659-0a9e-4bc3-a901-44f4cc974f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b86acd0-9e51-40cd-b684-40c73851d706",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9db44b-85c6-4b8b-82c8-1f469832b211",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15f049df-c8e4-4890-88b3-1c6984c198d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e091929-4087-45ab-a564-01b2e548232f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc1260bb-a591-4852-8489-eed964bbdc4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5568533-a772-4ebf-8368-fbc597c43cd6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c469bac-790f-4ca1-946d-335d15abd0e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0062b84-8c9f-4ba4-821f-b3efae2c7608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df53c1f1-bea7-4861-8579-6fc3777e01c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b07387b-1eb5-48af-beaf-72cf5206d453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0647f26-dbe6-44e7-b337-7a5ca5050a59",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed5cfc5-fd7a-4ac6-8858-1ef828c52b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f4ea46e-d373-4550-86bf-2f65e77f0708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17168adb-12dc-47ce-841e-7e04057e4e34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92026dcb-1fd1-4a41-b6a5-c84be4178837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2992a2b0-0756-445c-86d4-1b6206ddf763",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f8a3da-6c71-4ef1-94d3-f7ee99d1153b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52a2f03b-59e4-4ea4-841b-1e60a71497f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6b4bdf-cc9c-4e03-9857-f9c98bf37676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98fd19e-16f2-4d74-9feb-a8667193fe86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2807e646-9f73-4795-b1c8-c39c110fdf9a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1347247-aa57-4d31-9364-84c9029eda44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a07950aa-0136-4bac-b3e8-dd39cef31b45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "affbef9f-91b5-4680-b9f8-41e49b24ab62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "242fcc79-7364-4f6a-b687-076215482925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc97fae-76fb-4c85-ad47-e9d1ab73cedc",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9040f2d-18e5-457c-bda9-ca91132be9a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb0a484f-02f5-4aa2-8c40-3ae1663f198e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0828a610-ca5a-4faa-b8c0-243138d920c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18625d48-2513-4050-98da-bf8dbb19f09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f252f0c-838b-4020-9381-f0f88393574b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c278a65-1aab-4516-bf76-6bb7222a35ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e28ec9c3-1d22-4e11-8be9-ecd67b159df4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87bf5e4b-aa63-4e1b-aefe-5a4d2ab7a48e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ddd82fb-2857-4e97-9244-3b4ec954d7a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf5394e3-3426-4444-897d-98e6b698aabb",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c002b1-3e4e-4b6a-8515-0830e3c9f965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54375401-74e1-486b-8f29-9ffaa0ee665b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdeb9ef1-2990-4634-b256-a03b085e71ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d5b803f-5532-495c-aa25-6c0bbf87a0e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a849ec0-3294-426c-ade2-ffb30f0890a2",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce98566-386f-43a3-8d92-f1b752483fee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7dcade1-88dc-44b7-8fab-079e9b35b65c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a09919-bac5-4647-83f0-d31a547bd70e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acd96e96-40e0-4714-bec4-08f88597569c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4656dc-6657-484c-b798-fb85a23846db",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fde751d5-d6e3-4086-881c-998b73bf402f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69692be1-b297-498f-a19a-bf9e8d464ef9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49ce6d2-2a17-4717-ae31-481e4e63eb60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10fd0a7-330e-44ab-85ae-7a452c138211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8df4291-2a29-4e8c-aaa5-ffd88e20a2e3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc32948-5334-4dce-9c43-d7b4b0877821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cd55a52-89aa-4c19-b23e-035b56b11015"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba64fa8c-9f9a-413c-a112-0053bdad654a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e9f4c6c-fbe2-4a34-9c90-41ba133b106e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef85afe1-2512-4bea-8e24-8b5b3362f757",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db30d8ba-7f09-4e06-884e-cb261d57359b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f733953-33d9-4827-b46f-89b2b7ef0893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df608c95-ac29-4d36-8bd1-5c77b352c2aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84ea156f-5f30-4688-82b9-5c9da36c8973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d3432c-db0f-4973-9540-8e7da2615a30",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d0fed1-7053-41f7-a89c-2d193cfeca8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e327cb76-0582-49b2-98ae-c3c87cd3d3e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74978deb-db84-49fb-ba66-88b72ef34081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef18f006-d359-4d6f-a481-aa30a6f93bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6368355a-834f-40d8-a8f3-740d6f16b176",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f27a840-2ad3-409a-8ae3-af146ba02117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3eb757d-c0a6-420d-ae95-08de356b738c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe32815-f783-432c-bb96-0a0c08f368ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "761329b6-f0c2-40a7-a13e-114a13e3adf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c1429e-8d3b-4525-9419-2be50ebdc872",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf8d585-c0fa-43f0-b0d3-ebc9585f1844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83693141-4d69-4017-be0f-cdc1da1a2347"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0e3b53-bdff-49ba-a5dc-75f9a232564d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dedb178-ef4d-4fb8-a6dd-c03876625074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d009c4-59af-4fce-8c80-ad1b909ac91e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aaab281-e83b-4afe-b3c4-1d74ed9fc4dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9f038d-9208-4cd8-b049-f33823e40a37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "461b6335-ccc5-4620-8dac-ad1c9f86b910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "919dc199-4c20-4c99-bd4c-92cc0f59e862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427f8540-325f-4f1d-a158-066e4ef4f1a8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "318b7fb2-917a-4244-8c0a-1eed243d6664",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40efc269-388c-43b3-b6d1-8161cca814f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1725cfc-1652-4046-b413-583c9f5efc24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7426d9a-b70f-45be-b7d7-601b4dc38cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3686c0-00cb-4e45-a6b8-b111d29420ec",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415a3596-a961-44f8-8ed9-fa7c19230ca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34471d37-d246-4555-b1d3-47d40e1cae90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d486680-0341-4bc3-8b0a-61ab8c29083a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aad326c-d779-45f6-958a-a893452ca0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac77208a-add6-4c2f-8d5c-a7c4485993a9",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f283c35e-5c4e-4738-b731-1cf5aafc9509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "842f08c3-2b26-4f67-936c-c5ec686ee8df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "683426e9-892c-4a48-b43f-b60459169b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf7b852d-51ce-41ba-b3fa-98e68cc0a520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987a5b3a-30c1-4224-959a-21fde6068bbc",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56387d31-2962-4e3c-83c4-509373ed6637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "847de7aa-a62c-441b-932c-9ffca5d77fdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87fbd065-8261-4d00-b19f-f8c714632121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9838bdc8-ab98-41fb-bb4c-6f7327618262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1947863b-0b7a-4c4f-91b2-75d704350949",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04bf8dbb-59e7-474d-a0c9-fb78f6797b6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "049560d1-afb7-4a62-b240-3eb5bb48bebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee14521-49b8-4b1e-b997-96ef61bea31b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1add50eb-e9fa-4ee3-b6fc-a7083331d5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27b6af5-cd3b-4607-a5bd-febfb3189d66",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108568ec-c1ed-47f4-9abb-56f07c3a7e56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7c7605f-a27b-4bc7-9378-edcae356709f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5c844a-4c94-4b34-b254-f53c847f1561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d0172c-85cc-43ea-9734-7ff0500af163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee1ca7a-6769-41fb-b053-7a09d9f51e20",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb886a5-65e0-4577-9855-9fe27624c437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd689d9-c1f9-4044-ad51-1f1de7187f91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d072cfd-84e7-44bc-802d-7a04632869c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a9ff52d-89a5-415a-b51b-0b4dd456944e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83caa123-6591-4735-9806-766ca38327cf",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9ae008-67c2-45fd-b098-079567b26e9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5b50217-23d6-47f4-8880-2183b3341b2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5195db37-60a4-473e-b200-1c875da4f835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cde91381-8f72-418d-b8b6-25947306f3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28971334-2021-4e0d-be0c-a2a189fb1a27",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f04b188-6175-4b32-b722-b0f20b0e6738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a80f40f4-93bd-42b3-bd44-3a3b06e48c34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "529613d5-3dc2-4f4e-9993-ce4ae371ddf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a8a6e9-43c0-4f1c-9287-5cfcd0beb69e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8182c6d9-7c86-4030-82ab-e412705de214",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29feb07-e6d1-4b2f-ba4e-4fed2ba7d471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e376ea2a-5d2d-4508-b81f-ce77fd515209"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0df9fd-c371-4a0a-bb8b-84f72e9d0859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d5b68d-f268-4267-b004-311e3bf3e955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f8583d4-4980-4fae-bb5c-65403dc22262",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3d3b85-459a-448d-9f89-c71828518f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b82bc6eb-2da1-40f4-8250-b729cff2213b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a445df4d-4fc3-456e-b0fe-358e71bfba06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65444c15-bc0a-4727-8fd4-dcc262c79b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68bb2d56-cd27-4752-8ace-8e6309af1521",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97639ce1-c58c-4892-a02a-5772bd5bd8ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82a513b2-8305-48a8-8430-79c7967f6c2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de705e7-b32f-4b3b-85d4-8bafef15bb2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bc492f0-0f56-4862-b438-8c8237e45d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82a439c-3c5e-4097-afbe-910148d424da",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8caa44e2-588b-476d-ae32-b95fc2a61b69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "043c91bf-040f-4dcd-95c3-64e75be7dfbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51cc1534-0971-4cec-8d24-3dff22f38d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeb4d453-c670-4a16-bc66-c6b739846c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75cd703-d97b-4b02-9a77-5b135be76f9d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee3201c-1685-45d1-b13c-3a9b2dd5575f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08797d2-9816-4dcf-a859-aae0b57497ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ad8fb2-1f89-4d76-926c-b6ac8eee3a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eaf62a7-3cd3-45fa-87a5-703b6c8cb55d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7a0f0a-f4aa-4561-bd33-6c08af2e5ad2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebde19e3-b2b5-48d7-84df-5c9179fb5cad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0ea5f43-e36b-4fcf-aa38-c98241be16d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "207ed1c3-8866-4f1b-a199-5a5192b11285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa976038-6720-4f88-acc8-1e21165e96b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9cecf4-4096-4b3b-b04b-cfda6f54794c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4245c0a2-b1fa-4775-acae-7ffeebd0a91d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5f05382-6278-4f74-bcfc-491322303d3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa10c42-106f-4a4b-969c-5ebda915c381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d40e534-e43d-4f53-a4a6-44d4014722f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22bb2e3-ddca-417f-a09c-254b0c101321",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a90d16-4b0e-4a23-a2b2-0f9f7980847e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "768fff4c-d409-413a-984e-24e9ac3f7b82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b9a7368-3d8e-4f37-9a61-2f4d20362009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bcf5bdf-b7df-4a85-9079-28f9b46a3ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351be06f-5b48-4a8b-a332-f268b0a7171a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524dea71-39e6-422b-b209-27f9558e7096",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7582d199-954d-44e7-9261-75d20a16d8dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3dffe1e-59d3-408b-85fe-01bd94feec95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d673ea9-2757-4eb4-b2a0-4baef13a972b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c67add6-f250-485a-aa9a-80d254ed8481",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8434ab89-3d6b-4d54-b527-9f9ae5e54d87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "357fa338-c55c-493f-9e29-57f7492a4c10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ece24b7-aef2-49e9-bd20-3765b25a1795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43dba36d-fcf1-4d9d-bae0-e2f2834bbe2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435c592a-defb-4a9c-a065-cffaf0032862",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de483057-c57f-446a-a111-9a5b17934bf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b259052-eb0c-482f-a0f3-408a2aa8c06a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81589325-f68e-4cdb-8f1d-44270a5529b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d08a7a1a-3bfb-4ab9-afef-0efa268ad64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5960ac-40bf-4f00-bc62-9e89dbea5594",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d36070-977a-4dff-854b-ba50a182877b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54f287b8-8e40-4e7a-8f92-b9b1d991bfb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e2efc6-fcad-4bd2-aa27-0559ae38f2e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c2cf2e7-9c13-46bb-b27d-3031371e3232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1cdc00-4936-42a9-906d-cddc9435183e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ff7eeb-b348-42c4-b5b9-811c222cd95d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08786f6f-de93-43d1-a2ba-05e99bde5040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36560385-2f58-483b-bade-00adab46e1ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1027836-878d-40b7-90eb-070ba4aff3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7bcf340-b80a-4d36-8ad0-0056e3266037",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6273227b-3019-493b-aead-5ea51eef6c6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2531328c-5574-472e-ba1a-716e38debb4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "430ebea4-1c7d-4062-844a-7c037b8e1488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e120740-1e47-45f7-ac85-eaec4dd84158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2fd10c-2529-454d-b702-a2fd5a9f5217",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1419a3c5-8d4f-4258-9fd6-e1c9bd9da853",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f58b7f4-f914-4dcc-8ce2-8faf909796c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8c9ceb-1362-4de5-92c7-fc3189e5e723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8ca0eb-d376-4bcd-8817-8ede5ebb11f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df79116c-30dc-4e43-9fe1-50b88e1de332",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf5f68d-5c4a-401a-af5b-0a843716d991",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0f5f4da-ea86-4790-a15c-263865ce91d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d5cc37-4315-4516-b76c-38f98d2384a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f58867e1-a963-4f83-9b5f-a74ff0dda5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87976677-48b5-4ea3-9719-2c3cac185cb6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6dfb4ea-bfa8-4c25-96cb-b500dc6cac50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3604e33-a3dc-4be7-805c-ddf600d0e36c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1983d3b-440b-4591-bd40-919095525af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c1c617e-e630-4385-8013-99ab45959f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602e6766-160a-4766-92d5-cff4b4c6671f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60414028-1db6-4495-8ce3-5d5a1cfa428c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c955bac0-6475-4fd3-a404-68d4ec028df7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b936ca4-dd33-416a-8574-79f770eb83df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0d12e2f-3740-4172-a034-537b598d16df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98542e8-40c0-4533-af9f-045182c9b190",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b0796a-5147-4655-b765-0b692e1e5f8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99bd820f-314e-4d30-af2b-e52b97e2e21f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "175bdf48-c5ee-4aa7-9cdc-f036d48a3033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e21b63-700e-425b-9c22-c274ae74e83c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6bdd82a-d636-46d0-9003-32e5d9f8d5fd",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9cca8e-3a55-45b4-9abf-574806ffb0a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c90dfef4-be31-4665-ace1-1a16abb0284f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b771b6e3-8b04-4602-876a-b40e37e19d07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a7aaf6d-3005-40b4-a6f1-2d96ab495032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd8bcf4-7816-4e62-9e13-95ac0ce5f111",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a085a73f-2601-4c04-8ebf-e62021e91c7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b229729-5e73-41f3-9a44-24dff07322fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d4fc28-707a-4096-9419-ce137f547274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ec7c1e-0452-4bd6-82e2-dd8107fe3e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12113a3-ba5e-4aed-bf8c-e29d69d84cd6",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24ffd9c-f0bd-4330-878d-64bdf6813c86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2ac092a-b1b3-425f-b094-22a6d3b1e436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18221cbc-7ae2-43b4-9e31-4c813ff524ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2961f26c-5da7-435c-86ea-6b1ebe88f20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01df0e94-0749-4a2f-a916-562ee7c09d39",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d05e38-381d-42a8-ad21-7615cb9414a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5673af23-615c-4804-87bc-10180c2c7797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc86670-8969-472c-b0aa-fc7204da1b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9c533ca-595f-46cf-a483-06bc1ad944fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a6a9df-acf2-4130-84c7-13fef72c5c99",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644d14e9-d207-499d-9c02-4d5bd5096998",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62107201-6ffc-459f-98ee-86d7cc0e6ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd62ba7-7cb7-4c08-951a-4457b3a5016a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c20edf-5335-4f87-914c-bec78e34bbaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f35c9c0-1d4d-4e3a-8ac1-43aa750555de",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e119ba-68f7-4c5f-9c72-1eb677654910",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14d73849-b637-4c89-809a-e57d53fc21e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9dafc72-a571-44ec-bd86-c1b57f9e8008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59cb6e5e-b64c-487d-9f82-61abdef43b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c48871-33c7-4a99-b62f-d52e7b9976f1",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d5948b-1ddd-4b21-9b4e-43da1203d9d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c1d87ae-0768-48ed-aee5-42ff293d1170"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf681ea-35c9-425e-b4e3-ce4a635ffc9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce7a256-3fde-4114-996c-f7de3667163d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc20c229-50bf-4306-a7b7-fab6af5fccc8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412302b6-88ae-41ed-8bcd-cb78315bae35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4186b4c-e4bc-436a-aead-26bbc914f001"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "277164b1-7ba1-4dac-a7f8-7ad0a0a3451b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "356cbdba-901f-417a-9620-a6bebfbee1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a2731e-3760-4c68-b974-7844ff718cb9",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3a4592-3197-47cc-9a59-6caafd3bcea8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cb92031-078f-473f-b7c1-76ce7c16bff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fef2781-0a6c-413d-a3ca-78a0e0323948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e8d20a-d689-4ce5-abdc-d0a6b5aefcc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270c53d8-e820-4f0c-b0e2-d45d0cce789c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6dca22-9839-44fd-be74-06dc0842fac2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0ce29f4-6673-482a-bc37-46e80953fddb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "341734e7-dc9a-4c28-a0ac-374045556306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6a55110-5507-4606-ada6-0b06618c8167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914864e3-85bd-4b3b-a6ab-15928cfc3fc1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "debc8ee4-c5f2-4131-b24f-b781bb5f0b77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e01aa947-5d54-401c-bd1c-c82702e57daa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b4abd4-ea79-4fb7-bf47-06f00737f701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b24cc1-cbae-436d-bfd4-5d7f53279203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9456105-6a50-4baf-8634-0a54c1ab20d6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca814352-a6e8-4865-8963-6d18ac80d376",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5893c5cc-8a88-44a1-bf8c-cbc41feb8c25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0632c62d-7154-47fc-9f2e-8fc97006a0c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e97d7f78-86b1-42a2-8421-c764ab0a5e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e04af1-815a-4047-9ffa-2a3ad29dd115",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de86e9f-2cd4-45d2-8a20-87ceaacaefcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d9e9ecf-21f0-4e2e-8a60-70fed2c5b071"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a46ef3-d2e0-49f1-9ca8-8689a2342791",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e499ed79-3213-41a9-a008-a39930357d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5103e6a-f01c-4c9c-b252-f2ce0d488419",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b9509f-6e2a-442a-8085-68bc2db84de7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e5d1886-3079-47b3-a570-f4406746dc81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da75753-af85-416c-8cdc-18f9885d970b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ebfe43b-fef8-444c-bbf1-62eace09e4ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd6f138-296d-4a8b-86ca-8b04da4cf7b5",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b18289-1fa4-487b-b44c-f998411a8d63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "824c5227-aa0f-4862-a7f1-276c193acb7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf34199-fc37-4361-b14e-f053369e4650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5bab1e-751e-44f3-b1d5-db5f0755a6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba9c3ff-3c4a-4eff-95e6-99ad54e005cc",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047afa53-da41-4fb7-af97-691a2f3d385f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e734cf9-a715-4de0-82f0-ce3a33626a59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c342912-aac4-41fc-ba45-5cfd213d4c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fa53eb3-b021-43f6-a275-e38d66e52ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ea7dc5-d8fb-421f-9529-faaf96b00bde",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e92ce87-cc3f-4627-85aa-292e96cb9971",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a3ef354-b882-439c-933f-fa862c72592a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fab73d0-9eb8-4d21-bee8-a0fe9298192c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "697ab90c-cf51-46e7-9f47-f4c318066401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f9b350-8ec9-49c1-848f-30d8ab3bffb1",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84cebf89-6482-4848-9dff-fe7434077629",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb2b941-99f9-4b25-b58f-ab29e677dce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea4fa18-4843-4ae1-95fd-c6903cc1cf36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad7dcff-3a60-4a4d-8cd9-ee5950c686a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b02cfaa-0574-4d50-b519-2de26c41ed86",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d4c3e8-36a8-4214-8fc4-c217a454c1df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02eb968b-4a6b-4ad4-9e11-0b5f96ec48bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "709f5813-bec6-42ca-a8f4-6a093bc35a79",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5053d7-5843-44a3-a000-56a03ea25415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab61ce0-c2f2-4217-a118-49289d85dc63",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4267c678-21f7-46dd-b2a6-612d2b6d2841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba76e997-d2b5-4f88-86a7-50ce3c30a058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90b63a3-0a8c-442f-8496-51052658d617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "715432b7-3363-4528-8a4f-9d673d2ad6c0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8850de70-115b-46da-a3cc-313fc165cdd1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e487f2d-ef0c-491d-814f-a91c195f816f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "261eabc3-61c1-43ad-9385-4754712e3271",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d8959669-d6ad-4634-af86-0f57ca8e0b95"
                    }
                  }
                ]
              },
              {
                "id": "da4a75ee-cfa5-4845-a161-11d4f6546d60",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b7d02b34-50cd-4197-a6d9-d4d735c1d44f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1f53ff-51b5-42a1-9e02-792d53745cf7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ec09c580-3d41-456e-9989-62ebd4a383d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1414cf26-8e74-4f6a-8203-db4aeca2291d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8cf0f40b-fbf5-41dd-a6d8-4222cdf2d8b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3affbe2-dba6-4189-9c9a-118168abe44d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9025cc-99f7-4700-8786-c74f9fb65547",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b458686b-93cf-4341-a19d-86a8e756c3f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c096eb-8555-47c5-a91a-8bbf2a48828d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19ade22c-31a9-425d-bacb-b69b169b3ab6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfbe34e1-00c3-413e-8d6a-07b8b4d4a98b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ad97354-f357-4a65-af3e-ff1ce42f042b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "60c3d35e-bb49-4d78-8a56-e72f3019b124",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "235cb442-1346-4fd7-b96e-00044bbdede9"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "cb0bff1b-a8b4-4e79-9ff1-4db5a8dbc1bc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "211ef7de-9446-4ac7-a3ac-085c99f82903",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0664998-07ef-41e6-a9e2-5e51b8597054",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f6ce703-db9a-4088-841f-42a7d30c9043"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e9bd159-2def-405b-80bb-5f5ffb02a928",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf667fee-4df4-4033-b776-cfccc27d510d"
                    }
                  }
                ]
              },
              {
                "id": "61adccdf-145e-41d6-887e-b43708009f92",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16800094-100a-4197-88b7-6cf91ddd4d1c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3afe6963-edca-46a9-a95b-0748d0c300c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "625889e7-899a-4541-bd52-fd23d02abadd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c42ec19-aa71-4f8b-bc5e-e7f54918db77"
                    }
                  }
                ]
              },
              {
                "id": "d8593d91-8563-4301-9b8e-8a029aa08a07",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f74adbd-b36e-4f41-8e7e-075bb8c9c6a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a06a072-25f2-4f67-a95a-258705da7f0d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cb27a8b-80b9-4aae-a025-a660e9a7e146",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d48d195-5223-4f58-9ebe-74a2eba343f6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fc5228a8-76a0-435a-b42f-7233c6b7df24",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "df0b94e8-da52-4886-81c9-3e5353cd42f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aeba5580-0eb0-4fd9-9856-b572c9c09a34",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "12959b77-78b5-426a-b320-3fef9809b6c5"
            }
          }
        ]
      },
      {
        "id": "fbada2de-dcfd-401b-84ae-6881c6d4c584",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2387b1bf-20da-4191-8fdb-ec68e5f4ffe8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4bb11cc8-6d40-430f-8734-728b05ca8778",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f77a0f19-8673-4520-af8a-d69ef2493149",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4587db-fd35-4c98-be6f-e32106bbf6f5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d2d44d0a-fa46-4134-8ba9-4df71e7c8650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05aab406-489e-4e14-84aa-fddc15d126b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aed6505a-2f9c-4635-8c23-a1523cf0a945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665b31d2-66ea-4e01-8e8c-a2fccc93d8ec",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc564a7-8cc8-4a1b-ab7a-2873a4de4e41",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7f86f5ab-3a3b-4c4d-8de4-1d621bc102e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65cf06eb-8a85-4b7e-8210-675ecdaa213a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b3e0f50-b160-4d6b-882d-667aa43c1290"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4119621-c3f8-4a3a-b403-903061dfb8ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bce1b00b-60ad-4f13-8338-c84db78b8910"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6310809-c8d7-463f-a629-e3df92073dbe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bcb612b0-0989-4d04-94b0-0eacd48d1462"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b939808-625f-474a-a2b1-72afb77ae414",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dc22ed52-a617-4c12-8d67-94ba49b5d640"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95e4b29d-9a14-4cc4-9315-f670a66e7457",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "69c4d485-67e9-4d01-84e0-8888e1ec0951"
            }
          }
        ]
      },
      {
        "id": "46b2a4f4-6d1e-4897-a9a7-e247dd842de8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1a672907-4ca8-4046-bf6c-e49c4ce255ee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "00b1397f-d4c3-452f-9847-7751c07a06a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11e0652e-6365-46a3-9835-ade945c263d3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdb28f1-54d4-4aae-baca-3d7c33b4445e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9f3cd0ad-36f8-4ddf-8680-5b8606f10a01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58e8baa-742f-4a75-b49c-3bf987d6d279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86862ae7-61e8-46d5-ac55-90815440f353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda5378b-e99b-424b-a849-7759cacac33c",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b684d3-8e34-40f4-8744-fd5ada82464a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cb67356f-02a0-4ff8-aaa5-f6ad791cfba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "495b9020-763e-48e9-9a28-4b9241e84ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "492c2690-61e1-49ba-9e57-007ddb77ad74"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "205301e4-7c2e-42c5-ab58-998e6a2a4ac6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36695a33-9e82-4a42-a7d1-6ec69c3a0b6a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b11e1b5e-71d2-4bd1-bbed-445958eb2d55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e122ee73-63e6-42a9-9b95-f91814f5b774"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "56684e6d-b231-4264-99f3-9fa2bc721fc4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "817544e5-c25e-47db-856f-5c9ea0d349eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d29e208c-decd-4d89-a019-cfeb3a16669f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7081f388-08f2-4514-bc3f-82cd16e74384"
            }
          }
        ]
      },
      {
        "id": "6fbb7212-f27b-4dc6-99dd-52ee78e5f57b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3486cde5-cd9a-449e-9f70-c1b527897f15",
            "name": "Negative Testing",
            "item": [
              {
                "id": "300eb85f-d058-4c86-a94d-c6e6e97c1952",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d006e5ee-4ff1-4ea6-83e4-ef3cec991dd1",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ff7340-1517-4dee-91ae-02d5b0cdcce8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a609b9d7-fc8c-4c16-8c5b-6c0d96a0ce7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e25b7f6-5f5e-4641-91f6-454f23c1031d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7cfd50c0-017d-4b5b-8519-24675dfe7505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad6b06b-f56e-45f5-8cb0-c2d87cb2c83a",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbfc790a-f331-4c0c-b276-942eb98e023f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "30b50f73-e17c-4a0e-bab1-01786d0db5fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddff84dc-8bd4-4c7f-a3c0-8fca91ef2d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19970f84-d3d1-4a1e-b4dd-ee7aeba0eae7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4512e869-9ee1-4ecc-a78e-b3da6759a119",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8585ea11-9e71-4b6d-aa03-abe85b3304c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1dd04e32-edca-447c-8713-a5b5353d04bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18dd5963-2d27-44b1-a5eb-c95dcfe9bb49"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8dc6bc4-40f2-4e7b-bc55-787464cfe0df",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c25b05a5-75a6-4238-9ab2-64529141b95b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a71afc31-4d7a-42f3-9ec0-48b3203b058e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "537f3f6c-5041-43b0-ba1a-417152656c0c"
            }
          }
        ]
      },
      {
        "id": "7b998af4-3bf0-4b16-a3ab-656faf86f498",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13d96143-0d0c-4ec6-b8b2-bd3e260979de",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed12ccf4-3a47-498b-877c-c9330400f73e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d1de7b02-cfd8-4424-8887-3fe5b5822c4d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81c73394-9de4-484b-b5f7-a7bcf55f7572",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "82068070-ed4b-4597-8736-feeacc13ed75",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 86
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 262.4307692307692,
      "responseMin": 16,
      "responseMax": 3379,
      "responseSd": 472.6978615183526,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1666141280862,
      "completed": 1666141363567
    },
    "executions": [
      {
        "id": "48cf71a5-fe6e-418e-b338-2429f171b39f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "930e2072-8e6c-4758-9ddc-7a5edf404973",
          "httpRequestId": "9d991865-9983-4ac6-8918-0563e4da0c35"
        },
        "item": {
          "id": "48cf71a5-fe6e-418e-b338-2429f171b39f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "748f182a-375f-42b3-b26e-d70408a79797",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 0
        }
      },
      {
        "id": "e1c857d7-0ff3-4b97-aa0c-bfb5de563bce",
        "cursor": {
          "ref": "40d2bd87-61a2-4ace-80b0-574c252033ca",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a054a6be-d9fe-4079-8850-249076f2b237"
        },
        "item": {
          "id": "e1c857d7-0ff3-4b97-aa0c-bfb5de563bce",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "dcc3d174-83d0-4624-8318-b683748d4152",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 0
        }
      },
      {
        "id": "1674e823-1124-4a87-a56b-82453abcca19",
        "cursor": {
          "ref": "8ec338f3-63c4-4296-8a46-de49c326bbf5",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "64c46335-a1b3-4900-95c2-835bc47d48d9"
        },
        "item": {
          "id": "1674e823-1124-4a87-a56b-82453abcca19",
          "name": "did_json"
        },
        "response": {
          "id": "a25b5706-4341-4ba2-8bd8-2798bacc611a",
          "status": "OK",
          "code": 200,
          "responseTime": 3379,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29fd9bff-5eda-434c-80b0-730c348f012d",
        "cursor": {
          "ref": "75508a33-f715-4a53-b471-fd8d4f81cf93",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d0d69458-7678-4cda-b206-3472b66d816b"
        },
        "item": {
          "id": "29fd9bff-5eda-434c-80b0-730c348f012d",
          "name": "did:invalid"
        },
        "response": {
          "id": "487d20b7-7dc8-4c92-be9d-2990db528675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29fd9bff-5eda-434c-80b0-730c348f012d",
        "cursor": {
          "ref": "75508a33-f715-4a53-b471-fd8d4f81cf93",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d0d69458-7678-4cda-b206-3472b66d816b"
        },
        "item": {
          "id": "29fd9bff-5eda-434c-80b0-730c348f012d",
          "name": "did:invalid"
        },
        "response": {
          "id": "487d20b7-7dc8-4c92-be9d-2990db528675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30d91a5-ee22-4681-b89b-6ee0a0903742",
        "cursor": {
          "ref": "6677a0a6-d962-40d0-b80d-37f8051c1a68",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "df27f638-40b3-4e54-95ef-43402b2faa7f"
        },
        "item": {
          "id": "d30d91a5-ee22-4681-b89b-6ee0a0903742",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "473c8fb5-d498-4c03-bf83-58dbb0800969",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1421,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a54e595-c384-4fd4-b4d6-c070c9422bb6",
        "cursor": {
          "ref": "ece74c76-f8b3-446e-b321-db1dbc1f9693",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8acb4338-033d-48e1-8ed4-9c69c2a1b0f1"
        },
        "item": {
          "id": "9a54e595-c384-4fd4-b4d6-c070c9422bb6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "90447e06-38eb-4902-b2d4-e5c18d2a0039",
          "status": "Not Found",
          "code": 404,
          "responseTime": 84,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7e8713-35d4-4e99-88f8-33f5ddbfc6d9",
        "cursor": {
          "ref": "2a06d544-b5af-4d81-bbbb-f7ad11d83141",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "37db1dcb-7165-49b2-b594-d77ddd38192c"
        },
        "item": {
          "id": "bc7e8713-35d4-4e99-88f8-33f5ddbfc6d9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d7da71e8-feb7-47ea-ba34-226b35f40067",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 101,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba6b625-6309-4cbf-912d-3aa3b6be230d",
        "cursor": {
          "ref": "03cdbd97-8ec0-4928-93e3-7194b7f370d5",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c6a3dbaa-70f1-4b1a-8916-f1480805b43c"
        },
        "item": {
          "id": "1ba6b625-6309-4cbf-912d-3aa3b6be230d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b960359a-d9de-4d7b-a282-4624d3089e66",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 176,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba6b625-6309-4cbf-912d-3aa3b6be230d",
        "cursor": {
          "ref": "03cdbd97-8ec0-4928-93e3-7194b7f370d5",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c6a3dbaa-70f1-4b1a-8916-f1480805b43c"
        },
        "item": {
          "id": "1ba6b625-6309-4cbf-912d-3aa3b6be230d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b960359a-d9de-4d7b-a282-4624d3089e66",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 176,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d656843-b0c8-4e5e-8d84-f91b3f99863f",
        "cursor": {
          "ref": "b9bb0a07-43db-465d-907c-7a3afdbd257d",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5cfc0e7a-8527-4b12-86b7-fee0aaf18f1b"
        },
        "item": {
          "id": "1d656843-b0c8-4e5e-8d84-f91b3f99863f",
          "name": "identifiers"
        },
        "response": {
          "id": "8ab78896-c0c9-465c-b641-18dd4bb04755",
          "status": "OK",
          "code": 200,
          "responseTime": 400,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd17139a-3844-468d-8e00-af069106c267",
        "cursor": {
          "ref": "ca5016a5-3dee-4dd2-a5fc-f56eb84f4630",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f048aaa0-9921-477f-8fe4-a0ccf1b9dbc3"
        },
        "item": {
          "id": "cd17139a-3844-468d-8e00-af069106c267",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "35debb01-d16b-4ccb-a50f-3d8009fe571d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd17139a-3844-468d-8e00-af069106c267",
        "cursor": {
          "ref": "ca5016a5-3dee-4dd2-a5fc-f56eb84f4630",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f048aaa0-9921-477f-8fe4-a0ccf1b9dbc3"
        },
        "item": {
          "id": "cd17139a-3844-468d-8e00-af069106c267",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "35debb01-d16b-4ccb-a50f-3d8009fe571d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40519895-a613-4a1c-a8b0-c63bd5add6ad",
        "cursor": {
          "ref": "a8cee1cb-2e5f-4457-ba90-eb11e726fee6",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1b3aea62-8ec7-42f5-a0c4-b4b731cbde64"
        },
        "item": {
          "id": "40519895-a613-4a1c-a8b0-c63bd5add6ad",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bbbf5f6e-c907-4aea-97d9-3f394076ae82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 227,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b5bdc6-2ee9-42e7-b74c-4097e05d5887",
        "cursor": {
          "ref": "d8325eb9-8fc9-4762-8376-5e6fb6e915b3",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f32cabd1-30b5-440a-8c24-5ff8736db05b"
        },
        "item": {
          "id": "a3b5bdc6-2ee9-42e7-b74c-4097e05d5887",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "db82efca-63b3-4438-9fbc-7a516bb61301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec33f36f-8745-43a6-a1e7-7cf94350fbb7",
        "cursor": {
          "ref": "fb75fa7d-cb44-4e72-bc7e-52f3985c5816",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b8b9f48b-d52c-401d-ac48-f92b8288d4ad"
        },
        "item": {
          "id": "ec33f36f-8745-43a6-a1e7-7cf94350fbb7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4aaad9a3-9bdb-448d-923f-027425a72f2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df94f58-0e2a-4d0e-92b4-f280cbeacc25",
        "cursor": {
          "ref": "5ebaa9c3-a8f7-49f0-9679-a364b12fead3",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b89d18c5-b408-49b4-ba49-f4bea354c1aa"
        },
        "item": {
          "id": "6df94f58-0e2a-4d0e-92b4-f280cbeacc25",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "265538da-bc05-4500-b443-30cd121a7611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2140515-0f8a-49fe-9b28-0e104593408b",
        "cursor": {
          "ref": "660e450b-eb5f-4ed5-9ccb-dea9740bd3d7",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "60a806c5-08fc-4532-9812-2b2a7e815317"
        },
        "item": {
          "id": "a2140515-0f8a-49fe-9b28-0e104593408b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f0303250-56fa-4250-8211-e90026108c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db92ecec-1077-4e1d-bf94-fa50f985eff5",
        "cursor": {
          "ref": "ac21470e-612b-409a-8028-3b98e074b08b",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "013a0228-5384-4652-b6fc-16f644ec118b"
        },
        "item": {
          "id": "db92ecec-1077-4e1d-bf94-fa50f985eff5",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ee544415-f146-42b0-955b-7574896b83bc",
          "status": "Created",
          "code": 201,
          "responseTime": 956,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "01700317-24c8-4bc9-b458-f042bbb80922",
        "cursor": {
          "ref": "f3aa3d20-4899-457f-96f7-02821c379508",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c8f4f41f-bd32-40b3-9b84-4c787a51f86a"
        },
        "item": {
          "id": "01700317-24c8-4bc9-b458-f042bbb80922",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "3d115794-ec2e-43cb-8479-c7058b2dec38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d28e1a01-6d49-4156-acbc-64ad9dcf009a",
        "cursor": {
          "ref": "60537db3-2f7a-4e56-9831-48d527bf0fca",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b3c5e03e-e53f-4f24-91ac-8f6426c68e2d"
        },
        "item": {
          "id": "d28e1a01-6d49-4156-acbc-64ad9dcf009a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7f2440aa-a920-4721-b4f4-ad196ffebb3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10bcaaf6-a426-426b-b032-8e22705e2fde",
        "cursor": {
          "ref": "50c0be2e-7f6c-408f-9dba-ef4f04b98cfd",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "bc8edfde-0dd8-4682-b08a-339b43401475"
        },
        "item": {
          "id": "10bcaaf6-a426-426b-b032-8e22705e2fde",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "50908394-12a6-44bb-acee-53e558a0863a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd311a7-a5c0-4d0b-8f68-fdaed45eb912",
        "cursor": {
          "ref": "844adea0-17cd-42be-9dc7-6fb155ba2bd8",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0b1dfa4d-2692-4d85-bfac-8c2d2e52705a"
        },
        "item": {
          "id": "fbd311a7-a5c0-4d0b-8f68-fdaed45eb912",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0f6452d7-05ef-4f50-a94c-69ef0b3befab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61df3676-cae8-45a5-aebf-dc86d353e8e9",
        "cursor": {
          "ref": "6c2bab6b-dadd-431f-a78d-a27e8ee027cd",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "23f4ada6-e123-42b1-9f2b-910317d8d12c"
        },
        "item": {
          "id": "61df3676-cae8-45a5-aebf-dc86d353e8e9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6c2c614a-8b02-40ac-b6e7-8bb6fac3ec78",
          "status": "Created",
          "code": 201,
          "responseTime": 782,
          "responseSize": 584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "8a9ab24d-eaee-4e6a-a972-b9e7c1c60736",
        "cursor": {
          "ref": "b0bde9fb-4fc8-42f0-b02f-0319018f1425",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "592fdc0e-e811-4796-96a4-7ecdd4313224"
        },
        "item": {
          "id": "8a9ab24d-eaee-4e6a-a972-b9e7c1c60736",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d129b7ae-214e-4956-85b4-7d98091cedf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0919919-1b38-45eb-a25e-6136364659fa",
        "cursor": {
          "ref": "7dd49703-bcc8-4344-abfe-b02311baa9ae",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "99552da6-b84b-4eb2-ad0a-01f2389f0f71"
        },
        "item": {
          "id": "c0919919-1b38-45eb-a25e-6136364659fa",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "281db341-0ca9-4250-891a-087e9537014d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39019637-56dc-4119-896d-2c81543ddf93",
        "cursor": {
          "ref": "b9d64408-d797-4865-bb84-e3f1419c5784",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "35dec34d-04c1-4303-9ee8-e9cfea9c6668"
        },
        "item": {
          "id": "39019637-56dc-4119-896d-2c81543ddf93",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "471c1260-01bd-402b-b28c-4f987777bf80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb7aac7-7e75-4dcc-afe8-7bb0853ea739",
        "cursor": {
          "ref": "a3b7cd80-6e2a-45f4-a22f-0e03964589b6",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "df3f9b1a-631a-46cf-9abb-d674afdaec1f"
        },
        "item": {
          "id": "9eb7aac7-7e75-4dcc-afe8-7bb0853ea739",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "1cb1c6fe-83ed-4ee5-a46e-2923b9372623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54679fd5-d7b5-457c-b4a7-c8587b051e27",
        "cursor": {
          "ref": "74529cd4-2e54-41e0-89f2-b5e07e5bdfe6",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b2c8eb3e-acf2-4793-a504-ba7f9098eebb"
        },
        "item": {
          "id": "54679fd5-d7b5-457c-b4a7-c8587b051e27",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2dfb1a64-c30e-476c-9ded-37933a729a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304262f4-5d9c-4fe9-aed6-b0b0289fbb56",
        "cursor": {
          "ref": "6bb12256-2c8f-4608-85e3-eb841c200cb0",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a50c30da-66c3-4293-8e10-5b3d2b19166e"
        },
        "item": {
          "id": "304262f4-5d9c-4fe9-aed6-b0b0289fbb56",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "d8d6ca49-8d60-4a4f-af22-f6bf711547e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0030150a-aed7-43f1-ae7b-b8b2dbb4894e",
        "cursor": {
          "ref": "5e65228a-5211-48b7-90aa-7b2c21c6d57f",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4d675d43-ef4a-4a4e-a7a5-d102e49b11d2"
        },
        "item": {
          "id": "0030150a-aed7-43f1-ae7b-b8b2dbb4894e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "7e241781-b9e5-466d-b5bf-a9bb1318617d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c9df665-79ed-4d46-84c6-40dcc56336a5",
        "cursor": {
          "ref": "0e50adcf-1212-4af4-9bcb-e015e541c340",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f3c5fdbb-fd4f-4d38-92c4-03b848e54edb"
        },
        "item": {
          "id": "7c9df665-79ed-4d46-84c6-40dcc56336a5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "24d3f056-2ec6-45f3-b4db-15f14330e06b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9cbf754-234f-4633-9b97-36889ffd3e59",
        "cursor": {
          "ref": "0952a177-8eda-4ad9-868f-87e1d7d05ddd",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7d1710b2-9b69-4873-b1dd-b063b5dd84bf"
        },
        "item": {
          "id": "a9cbf754-234f-4633-9b97-36889ffd3e59",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d915222e-8007-4060-a9dc-e30768d8d938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc5835e-92ba-41da-8937-8e8f4426dc69",
        "cursor": {
          "ref": "10162404-245c-46c1-9682-7ed0fd492538",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f157f52a-5160-4116-9586-2a9d62d92bd0"
        },
        "item": {
          "id": "cdc5835e-92ba-41da-8937-8e8f4426dc69",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a59a45ef-73f0-44f1-a9be-ed6d88dd63d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cbc002d-46c8-468e-a6d1-eb160477b2b5",
        "cursor": {
          "ref": "cad4250b-11ce-48bd-b42a-aca5304864d2",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4297d322-395b-4279-8107-0daa4690802a"
        },
        "item": {
          "id": "3cbc002d-46c8-468e-a6d1-eb160477b2b5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "bdbb7c0a-3020-42a6-8d1b-408f7977b904",
          "status": "Created",
          "code": 201,
          "responseTime": 1070,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "2dac3ffe-3fb9-478c-9d5e-27b836c867d0",
        "cursor": {
          "ref": "ef716164-1587-4921-8a24-bd0e3514ab65",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "23ab502e-6ebe-44b2-9aec-1b9d00745e4a"
        },
        "item": {
          "id": "2dac3ffe-3fb9-478c-9d5e-27b836c867d0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8ed67a10-48a4-4768-93c6-f85c006c298d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 212,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d0d103-3fdb-4d5d-bba9-fb73db55f209",
        "cursor": {
          "ref": "636a1c5f-01b8-4957-bea9-0610bc8c2580",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fec065c3-4f4c-439d-88b6-a1a76faab2ab"
        },
        "item": {
          "id": "f7d0d103-3fdb-4d5d-bba9-fb73db55f209",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "eeb9790c-2b2f-47bf-84ca-bf33e2ee67f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbf8b9b3-8c81-4eae-a956-9e99c9bf33c8",
        "cursor": {
          "ref": "ff4ba949-7863-4c38-b6f5-ae0d65c72722",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "03bd2614-618f-42d0-a743-385f338a009a"
        },
        "item": {
          "id": "fbf8b9b3-8c81-4eae-a956-9e99c9bf33c8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "fe24cceb-1c37-49f4-881c-02c84b9b79d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9745e8dd-7522-460e-9249-bb14aaa0e19c",
        "cursor": {
          "ref": "5db73ea8-09fd-42a2-b87d-8a8f301d7b28",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ce44d523-3d47-428e-9fba-c11ab86ec3de"
        },
        "item": {
          "id": "9745e8dd-7522-460e-9249-bb14aaa0e19c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4079e107-0df8-4f80-8e1b-35187fa6b8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e793253f-0f2a-44cf-b9a4-8a94a0d306d0",
        "cursor": {
          "ref": "a4edce6f-aa0a-42a8-8954-5dd0508a2ec9",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6ceae889-7c8c-470b-875b-9c95e9bff61e"
        },
        "item": {
          "id": "e793253f-0f2a-44cf-b9a4-8a94a0d306d0",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fb716faa-2720-46a3-80ae-fbcae4885013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06c0d25-18dd-47fa-88e5-e09b0c9eb1c5",
        "cursor": {
          "ref": "57d3baf7-a359-42b5-9c49-bd61acb8100c",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "31edf6fb-71a3-425b-a467-46612c7d7d33"
        },
        "item": {
          "id": "a06c0d25-18dd-47fa-88e5-e09b0c9eb1c5",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "121670b8-2b5c-4631-9d56-5b051cf274a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf2a0f7-b38c-4a74-b43f-5e989efa2f3a",
        "cursor": {
          "ref": "55ea5aec-326e-4ebd-b2ba-1286a849e0b3",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3d3ba8bb-22a1-4efb-9458-1c2046d7f52e"
        },
        "item": {
          "id": "acf2a0f7-b38c-4a74-b43f-5e989efa2f3a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "2edcb0cf-bbe9-44b9-a5e6-c2e92a1998a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59ae176-9ea3-4c1f-92f5-a286345872cf",
        "cursor": {
          "ref": "bbcb7a6c-355b-4041-82b0-f06d1b0fb0bc",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "254a7422-b8f2-4af6-8ccc-70fe452e46c3"
        },
        "item": {
          "id": "a59ae176-9ea3-4c1f-92f5-a286345872cf",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a2162645-859d-4323-bda6-1104086224c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "399f2990-ebf0-4a6a-b35e-74562e754929",
        "cursor": {
          "ref": "52324001-37e7-43df-b922-0ccd07429711",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f6b0efa2-aa0d-4601-94ae-276d4079320d"
        },
        "item": {
          "id": "399f2990-ebf0-4a6a-b35e-74562e754929",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "1740e047-0740-4ee2-a585-03ab03bec8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c0dbb7-eda1-4151-852d-530178061e4f",
        "cursor": {
          "ref": "84b40329-2340-4fe7-8347-99776f55e600",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cea1ba1b-b236-43dc-923c-86d434107d6e"
        },
        "item": {
          "id": "a4c0dbb7-eda1-4151-852d-530178061e4f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "19cc42dd-7c4e-4754-8c55-cd534373d421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5567818a-3e86-4383-953f-b494bb801e02",
        "cursor": {
          "ref": "a7a71773-d0ab-45b9-ba83-063d3e022a83",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "fd5e598b-eb00-4afc-8d40-c061dd5d114e"
        },
        "item": {
          "id": "5567818a-3e86-4383-953f-b494bb801e02",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a701201f-0b37-4503-a95a-9357cb1e2d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b59e3bd2-9514-4834-8bd4-37f9d5e620d5",
        "cursor": {
          "ref": "b623c1a8-4bac-47ed-a700-6575e322eccb",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "604ae376-c53e-492f-8787-55721729eda4"
        },
        "item": {
          "id": "b59e3bd2-9514-4834-8bd4-37f9d5e620d5",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8d3ffa50-f927-44e6-8047-52e52878288a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 239,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "901ddffc-9ec2-460f-9d80-0895a4bc53b4",
        "cursor": {
          "ref": "10b92df5-32e8-4bee-8a00-7be1e39cc10b",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7b355b1b-5685-4867-ae75-2ae9d975fdcc"
        },
        "item": {
          "id": "901ddffc-9ec2-460f-9d80-0895a4bc53b4",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d195e703-8c26-414e-89cf-cda798bcb354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 489,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "7ded918b-5a6b-414b-8164-f2266583960e",
        "cursor": {
          "ref": "fa469032-533b-4e82-bdfb-7d5f7dd840f2",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "be603f58-9525-49c9-b6db-b2ed18b4bf55"
        },
        "item": {
          "id": "7ded918b-5a6b-414b-8164-f2266583960e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "689175f3-9516-4e1d-a031-470b20b617b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b39d5cac-9798-4300-8fc6-efff16f8bf3f",
        "cursor": {
          "ref": "2cbe8fdf-a275-4017-89a3-bc4b79b179e0",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f5cc7947-9150-432c-9d1e-033c962b4883"
        },
        "item": {
          "id": "b39d5cac-9798-4300-8fc6-efff16f8bf3f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "94087889-50a3-4e01-a4cf-85138ece9ba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 173,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c390cf-a471-4398-a0a9-f95600767df1",
        "cursor": {
          "ref": "37db496d-af11-49c6-8c55-2405cb0155fc",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2930c63f-5717-409d-a173-82a5813d89ac"
        },
        "item": {
          "id": "d6c390cf-a471-4398-a0a9-f95600767df1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b65aa3b1-e430-4bfe-8adc-dc49bbe7db56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da0dcf6-b3b5-49cf-bcd8-0b63e7b45054",
        "cursor": {
          "ref": "143f50a5-4914-4a6f-82f5-9bcb68236704",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "923f0882-4e4c-41da-97d2-9fc78a1d1857"
        },
        "item": {
          "id": "9da0dcf6-b3b5-49cf-bcd8-0b63e7b45054",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "cb4da0e6-9a27-47de-8074-785017c4bf01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d969e5f0-ea2f-4613-8846-5ae507e9a24d",
        "cursor": {
          "ref": "f825f7d4-ac87-45ac-9bf1-edf66a4d036f",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9670045c-c4dc-43e8-9770-9d73c7b25b5a"
        },
        "item": {
          "id": "d969e5f0-ea2f-4613-8846-5ae507e9a24d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "73b7d356-b5ee-4525-a0e1-aa818b0bf612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c929a84d-efce-4edb-877c-0407c09c5790",
        "cursor": {
          "ref": "61cbaa7d-4f9f-44ed-b2f1-642b535f694c",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f63caeaf-f0dd-4f38-876f-c1ef55683b91"
        },
        "item": {
          "id": "c929a84d-efce-4edb-877c-0407c09c5790",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a939f7aa-b12f-4d26-8d9d-5132a4c82506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6519a805-e8a7-4a13-9b2e-954f5e29822a",
        "cursor": {
          "ref": "740adbd7-c9bc-4e57-bd29-216ef150a490",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "02f0e073-f123-4345-b144-dc2e3438d066"
        },
        "item": {
          "id": "6519a805-e8a7-4a13-9b2e-954f5e29822a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ec9cc9ee-52d6-4443-b5ab-85cb98101e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2383,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "64386a54-c068-4fb1-ac83-154b8669d350",
        "cursor": {
          "ref": "d7236471-dc7a-44c0-a8e6-5fa84f96d9a0",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3c0e9ce8-1f74-4b15-9961-e03e377b5c53"
        },
        "item": {
          "id": "64386a54-c068-4fb1-ac83-154b8669d350",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2a1148aa-945c-4fcc-a702-632afb5e59f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86cd6d16-5ed4-4609-8fb2-afb27b9fc70b",
        "cursor": {
          "ref": "d1aef400-5e44-4fcb-8399-c68067575d22",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "cc1cc5d3-7ba3-40c4-ad52-e16bc3b064ff"
        },
        "item": {
          "id": "86cd6d16-5ed4-4609-8fb2-afb27b9fc70b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "32d3bb2e-2d66-4549-938a-39cdf2ccfc0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 238,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12bc558e-3449-492d-973b-abb4ad2455bb",
        "cursor": {
          "ref": "f045e877-afe6-4b7b-aae3-356b3a9d8994",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "716b2002-7ae0-4a9c-8f20-32ab99412b37"
        },
        "item": {
          "id": "12bc558e-3449-492d-973b-abb4ad2455bb",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0c4f4ed5-dcfa-44a5-9fc2-b3a25c75ceb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "003a4238-75e1-49a6-85e3-8be4877db957",
        "cursor": {
          "ref": "91fa8ff2-f6a1-4a90-9c3c-26cfd83f0bcd",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f3152067-8d07-47f9-b88f-f85056111dc1"
        },
        "item": {
          "id": "003a4238-75e1-49a6-85e3-8be4877db957",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bcce5bd3-76a5-4c88-941c-f352b05074cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429a99e8-4759-4c7d-b270-df6f651ae336",
        "cursor": {
          "ref": "f61d0cdc-902f-4cf1-a71d-a60fcca76e87",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "87cebd31-e6c5-4f32-ad02-55ca12232497"
        },
        "item": {
          "id": "429a99e8-4759-4c7d-b270-df6f651ae336",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c0bf7beb-cb6f-41c8-ab24-c1c2e9d59c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f191c5-474e-418e-86d0-fc907a7165d4",
        "cursor": {
          "ref": "6b2c4d03-9f3b-4a1b-912c-a7e8f073263e",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "29b0b74a-2396-4788-9ee8-5e704bfd934d"
        },
        "item": {
          "id": "74f191c5-474e-418e-86d0-fc907a7165d4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "88e74414-19e8-4ec3-81c8-c94218d98ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78f6b3d-c182-4ab7-b8cf-66448dcfe621",
        "cursor": {
          "ref": "74620cc4-12ac-4fd2-9041-21eee83bf1d0",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4cb17084-432c-4592-acd7-d3e3ce5dcd2d"
        },
        "item": {
          "id": "b78f6b3d-c182-4ab7-b8cf-66448dcfe621",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d418078d-d7ef-470e-8ffe-8b45d01ee516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a78ea77-aece-45ba-a71f-d4f0dad54dfb",
        "cursor": {
          "ref": "775d6e2a-fec1-4ef1-9bea-2f3a0d1e2ea7",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a37be215-0550-4388-a623-92ce4618f94f"
        },
        "item": {
          "id": "2a78ea77-aece-45ba-a71f-d4f0dad54dfb",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "07a71cff-c70a-4c5e-9b1f-d566e86e1ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "116b8bde-4b46-4dba-93cc-fa0458a8b518",
        "cursor": {
          "ref": "df985c4f-2246-4972-b072-9d562f2d9862",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e197f08c-0ae7-42a1-9e29-51eebe4964fb"
        },
        "item": {
          "id": "116b8bde-4b46-4dba-93cc-fa0458a8b518",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "04efdfb2-810a-480c-9463-ba890f154f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c5338b-1521-42c2-8c18-c9897938596c",
        "cursor": {
          "ref": "496255cc-d6ab-4c50-a446-a4218b8c8639",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7b4124c2-7bef-45a5-8f73-57263c501e50"
        },
        "item": {
          "id": "d7c5338b-1521-42c2-8c18-c9897938596c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9cedf8bd-8bb1-4a21-b511-4eee48e47cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ccd6fef-e726-4214-84d2-68f55ad6e8d7",
        "cursor": {
          "ref": "d79328a8-86c0-4c89-9361-b63aee2766f8",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9b9c35f0-1000-454b-8d6d-73c136b11c78"
        },
        "item": {
          "id": "3ccd6fef-e726-4214-84d2-68f55ad6e8d7",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "57f4f999-4840-4693-9804-397e112fb0c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc4f86f-8da2-40d1-a2c9-b18d7bd128af",
        "cursor": {
          "ref": "9c58e6b1-7f1b-4b0d-a9ad-d8d1f632e185",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d4b7e7e6-8c4c-43e2-a796-efa8a19b2225"
        },
        "item": {
          "id": "0bc4f86f-8da2-40d1-a2c9-b18d7bd128af",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1a85edb9-9d16-4489-8582-43e58186b826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4af5d56-aaf5-4ac0-a397-4998e1e5213a",
        "cursor": {
          "ref": "f509638b-d38c-4cab-9baf-3fc3a25a82ea",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "aa767f70-7044-48d7-9ac6-05a007e3dd6e"
        },
        "item": {
          "id": "e4af5d56-aaf5-4ac0-a397-4998e1e5213a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "70cce4a1-d182-496b-9f75-63923b3ad3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f47d6e-7fd8-4984-a913-031ce387da61",
        "cursor": {
          "ref": "24938f33-a521-467e-90a0-e9ce7e111b3a",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "80fea9a4-5feb-4cd6-8667-01f28a0eef12"
        },
        "item": {
          "id": "99f47d6e-7fd8-4984-a913-031ce387da61",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f1a34959-52b8-4909-9e5e-dd6a710133ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97902962-300a-4955-982b-7b53a823e61f",
        "cursor": {
          "ref": "8b73ac64-bb6e-4a14-aa5f-ee967bc12b00",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6da23a00-fb4f-4891-8fc7-67406299a681"
        },
        "item": {
          "id": "97902962-300a-4955-982b-7b53a823e61f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7ef27b7f-cf39-4b6e-b20f-99d58b4b9310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56995b52-21dc-423d-b083-cc30bbdca1b0",
        "cursor": {
          "ref": "17381533-75f8-4918-bb1f-a5198ec9fba9",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2ac732f3-19c1-430e-93e5-66f4573efbe1"
        },
        "item": {
          "id": "56995b52-21dc-423d-b083-cc30bbdca1b0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "93a8562a-0392-4155-af0f-72825c7f9356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa62c3a3-7d2d-4a7d-b8a1-eedd2d46957d",
        "cursor": {
          "ref": "106a5563-6d3c-4b2f-b192-195a9df410ce",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "da869459-cd54-4224-b260-b80ada737173"
        },
        "item": {
          "id": "aa62c3a3-7d2d-4a7d-b8a1-eedd2d46957d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "739f07cb-ee5b-45c3-9c8a-cfef85d768d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 471,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08165db0-c456-4771-9710-ce67154e9183",
        "cursor": {
          "ref": "b9d361be-31b6-4cc1-8e49-8c90fdadd211",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8418bba9-f444-42ab-b6d0-cfe16d8f80eb"
        },
        "item": {
          "id": "08165db0-c456-4771-9710-ce67154e9183",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8cd9e3d3-b609-4a7c-b638-51a213358caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c05a081d-2692-4c35-8eba-f1b1fe0096d6",
        "cursor": {
          "ref": "df003f55-0f7f-4e18-b0a5-aa5c95e86935",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f0b0ba65-0dfa-4ec3-8c82-1577653e17ef"
        },
        "item": {
          "id": "c05a081d-2692-4c35-8eba-f1b1fe0096d6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "da71e314-ca37-4d3e-91f0-997a78c663c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d312da72-f912-412b-826b-cf3f0c1f2c6e",
        "cursor": {
          "ref": "9ede2945-27c2-4a8f-975a-175bae54e31f",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "0fcee6b7-1723-4977-8c11-1e0e375e9a1f"
        },
        "item": {
          "id": "d312da72-f912-412b-826b-cf3f0c1f2c6e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ebad7cae-a2b3-4470-9e1f-ab0f6c412ccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24b284b-ea5b-4d74-95fc-94de834319cf",
        "cursor": {
          "ref": "9380b2af-2af3-41b8-b0f7-e099412c4f19",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "af0fbe75-418d-4753-b2a3-2d6b05183ade"
        },
        "item": {
          "id": "f24b284b-ea5b-4d74-95fc-94de834319cf",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6afda4ee-2a06-43a4-bc04-57ac86086b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc9921a-4c9a-4a10-b1d2-2bed78ed971e",
        "cursor": {
          "ref": "c2165cbd-4289-4639-84f5-530d5b3f4e7d",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "51bfeed7-c23d-43e0-acb6-7b69f2919bd4"
        },
        "item": {
          "id": "bfc9921a-4c9a-4a10-b1d2-2bed78ed971e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "781473ec-9b49-4cf7-b12a-d4f0bf0b8905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2a8fff-262e-4ed8-bce4-03af31abf7e6",
        "cursor": {
          "ref": "76adc0f6-defd-4786-b267-e26957f4fb3a",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e1e760cc-a673-489a-8f6b-cfe215108b04"
        },
        "item": {
          "id": "1d2a8fff-262e-4ed8-bce4-03af31abf7e6",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "34d963b1-e1eb-42b6-af20-c92c774c95f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73bea36-9a34-4e99-8dda-67ec7e08d3e3",
        "cursor": {
          "ref": "3e0473ae-52cc-4c6a-bfe7-9752f6796c59",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "de22801a-908a-4072-8469-67674ed332b6"
        },
        "item": {
          "id": "e73bea36-9a34-4e99-8dda-67ec7e08d3e3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bf613119-27ab-49e0-9c5b-47c334f485b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1569a207-8bca-4b9a-8933-1e4313c2eebf",
        "cursor": {
          "ref": "642a7b7f-f831-4b6c-b8e9-ea239ea896f4",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "91e3e369-db84-4688-8dd4-2dfc746b3f91"
        },
        "item": {
          "id": "1569a207-8bca-4b9a-8933-1e4313c2eebf",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "35dfb6b0-7dca-4848-977d-5e05768d5f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932d8d29-8416-4c5b-82c1-e073cd809bb2",
        "cursor": {
          "ref": "a2ff2741-4321-43a6-9f3f-edca8dcb5db3",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3d0f6d16-e0c0-42e7-a911-af932247abea"
        },
        "item": {
          "id": "932d8d29-8416-4c5b-82c1-e073cd809bb2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3cd16aad-f44e-46ad-a732-2516eb7312a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd3362a5-accb-49f2-a3aa-4022f8cb6162",
        "cursor": {
          "ref": "6acec9b6-5c3f-415c-81c4-7a0cb728f92e",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5507b44d-0b74-4049-a68c-4bb53677d075"
        },
        "item": {
          "id": "bd3362a5-accb-49f2-a3aa-4022f8cb6162",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8f97ba7c-5c19-47d5-9d7d-03788b4abb86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0230f9f2-6373-4bfd-a419-3ed261adaca8",
        "cursor": {
          "ref": "d5572e47-9123-44ce-adad-578a79c3c905",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "115a7990-479a-487f-8546-c23da5e3f2ec"
        },
        "item": {
          "id": "0230f9f2-6373-4bfd-a419-3ed261adaca8",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "15de11e4-2d54-4322-b0dd-c11ed043ba30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d58c80-94d0-44fd-83b6-710a7d6a9683",
        "cursor": {
          "ref": "0720d691-7a19-4531-bc09-f5d104c72a2a",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "07cfabda-f92e-41c1-8e60-4ec9837c1901"
        },
        "item": {
          "id": "75d58c80-94d0-44fd-83b6-710a7d6a9683",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5a5e2ddd-5b4f-4475-b423-ec149a578c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf325f7-8a78-4759-a79f-e6fba0a4d15a",
        "cursor": {
          "ref": "eb7ffa24-a9ab-4e67-b69c-7281ea1d6329",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "16b424a9-0669-4a45-a5e2-99c531dd9472"
        },
        "item": {
          "id": "ebf325f7-8a78-4759-a79f-e6fba0a4d15a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0cd10180-2fbe-448a-878c-b5c08582ab55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184bb996-a3ff-47f3-ba19-c07831daa380",
        "cursor": {
          "ref": "41706f51-08ca-43d4-8be2-782a3dcfe0aa",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c69f2094-a971-4c0f-8cfb-85c5fc4e3152"
        },
        "item": {
          "id": "184bb996-a3ff-47f3-ba19-c07831daa380",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "93938d8a-e9bc-47a1-9703-8350f5ed3526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 557,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a254b6f8-96e0-41b4-8ec5-21ef01d3139d",
        "cursor": {
          "ref": "fd80f753-288e-49fb-80ad-af2acb0f6d20",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "706fa45b-ba64-4d2d-a46c-55addfb66480"
        },
        "item": {
          "id": "a254b6f8-96e0-41b4-8ec5-21ef01d3139d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "cd807569-179a-4237-be98-672d0d729279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514c7805-c012-4f81-ab8b-bacd1d3c9604",
        "cursor": {
          "ref": "da32f012-a8c0-466c-9d33-69cddc56a664",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0b2328bb-b447-4faf-a58b-5bc3513eae34"
        },
        "item": {
          "id": "514c7805-c012-4f81-ab8b-bacd1d3c9604",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "30541449-84e0-45c7-b0e2-d083346c9056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71750ce7-cebc-4287-92c0-9eff585a8686",
        "cursor": {
          "ref": "76e07243-f582-4552-9842-f99ec15e42b5",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "19190a85-54a6-4b3f-a7fb-bff5ff36147b"
        },
        "item": {
          "id": "71750ce7-cebc-4287-92c0-9eff585a8686",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a4396ef4-8404-4ace-b746-29fac246cf09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df9a606-e549-4846-936a-d1c242fbff06",
        "cursor": {
          "ref": "cf1f6180-4bee-49bd-9601-a46d1866cf5f",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3a511c0d-ce09-4e77-8c6d-13bd6b65d1c6"
        },
        "item": {
          "id": "3df9a606-e549-4846-936a-d1c242fbff06",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "31e511c8-6087-4785-8f9c-556a5f65729b",
          "status": "Created",
          "code": 201,
          "responseTime": 530,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "1dafe36f-9c8a-45fa-805e-b3c4eef96b38",
        "cursor": {
          "ref": "6bd3f28b-28b3-4af2-bc74-27a0a8254e84",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c2d4302c-c6f3-41c0-9171-a768e5e93fb9"
        },
        "item": {
          "id": "1dafe36f-9c8a-45fa-805e-b3c4eef96b38",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0580c13b-0823-4b7a-96c3-ffd3cc11d517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef1650d-f353-4bb5-90d0-2245aa0115d3",
        "cursor": {
          "ref": "005a586d-befc-4135-adde-e1a7a3831f86",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "cabb20c1-a4f1-4542-a4af-f5bdf49cfe3b"
        },
        "item": {
          "id": "cef1650d-f353-4bb5-90d0-2245aa0115d3",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9f5c275f-9fa6-4d2e-b4ad-b0ed6b4065e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174b988d-e6ab-47d1-b0e4-4411f0b82bed",
        "cursor": {
          "ref": "c820fc21-3f87-4a76-8531-d25a980234de",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ebff316d-b4af-4ee2-9ca3-fa739ce67c2c"
        },
        "item": {
          "id": "174b988d-e6ab-47d1-b0e4-4411f0b82bed",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "844c43ad-68c3-4418-9548-a5a4278409a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa9ab66-bbd5-4fcb-81a1-98051e678517",
        "cursor": {
          "ref": "6afdf31f-2ba0-4d66-a593-9e5780abb1d8",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f8d99cb5-bb86-4642-90d7-7d162ff0d2e1"
        },
        "item": {
          "id": "3aa9ab66-bbd5-4fcb-81a1-98051e678517",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "49187e81-afac-4bc9-8f07-dbe69e8e6030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9358a625-263c-41db-8db0-718ed2a2eebb",
        "cursor": {
          "ref": "b09f00f1-8e0e-4501-b47d-9d40faa719f6",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "97fd3d14-841a-4555-b715-bfe60b2dc004"
        },
        "item": {
          "id": "9358a625-263c-41db-8db0-718ed2a2eebb",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "1dbb25c0-e564-4e9a-b6aa-038b72d74758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a67d988-4624-449e-8dd1-0f7559198529",
        "cursor": {
          "ref": "74dbb331-d60b-485f-97c3-f129030927a2",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "82566aee-e8c4-4394-990e-0f550d039973"
        },
        "item": {
          "id": "5a67d988-4624-449e-8dd1-0f7559198529",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7e5a7e83-c953-486d-a832-e7f765808f15",
          "status": "Created",
          "code": 201,
          "responseTime": 795,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "17c3d0b6-e22e-4c27-a3e3-e4a204a6bde1",
        "cursor": {
          "ref": "be766cad-813d-4683-a5dc-739cf11a93e2",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "46411bac-69b0-4dec-b039-cad24a950639"
        },
        "item": {
          "id": "17c3d0b6-e22e-4c27-a3e3-e4a204a6bde1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3b366c2a-bdae-4157-a0fc-88bb1ee833a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed1c3199-d2c7-484a-b417-1aa87481427f",
        "cursor": {
          "ref": "4ffe2caf-5734-43b1-9e28-5392bdfc2d9d",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "46aec80b-ab1a-4b54-b18c-2468f77c117a"
        },
        "item": {
          "id": "ed1c3199-d2c7-484a-b417-1aa87481427f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "99d24de3-3172-458a-a411-8ee988c6bbd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5b9b8e-e9f2-4c41-bccb-3345e085e7f1",
        "cursor": {
          "ref": "99f22cd4-7d15-4396-aaaa-44010833a1c7",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "70991e68-09de-4433-a2d0-02fcedf8c17b"
        },
        "item": {
          "id": "af5b9b8e-e9f2-4c41-bccb-3345e085e7f1",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "50425feb-3a98-43c9-80d1-41c1d4e372fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d3c00a-b41e-4577-a625-1ff1ff1f2872",
        "cursor": {
          "ref": "52ddf170-22c8-4f9c-a93a-d4a03eba38f9",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "85cd89ca-18c8-4513-91a8-7bae98b719a3"
        },
        "item": {
          "id": "e4d3c00a-b41e-4577-a625-1ff1ff1f2872",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c2f6b1df-413b-41b7-bff5-f92e41ab17dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 345,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d51c670-2d90-419c-aacd-35bc52587812",
        "cursor": {
          "ref": "67239394-456c-413f-9a5d-97f0eeb0846d",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "11ce2d53-6d5e-4e23-923b-f3aa355211f0"
        },
        "item": {
          "id": "7d51c670-2d90-419c-aacd-35bc52587812",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1f5259b1-6636-4106-8527-e252da3761e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb6c3c3-0d16-4e57-9d42-9d43f210aa4a",
        "cursor": {
          "ref": "6a9ac2cf-d94e-405c-b1bd-1bbcdaaa9159",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a5d84569-60fd-4db7-9c68-5298de8147fc"
        },
        "item": {
          "id": "efb6c3c3-0d16-4e57-9d42-9d43f210aa4a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "00dc33f3-0084-433f-b1c6-2af550f5008c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd349d5e-7437-4ae4-bfd9-7b8dac1352a3",
        "cursor": {
          "ref": "cd6fccd0-a81a-4370-b842-04cdbab2634f",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e5d11912-ed8e-4a3b-a2bb-b653d132a6f4"
        },
        "item": {
          "id": "cd349d5e-7437-4ae4-bfd9-7b8dac1352a3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4dcc52c2-3e32-43eb-a5e7-a6bb7fdc8e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88349a4-904c-4f7d-afef-91c9e0a2e19d",
        "cursor": {
          "ref": "df1d93c0-1fe9-496c-b052-4dc152aba910",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "49c2cac0-b2ac-4f58-a6a2-ac259a79c2bf"
        },
        "item": {
          "id": "a88349a4-904c-4f7d-afef-91c9e0a2e19d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6c824719-d43d-4de3-9a52-d27982a67ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f72af8-1303-4d6f-8cd8-198510d7b49f",
        "cursor": {
          "ref": "e97ee667-6b55-4914-ab17-d51bf97e39d2",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "54b7105e-f5ef-4ae7-9aa1-dcff0667ffc9"
        },
        "item": {
          "id": "28f72af8-1303-4d6f-8cd8-198510d7b49f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "78b3429b-1ee8-4811-9ef7-a37cd6fe66c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "466d97f9-5487-4272-b30f-0b634bf6da45",
        "cursor": {
          "ref": "98cf710f-1f54-4031-a296-3280892ebacd",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a306044b-7d28-4385-92c3-8b43075cc942"
        },
        "item": {
          "id": "466d97f9-5487-4272-b30f-0b634bf6da45",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "00912214-e6fb-499c-8d81-4d83de8217ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 168,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "4217cb4d-0261-416d-bf51-ba5d9e305e60",
        "cursor": {
          "ref": "eae74a93-e168-43d8-8687-e6ba1814351b",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "522eacaf-84a1-4493-aa26-5567272d4af2"
        },
        "item": {
          "id": "4217cb4d-0261-416d-bf51-ba5d9e305e60",
          "name": "credentials_issue"
        },
        "response": {
          "id": "004255b5-9d75-40f5-bede-d5c2bfcb5521",
          "status": "Created",
          "code": 201,
          "responseTime": 1071,
          "responseSize": 537
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d30aaa-ac1d-4740-9cf6-23de0bfed015",
        "cursor": {
          "ref": "0a37819f-6a31-4f2b-b1d0-b01a1c6a08f0",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "cc437f07-e5ba-4c4e-bbd2-328d705800b0"
        },
        "item": {
          "id": "f2d30aaa-ac1d-4740-9cf6-23de0bfed015",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "be90605b-b0bf-405e-b14b-5195faf1b9c0",
          "status": "Created",
          "code": 201,
          "responseTime": 1223,
          "responseSize": 591
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba7f3b1-6e7d-4626-bea5-14bc6e61050f",
        "cursor": {
          "ref": "22123573-5b1c-401d-9dc5-e0377905f152",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b1a5f0ad-3057-45ab-a7de-3c1096342eaf"
        },
        "item": {
          "id": "6ba7f3b1-6e7d-4626-bea5-14bc6e61050f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5cc8f589-ad2c-4d75-b284-9b07d18d8ec0",
          "status": "Created",
          "code": 201,
          "responseTime": 744,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "24060386-366f-4e24-a4e5-8d4ac6c6d438",
        "cursor": {
          "ref": "922324e7-75d9-456a-887d-4ecb126fee75",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d17a92e2-169b-483b-b0c1-9716d4f171be"
        },
        "item": {
          "id": "24060386-366f-4e24-a4e5-8d4ac6c6d438",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "fb7823e0-3ca3-4035-b2e2-33241f88e1d0",
          "status": "Created",
          "code": 201,
          "responseTime": 1332,
          "responseSize": 560
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61edc73-a879-40e4-82d8-a3d9a655859c",
        "cursor": {
          "ref": "0c8953de-0013-4761-a5aa-aed718357e31",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "497dca87-2231-4277-a06b-dc6ed6051b3a"
        },
        "item": {
          "id": "c61edc73-a879-40e4-82d8-a3d9a655859c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c6f70739-adc5-49d3-a91d-50fae12ae555",
          "status": "Created",
          "code": 201,
          "responseTime": 874,
          "responseSize": 528
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb11067f-d7fc-4028-bb0d-51d2313236b0",
        "cursor": {
          "ref": "60a6fc34-3084-4be2-839e-95f889b44e45",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3737bb43-fdb3-49c9-a7ac-351956afa151"
        },
        "item": {
          "id": "bb11067f-d7fc-4028-bb0d-51d2313236b0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e5f818ac-bb71-4c2d-80d6-666ca62d3fce",
          "status": "Created",
          "code": 201,
          "responseTime": 516,
          "responseSize": 535
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184a62a5-4932-4afa-95a5-1a143c7f9a1d",
        "cursor": {
          "ref": "d4e19b1d-e6cc-4014-96d1-3ac6a3d4bf87",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "62500c16-5d5b-48b7-8652-20ceb3640a5b"
        },
        "item": {
          "id": "184a62a5-4932-4afa-95a5-1a143c7f9a1d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e9d4cabe-340e-4f6a-a845-342aad5d1bf9",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "184a62a5-4932-4afa-95a5-1a143c7f9a1d",
        "cursor": {
          "ref": "d4e19b1d-e6cc-4014-96d1-3ac6a3d4bf87",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "62500c16-5d5b-48b7-8652-20ceb3640a5b"
        },
        "item": {
          "id": "184a62a5-4932-4afa-95a5-1a143c7f9a1d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e9d4cabe-340e-4f6a-a845-342aad5d1bf9",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "713b81b8-1c72-49a1-9f49-03bfee653023",
        "cursor": {
          "ref": "97fa0d99-8e5f-4de4-a444-0f92b6530be2",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "55166c20-f8b7-4e90-b258-579d3f9c3ce4"
        },
        "item": {
          "id": "713b81b8-1c72-49a1-9f49-03bfee653023",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "37fa3097-6897-4ad8-a1fc-07a7df36b8f6",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "eb9cb057-3705-428a-a24a-60ef33a2a1ab",
        "cursor": {
          "ref": "ba850d87-04d0-483f-b704-6d6873399f1f",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "350df70e-1fe0-488c-a119-dd88cf0426de"
        },
        "item": {
          "id": "eb9cb057-3705-428a-a24a-60ef33a2a1ab",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "de9d6af2-3084-46c3-8258-8ea0c1d34fe6",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "7ec98552-35e3-4123-b022-4a11c3e66d5a",
        "cursor": {
          "ref": "214f693b-fdaf-4192-8449-c781ce21ddad",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7b00c2f5-8970-4181-b5e5-7e694597c1fe"
        },
        "item": {
          "id": "7ec98552-35e3-4123-b022-4a11c3e66d5a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e932493d-297e-42f1-ad66-3e6d9d2d1071",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "58c0f5c6-7bc4-401d-9e55-437db7190c88",
        "cursor": {
          "ref": "151e01f3-ccbf-417a-8e31-918e3b5717d0",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f8ec4f3d-efd6-483d-8449-17b609b28ebc"
        },
        "item": {
          "id": "58c0f5c6-7bc4-401d-9e55-437db7190c88",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f7021362-c7d0-4866-bfad-c5f3620b7e51",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "b0f5b62d-2fa3-407b-9a5c-551ae79a1e41",
        "cursor": {
          "ref": "1cac16fa-a1b5-4e68-9e0e-29c69af9af7a",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7f2272fc-1792-4342-afc8-76c1fd2d22a9"
        },
        "item": {
          "id": "b0f5b62d-2fa3-407b-9a5c-551ae79a1e41",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "36fa0b55-deef-425e-9938-b7ea7d02a8a1",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "4b4f834a-7629-4b0b-b803-a3db6fa2f43c",
        "cursor": {
          "ref": "d204707d-26cc-4874-b6c3-78421f168b09",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e4ece239-a282-4f12-a0ec-6bd296fc71a5"
        },
        "item": {
          "id": "4b4f834a-7629-4b0b-b803-a3db6fa2f43c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4763c25f-9d3e-4e27-8460-15f4ae9523e4",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "f001fe8b-3bbf-4a07-843d-7841d9686e26",
        "cursor": {
          "ref": "d22d064c-46e1-4c51-a0aa-293628bb0a29",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "90a731c6-2fa3-45f8-b4a8-bb60a104d597"
        },
        "item": {
          "id": "f001fe8b-3bbf-4a07-843d-7841d9686e26",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7c48f26b-9372-4d69-98bf-383538eb6489",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "ffaa8966-a824-41cc-b2e3-d0568d7040f8",
        "cursor": {
          "ref": "55268092-1749-406c-b533-6e0ba12e8928",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9ac95bd6-3221-47ea-8981-d50cd61f9eca"
        },
        "item": {
          "id": "ffaa8966-a824-41cc-b2e3-d0568d7040f8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6c2ae3b6-01fd-4cc2-98a9-489a15fd6c5f",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "de7c780f-5b25-4444-8984-d18c15fabe29",
        "cursor": {
          "ref": "322c3724-8020-4c2c-adf1-8ffdf8f4b8b0",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d3f30194-3937-4ebc-ab9f-92106899e4f4"
        },
        "item": {
          "id": "de7c780f-5b25-4444-8984-d18c15fabe29",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7cdde72a-b488-40a2-a680-d87020817f6d",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "8bdec4c7-7fae-4837-a5e2-0f32be07ab77",
        "cursor": {
          "ref": "908539e6-67fc-4552-82a1-8474c02d3e6f",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0c53f49f-f3e9-49f4-b511-79df8f7a926b"
        },
        "item": {
          "id": "8bdec4c7-7fae-4837-a5e2-0f32be07ab77",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "806cc5c3-c919-4b51-b89a-6042584f4220",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "6f39cb94-e602-4ba8-84f0-913e85d71865",
        "cursor": {
          "ref": "61b2df78-3a3b-4adf-9b4a-50c559e42822",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "bd2179be-d6ac-45d7-b36c-400b472d0d2e"
        },
        "item": {
          "id": "6f39cb94-e602-4ba8-84f0-913e85d71865",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d7639824-faa2-4b5d-9ebb-c50503d314eb",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "9380611f-bc9c-4a55-8170-3be2317ed5ba",
        "cursor": {
          "ref": "da9f6a0f-2475-4ba7-82a6-05d3d7519151",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "63e667d1-7f80-4a6e-b597-2fd605068d4b"
        },
        "item": {
          "id": "9380611f-bc9c-4a55-8170-3be2317ed5ba",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d8549f5e-5b64-4168-8539-d1a59d88bf33",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2107a934-8127-468e-ad19-c29cde8d9b85",
        "cursor": {
          "ref": "6e12e95e-f30c-476f-a2ea-63f3b5aef70b",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f9f03195-df7d-44e2-a0fd-0e8833432b4b"
        },
        "item": {
          "id": "2107a934-8127-468e-ad19-c29cde8d9b85",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a3ff89c5-e6cf-47ac-9c6b-aeb3a80a5463",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "e42ffd7b-20c3-40e8-8470-90eced117e0b",
        "cursor": {
          "ref": "c95737e2-94ad-4365-a87e-798ab4e15e10",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ce5be69b-df13-465e-b6d7-6613c26f707c"
        },
        "item": {
          "id": "e42ffd7b-20c3-40e8-8470-90eced117e0b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7662bcef-8942-4d98-8ce2-4efe21ae139f",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "400c928b-2824-4637-87d5-31936a2a3a98",
        "cursor": {
          "ref": "d7416a67-0875-41d2-80f3-1c6b815d0c52",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "737b892b-3210-484b-a121-81001f5f7961"
        },
        "item": {
          "id": "400c928b-2824-4637-87d5-31936a2a3a98",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "62b35ff4-f90e-40ee-be03-b2a3a08f0d31",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "428ccd3a-0167-4124-af7d-ec5f46e50589",
        "cursor": {
          "ref": "3216a66c-1a66-46b8-a739-7df230156427",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9f6230c0-000a-48ed-9f28-bcb22ea7aa8f"
        },
        "item": {
          "id": "428ccd3a-0167-4124-af7d-ec5f46e50589",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d9cfec4a-619e-466a-b38b-d852b36fe213",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "39b7f188-245c-4303-8aa5-42aef66eaeac",
        "cursor": {
          "ref": "4a151400-111b-4446-82e4-90d64d3ac79f",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "972c7fc9-41ca-447b-83b6-b2005462c9f4"
        },
        "item": {
          "id": "39b7f188-245c-4303-8aa5-42aef66eaeac",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9b2b7609-76bd-45d1-9a5d-82678592dcf9",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "10437abc-2ddb-4088-9a93-17258673051c",
        "cursor": {
          "ref": "7833c8f7-88b6-4b51-a227-df369f91fb77",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b11243e2-7455-440f-8ec6-31c7db1307e5"
        },
        "item": {
          "id": "10437abc-2ddb-4088-9a93-17258673051c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "86c69411-8f1e-4604-8de8-60b17b2882f1",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "622842bc-27ed-41d8-9700-7e6c7b40eeca",
        "cursor": {
          "ref": "0f451ef7-3211-4b47-97a7-8e0bdf89a829",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9146ac9b-b23e-4fd3-8d10-857da934b8be"
        },
        "item": {
          "id": "622842bc-27ed-41d8-9700-7e6c7b40eeca",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "eab76ef7-4aa0-40e8-a4b0-5a2ebae672c4",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "26853caf-0fb3-4288-a8f2-58800bfeb0c2",
        "cursor": {
          "ref": "b846ba16-f548-4866-9d7e-538e47ef8f0c",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "66f90ea7-3a03-4987-bf79-d327c01b4ae0"
        },
        "item": {
          "id": "26853caf-0fb3-4288-a8f2-58800bfeb0c2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4536aa1d-3099-4baa-b37b-48bfb2b5e5df",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "8451f9b0-054c-4b4b-99cb-93a2c72d3be0",
        "cursor": {
          "ref": "d221f350-e05b-419e-85cc-f20e18171898",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "40458ab9-91a5-4b5e-90af-a14a52f34e24"
        },
        "item": {
          "id": "8451f9b0-054c-4b4b-99cb-93a2c72d3be0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9ff08e74-be14-4564-a234-8255528f46d3",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "ac3b9372-97fd-4822-be88-ec62bc89b2e9",
        "cursor": {
          "ref": "36f61d2a-92b7-40b9-bd61-edbabc89ccb2",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "56b705aa-c916-42d2-8275-c7ab57a63785"
        },
        "item": {
          "id": "ac3b9372-97fd-4822-be88-ec62bc89b2e9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ec0ac0ab-bd66-4c65-9fd2-71a5a83c9ee3",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "ceb33023-6c05-4b6c-8ae2-d438480b9e85",
        "cursor": {
          "ref": "d8dff645-37f3-42e0-8115-10f13f1c3604",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fa00f690-75ca-4fc7-9d37-d7fc66adfa43"
        },
        "item": {
          "id": "ceb33023-6c05-4b6c-8ae2-d438480b9e85",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b7bb7eb6-5385-4703-ba25-abad8b744c54",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "89e553d3-1c01-4eef-a39c-11f05e3ec08c",
        "cursor": {
          "ref": "3bcfed1f-7b2a-413b-b706-2f1749bc8393",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "df3a8a6a-df73-431f-9ebe-343fc7b0353b"
        },
        "item": {
          "id": "89e553d3-1c01-4eef-a39c-11f05e3ec08c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fb13bb96-7996-4b24-ad43-fb02dd427dac",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "2f104908-315a-481e-b9ed-c820e447670b",
        "cursor": {
          "ref": "167b3890-3f79-4d80-b17b-826c51cd4a88",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "875f90cc-6d69-434a-8018-0f00e47789a2"
        },
        "item": {
          "id": "2f104908-315a-481e-b9ed-c820e447670b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c332ecf3-6a5b-4ba5-bb0c-3c5a671e6d08",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "59ba9a64-e624-4613-89d2-63ac61312015",
        "cursor": {
          "ref": "15f0cc13-a04f-4a7e-a85a-b51e471b998b",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d6976949-2e60-4240-8926-6514267789f2"
        },
        "item": {
          "id": "59ba9a64-e624-4613-89d2-63ac61312015",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "02cbbf2a-a452-4627-a876-75621b9a06a4",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "ad6b7828-dd21-4a7f-a245-a5ac59fb79ba",
        "cursor": {
          "ref": "4efa9ff7-a276-47c4-a8f1-e85d38e1d934",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "20d4fcbb-f162-41e9-a69e-d397280ae9dc"
        },
        "item": {
          "id": "ad6b7828-dd21-4a7f-a245-a5ac59fb79ba",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9ca442c4-2d70-47e1-b6d1-cc016d2898c0",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "d81ebe32-6c51-455b-9a58-8b3f6ac38bc1",
        "cursor": {
          "ref": "bd5eb508-c6b0-4fbf-9747-46bde9606b06",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "610fc7f6-a76b-4a97-9baf-d1ca0ad6086a"
        },
        "item": {
          "id": "d81ebe32-6c51-455b-9a58-8b3f6ac38bc1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "aa5e0797-fb2c-4f92-a1b7-09e54dfe8f7c",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "444f9680-8c7c-4bba-afb4-645fd78de314",
        "cursor": {
          "ref": "d02b6181-b576-4c65-92af-9d136d40fe10",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "51bc358f-f7c1-4439-a415-160978dc82c3"
        },
        "item": {
          "id": "444f9680-8c7c-4bba-afb4-645fd78de314",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "877e1412-52e9-436a-9eb0-5d33689568ad",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "4e3ebea2-00c0-49f2-957f-015b6f043c81",
        "cursor": {
          "ref": "fb2d0803-ad3f-440d-89fa-e6548881b402",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7482e429-e2c1-401f-8025-d12798dc7357"
        },
        "item": {
          "id": "4e3ebea2-00c0-49f2-957f-015b6f043c81",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "abe17ff0-75b6-46d2-ba6c-91a55bd35024",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "da5c599b-fe10-4e05-bb9c-8452758953c8",
        "cursor": {
          "ref": "50919b90-1d79-4ce4-90ba-e3965e1a5a02",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "fd5e6d71-6e16-47f0-ba0e-63554aa38b5b"
        },
        "item": {
          "id": "da5c599b-fe10-4e05-bb9c-8452758953c8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4f5a1038-9d22-4884-a47c-cb2001d97ad1",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "06945f82-e6e0-4ed0-ac86-380d697375e0",
        "cursor": {
          "ref": "e2f7751a-2776-48bb-bb23-2398db396df2",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2073f868-79a2-43ea-adee-87a1183f980a"
        },
        "item": {
          "id": "06945f82-e6e0-4ed0-ac86-380d697375e0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "21c8ac51-cf43-4085-9643-a4e35b5e7c5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 108,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0318b92-cf90-4375-a45d-e978903d0741",
        "cursor": {
          "ref": "f0d7dab0-92df-42af-8d38-5ff18c3e0ad0",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "eb7178f2-e867-49b9-9c2c-90f5af5b9d68"
        },
        "item": {
          "id": "d0318b92-cf90-4375-a45d-e978903d0741",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "2ce5637a-00e0-48e6-bbd9-05486af365fd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 127,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd4a6a62-498e-4cf5-a8e0-fd386bbf75b2",
        "cursor": {
          "ref": "2927ec8f-bebb-441c-821b-a39d8526deee",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f35bb2ce-87f7-4eaa-8294-2930b52d81eb"
        },
        "item": {
          "id": "bd4a6a62-498e-4cf5-a8e0-fd386bbf75b2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "efeff53e-4627-4b8e-b937-8d9a6f965e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd4a6a62-498e-4cf5-a8e0-fd386bbf75b2",
        "cursor": {
          "ref": "2927ec8f-bebb-441c-821b-a39d8526deee",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f35bb2ce-87f7-4eaa-8294-2930b52d81eb"
        },
        "item": {
          "id": "bd4a6a62-498e-4cf5-a8e0-fd386bbf75b2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "efeff53e-4627-4b8e-b937-8d9a6f965e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48145c35-00d2-4d3c-a75f-45dffa5081da",
        "cursor": {
          "ref": "8f9c8f1b-fbc6-41c5-a6f9-d1446b45a68b",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "bc70906e-01d6-42f4-8aab-855eafdacb6e"
        },
        "item": {
          "id": "48145c35-00d2-4d3c-a75f-45dffa5081da",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "26925905-eaa7-4b2a-9c84-b453cda7bfc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9b0333-6da7-4a12-a414-82bedca392e3",
        "cursor": {
          "ref": "3618f9c5-b21f-4b12-be92-ce223882dd00",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ddace81a-b0b5-4a9e-8031-82b94147f6c1"
        },
        "item": {
          "id": "7a9b0333-6da7-4a12-a414-82bedca392e3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2274190a-0b1d-4b7a-8784-cad49ec57843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6950583f-80de-4797-b426-295e853a53cb",
        "cursor": {
          "ref": "38c926d4-31fe-44e6-94dc-51f439660e9a",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d95926ad-205f-4db1-9f8f-fe6864733a3c"
        },
        "item": {
          "id": "6950583f-80de-4797-b426-295e853a53cb",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e02dc971-c5ad-4caf-8f1c-e187d551ad64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb58ea2f-07d4-43fb-8109-b6fdf0165acf",
        "cursor": {
          "ref": "1cc6469d-4ace-4ec6-8619-28fa6acf7f56",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "73db2002-7531-47fa-b663-227794b74b07"
        },
        "item": {
          "id": "fb58ea2f-07d4-43fb-8109-b6fdf0165acf",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "637db91d-cb86-415a-b385-cc70dbb9968a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d057f150-ff87-498d-b0b1-8d982b1e62a2",
        "cursor": {
          "ref": "3815c0e0-0a4e-4a43-ba06-6c35a2245fb7",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "567962c5-733a-4e9c-a37d-51ac7714c2a6"
        },
        "item": {
          "id": "d057f150-ff87-498d-b0b1-8d982b1e62a2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "869f3cba-18eb-4ecf-a80d-d88920177cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a951dc-45be-41b6-aee5-b77469f0f90a",
        "cursor": {
          "ref": "ab6f668c-4e88-4a2b-8df8-832200c7d44a",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8ecfadba-b9c2-4cf0-807b-b95ba92dca73"
        },
        "item": {
          "id": "b9a951dc-45be-41b6-aee5-b77469f0f90a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bda7ef95-d818-42fa-b78d-d28e5dd9ac89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1574,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "209f8e2c-cafe-4c8c-91ba-26e64ef78921",
        "cursor": {
          "ref": "a18f0ec5-c280-4aaf-bdcf-3bedd5f5bc76",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ec6e4792-2795-44ea-80ea-b27862b2bd41"
        },
        "item": {
          "id": "209f8e2c-cafe-4c8c-91ba-26e64ef78921",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "009c7472-65e5-4cc6-8681-79ce290a98bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d5ea8f-cfe7-4808-90aa-1c79f8c494f7",
        "cursor": {
          "ref": "c056292d-2ff6-4466-87e5-0057b4d6699c",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "20bb08c3-7ae1-4d85-9e23-fb2582552d48"
        },
        "item": {
          "id": "12d5ea8f-cfe7-4808-90aa-1c79f8c494f7",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "32dc4675-93f2-494c-901d-15bb4c5962e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a60d5f4-5f8d-428c-87b8-aa158044336f",
        "cursor": {
          "ref": "d88f78d6-7c45-497d-968c-fd580bdab4d5",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0ae698c2-ef8a-4bb5-b425-f66b4c4d7453"
        },
        "item": {
          "id": "8a60d5f4-5f8d-428c-87b8-aa158044336f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b8e1cd47-e7c7-4ba1-aca4-a7c18c568dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f779ce09-9ab4-4063-bccc-be19c34aa1a2",
        "cursor": {
          "ref": "badcd98e-466f-4354-ba23-2f8d2cca410e",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ca9db5c6-6a76-4d14-a2a1-733188649ded"
        },
        "item": {
          "id": "f779ce09-9ab4-4063-bccc-be19c34aa1a2",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "93d1a7e4-f2e7-4066-ad75-a05ce8eb7b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b24285-13d9-44aa-9b05-382c8cda1eac",
        "cursor": {
          "ref": "45469627-dbbe-4987-8f41-8cc6c10d5503",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "cb9766dc-2f92-4b9a-b099-39fa158cece1"
        },
        "item": {
          "id": "e4b24285-13d9-44aa-9b05-382c8cda1eac",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5d0b3da6-1e06-4811-8074-80c33868e6f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75029c78-88b8-47ab-9456-81772aced915",
        "cursor": {
          "ref": "730ccf7b-65b8-45f1-a11f-0273ae617e74",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "85b0159d-c212-42e3-a3c5-a8638093d3ce"
        },
        "item": {
          "id": "75029c78-88b8-47ab-9456-81772aced915",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b29d3bc3-9991-4e84-a4ef-b50e10f8822d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8c8df1-0a6b-4d21-bcb7-419644b5fba5",
        "cursor": {
          "ref": "7704fcbf-ee03-46a9-af92-e03d2fd6395c",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6a8b0b75-62fb-4965-a187-7afd6ae42700"
        },
        "item": {
          "id": "2a8c8df1-0a6b-4d21-bcb7-419644b5fba5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5aed3d0b-8921-47e7-966e-d3d283e08089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5cd9373-246f-420e-83aa-8614ecd932d3",
        "cursor": {
          "ref": "e27cb90a-832a-469d-ab25-f832664a69e0",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "14f88712-1ef3-42e8-a96c-336b9180c7cc"
        },
        "item": {
          "id": "b5cd9373-246f-420e-83aa-8614ecd932d3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "75e7ca13-d69c-4be3-809b-8ace37774111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55fc135-f785-4561-841f-a86a6fa2eea6",
        "cursor": {
          "ref": "f5847ebb-73f3-4ca7-9242-26d86962bc0f",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "3b831bc7-29f8-4cc8-8321-9f08204ee16f"
        },
        "item": {
          "id": "a55fc135-f785-4561-841f-a86a6fa2eea6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "cc804853-50a4-4fba-8394-00f2062e210b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a5456c-1c47-4723-a34e-91d1fbe002f5",
        "cursor": {
          "ref": "0e29334e-b34e-4607-8c84-098021ba0655",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "defaf063-7370-41c6-904c-44374371d9ed"
        },
        "item": {
          "id": "71a5456c-1c47-4723-a34e-91d1fbe002f5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2b7f9c6c-e421-43f8-9ebe-cd3ad58dc5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6908eb56-b65e-47a7-bcb2-9b885dce5c3e",
        "cursor": {
          "ref": "64a3873d-9ba7-479d-bd3e-f566059eeea4",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "17ba5c84-996d-450e-a13b-cb75ea6f766e"
        },
        "item": {
          "id": "6908eb56-b65e-47a7-bcb2-9b885dce5c3e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "718ef880-4f18-4100-a958-da6a298283c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1781,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b380b56c-96ef-42d1-9150-f658abff083e",
        "cursor": {
          "ref": "92510f8c-ce3e-4347-9195-4f83077b33ec",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4dc0fdf9-cdc1-455b-a477-c8d764c617a8"
        },
        "item": {
          "id": "b380b56c-96ef-42d1-9150-f658abff083e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6fb36efd-356c-4b2a-af76-085cd2f8ecd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 556,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e26f5ac-205c-445c-9d48-f1276d5dc298",
        "cursor": {
          "ref": "c4cc13d8-f344-4018-9881-030bd8b93f66",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5ae8a05a-7c7c-4fcd-b093-0d58e9657372"
        },
        "item": {
          "id": "5e26f5ac-205c-445c-9d48-f1276d5dc298",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1a38a7ac-da3e-4c0c-ad67-83269ad46968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1613,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80dd9662-1c15-450f-9ff8-33e8043bb4f5",
        "cursor": {
          "ref": "29a4e7d5-f8ff-44d1-9b80-523da11b2c0e",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c62eb3f0-17a9-4399-a8b2-4864276e8e14"
        },
        "item": {
          "id": "80dd9662-1c15-450f-9ff8-33e8043bb4f5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "dc981042-d2e6-4496-bb50-aca4cfd322d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 833,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24810241-0eda-4549-9c01-486170ba4785",
        "cursor": {
          "ref": "b754cb57-344b-4f98-bade-64d24c559138",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c4cbf66c-0e77-4d6c-8350-c65a9497ed37"
        },
        "item": {
          "id": "24810241-0eda-4549-9c01-486170ba4785",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "034d5cb9-0379-4c8f-b3ff-7c7d92e7898d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 359,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f684a6bb-b887-4a63-945c-c2bb8ffca7e8",
        "cursor": {
          "ref": "0edc1a90-a96d-4b72-a83b-3655b9b4c93c",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a25af5f5-943f-4101-bae2-085328c0b511"
        },
        "item": {
          "id": "f684a6bb-b887-4a63-945c-c2bb8ffca7e8",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "dd67e91e-3708-4c87-beb3-077868d44e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 534,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2594d4ff-98ca-466c-bc82-86f4db618c17",
        "cursor": {
          "ref": "043bb90d-4c61-44fd-b35e-fab4e20899bc",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d6d8dad2-e224-4ee0-8d0a-f2b0a4639b5f"
        },
        "item": {
          "id": "2594d4ff-98ca-466c-bc82-86f4db618c17",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c2276d63-b620-4afe-9894-96e2f956aa26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "463d2de3-a22a-45a2-a151-dd382df1e470",
        "cursor": {
          "ref": "5d9cfad2-690d-4305-bd44-775684566ae3",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "949580cc-50d7-4308-8733-803950de2843"
        },
        "item": {
          "id": "463d2de3-a22a-45a2-a151-dd382df1e470",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3c4eca6b-7433-4949-904e-247c3ef60a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ea157fa-072b-4bd1-9099-48193c1b6760",
        "cursor": {
          "ref": "bc112ffd-b983-446c-9679-bd97fbe0cb78",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "471a9cdb-411c-4eaf-9163-f56f18b553fc"
        },
        "item": {
          "id": "1ea157fa-072b-4bd1-9099-48193c1b6760",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0cbed9b1-b28d-4b4a-aaf1-8f8a3893ad91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 305,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce2527ab-0068-492c-b21a-20593007e645",
        "cursor": {
          "ref": "0d0544f9-bdad-43c0-ab7e-ca38a951747e",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c5bbd45e-4319-46b7-bb2a-8a2da0c44cb3"
        },
        "item": {
          "id": "ce2527ab-0068-492c-b21a-20593007e645",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "abc18c38-f3b7-4643-b506-239285ee34f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5289f10-591f-4898-8b81-10b92d54b9ee",
        "cursor": {
          "ref": "ffbdb23f-1b46-49d2-8be1-287eb8fbc2a4",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8008209a-5bc3-4346-9b77-b9e914f4e06d"
        },
        "item": {
          "id": "d5289f10-591f-4898-8b81-10b92d54b9ee",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0d4df664-6d18-457e-9ef3-15c24e79cda2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4814daa8-bf5a-4554-865b-c7797a12a74c",
        "cursor": {
          "ref": "1d0a3231-f0ae-404d-a8a5-20dfef525ad8",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6f00ef71-df9b-4dd6-95ce-f51aaa2052c0"
        },
        "item": {
          "id": "4814daa8-bf5a-4554-865b-c7797a12a74c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1f3e3fbd-b05a-40ff-9ebd-92b1d0f9b325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 532,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ecac4bb-1647-46f4-8aca-b96b7c674775",
        "cursor": {
          "ref": "7b3b2e8d-b2e2-46b9-884b-e34533536519",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c49cd5ef-ce29-416f-8034-d08a1a26ce0b"
        },
        "item": {
          "id": "8ecac4bb-1647-46f4-8aca-b96b7c674775",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "948a442b-5935-47cd-9e99-ae09f26ae3ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e48469-b072-47a4-9ff7-c7c481456e79",
        "cursor": {
          "ref": "ff80c47a-819f-47c5-80cc-bbde80815c00",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3da6f5db-2f24-4230-8a55-df39553da88e"
        },
        "item": {
          "id": "30e48469-b072-47a4-9ff7-c7c481456e79",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b68c7555-90e9-418f-930d-dcd09530e212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cfe0933-c7b4-4475-b9ba-14901d114673",
        "cursor": {
          "ref": "f2b8d081-ca70-446b-8e77-e33271412efb",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c3e7568b-a532-4af2-9a00-739148273740"
        },
        "item": {
          "id": "1cfe0933-c7b4-4475-b9ba-14901d114673",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6fbbfd3f-6c77-4ca8-8550-25e473665654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92fe5dd2-c54f-403e-aa22-90469b0e6e03",
        "cursor": {
          "ref": "34415c5d-5748-40d8-acdd-044cb224e806",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d8fc193c-8374-402f-a0fa-4f54de2d973e"
        },
        "item": {
          "id": "92fe5dd2-c54f-403e-aa22-90469b0e6e03",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "27062f82-b2f9-492c-993c-5c363834d02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 519,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b86acd0-9e51-40cd-b684-40c73851d706",
        "cursor": {
          "ref": "6e3e9f8a-1218-4509-a391-98a49c715749",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "19f26c40-dabc-42d2-afb9-4462ae12236e"
        },
        "item": {
          "id": "2b86acd0-9e51-40cd-b684-40c73851d706",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "26269803-cb8d-4592-a48e-2bf45fbc6825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5568533-a772-4ebf-8368-fbc597c43cd6",
        "cursor": {
          "ref": "554b0d09-da0a-40a9-adb1-93deda825ff2",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "68bd65d5-9bb9-4d5c-85d5-3168cf4093b5"
        },
        "item": {
          "id": "e5568533-a772-4ebf-8368-fbc597c43cd6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "157b3540-fc87-4ebf-9cd4-f1633a4604f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1447,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0647f26-dbe6-44e7-b337-7a5ca5050a59",
        "cursor": {
          "ref": "387e237d-ef00-48e4-bf5f-82f75edb0452",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "78528778-82c4-4c67-a044-86940b0e642a"
        },
        "item": {
          "id": "e0647f26-dbe6-44e7-b337-7a5ca5050a59",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d9288a89-d841-4dc9-8f07-36324a5227e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1812,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2992a2b0-0756-445c-86d4-1b6206ddf763",
        "cursor": {
          "ref": "2d17475e-b5aa-4c08-b90b-6b033847d18c",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d8254541-9cfd-4f0f-ae2f-b3ab2e55d612"
        },
        "item": {
          "id": "2992a2b0-0756-445c-86d4-1b6206ddf763",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2243b26c-cf5a-4315-834d-73f1e971a44c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 512,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2807e646-9f73-4795-b1c8-c39c110fdf9a",
        "cursor": {
          "ref": "517a3027-ae80-41d3-97d5-ff4ae7269fce",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "93ffa976-7345-4c31-a32d-a0934bd6f4ec"
        },
        "item": {
          "id": "2807e646-9f73-4795-b1c8-c39c110fdf9a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "edc3a0a3-c460-4835-a88a-7bdc1653bf5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2426,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc97fae-76fb-4c85-ad47-e9d1ab73cedc",
        "cursor": {
          "ref": "67af5d92-5819-490d-b3fa-8f60dd3d4af6",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e0b26672-31a0-4c19-a949-390f6ec7f153"
        },
        "item": {
          "id": "4dc97fae-76fb-4c85-ad47-e9d1ab73cedc",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5f5a342d-49d6-41c4-aa55-074a0f4ca7a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1325,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f252f0c-838b-4020-9381-f0f88393574b",
        "cursor": {
          "ref": "5677a581-4455-44dc-951e-8a5bc7f87a00",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8aa8ba53-6fcb-4b08-8edb-996dc5465adf"
        },
        "item": {
          "id": "9f252f0c-838b-4020-9381-f0f88393574b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3bd7394b-460f-408d-9d7c-46a034e638c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 396,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf5394e3-3426-4444-897d-98e6b698aabb",
        "cursor": {
          "ref": "19427d32-ac8a-4897-98f5-10b86650f529",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e6f58871-a0cf-46bf-8217-b0d9e47c3b4f"
        },
        "item": {
          "id": "bf5394e3-3426-4444-897d-98e6b698aabb",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b6b45828-98b5-4a16-832e-25f51df835a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 517,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a849ec0-3294-426c-ade2-ffb30f0890a2",
        "cursor": {
          "ref": "6c7e8384-17c8-414a-80ae-7e3b470a41da",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "11a266bc-aad7-4b44-8c02-0e18e8008c06"
        },
        "item": {
          "id": "5a849ec0-3294-426c-ade2-ffb30f0890a2",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f0eb4545-0fb9-48ca-b939-6c2bc99d05ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 519,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4656dc-6657-484c-b798-fb85a23846db",
        "cursor": {
          "ref": "47827936-1d27-48d0-9034-23233fddf3f4",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b83e8799-e3d2-4474-913f-0e26eac3df20"
        },
        "item": {
          "id": "dd4656dc-6657-484c-b798-fb85a23846db",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8919179d-75cd-4cea-88c7-494e38b6d28b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 329,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8df4291-2a29-4e8c-aaa5-ffd88e20a2e3",
        "cursor": {
          "ref": "baaf2b62-ee9e-46bb-8ba1-44ac920363d8",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "845801a9-65a8-4259-96e2-6851b1d94401"
        },
        "item": {
          "id": "e8df4291-2a29-4e8c-aaa5-ffd88e20a2e3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f0ac7803-4170-435d-8a7a-9642b85d611e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 355,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef85afe1-2512-4bea-8e24-8b5b3362f757",
        "cursor": {
          "ref": "fd6e43ab-497d-47fc-b88a-2d716a6e6c20",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b4316fe6-38f7-445b-bd31-aef606efe5a3"
        },
        "item": {
          "id": "ef85afe1-2512-4bea-8e24-8b5b3362f757",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e9774f87-78e8-4d2a-971c-01b162a14912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 329,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d3432c-db0f-4973-9540-8e7da2615a30",
        "cursor": {
          "ref": "9daad7aa-2c71-47cf-b9c0-567660e88e8b",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d240fd85-9ffb-41ff-b3d2-cc1205d3a86b"
        },
        "item": {
          "id": "49d3432c-db0f-4973-9540-8e7da2615a30",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "77067ebf-455b-4ec4-bd12-7d6dd7f27d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 662,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6368355a-834f-40d8-a8f3-740d6f16b176",
        "cursor": {
          "ref": "17f3fc1f-12e7-46cb-a494-791a56836732",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ba9100c6-b404-43ea-acd9-dd2e486c7480"
        },
        "item": {
          "id": "6368355a-834f-40d8-a8f3-740d6f16b176",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8fe157e6-bc48-4d41-b93c-9022b46180c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 425,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c1429e-8d3b-4525-9419-2be50ebdc872",
        "cursor": {
          "ref": "55e35070-35bc-4177-9a53-23e78e2debb9",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "25ad6309-43c6-4af1-b82c-08a01355de20"
        },
        "item": {
          "id": "c8c1429e-8d3b-4525-9419-2be50ebdc872",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "57751829-4d3e-4567-992f-c6b8701a6cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 509,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53d009c4-59af-4fce-8c80-ad1b909ac91e",
        "cursor": {
          "ref": "5017427e-a313-4ca0-877d-fae254bee28b",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e9588163-b2bb-486f-bc02-67672c4c88c8"
        },
        "item": {
          "id": "53d009c4-59af-4fce-8c80-ad1b909ac91e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d41bcbbd-7cb2-4121-8735-0e34d712e6f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 405,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427f8540-325f-4f1d-a158-066e4ef4f1a8",
        "cursor": {
          "ref": "2a5f7649-9a46-42b9-af28-faa3d38aa542",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a47a8dbd-3ca1-43ea-b397-e1b53b9a70a2"
        },
        "item": {
          "id": "427f8540-325f-4f1d-a158-066e4ef4f1a8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b2c51aff-fad6-4d0d-b694-2a2e77bad0e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 946,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de3686c0-00cb-4e45-a6b8-b111d29420ec",
        "cursor": {
          "ref": "eb2be56a-7b51-4dfe-8bc2-2df1fdc56f89",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "08f80600-c890-4c9e-b856-09d7b68c9da0"
        },
        "item": {
          "id": "de3686c0-00cb-4e45-a6b8-b111d29420ec",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "99384ffc-04a5-4c87-b7b7-b122c82b2361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1007,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac77208a-add6-4c2f-8d5c-a7c4485993a9",
        "cursor": {
          "ref": "da9b863c-00e5-4e3e-8ba8-374bb0149b15",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3bb78f2a-5d13-4bc5-b5cb-65f9c28bad71"
        },
        "item": {
          "id": "ac77208a-add6-4c2f-8d5c-a7c4485993a9",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "86bf35e3-9dbd-4e47-85d1-48cb10c34ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 413,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987a5b3a-30c1-4224-959a-21fde6068bbc",
        "cursor": {
          "ref": "187012a3-54c5-4a57-8211-36994ae14112",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "fa149ddd-9bfa-42f2-b2e5-ab56dd8666a9"
        },
        "item": {
          "id": "987a5b3a-30c1-4224-959a-21fde6068bbc",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d8248587-09c5-4aab-80aa-2380bf12892d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1628,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1947863b-0b7a-4c4f-91b2-75d704350949",
        "cursor": {
          "ref": "5d6e6cfe-9680-4889-b539-e86cb7d70f65",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7b245030-7048-4f18-9e9a-4bf3e1bb123d"
        },
        "item": {
          "id": "1947863b-0b7a-4c4f-91b2-75d704350949",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "97adac36-6558-4d15-8a51-fa5bfd98009b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27b6af5-cd3b-4607-a5bd-febfb3189d66",
        "cursor": {
          "ref": "b0e0ca12-e75c-4a7c-8a5f-61a99555924d",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5b6e6983-332b-47fb-b166-67c6516d5f70"
        },
        "item": {
          "id": "f27b6af5-cd3b-4607-a5bd-febfb3189d66",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8aa91c2a-9998-4dde-8046-cd1effe5c3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ee1ca7a-6769-41fb-b053-7a09d9f51e20",
        "cursor": {
          "ref": "0a909e11-cd32-4558-a1a0-b2b38088eb8b",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e9eef769-3898-47c7-84e8-e276a89f0db2"
        },
        "item": {
          "id": "2ee1ca7a-6769-41fb-b053-7a09d9f51e20",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "bf5a004e-65b3-4f54-a410-9b9bb15f76e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83caa123-6591-4735-9806-766ca38327cf",
        "cursor": {
          "ref": "508b3a3f-b7af-44eb-84a6-258bc1f55a35",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2f40da87-2cce-4f34-8ace-5e6ba2f82f7a"
        },
        "item": {
          "id": "83caa123-6591-4735-9806-766ca38327cf",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c60d8002-2f65-44c3-9c22-7c1b70a81995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1307,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28971334-2021-4e0d-be0c-a2a189fb1a27",
        "cursor": {
          "ref": "aedcc7f6-7b23-4cc6-ab7a-e4ade131c652",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4043b4e5-6504-4f6a-b7b1-00f0baa1459a"
        },
        "item": {
          "id": "28971334-2021-4e0d-be0c-a2a189fb1a27",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b4344299-0b1d-484d-a5de-3be00fb52b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8182c6d9-7c86-4030-82ab-e412705de214",
        "cursor": {
          "ref": "38bb7d50-e5f0-42e0-854e-90274c8349da",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "07c6c4d5-bf1b-4d0e-b152-fd7a1af3ff82"
        },
        "item": {
          "id": "8182c6d9-7c86-4030-82ab-e412705de214",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5fc9a4f0-32e2-410d-bbfc-15cab9a22446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f8583d4-4980-4fae-bb5c-65403dc22262",
        "cursor": {
          "ref": "1055c19b-73fc-4f70-8092-ccfd76007a93",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "55a7a6dd-8e24-4a79-96b5-f5995e1c3ea4"
        },
        "item": {
          "id": "8f8583d4-4980-4fae-bb5c-65403dc22262",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0beb4c15-3674-40a2-bcff-90daee13a96d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68bb2d56-cd27-4752-8ace-8e6309af1521",
        "cursor": {
          "ref": "0424cd86-e5b7-4476-947f-26631ac865a0",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "87a88f12-e49c-4fa7-922a-57113835bac4"
        },
        "item": {
          "id": "68bb2d56-cd27-4752-8ace-8e6309af1521",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b93557fc-c68a-4b9d-9bd2-6698f830f343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82a439c-3c5e-4097-afbe-910148d424da",
        "cursor": {
          "ref": "2b918f47-e189-4cf0-8369-1184af7cde0e",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "340edca2-62c9-4c8a-95db-bc9f5b3d0cde"
        },
        "item": {
          "id": "c82a439c-3c5e-4097-afbe-910148d424da",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "33660679-a752-4c8a-b5e1-369f0f275df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 699,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75cd703-d97b-4b02-9a77-5b135be76f9d",
        "cursor": {
          "ref": "2db289b2-1b04-411b-b22c-394957e5aef9",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "261f6297-6f9b-43ec-a42d-3b7727c79909"
        },
        "item": {
          "id": "a75cd703-d97b-4b02-9a77-5b135be76f9d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "fbf0cf87-c8de-4d7f-9556-0e104393a387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7a0f0a-f4aa-4561-bd33-6c08af2e5ad2",
        "cursor": {
          "ref": "e189e3fa-0c33-422e-8a26-4651f53507be",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c0f76e00-25f6-4b23-b771-5ca044b411f8"
        },
        "item": {
          "id": "2a7a0f0a-f4aa-4561-bd33-6c08af2e5ad2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "bbf5ef13-d650-4dfd-8173-f57cb2274cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f9cecf4-4096-4b3b-b04b-cfda6f54794c",
        "cursor": {
          "ref": "14408a6a-9b1c-4d06-a605-32068cce17a1",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1da79b66-f72d-43d7-84ee-7134430ece38"
        },
        "item": {
          "id": "5f9cecf4-4096-4b3b-b04b-cfda6f54794c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "cc91ca38-5f0b-4fc6-9451-3710ecbfe110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22bb2e3-ddca-417f-a09c-254b0c101321",
        "cursor": {
          "ref": "ffe37aa9-12c5-49d4-8cd9-826f81e2a772",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1968c3ba-6b1c-409f-9f06-a2e6a79084b6"
        },
        "item": {
          "id": "d22bb2e3-ddca-417f-a09c-254b0c101321",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "710f0977-c3a7-42ab-bd66-78a0873e8329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351be06f-5b48-4a8b-a332-f268b0a7171a",
        "cursor": {
          "ref": "2cf3dbe2-87e8-4dfe-91bf-53c357430422",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9a4cb822-ed4a-4e24-b428-5b49a9c4f6c1"
        },
        "item": {
          "id": "351be06f-5b48-4a8b-a332-f268b0a7171a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "05a9ed0e-b564-41b6-bc80-d740f69b066b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c67add6-f250-485a-aa9a-80d254ed8481",
        "cursor": {
          "ref": "75993283-d3dc-436b-a0d1-87f3c1852525",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "be440a98-50ca-480f-b337-1765a0c890fa"
        },
        "item": {
          "id": "6c67add6-f250-485a-aa9a-80d254ed8481",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a2152e17-6df6-45ca-b283-e6faf1be0e9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435c592a-defb-4a9c-a065-cffaf0032862",
        "cursor": {
          "ref": "fda0d8fa-ca4f-4714-9183-832d01dab29c",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "48e3e694-db18-4733-8a0b-540c872f1756"
        },
        "item": {
          "id": "435c592a-defb-4a9c-a065-cffaf0032862",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7977c071-0eae-4518-bf34-fe40dc05566d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb5960ac-40bf-4f00-bc62-9e89dbea5594",
        "cursor": {
          "ref": "9b6d3af2-028f-455a-9348-a74964ff33bd",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9b4cd233-e5ca-4995-a612-df0560ef13e9"
        },
        "item": {
          "id": "bb5960ac-40bf-4f00-bc62-9e89dbea5594",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4140f22a-3e7e-4aee-ba09-125105dda5a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1cdc00-4936-42a9-906d-cddc9435183e",
        "cursor": {
          "ref": "fe087c74-a214-44d6-9ef9-ab3fc23d9266",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a8266a18-e8e5-439c-8e8d-154b3ff67510"
        },
        "item": {
          "id": "4c1cdc00-4936-42a9-906d-cddc9435183e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c62956d6-6633-4208-b019-925555c1492e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7bcf340-b80a-4d36-8ad0-0056e3266037",
        "cursor": {
          "ref": "96adf406-3bb3-46a5-9ff1-e35784a8eb7e",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "353acaa3-1062-4f28-8c49-f2d03c467984"
        },
        "item": {
          "id": "c7bcf340-b80a-4d36-8ad0-0056e3266037",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "96f97fdf-fb32-496d-b931-98286d5414e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff2fd10c-2529-454d-b702-a2fd5a9f5217",
        "cursor": {
          "ref": "7b1a911f-b9dc-4fc8-a21e-6c82d2c6864d",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "395e99b5-8397-4842-b000-b3c81ac986ef"
        },
        "item": {
          "id": "ff2fd10c-2529-454d-b702-a2fd5a9f5217",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2f5992f9-fee6-4a48-a4cd-645590f1b902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df79116c-30dc-4e43-9fe1-50b88e1de332",
        "cursor": {
          "ref": "9b347bf4-83b3-4455-b938-51c85fe8e9ae",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "6f32c02b-3fb8-43ac-8688-8b41e79921d6"
        },
        "item": {
          "id": "df79116c-30dc-4e43-9fe1-50b88e1de332",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a9c4132a-e209-4ae3-a98e-ab91cc57f69d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87976677-48b5-4ea3-9719-2c3cac185cb6",
        "cursor": {
          "ref": "b1926149-ea68-4a1f-ba2d-fa6f15f01048",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "76109e2f-1281-4e7a-8fd7-df4c438ad05d"
        },
        "item": {
          "id": "87976677-48b5-4ea3-9719-2c3cac185cb6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "773b9143-284f-485c-baa0-f74288b47621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602e6766-160a-4766-92d5-cff4b4c6671f",
        "cursor": {
          "ref": "84e5b9b0-ca83-475e-b52b-b92af5cb5946",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "97e6a9f9-5224-4671-a25f-20b8f17aa670"
        },
        "item": {
          "id": "602e6766-160a-4766-92d5-cff4b4c6671f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f12601de-8e8d-4a18-a003-1c33be743b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98542e8-40c0-4533-af9f-045182c9b190",
        "cursor": {
          "ref": "d216a90e-3095-413b-bd46-cb5cbf125859",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1b1e3f70-7d45-4e87-8f46-1e2ccb003df2"
        },
        "item": {
          "id": "e98542e8-40c0-4533-af9f-045182c9b190",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "87958fa3-186c-4113-bea0-99b46bc99a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6bdd82a-d636-46d0-9003-32e5d9f8d5fd",
        "cursor": {
          "ref": "96191fb1-bc26-4d60-acfb-8c250d04edc5",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "02d481dc-7998-4e84-b8e1-9a05a81a98fa"
        },
        "item": {
          "id": "e6bdd82a-d636-46d0-9003-32e5d9f8d5fd",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "728132f1-ef4f-4fbf-8ace-a19f008d6087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd8bcf4-7816-4e62-9e13-95ac0ce5f111",
        "cursor": {
          "ref": "c2224770-d007-45b6-9731-7eea2a0990f1",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3da3a71c-973f-4dd2-adcb-f6b8aafa3fd0"
        },
        "item": {
          "id": "afd8bcf4-7816-4e62-9e13-95ac0ce5f111",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4bb7d249-648e-4a9d-b736-d9189f8ce106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c12113a3-ba5e-4aed-bf8c-e29d69d84cd6",
        "cursor": {
          "ref": "a70ec14b-570a-4ad9-b690-e1e700f067ca",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7ef04f23-9bff-4e33-9441-7597117eff3a"
        },
        "item": {
          "id": "c12113a3-ba5e-4aed-bf8c-e29d69d84cd6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c8fa584d-2c9c-4dfe-b20e-743ab7454e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01df0e94-0749-4a2f-a916-562ee7c09d39",
        "cursor": {
          "ref": "5db6b091-f8a7-40d6-8752-31bd6347a3aa",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6c457017-e061-4b76-8b50-41a5c5c20665"
        },
        "item": {
          "id": "01df0e94-0749-4a2f-a916-562ee7c09d39",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6a2ec2c6-8635-4b4e-a485-671785518419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a6a9df-acf2-4130-84c7-13fef72c5c99",
        "cursor": {
          "ref": "d7abeb2b-18f1-4a87-9deb-7d4ad374d684",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "28f1dcd2-db6d-49f9-ba7d-606fa2e7ecfa"
        },
        "item": {
          "id": "86a6a9df-acf2-4130-84c7-13fef72c5c99",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "cb043c49-22f1-44dc-94a6-7851cd3fa352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f35c9c0-1d4d-4e3a-8ac1-43aa750555de",
        "cursor": {
          "ref": "d50e9fa5-3eaa-4d30-8eff-ee5d410fae29",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f5aecd45-0bbc-4153-bf40-4546af43c9fc"
        },
        "item": {
          "id": "3f35c9c0-1d4d-4e3a-8ac1-43aa750555de",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c81e1dcf-d07a-4a7e-ac5c-3e3a38d0e653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c48871-33c7-4a99-b62f-d52e7b9976f1",
        "cursor": {
          "ref": "cc78240f-c43d-46a2-b199-c5b4cd849ffe",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a3c3b4b9-21a6-4e70-9037-1550bfc0e22e"
        },
        "item": {
          "id": "d0c48871-33c7-4a99-b62f-d52e7b9976f1",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "375f2c38-72e4-4d49-8209-bdcd9de870a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc20c229-50bf-4306-a7b7-fab6af5fccc8",
        "cursor": {
          "ref": "51b7b9e1-55ab-4765-b743-6ec47320c7fe",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "959e5128-c77e-4b98-bf35-f8c29ea72c74"
        },
        "item": {
          "id": "bc20c229-50bf-4306-a7b7-fab6af5fccc8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c3e7328e-c426-4c7f-bf36-05e7f612bb67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a2731e-3760-4c68-b974-7844ff718cb9",
        "cursor": {
          "ref": "691f1a33-d237-4305-90dc-0f88bf28e34b",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8fc8d381-5a23-440a-be70-ca3d81b86291"
        },
        "item": {
          "id": "06a2731e-3760-4c68-b974-7844ff718cb9",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5d1225d5-a5f5-4ece-ad0f-8954fb75680b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "270c53d8-e820-4f0c-b0e2-d45d0cce789c",
        "cursor": {
          "ref": "1476bf73-f412-4ff0-9ccd-cb8d216ffbc4",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ac0f4f0f-9fb8-4ef2-84f8-ea3f5ce17fbe"
        },
        "item": {
          "id": "270c53d8-e820-4f0c-b0e2-d45d0cce789c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "eb0326dc-8a96-4e02-b98e-739eedf83a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914864e3-85bd-4b3b-a6ab-15928cfc3fc1",
        "cursor": {
          "ref": "11eb333a-11ff-4a1b-b3b9-af1ca04bd603",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d977b6f8-7587-4804-a02f-8250ccd599c1"
        },
        "item": {
          "id": "914864e3-85bd-4b3b-a6ab-15928cfc3fc1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "66bca964-a985-42de-8d61-5b966cca9ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9456105-6a50-4baf-8634-0a54c1ab20d6",
        "cursor": {
          "ref": "b3e153f7-0914-4376-b0b2-077dce1d7005",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "00fede4e-61f9-49eb-9df1-c69ec92d80fd"
        },
        "item": {
          "id": "d9456105-6a50-4baf-8634-0a54c1ab20d6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "304265fc-3c93-43b6-bb90-1b3123b91239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e04af1-815a-4047-9ffa-2a3ad29dd115",
        "cursor": {
          "ref": "2e34b915-7064-4998-9440-b3de847ae22b",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b5fd47b4-598c-4cde-98d8-053bdf18caf4"
        },
        "item": {
          "id": "47e04af1-815a-4047-9ffa-2a3ad29dd115",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cbecd524-5c97-49cf-b502-ac22013de643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5103e6a-f01c-4c9c-b252-f2ce0d488419",
        "cursor": {
          "ref": "64ace458-6e05-4b7e-92e3-c569c7527dbd",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8f479f31-9e92-4778-a7ed-8cc5f08e55d5"
        },
        "item": {
          "id": "f5103e6a-f01c-4c9c-b252-f2ce0d488419",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5ebff9c9-66e9-4464-9401-ec8d533e7194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd6f138-296d-4a8b-86ca-8b04da4cf7b5",
        "cursor": {
          "ref": "6b589212-2883-4b3e-90c0-3eefe0822bc7",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "37cc33e3-9861-4d11-af7d-af08f6802f89"
        },
        "item": {
          "id": "cfd6f138-296d-4a8b-86ca-8b04da4cf7b5",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c2a3ab21-af69-4b0a-a047-8a38380a7d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba9c3ff-3c4a-4eff-95e6-99ad54e005cc",
        "cursor": {
          "ref": "de24d8f3-f56c-439e-95d1-d228a5a0503b",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "6895e388-0152-4874-bb34-be4a2a0f33ed"
        },
        "item": {
          "id": "5ba9c3ff-3c4a-4eff-95e6-99ad54e005cc",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "69fd0751-fe84-4867-b691-0e840c860cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ea7dc5-d8fb-421f-9529-faaf96b00bde",
        "cursor": {
          "ref": "68a27b80-2fd9-46cf-8eb1-6405f6619e5f",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5854d086-ba77-41eb-83e9-9a15af2c642a"
        },
        "item": {
          "id": "14ea7dc5-d8fb-421f-9529-faaf96b00bde",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c94f5090-e9dc-4e41-8b6b-0bf9db637353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25f9b350-8ec9-49c1-848f-30d8ab3bffb1",
        "cursor": {
          "ref": "bf977dd6-6301-49c3-bcd0-271854f6af62",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b70148f8-8383-49aa-8db1-051d7cd9b887"
        },
        "item": {
          "id": "25f9b350-8ec9-49c1-848f-30d8ab3bffb1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2b073978-eece-4564-9b77-a0a66eec354b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b02cfaa-0574-4d50-b519-2de26c41ed86",
        "cursor": {
          "ref": "48c0048f-c1d2-4e64-8a0d-770e07789d8e",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "625e39d1-0907-4e37-a895-fa99c925f0c0"
        },
        "item": {
          "id": "7b02cfaa-0574-4d50-b519-2de26c41ed86",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "757c4d86-18d5-402c-94b2-82c671549560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab61ce0-c2f2-4217-a118-49289d85dc63",
        "cursor": {
          "ref": "456e8cb8-cf02-44e0-8e33-e0158ea83783",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "79cc6c1c-6f7e-4121-9468-6ad13fd4f8ad"
        },
        "item": {
          "id": "eab61ce0-c2f2-4217-a118-49289d85dc63",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "55dd1376-760a-43c8-b940-8b8a15d43049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d02b34-50cd-4197-a6d9-d4d735c1d44f",
        "cursor": {
          "ref": "294a7f09-69a6-4639-9b54-3b0025a81729",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c108466d-d5f1-4028-aa36-f6e5cfca6e49"
        },
        "item": {
          "id": "b7d02b34-50cd-4197-a6d9-d4d735c1d44f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1bf15bef-8475-47ce-9cea-2234973a62c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3affbe2-dba6-4189-9c9a-118168abe44d",
        "cursor": {
          "ref": "7efe6b58-6457-49d4-a324-51968e7dc1ab",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3eefbb5a-3b98-4588-8446-88b1c06845f3"
        },
        "item": {
          "id": "d3affbe2-dba6-4189-9c9a-118168abe44d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "fa6b685a-b977-48bd-86da-cffbd6cd61a5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 37,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "211ef7de-9446-4ac7-a3ac-085c99f82903",
        "cursor": {
          "ref": "0b91bcbe-48d9-45c5-a8de-e7dd5384db2e",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3eeedab9-359f-4f8b-b1c6-e9fef5c44a79"
        },
        "item": {
          "id": "211ef7de-9446-4ac7-a3ac-085c99f82903",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3daa4638-6ae8-4cde-b481-02a8c82dc37b",
          "status": "OK",
          "code": 200,
          "responseTime": 2493,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61adccdf-145e-41d6-887e-b43708009f92",
        "cursor": {
          "ref": "0ba2e43a-fbd5-4962-aaf2-0ceb06de5f26",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9f332ed0-a28b-4dcc-ab81-ee0a885b27ae"
        },
        "item": {
          "id": "61adccdf-145e-41d6-887e-b43708009f92",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "37e57f22-722a-433d-9d39-1835659798cf",
          "status": "OK",
          "code": 200,
          "responseTime": 1704,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8593d91-8563-4301-9b8e-8a029aa08a07",
        "cursor": {
          "ref": "12be9a80-425b-44b6-b3e9-ad1bb525cdef",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "57ce7418-1323-488c-b7ee-fa93d0768e05"
        },
        "item": {
          "id": "d8593d91-8563-4301-9b8e-8a029aa08a07",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ed5670c6-7627-4afb-b02c-725c103fb5b0",
          "status": "OK",
          "code": 200,
          "responseTime": 1598,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77a0f19-8673-4520-af8a-d69ef2493149",
        "cursor": {
          "ref": "fc4446f4-5816-4285-96af-3cadc2f7b5c3",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "72f72fc0-4169-41fc-97f8-335259901fee"
        },
        "item": {
          "id": "f77a0f19-8673-4520-af8a-d69ef2493149",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "012f5eec-0ff0-4002-9bce-e19fe81587f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77a0f19-8673-4520-af8a-d69ef2493149",
        "cursor": {
          "ref": "fc4446f4-5816-4285-96af-3cadc2f7b5c3",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "72f72fc0-4169-41fc-97f8-335259901fee"
        },
        "item": {
          "id": "f77a0f19-8673-4520-af8a-d69ef2493149",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "012f5eec-0ff0-4002-9bce-e19fe81587f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77a0f19-8673-4520-af8a-d69ef2493149",
        "cursor": {
          "ref": "fc4446f4-5816-4285-96af-3cadc2f7b5c3",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "72f72fc0-4169-41fc-97f8-335259901fee"
        },
        "item": {
          "id": "f77a0f19-8673-4520-af8a-d69ef2493149",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "012f5eec-0ff0-4002-9bce-e19fe81587f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665b31d2-66ea-4e01-8e8c-a2fccc93d8ec",
        "cursor": {
          "ref": "fd5324e1-0bc6-48f6-85fa-448e134d683c",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "6fab5d3c-0248-470b-b0ce-af4f03a4135d"
        },
        "item": {
          "id": "665b31d2-66ea-4e01-8e8c-a2fccc93d8ec",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "709ad6f9-588f-42e7-baaa-4ee4360b2a17",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 121,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e0652e-6365-46a3-9835-ade945c263d3",
        "cursor": {
          "ref": "67a5fa8a-20dc-45cb-80c6-00c322b03a06",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "403c12d6-5bd7-437e-ad5f-4b09616e1c65"
        },
        "item": {
          "id": "11e0652e-6365-46a3-9835-ade945c263d3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "cc01cda8-b98c-496a-9a3b-77cfd38fb5c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "11e0652e-6365-46a3-9835-ade945c263d3",
        "cursor": {
          "ref": "67a5fa8a-20dc-45cb-80c6-00c322b03a06",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "403c12d6-5bd7-437e-ad5f-4b09616e1c65"
        },
        "item": {
          "id": "11e0652e-6365-46a3-9835-ade945c263d3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "cc01cda8-b98c-496a-9a3b-77cfd38fb5c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "fda5378b-e99b-424b-a849-7759cacac33c",
        "cursor": {
          "ref": "3c5ddde3-249a-4949-ba7c-bd5c1ce18a3c",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "101afca8-3191-4286-b1eb-16a8ba021e1c"
        },
        "item": {
          "id": "fda5378b-e99b-424b-a849-7759cacac33c",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "0e6c1cb0-13db-4b1f-9bf2-0e6b1c034a55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "d006e5ee-4ff1-4ea6-83e4-ef3cec991dd1",
        "cursor": {
          "ref": "c036b407-d6c6-4dd4-b109-0b692d292ffd",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5687f7f1-1a53-49e0-9a42-e43df9e39d74"
        },
        "item": {
          "id": "d006e5ee-4ff1-4ea6-83e4-ef3cec991dd1",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "47c68d7b-12fb-4791-aac2-5a23e1f58fab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 106,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d006e5ee-4ff1-4ea6-83e4-ef3cec991dd1",
        "cursor": {
          "ref": "c036b407-d6c6-4dd4-b109-0b692d292ffd",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5687f7f1-1a53-49e0-9a42-e43df9e39d74"
        },
        "item": {
          "id": "d006e5ee-4ff1-4ea6-83e4-ef3cec991dd1",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "47c68d7b-12fb-4791-aac2-5a23e1f58fab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 106,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad6b06b-f56e-45f5-8cb0-c2d87cb2c83a",
        "cursor": {
          "ref": "0291eb80-0841-411d-8405-8f9db3c8e667",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "eab26fce-808e-4bb1-9968-025b96e7d707"
        },
        "item": {
          "id": "4ad6b06b-f56e-45f5-8cb0-c2d87cb2c83a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "64cce17a-63bb-481a-865e-bd4869203c92",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 99,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}