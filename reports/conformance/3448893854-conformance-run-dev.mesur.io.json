{
  "collection": {
    "info": {
      "_postman_id": "f5f17919-82a1-4db5-be95-0f985635313d",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4d5a67bf-c396-4440-a772-99a2a094e3d6",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e4370364-8d98-4940-b56f-96d06cb7fdb5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5fc41548-91f8-478a-8ad1-f22509d1f150",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4f1df87d-8725-468f-a846-6c4d0586e8ce"
                }
              }
            ]
          },
          {
            "id": "37cf5d33-580b-486c-810e-f533d38445d0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fb8ecb26-152b-4dee-a1d9-8197075140be",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5f2b07da-3fe0-4255-afef-93a6dd906480"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4f9c697e-31cb-4510-9931-566ca8053096",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6ded953f-5008-4d82-912b-8de38eb611a6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5089ea9c-50d9-4b82-a218-c77d66b96ecc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d81d1df0-2cab-40aa-bf85-6a4a4857a9ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "234a6b3b-9573-49e3-9252-fd3e137f2d88"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d312f5ef-f770-4b52-b04c-e7089e876156",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dae57d85-8ffa-428c-b9a7-71955801e063"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4d8dc5df-7e8c-464d-b4f7-283e95ff9e0d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c8e06b09-a648-4945-b940-cf97bee3f0ed"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2411caf3-740f-4028-b39a-c3cab7109b24",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "101283e5-560e-4993-96bc-3521a642469e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d02a8df-1af0-447c-82ef-5aa2fa265b78",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30c80b15-7ae2-4268-930d-e9b452894f11"
            }
          }
        ]
      },
      {
        "id": "5beac71a-d5ab-46a4-a861-f0efe09355b6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3005caa6-ab20-4d37-aaea-9fc2659b9b95",
            "name": "Negative Testing",
            "item": [
              {
                "id": "09f63efd-a1ed-44d3-886f-ca59e6737e10",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3565ecb9-cb27-4fb1-8aff-90a2d1d0bbb6",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fdaff84-20a5-4e81-aed6-84e0e9f6716a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd1dc646-3260-4151-a884-16e9637ef6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ce7069-6e95-431c-9e2d-a7df88e5af88",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edfba8ed-b5db-4c9a-9df5-3951e608a922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f82a66f3-3578-4402-92d3-1497b38cfbb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc766793-d3ad-4295-9923-bf1d85c97baf",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7fdb8b-afd1-4ca9-82ae-130c4fd8aff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6f48cb5-8721-4dff-93b8-6134f6cccc9c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "01e23353-a527-406e-8303-dc5a9f89aca5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "185d647d-f116-467a-9928-f4710a319cca",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd048886-6bee-4bf9-9140-84517788d447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aecee093-477d-41e2-81b2-839c8ba87ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee87483c-ee5f-4dd0-b9f8-7396dd103314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4af752ef-c4b1-46b7-b7c2-972a567e9e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed51241-8eb6-476f-bfc0-1c0ba80313dd",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43d5c00-329c-44ba-919f-a7940806b6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "512acfcb-25c6-4bfa-9721-2f62a26c7f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae2f84d-ab67-44dd-a008-fba2d8326ae1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "89404bec-ca5f-4430-bdb2-148770b87363"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "dbb94fc9-feb7-4058-97c7-c7c0e4a78557",
            "name": "Positive Testing",
            "item": [
              {
                "id": "16d14f33-ddf4-4b6e-9427-b356e1b8e6ae",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "88ac9ff4-310f-4fcc-b62b-7267f667f7e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2117b5d5-76ff-4cfa-af0a-3d2f4758facd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41722f23-07ac-4006-b36b-3cdbd8f08d72",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "8400f545-67ca-48fa-9961-587cd3be8927"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "069e550c-2528-4a39-ac48-6be711a257c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "50015b31-8091-4e4a-9bbe-b727a6dda188"
            }
          }
        ]
      },
      {
        "id": "3a43b435-3b1b-43de-a9a8-25f76ef8eaeb",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "637cbc07-762f-4a73-9ad9-23eb5e4481c4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b46b01e6-4b97-45fe-8649-f2bf51a4b347",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d988292a-9942-4b66-989b-b3b8fe5d5cd9",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53ef909-cd57-44ef-aa5b-5b76e343a2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b10e6b1f-ff04-46e2-9f86-f76905e531c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5964e358-e6eb-4554-8135-a66fd6390796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64495363-62d3-4fbd-b33c-3d02314c09b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4605a4-a8d3-4a8b-af31-b4dc129fad25",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b314d5a1-ac91-45c0-bbbe-0cfa344835ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7dbcc70-d55f-4d6a-9789-2275d91fb3e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473f50c2-e796-4870-bb00-10c5c3c4df58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aaa252b1-8aa9-4cca-8e26-c50a777bb977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f4735d-d4ba-4dc4-b936-82d4652dffbb",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e26e5a-46c1-4ae9-bfc9-e480d2d26ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3348bad-5d14-463a-a6a0-e8d343dfee3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73681823-65ab-4e42-ab68-0fe71b6770f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52dad7d3-9ffa-426f-8d56-fa8cbf5369f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf8d553-07b4-4775-9b0a-d9b27a339f72",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90583a7f-bee9-4829-a9af-6e3792bd9fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de015d8-c021-44eb-8ab5-f650eecd386c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c47d95-9de2-47d8-942d-686fffe28398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0478227f-01f4-401c-80b4-16200b904389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ddb1977-2f9b-47cb-96af-f9a1e5a4ca2b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edccead3-1f55-4cbc-af5f-d375842b5399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd233762-8e04-40e8-97d5-60ed665f187c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8307c8b7-83b1-460a-bbd3-a47c7b073568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "859cb8a3-3869-4152-8f32-7e8c6dd453ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ce5ddf-fb4b-4d05-b9a3-4c10bdea3269",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98e34ba-62fb-4b26-ab5a-04f998e1085c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edf1bd16-25bc-4abb-88e7-d2272047b061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ceda998-583c-4ddf-b2d0-d340724687f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "985e3132-b09d-4ef3-b92d-03ffa2749320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8bbe64-c8cf-4eb9-85b5-fb3ebf052828",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2796a7-b07a-4f93-afa0-361d853e9d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "295127bf-026c-418b-8aa7-eaed82d53a73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8403db2f-0c9f-4900-b4b9-5e99831d3ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6309d777-c880-4806-9915-f387679ab83f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68475e48-59c0-436b-9936-d4c3c054f7da",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b96dee1-621f-4d37-b9f7-2b9235bab493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43d539cd-9aba-46a3-bd91-5c5b2caed2df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6dbad0-073c-4bd1-84b9-636392538ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d16b8ba2-eb60-4187-ae17-c9174b257539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf98ae4-6476-4ac7-a9ee-0e14fc868754",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13138d61-b922-4047-8454-3631ea8ea844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3199f5aa-13e4-4353-8911-47652906797f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65885e8-d9f1-46a7-9a06-65f3df529a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0c0d29e-7040-44a1-b874-5ebc443d1579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97eb5469-ddee-42a6-a792-8bd4ef40ae25",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed7ed62-c9f4-4071-94bb-fd91ffa35c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f51cb8a1-5b27-41c4-a149-e01ea374d05c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4627b88-544b-4b49-b86e-3bd2e5ba8e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81f4de64-8a81-4e18-ac22-1df9365d66da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a657436c-2ed0-49fb-9b1d-dc96eab37f29",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "044029a9-075d-445f-969f-610738465a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13cfa4b7-2e49-4a3f-9819-e824e23f809a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7688929b-2172-4656-be81-11d5baa3dfa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d74d103e-2c60-46b3-b9c6-5c30aa8fc2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cafcfb02-6b0d-4fb0-9d01-d0bae0b787df",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca457060-6d05-4d84-9ac0-5b75e7f725c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69349fcd-346c-43ec-9f45-2bc32e2a358b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491534c7-2d6a-4924-8bd1-3e3650223346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29aa936b-3467-4524-b5b6-833129288ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d331eb-02f4-4183-9079-5994d067b060",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fc25b9-740c-4c98-bd36-33ce26844e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb667a7-aa61-4035-82f8-bf99a9c3e434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b390caa8-1469-4789-931e-dbe21706bb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52646a47-0cb7-4750-a9b1-d0b97296a879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3426c7c2-6de3-400c-ac11-3903f7045ebe",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "004798d9-e026-4a83-8dcb-ef40f374d661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6aee9c-27b1-4522-9645-d5af63934874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77958fa5-26ed-46f8-b57e-60415d15b2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e43f9bc5-288b-432d-a98c-1721312f0976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90fcc51-7c98-4e84-8e8d-f7fcab23488d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3482b986-83d6-40dd-9d4e-7390beda8c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a932d2-8813-4c1f-9058-1789c85d294a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161030f4-6749-402d-95f0-5ee1fe913abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce909792-46df-43db-832a-a119e50f3959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f02ca6b8-d79b-4455-bf81-800ceb20e06b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f24135d-4e50-4a3b-a375-fb8cd03f0494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f982d8d-f442-4ed4-bc49-f19c8131756d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202f8251-58e7-4b2a-bb10-a2237d76f408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1797871-0498-4064-818a-5951604ddc75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c998ae-b7b5-4812-a2d1-fc2bf9030686",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c19dbe-1b7d-48f5-805a-9dbd4c6efa23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc6cab38-e963-4e84-8aa0-de3290107915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebba9c85-210b-4cc7-ac52-1ec61b998e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a153dbb3-2e8c-4ab3-a1ad-2a27706b963b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831f42c2-bedb-48b7-9534-c10aa82f75bb",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "896afdea-bad9-47ab-9f3c-ca7bbbf94b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b0886a-e18a-4a02-85b4-f3261aabad47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9467781-f2b5-4637-8b5d-9d17047a059f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ecf6dad-281b-4ca2-b556-eaeddd7e78ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d19babe2-56ee-4dfd-a9ab-af357f84fa47",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "931a6875-3236-4452-92f6-93d27b3e9fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb08fe8a-890f-440c-94d7-051a7a7460d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ddd341-1adb-4340-8aee-3a4587884852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d073731-fb9d-426c-8e73-722ddfe3cd36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f1e2fa8-c405-42e5-b6ac-7f386cc2e95a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f3b826-ccf6-4829-9c7d-7ad46cb43ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0afb58bb-5f23-476b-9f03-1ed1b183fe9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21035533-57b0-4972-b2f6-79dd422303c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fbfba2f-f1da-4a0d-a35d-e5e89c7e7fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4de7b50-594a-4aeb-ac74-bada859c33ef",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c191c4ea-13f2-44f2-bbf2-563f1d8dac66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de69f516-71a7-4951-b267-9e6623720b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08e9a29-9d10-4dd6-b6ef-34c1492ef2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "45b72caf-3d57-45e4-bd7e-d106ca447e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0562b23f-faba-4b44-a28e-48b7f4ee893e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac54dfa-e65e-44fa-89cb-b4e251e01f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b312c8be-45bf-4121-921b-0677660f6164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33e8463-23d2-43ac-bb08-3b3c36723074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b19a3409-a8ab-41f7-9b41-96aefc93a9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c8c986-d811-4433-8864-a87dcaba9cb0",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22bb76da-bb1a-4fab-9cac-7690b83a67ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b40bfb8-f87b-44d2-a868-2000565371a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c38f133-6f2d-4934-883a-a13cfefab3ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "99b6865f-fd18-4f71-a342-665cd1becac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ef132a-c90e-4ace-8a8f-a50de575832b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ebb759e-5376-4cc3-a90d-00e302ba170d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "790338bb-ce7f-4a1e-855f-18edf331b63b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96a6d32-8afe-442a-b02f-0e29add74adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "97de4f98-81a4-4b9b-97c4-1b33f203df85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cea346a-6371-47c5-8a15-7a01f4d9c507",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9c636d-66d1-42d3-8bf5-9cc0563c6c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cde6d4d-89b3-455a-96bd-acc850d15f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d37ce25d-40e5-4aeb-a676-621f57551228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d6aba2c-ed42-494e-8b5b-ed5f5cc3a9fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a58f942-2d02-487b-8b4b-54cda05b4588",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37c0258-5e62-4f0a-828e-3a7acdd2d894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88a2348c-623e-4f7b-be56-1022fe335984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259384ef-a3c2-46ea-bc54-94f75aba4b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "676f9ab9-6ccc-43b7-9c33-f0e2179e2bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4fd9ecc-1ced-4085-a342-0b3e7025c0f3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb4e806-6a2f-4591-b43b-7fa3bc65c22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "274d8d9f-ba12-49b1-a7e1-283363535ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a21ff7-704a-4c37-80ac-15e89c9dbec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5de25e8-fcad-4c7a-9eb7-04941f40a6d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6fd5bf-e73f-478a-a237-049f39ec7727",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a45cef-c443-47e0-9e7f-df2bf5563b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2774c09-a046-460b-b5e7-69b5be815721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f3844ee-78d5-47a8-a133-76318eb80e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c4cfcf1-d126-4490-9a10-6ca12d95cb3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfb0648-7774-4dfc-a62a-c26b8b054949",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95ac0af-91cc-48a9-8240-fa41b2f52c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "070de02c-c6e7-4540-ba02-5423460124a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f9e080-625c-426d-912f-02b31e8a6f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa449518-b83e-43dc-9ed8-8a2fd86a16a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6991e45-9881-48c8-abe6-53bda1b2ed7c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b82dbdd-0a72-4b93-9289-c6ed3f4ab292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1a9783-3b2d-4d1f-a8af-d6f398ce0925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a726edca-07ba-4bed-b2e5-54535c87e45f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "11fb60a6-b160-4632-b1be-a92a3412d9c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed29105-ba5e-4345-9f92-1f428326d19f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06c9dad-ce0e-445d-95ed-fbb3abc023c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c139670-86e0-402d-8675-d60f2b1739a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f64eac-c1ab-444e-9adb-129100fd7342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e16b351-cd19-4f19-9f88-5e673343f20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8c3dd4-4371-4ac0-b3b3-4fff7c3016fd",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "332c0fd8-3d67-40b7-9c82-21ba5d839b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63f086d2-378b-4286-901c-555f37bbde95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b59250-fc8c-4ff2-b5b3-226bf240999b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fb7115c-14eb-460c-8ba9-b409ed3b1a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947bc95e-7d19-4a42-beb9-722ead2b041f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00a023c-1558-4043-8892-94f75a8a0b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c72bcc0-f5aa-41dc-8551-dd75b07b345b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6bcf61-4791-4c93-befd-5d05772a3ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "456be00f-6858-4bf0-80bb-72aca05a399d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6184d683-ea59-4936-86ad-f8e471e66909",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23948d14-1ca2-470c-8feb-96d4624f8304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3aa329-bfa2-4a8a-b8fd-356096d32f15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff04ab9-c265-4771-9046-e934550b5a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "128b8d94-3465-4b97-a186-e250227311da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e4ba3b-ed78-4dc8-a4c6-57770c65e4b1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c21882-1919-4427-9065-923fded0d075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc38e837-733b-4984-aeaf-bb98d6c807e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8a6719-4cb5-4e25-96e6-b7465f3107a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3cf14d8b-3f56-440e-b5de-ebfa194e3b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e157bc38-6737-42c5-924f-c387bdbfdc78",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13137b2-a6b0-4fc5-8cda-161b3129932e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c1b815c-c1eb-4790-abc8-e49996955a69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "355e5dc1-aaa4-4e3b-bc68-03147c8e8aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "33bd3466-ae80-4e80-b09c-7b24c38c5b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1567b1e-bbc9-4274-ac68-5b5d07ddb202",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff2a3dc3-650a-4452-a027-8109117ddd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c202249-c854-4664-b2de-819f706c56e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777da92e-d1ff-44a8-9739-1a9337a808d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8a02704-a2d4-4d90-8075-9b262b5aae1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c81ad73-165f-43b7-b682-acde7dc37c5e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9484650c-2b62-4c2c-8903-3711511566ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18bd12fa-cb17-4e36-b255-31d0036ae44d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb7f496-076b-486e-933a-839e82983c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef4d103-d079-4d2c-ad27-aabe5c06fec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a6ab815-95cf-4efc-bfd3-ab5ebc206745",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5562a039-7eff-4e61-8e67-85b5c1505c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd6d53bb-efe6-490b-ae30-041103f63297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6fc34f7-cb49-41d3-a5b4-cb0c49baf80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e1c8a5a-fdfa-4ef6-9e6d-7d96f4df4bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcbf7d39-ba38-471b-9ca3-0b65c8ebb0c1",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c0acca-bc90-46dc-bdb3-87e2258cb10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f6f728-20bd-48ca-affb-63696c51fa53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e481cc6-5257-4b55-b159-76ad36eb405d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "187e0171-e1ae-4f34-b930-1b41f16076e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbaacfb3-0cb4-45d3-b9af-d0a200d79c26",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "236e0348-b92c-4cc9-b9b5-f1ebb090e051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f89f5b7-e9e8-4e3c-8118-f46811b8c52f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9c733b-a297-49f7-8ed8-b7e82259d4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2cca70e-a0a1-43a2-b8d3-b2a7ee8400a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66073f0b-327d-468e-8f95-985f88a28930",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9eeb244-d912-4db4-a903-879b2c554bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a0456c-2d85-47cc-9c25-4e5072a33dcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6655c2b-8795-41a0-b23d-ca5ad5d6d12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4975b1b8-ddc8-4e7b-bf56-a4b29bc131a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a83c5cd-2fca-47a2-a64a-3b3a38db7968",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f64989-3939-4643-83a2-f90b5a9b8765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60d7de73-3b3a-4ba5-b2c8-6d9803df1d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9c548d-8b21-4611-9b46-3bed58748c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b96d5b2-f07d-4324-a023-6db6cd1760f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045411a7-ce46-44ad-bd1f-da0af745c071",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a18be29-4f5e-4753-8297-5542c09dc392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdb70fd7-332c-4d7c-9a25-251d5ef8c0a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df2ee97-6f5a-4fcc-8d45-405b0eebde8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b199103c-739c-48df-8ee8-cdebaafc6fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c32508-1203-4e4f-a387-24bcc3f2b8fa",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ce01db-50ed-4b53-b502-b5461aaf57c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d2f022-f8dc-4eab-a019-d93878527343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9498e4-40a8-4768-81c0-3c313c25589a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f40a29b-3d80-4f38-93c2-f0b468f5613f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c67655-8cd5-4222-bb1a-d3f25450da8f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccdb856d-e230-41b8-a8ba-52d563465237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7a6387-fc25-4f3b-9607-ef213554e7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7728d78-4ea2-4c1a-9bc7-be648632f4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "da816945-31d7-4881-83e3-1075b760edff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed78f8e-2782-4704-b00d-7cdff913a991",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ea8927-4aba-4498-8deb-cb7a097921b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb4e4a7a-b18c-4fbb-b44f-085c4cda1692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d940eb68-e0da-4c9d-b274-08e89788e923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6794122f-caca-4a7d-a6e8-9c1acb9977ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7fe58b-c26d-45ee-bbd6-14543e1c97f3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c30b35-ae8b-438d-b369-1f686f84c95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f71d232-d3cc-47a8-a7f8-12d27def69e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b25126-3a51-4f27-9969-860192116ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "615a9059-f494-4eab-9b79-0a1a668b5982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aacc483d-e84d-4a56-b806-53dee538c127",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f3d681-5a02-4816-842a-f31e54524849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3137670c-7a8b-425c-b036-080e825d42f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8aa8ebe-9c02-4ff6-90ef-023cc5b0cb89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d0c3102-8fbf-445f-b48d-486a757c77cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a89e302-a2c0-4bfa-ab8e-c5a414912d71",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598ee175-3e61-4908-8105-7479cd276ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45d7896e-9e16-4e71-be90-03b6a5e3a53c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9877cb-f9fb-4a55-baac-78d89a8cd908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6093e782-a9a3-4c35-a5c8-2a18b6602314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42711942-3c92-4ead-b5a4-37615282ebac",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e713485-6e53-45b9-9bb2-5ca9d265db14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b7f741d-a4ee-41df-a0db-a8302d115f5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef3a585-f826-4e2a-903e-dc7c40c29e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bdbc273-9e12-4af6-b1e5-f83e69840a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bbeafc-0823-4fbc-89fb-150d54bba327",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae189f6-2684-485b-8ad6-e506111d0f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6871a3b5-5ef0-4b25-b239-851aa3519c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb89ea7-c27a-42f0-9bb2-a26e03bf05db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "443fd389-058a-46b2-a7f7-a61ed5d1d333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bafd3fc-7151-4467-9d6a-b1f3babff042",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df22d254-7023-4f84-af1e-0d4c16fdf418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e52c368-fbb9-4d7b-90d0-c56f5a2e8d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0b625f-c6ff-432e-b13c-516be173add9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cb58b28-e50b-4c5d-b899-0f565e269d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af1f9a0-1095-4dd4-9b18-f0cc57684e0b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c37d2ba-1456-45b5-a0d1-5c78849220ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "853c2560-39b7-43d0-8b37-1f72f19ded91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd0f476-9091-4026-a42b-1fffcf7d6b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "def78e2e-07af-4bdc-876f-511811b7cabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782a264a-f5f1-4f53-9549-677cb58278ef",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7105c7b3-db74-4c89-a481-b01685ba7978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a02c18d-8359-40c2-affe-c6f0b2027b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b8bea5-0ac2-43d9-86ed-27b399b2d693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6563b13-03c1-4c25-8b12-4c6d9154fd7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50cd9b3a-dedc-4e8f-b680-7b684be41d87",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffafbb65-4e76-4894-8292-a9b3af291853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cbbc046-5d99-4d29-b27c-7283fa730aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "864d50a9-3e42-4bfb-b3d2-220f41e9cd8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "951db534-e455-47f2-a23d-b854eb3edbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ccaebfa-830a-48e9-831f-11c20a3f3c18",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e937e0-23f0-4cd8-a9dc-2223e9d74cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12238518-9307-447b-8359-99499f805aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445c7527-e393-4f91-87fa-5fce807a898f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "54ab3e08-35b0-4e8d-a6d3-6ce5350c479d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9041da47-db8f-4df0-9176-ad1dd6d249e7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "719f35a7-6b42-4c9d-aece-8e79652e6a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1459cf8-49d5-41e8-9fe1-52cfa6785b95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347252e2-d781-4960-a630-4f65ec684b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5151273-f584-46ed-927f-2abe0610d7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b16146-d653-4ba2-a990-554441d306dc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda4489d-f687-4161-a302-34536fa7f4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e47a4fb5-7464-4ff2-9f36-b3b9404a75b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511a76b9-2848-4cbb-a353-3d19b8c3c1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "103cf06f-e8aa-49cb-9216-908c6a2c345c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386774c6-99fd-49f5-9c4e-8add562bc3b6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7245a251-bfc5-45a8-a5d2-322f865638e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54eb8764-1f38-4158-9ba8-021d634b1407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820d0f98-b3b6-47a0-a369-483c44d93612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "002bab9a-9bf2-4065-ba40-39349dcf3f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea61ea1-0004-4450-929d-2f1339314e67",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc35ac00-318d-4e2a-a603-aaa3b28a0cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb5ae79-3100-4213-ba2d-9ddfc5dc7ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e2f511-917d-4310-8544-0038b0c6374c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "49e2356f-82bd-4094-a848-6f977dbe2ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463b478c-ca54-425d-b56e-79dc7f4c2c63",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e6947c-a93c-4c97-a58d-0ffd21617738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d21c2e9-f56a-407c-8ecf-43c2900602dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe71dbaa-0790-4d94-b1bf-e1d8bb59a667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "7060bed4-1521-44a9-af3c-a64101408e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652b47a9-1244-4881-a743-9c199928b35e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32bda052-a754-423f-b773-02d74616e213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da8de8da-481d-4794-9f1a-c49c73d5fdba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9f3142-f956-437e-81c7-4c7bc6450292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "694e1c44-6658-4bc5-942d-114f78d56def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc576ae3-5efa-41d2-a048-da85f6bd2640",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39c54b4-a291-4837-ab5c-5310601868cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98dcda02-c238-4ed5-bded-b7528fbc732c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f9719e-d0a2-41d4-a605-16a2abcb84a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ffa97b1-8b08-4c50-8834-edb65c882cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c17341b-88c8-483a-8ddd-1bd065976ebb",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9689c0-678a-4be6-a2e1-af8c1e53d62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc81a0f-b28b-40f9-a197-04b4e1f76e8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8bfe514-eefc-4ed8-b3b8-4d9c6cad3fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fb14d34-a8da-4c95-95bd-7980f67c273f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f698dc-21d3-411a-a13b-212cbc66b157",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7714b6e1-b264-4759-b855-22a68b768126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ac19205-9776-4bb0-adb1-bd9335762b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86900f9e-42b2-440b-9842-33abc093962f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f801376-3d72-46e6-94d1-7eff07da77cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a6ee5a-128c-429e-a4d7-1ae405460dac",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9668291a-95d0-4ab0-832f-a13d8ae7440f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e23c3d2-5f70-4a8f-9a90-0bcf82b0fa63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d443c1-a1cf-45a0-9b79-d3c5fb25fcb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1466a74c-f00a-4eb9-b369-2dd575b9b4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041fc88a-6339-4f1b-99c7-f02e8a9930b7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4236510-69ee-4f84-b9b7-95b4dc93887b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db9121ba-f78c-4aec-b4e6-cbe3678d610b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ce7ffa-9069-4a0f-b8e9-58172de12fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b81516a6-a898-4046-883e-b210998021eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb054782-7b8a-4f02-9e08-21497933b3c3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a4a8d0-bec0-4664-a54f-b9671c62e381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0104df26-a2c0-43ce-ae77-0c4366ed8be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891baf78-a165-4f5b-8d9c-a030979ce4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf329568-e734-4640-ab16-00f0a57afaa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78153a56-c4fe-4c6e-89e7-96ea2f4c6282",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c1fa034-69cf-45a3-abf5-88e8a928038b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29cec253-e2cf-4be2-8c65-88f69960151e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df381c2b-da6a-4ccf-87cc-7ad72c21f327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82bb3820-ab6e-4255-833a-41d847231ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d790c4-94e2-44db-9045-b63251d3a345",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4339668f-59c4-45f3-b781-d22eda634a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aea6a4b-61ed-4ce1-9973-33b1c0e2f273"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0224e4e4-7c5e-4543-a3d2-8d599987315b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5fbf99f-0fc5-4063-ae06-020ce44a7d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2acfa0-9e58-4a3e-a3b3-716bf7d13b18",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a71f412-a468-4e1d-b621-3aed19b60a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b97d53-cab1-4388-8271-87006f51b980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430aa0b0-33ae-466c-b5b0-5a0435da3749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4eef53cb-f3a0-4448-8dee-fadf8ab8e7ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5342e4f-4ce0-428b-9714-af33a07c1b17",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72958bd7-95d5-436f-8afa-47386ae53c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "104efc56-7ef6-41b3-8eb9-d475880b206d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd08267-7830-4a45-ba79-85ef52e62a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b003731-d079-4337-a505-0eba048f92e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91011fd-9c1c-4355-af8f-1933c1d64f48",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7adc8f-ad47-41d6-a407-4f5782f86392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74cd048d-dfa8-486d-bd66-5d747c0592fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d9e6db-165d-4a02-acbb-444643f90ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f9c88a10-e8cf-4b33-8006-73c77caa5a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0237c568-7317-4ad6-8f32-f336aa7ae6b0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32bebdbb-e3da-4950-b9ef-8de9dd4bab61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbdc9cbf-8610-4136-80c6-b36abee774cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22d4953-c5d6-43fd-9fd5-6cec70d22686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb7f3899-6b36-4c9b-959f-8b40c8a6b79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44708233-5576-4ec7-9f41-054e51889fa0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f115726e-c8ce-463d-96a2-a1896c3f628e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d097738c-3424-4f5e-a9a6-238cc8690277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847f2e70-efd8-4171-b0ae-ea6268c3b612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "573a4d38-bcdb-41a7-8570-b0911715c3de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c4be91-9233-42a9-9587-2dd2fd458cfe",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46a4a86-d683-46e4-b177-f5ccd9050fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec6696f-8bc6-47dc-8bb4-43dd2fcc137e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7947f6a2-066c-4860-8cfd-b57f8eb43445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "28bfc0ae-1761-4038-a8f8-171e933e4c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376f17f2-9caa-45cb-ae01-ec9304200985",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f03f6712-494e-4920-b75f-2b1bad6861a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bcbcb67-22bf-4eec-8963-6bbbb919134b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5834c6b3-1eee-4cc0-91ca-6d478121bb47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5518b91-fe24-403c-b425-c074c9aa18d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db6e5dcc-ba44-4016-bbe3-3ceeef4440a6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "440bcc60-226d-4f4b-9100-957b47d62f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "216be674-ff2a-4afd-8a72-1e0acbb44e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c7b245-fe8c-41fe-9d73-429526e36877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b135941-2ebe-475a-ba6d-7d6a97f5cab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d85d02-6efd-4fa3-a091-1e829fd0c377",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76468e48-7573-445f-a7a5-89c9b046abcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "272515fe-3d77-4664-856e-dbb4fe5614e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ccbacc-4a4f-4305-8fe8-5e8b56477c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "96209c8c-bf3d-4585-8017-051caa05308f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a67529-6392-454e-9ff5-f50587e94339",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73598bab-9a1b-49c0-9b1d-b36dce2ad9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c88c6621-b8e2-490b-b78c-a301c9fb002c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4ecda6-529d-42cc-8953-968350ac7365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7fc7c7c-1575-4f87-abe4-2999fe9a3f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c0fd83-97a0-4519-95fa-79f0efe822cc",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fcc9cd-1dc8-412e-8aa3-feba3b9cde20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e52dccd-c612-4b5c-968b-7c460f071b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274f44af-b88f-4c3b-bd22-49107ffe914c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c62971e-5822-4323-aea1-c168c69712a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919c0872-8d9f-4d9d-9069-4a4821cdd218",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae2915e-7a50-4a75-8d13-13ad1573d544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5f9ec6-8de1-436d-83e9-0a7e7a37a3f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e81e20-45ad-4a16-bb25-01a6ce1e9423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "563b8e65-4cdd-446a-a9b3-fda3d0664018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e37cd6-66e9-4c1f-adc8-bdaa80ffe5d3",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd523ac-91b7-4953-ae71-bd67aa4421e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e395d7-60e1-45d5-a630-29ed52487766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f6faf5-d8d2-4d5c-8bea-61d96b010eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7134d7ef-5f92-4795-a4f4-f0933f66b495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2233f7f-59dd-447e-be39-dc08eaa1e403",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc023036-e289-4c6b-b3e1-ff2bae402a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ddce9d2-943e-425d-bad9-271cfbdaf629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54eca0e8-b407-45ef-a4f2-f4ae8697be47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dee040ad-3a31-422a-9121-ae370c54e30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b671bac1-113b-42ac-ba72-a09ec67c869d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b0ec26-e084-43a4-8508-1b58c8e3e457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa97da2-ac27-47fd-8b2e-1f05db698713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b0d9c13-1f1c-4041-b0fb-48e0c77726b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb54d6ff-0de6-45ea-80b0-522d576c6ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18039e81-d1fc-4df2-bd16-035db0e556b0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cedc950-2ab9-45fd-9d31-8b8cdd2d6e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9095b28-753a-43b9-84f3-b8bf11537e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6fa42b3-23ec-4609-b793-e280edf4ecb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b2f3b9b-9656-4027-a2bd-ea599e4d5f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a99fac-41a8-4b6f-8421-7628fdea745a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb20bfa-917e-448c-b5b9-9d2dce33a0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdeef072-c95f-4608-b46c-8ee2541b5705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6293ffb5-adea-4a9c-b28c-8015dd006dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "471639e1-bb19-4f93-b14e-f5b178fad2e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e05c07-4ee8-4f14-8b1b-cf47e47b72f1",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "885fd795-c4cf-41be-8055-0edd442adce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23519f5e-92f2-46d7-b34a-18acb588771c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539ce755-41da-4b3e-b6b1-00c4a0838742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "52ce666c-39c1-4d51-b264-c588953d7153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75271df-d024-4ebd-9aff-a4521d6c0c00",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38879256-341f-48a1-9624-af02218b7617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12600e76-9e3a-4325-b3b3-ac4b6960437a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016f74eb-06de-4396-aec5-c6077cb00383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5be27a1-0044-4861-81ed-ce22ce9ee87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbdfb677-fde8-4770-8107-5a2e4cf1d94b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96fc7b91-3a25-4e9f-b21b-a5f8e5296332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f6c483e-1ac1-4ba5-9a76-50850b6a454a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626df84e-f8b7-4281-95c2-085fedb31154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2906d69b-c9cc-4359-b855-8857f9fe579c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b294985-c765-4e74-aff0-efa26f66f2e2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bdaa5e-51a7-4f35-82e1-a501de9d52f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6c6df955-b6d1-4196-bdea-0a656d9ae6b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf9d3d8-e3df-4d8d-ac15-05c10a44c766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "247a2f38-10ef-468a-a033-703e901a4c5b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "af2cbd93-2079-4871-87d6-cfa9150777e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f9ff4f58-a5e7-41a8-bb17-c03eb13a671e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "910c8c2f-f9b8-4fe0-96d1-93e8b9f3227e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca7625be-62c3-4eef-8dad-89c6989de353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c2b6b7-d8e9-464b-b563-67074d67ba60",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "078a55c8-ce92-4c76-bc58-bac6245d3944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c782623d-fcee-4682-8874-f82e33b16360",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba24804-d366-4b80-b403-ac5ad24a517d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85153867-1db1-4ef8-8d2b-9253793b23e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98484a18-c428-4c96-934d-1c4af243eb87",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "070dd03d-9e6a-4e46-ac96-056c357bdfa2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c221fe3-f6a7-4e0e-a2aa-40465ea805cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6ea3265-8776-49f5-9c71-f6266838991e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "34a9ca9e-5124-4edf-a0e3-8a30d5364bc9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4d9c3bb-3fdf-42e6-b9b8-e313a332fc8e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "57a44759-4603-412c-8f2a-e20221c0ba87",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5a6a5be9-c733-4fe3-9485-608de57a590a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8b7a2a5a-b848-48f6-92d0-452a8f65eab1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f3fbb7be-315d-4536-9794-9ab4738aa9ef"
                }
              }
            ]
          },
          {
            "id": "3db30d83-fa7b-4605-8bfc-0b3ac3eaa7e2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3b6e67f7-c688-4d31-8448-dfdf57844333",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1595641e-1ee2-499d-aa2c-d88eab9a7047",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json();",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74cb5d21-e6f9-41af-bb52-6311f9586c52"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba7181dc-17e7-4f73-aea4-566f013298de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b449c20f-2422-4221-8276-9f57730a3061"
                    }
                  }
                ]
              },
              {
                "id": "350e921a-7adc-421d-8b62-d69e326692f3",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3486101c-1ff1-4523-9fc3-13fe3981bd9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3278a506-3296-45d9-bfc6-166d1b689168"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d90a9e7f-416f-4796-bbed-4b1bfab71507",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f1d5503f-e3a0-43d8-b51e-e5d144abda00"
                    }
                  }
                ]
              },
              {
                "id": "320d1d98-1751-444c-8b71-af3918db2804",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdbe081c-e1e2-475c-b0e1-e9f0e7f71fe0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c6b817b-69d3-4401-90bb-62020903d450"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e676e46-34bb-4f4d-83d1-bb6520e4863e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4d24d568-1149-447e-934f-7a3cb5a5f427"
                    }
                  }
                ]
              },
              {
                "id": "566155a5-ad1b-4cd9-9a2b-bd9212edc233",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af6a9afb-dbaf-4b7a-ab59-134be9e138ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91a4d80d-b0f4-49ed-88b7-77cb687e670a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "277226cc-7d79-4291-9403-f322a9e6df0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "be3ef669-6abb-4543-a89c-f1636c4556e2"
                    }
                  }
                ]
              },
              {
                "id": "cb38f226-450f-4e2a-aaa9-e81f16148cc9",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13127b4b-b073-45e1-b167-e319a0e9cdee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d7155028-7f1f-4cc4-9b2f-bcc3668ef311"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b954ec72-b2a0-4b81-99e7-26eb66a19186",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c69011c9-580c-4343-84a0-6c8dd41e17c7"
                    }
                  }
                ]
              },
              {
                "id": "dfa14ff5-aee0-4793-b668-d4117120b0d2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "29a72495-9607-47ee-8774-edf966fe42f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9a4bdb40-66ae-4b01-8345-fd18584e28c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac321299-b8aa-463c-8d5b-2f4aa5546a43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fa6099ec-4126-4da0-9fb9-bfee06ac3a72"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7ee58df2-cecf-46d9-903a-15da48d83042",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c1b03bb6-b32f-4f28-8441-da76c8940fe8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8acc865b-31ca-45ab-beb5-bc52c6f5d580",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "078d09e8-6b16-498d-88d9-27ae321e2c55"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6fc00ecb-3517-4258-9120-73c84bbfa96f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5277d2b3-0b66-4438-8e55-fac75f97deff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2fb8ac5-7fbe-4dd3-b462-7777966cfe59",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb08dabc-96b8-4cf0-aeb7-41697e2b39fc"
            }
          }
        ]
      },
      {
        "id": "739ebcac-0f8e-43c4-9ba2-4e8de0e657ec",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1022ac3d-5560-40da-8ae1-fda91eae5c0c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f3981a1f-9dbc-4173-b844-5cf7a634d5f2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b825754d-26c3-490c-bc52-ed054c9aae68",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ff3c6e-2592-4499-87e9-38df51c88630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d479ebff-dea6-4f4a-aa89-9a15c6d89abb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed8019f-bea2-4ec2-80d5-7a705579d4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfe95309-b5bc-4f13-b07d-4bad7a32f92b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2454eea1-b131-4f32-8730-4603cac59357",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e074851-325a-4abc-aca8-ba62e8021509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c09a45f7-be00-4b38-a37b-a0b8d4c18b62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3924b974-f55a-4235-87a0-12e0529f2a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af171a4c-2176-449b-93a5-38c917464da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26bb1df1-3452-40cd-8284-5e14af8a397e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4997c3-1d94-49ac-8b35-cc743436aebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd324b0c-be80-4b74-b78f-3fac08a6b9a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d264c993-0594-4aba-a54f-153a30a25c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bfb6f44-553f-4b91-949c-af067604b5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a417147-c344-46ce-bcbb-47925d9f8f4c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a5af8a-9b3e-48bf-a86c-a9efb580ee39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef50d486-8a49-4cbe-9bba-8e81b388b7ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997461d8-3b68-4959-8a5c-a35171cf8322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76cc6d12-e5c3-4809-adfb-d814b3197d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45acea8f-73a1-4f86-852f-62b79dc8cbc9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5a740e-362b-46a1-8ed2-0d11698dbe7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18eea9ee-8ebf-4506-bcd2-0988959255f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "089a2f7b-ed80-49d6-8ca7-776a01cb306a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aaad52d4-9c74-45b6-a62b-219dafc88399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d1add3-e649-4eaa-b88a-380b48e74837",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd9aa00-3d0f-4024-9166-958f93114c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9337c970-521a-47e2-b6e8-3d5b9dd73bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "801a4f73-9373-458e-b49a-823aadde75d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d39f809-cd9c-4bbb-94fc-94f1a8f5d0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62473010-c49b-4d2d-97d3-544211f316fc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb18b351-8faa-4920-b571-99ca0675b3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3bfa8a5-dfdd-4b83-9afa-e6fc46c548d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31075ed4-d3f4-489b-b07a-6ee0ed712694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "039f7333-af5e-467e-b72c-82955b4b65ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad399ae0-783c-4eb8-b2f4-2bb9d0870931",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd50d12-6081-4c0d-a6dd-a6c7e5e6db61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a22cbd5-92f5-44fa-9f4f-c67a3d7aa8ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a983d07d-3c5d-4593-ace1-d25c968135e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d636f92-203d-41e4-aef7-904d182bf49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d6635d-2052-4a06-9aed-6e2887108c1c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1654aaeb-8bf3-431a-a653-f5e101acf380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c93baf15-3c9f-4ce9-a3f5-aeff49ebcb9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86c61e4-7c3f-4aaa-8b34-feb69b196e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55a35db8-dbcf-4b22-993e-d95ca5cf689e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7ffda6-d81d-4c94-8e9f-ce58b580c25d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15aea31f-7d86-4cac-a124-5905fa3c2ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cd2837d-ba18-4969-a796-b6616157c8f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8e2f69-6079-4826-8a6d-53cd15cbcbf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b44d9228-3cc2-4693-95bd-96775bc3a9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784f6410-e07e-4c19-b120-6d4ce880eef5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc57c2dd-c5c8-44cb-a9bd-7cd9818a08b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "822c071b-89f0-43e3-a31f-1466b13f2564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b485e97-0c7d-4191-a681-2a47c05fcd07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "419b5c73-2ab7-48ac-aa18-dfdcd2f3b1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08819148-4c64-4259-898c-1d7a2586d4da",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfe74f9-094f-41b0-b406-ba8974ed7e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9fc69b6-aa46-4bff-ac9f-92b6812df14c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6918c0bf-5fd4-4b68-af42-edc3e7a40111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0f698a55-63c2-4e95-a244-622b067b30e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af963d4-1dde-438e-b1e0-8eb390b374ff",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a9be4cf-8b74-48d7-b681-ee20fca1d305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92aabe9f-57e7-49c3-ac33-bf7c1509397b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b190847c-97ce-4482-a068-3bf3a8b7c3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b6bd70c-6a93-4306-95bc-c68a16450942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25363ad-19c3-4da9-ad60-f7af3973e8b3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "450ee97a-d13d-4bc7-ba64-9335addfa87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab71a73a-b5f3-4f8b-9ea3-7e7a162deb0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05821ea5-2d3f-4657-8419-5e2ad035bd24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c58e3480-882d-4544-9850-05bd06aaaa47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ed9815-b1f3-4600-bd19-650da7170a1d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b95038d-a1e6-4e6f-8854-931a77d6a133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d26212-7c66-424f-a845-d5d5ee60f383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b369e8be-e63d-434e-90e6-74ffb7a7a811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "58e9231d-85e9-4e24-a9fc-24d114cb1b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe575fa6-afe5-4414-86bb-4955c67dd0a0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f20ee0-954f-4ffd-bab7-29e0a569f596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e0305a9-6047-4ae2-bc73-0b46b7312338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6055adcf-7028-4593-aad5-85867895099b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d6e0f5d-62dd-43b9-9c82-34d2f74badae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f58e1b06-f11d-423d-9829-ab3a90d25f17",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c990a70-19ff-49b6-aa03-33998e05ed27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d2db5b0-5e22-47f4-8da9-c5401445a5da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a1bb86-b548-42c7-b8c5-80a6050d7968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b505cbe4-2212-40fb-8d93-ff8abd7e09cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab82bed-da23-4053-830a-813eddb83f16",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21e8c60-af40-45c7-a384-8aaf39fd7a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d79f458-1e50-4d7e-894c-8bfa82cf9d59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d12ec8-b40b-4e68-b7c3-54fbee759463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "04dac827-a6b8-4e88-9b9e-9c601b793dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e5244d-c3cd-4f3f-a05a-97744e9fbb7f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5428ac80-34cb-4e25-94d1-212236f524c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eafb1d09-126c-4311-85eb-8ca0c663b567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6b29d8-6b10-46bf-8baa-60d8366ffe0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d7c40f7-6c94-43cc-addc-b69a47def210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9bcea3-c7c9-40fb-a319-2969088a600c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a010a64f-32e7-408f-bcdd-2cce37f7fb10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63a9401-fd6c-4607-9d16-7c266528f626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8782fa6-3a1a-48ed-9a2e-d9aaebc43f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a545c8d5-fdb8-479c-b00a-ae30b836cb87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1b9e4e-5b0b-4476-8a2d-ac966e599a38",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10482b0b-612b-40ea-9f5d-b04b518d47ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f48a95f9-80ea-4454-a39e-2d9da8415cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf415ff-1e6d-4d92-b949-f115ba949b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe5ebee9-4def-443c-bbf5-6a77358352de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d01a8a-f824-4727-a34b-2afb31d05bf2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16fe6486-183a-46cf-952a-bd4fe2a33c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49cd3b5d-6d73-49cf-8828-933bfa4c1f56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e20899c9-3f0f-40e7-8adf-2e1442433774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "676eadac-9768-432c-93bd-00db1cf3e6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3b0ea7-c91f-4523-b545-7fce9bf5040a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265b2c6d-0c77-4551-ad99-0d39d9b16306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a44e5ab-f703-4e41-b6a2-281f3930d8b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d572ea-3406-443a-a207-4c01f2cc55c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d20759fb-7efa-4f39-a430-391bd15da5f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60b5fb8-a358-4fd5-9c85-9981064fc8f5",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "046f0b16-9a74-4e55-9284-ebbd4bec1a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd2b232-f35f-401c-8d7a-ec1f1333ae01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f56226-9c75-441e-bf8e-a296a31ba523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "950f38c0-8832-4e94-a21b-efa5ffaf40ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313ca066-0d96-4fab-87c1-3cee2e4e9573",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e016ebe7-0582-450e-ab20-71bb8017a745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce137097-4f11-4917-9fcf-72fc0cc84465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0972645c-f8da-412d-be1a-ab18be17df24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f72173cb-d35e-40f7-849c-b4c183902c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887b2c06-afc1-4175-b7c8-6f6a6bbf7641",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87daca4d-fbb0-40cf-8a1e-a648475555e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ee236ff-0516-48c5-a133-a77f5f2052e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213391ef-ce12-4cc3-8347-3ba6c91b8d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "661f9c0f-bd73-4e74-a3be-b719d8abda2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a91692c-9be1-4830-9324-45600b316591",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a9b55b-4cc4-4cd5-bacd-bd2b5541f3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d56c4861-76c4-4d94-99bf-6adab9a68dbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b6ac53-5a83-4545-87ac-29fecfcfe1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6db1d93-b045-4ec8-a4d6-287346781939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "053b7b76-1a7e-4c69-af42-4c2180e6146b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc3d03d-6807-40a0-8515-4f5c38999cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1913ce98-8f4b-493d-b00a-0e25575cc383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7d5f94-bcce-45b2-95cf-cd0b9f404929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e54f587-2d71-4a4c-82f3-c04276fba566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe806f0-0e1f-4644-8b9a-272c963a3f9d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c8d117-bc61-43e1-9583-af6772cdc96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1fe948a-6f5c-466b-9b42-6674b480157b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ad60dd-c931-4e4c-9a6b-5cee0f974e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24a8b354-c0e9-47e5-81d4-b67a11d3bec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73df44e3-8e49-4498-9f58-5f907a292c15",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a96b8c-93d9-4401-b252-d615054aec58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f343035-0330-49d8-8fb9-3f6912681079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4841c90c-8822-4968-85df-a635d51eb5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a43ff4e-e835-4f98-89a3-e00573a09186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb1e35e-bf8a-48df-a3b0-0b3eee718142",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8197a819-7bc8-4873-ab3a-2ad74fcdf2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14c4038d-440c-4d88-8007-290f1d1395a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1728189e-7fcc-4e55-a8fe-57649ffbec0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9e70127-380e-456b-ae9e-ad40c0c39a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3584594-15f4-4188-a2c7-2a33f6308e65",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adab716f-80c7-448a-9c9f-1f9e47419979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ca8448-4646-42b7-9903-938dc8e545f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e09020-728c-46f9-9d0c-928b4aea64c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d46d99df-cb16-4506-82dd-fc4af33f77e5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a984b397-7627-43ad-891a-0cec70371c33",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "35b97fcf-ac5c-43c1-8128-119bbe9823e6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5584d03-d604-47b3-b752-61f4010ac0fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68336185-09a6-4590-8254-7a85cfcecb28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f17bd9-e7e2-4304-aad8-cbe4c01fc33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d754af67-bb11-4112-ba67-2ce7132e4fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee08c62b-cad3-428d-9e8d-4d54a5673556",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07911765-283e-4454-aeda-4774997fa201",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "7776bce1-ca85-41ee-8f98-500847e5c59f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e656132b-73af-40b1-a301-e323937d26aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ade320d-4711-4cbc-ba42-d47dd7424a4a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1508d76c-e6a6-4ceb-92ab-94ed0a0fce68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82dbe028-8488-4ccf-b83a-36c3bc39dec2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a33147a6-7d63-453b-a020-784c93abc3a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "232d1772-8f5e-435d-b069-91b8d64c7c9e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c7ab947-c289-4f8f-ba4c-63577554d0d9",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3bb7337c-e1fd-4ab3-90a2-8ced51df7532"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d49b0617-2ba2-4232-9fdf-5b5dc30a95c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b8d6fedd-0103-412b-a10b-6c531ed366cd"
            }
          }
        ]
      },
      {
        "id": "d85d42ce-1f45-40c9-bed9-e064810811be",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "20103a0f-b081-46b3-af9d-720b12a723bb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ec73c510-a2c7-4355-ad05-557ba67444bd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1dbde45c-72cc-4e86-aecd-d1d78ab892e5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d698e7-2cb8-43c1-8ae6-84d01314a842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67431185-9b66-4290-b5a3-2bfa22054c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f682bd82-2a9f-4337-9e7c-6b8151330deb",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93904f50-f3d4-4397-9206-c700c581bf5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61a2bc78-317f-49d0-b6db-14758aa81ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc24fc1-6e58-42a3-b9cc-f6c3a0490d60",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1064a8f9-c0b7-4cde-8b8b-cdcc0f798675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed069e43-66ae-4e27-b18d-8fd0f5b78dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deea856f-bf1e-4a94-bc6f-d50ad843de04",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "231be628-af18-4b40-b554-1eddae0f407a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f077f679-99dd-4b88-8e97-f3c0eba3fe64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd6a27a-4799-41e5-a770-bd69ad252425",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6f7c71-9816-435a-a655-aad418d5a6ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2be59515-7b30-4710-b2bc-5fd525066dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4719d757-f984-49c2-89f6-8b17a5a605b4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3fdeff-4de9-49ee-b4c4-d0e8c53064c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "005a4776-86ac-484d-a52b-e478becdbc18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b96d399-0476-4919-b864-f24f05addb5c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b582c5b2-4d8f-48f2-8fa9-0f248fae1c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6b8bf07-49f3-4239-8ae5-ad36beed129d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2fcb26-a130-4b68-9992-02e79cf26846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a772f5ec-2055-494a-b5ba-0129af06cc4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4459c73c-0e46-4dd5-9e23-cf0731a492be",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf50337d-870f-45fb-9fe1-b9ba5e48c2c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75020fc2-698c-4699-b1be-1026ee49f602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb791c5-052b-4dd4-babe-bcc4f7d83a0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48752bbe-0aef-49f0-a7ca-36489d29f4da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaadce3b-8463-4995-8eb2-bcc8990254bf",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad3dd76-6d03-4ad4-a03e-f999b2059118",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a702551-1140-463e-94b6-9bd67746f4c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ad04d2-e08c-4f05-8eb7-66409251c0bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f713270c-06ba-4885-ae67-71892c90c11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54065de-1493-47ea-bf25-7da2337ecc6e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0855ba77-4b89-425f-a67a-4f2bad2209e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70d19e72-c444-45a3-8ebe-7aa5df3317f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b77bf9-1eec-441b-828c-6bbcf6dbcd2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3350982-26a7-4e6e-a6b3-d2857a64c157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db684630-acd0-4ddf-8521-177f8826ef10",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173f1f23-761e-409b-a2ba-b4981c39f556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d3ffb07-cc78-423c-aad7-6cc9164d01cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e55bae-0638-49d6-977c-8006d19b47ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "073521b0-c56f-4cfd-b39e-6ed14f89952d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066a8810-9e07-4a8f-be21-c8d7612b275e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae58e077-be8f-4cca-be18-6360f995e367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "828aa1c4-45eb-41c1-a286-6e7bde3d4496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ddf447-c572-42c6-aac5-89e943f52c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d85e05f-26d6-4db5-ab6a-faee9e4d2608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffb13da-a716-425b-b0a0-0cf5be74ee5e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4d799d3-4746-4664-9fb4-cd199c664727",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0957ef3-ae1e-4617-832e-12f8d8a2cc7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3e856d-0a06-47f6-a9f6-7e3c7d4a7fc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e22261d-d2bf-404e-8068-efddfee75ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89a9ca8b-d2b9-4c12-8589-e7142149c561",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9b5374-85ee-4d91-9822-a1b2c31aa6b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37c638bc-90d6-4d81-b85b-b09810cfc190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4eff67-840a-438c-980e-911e793879db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "083f771a-d453-44d6-8427-0789cbde5018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5639338-e2ed-4857-b9b7-4e87905ff5d5",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a1d131-164d-4bbe-b476-f40e7848390b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e970e68d-692f-4628-86d9-8843b0b0f2ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c97110-9fe6-4b23-94b8-a8aad7cdc899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c9bf621-e356-4b2e-a8bc-a6ff7762be5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82375287-bc35-4ff7-bbca-d0a153ffc4c6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8408e6-2138-4376-8272-f22e03635023",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8578e4dd-aa3b-42c1-aaa4-c068a04c679c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e333d2f2-5779-4567-acfe-7a55a0039f89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "189c07dd-07b8-4fd4-93a1-96af01f65dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30644c61-9e7f-4a6c-82a4-8fdb14944e85",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b72e9cef-ada5-4bf6-ad9d-6bc61ac52e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a76e544-81a5-4ab7-b7fb-763cf670d747"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f759b4-bf23-4f78-9d68-d905167e7d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b452bc-8d3f-4d6e-891c-c2972c6e030f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a0d7143-86ee-47be-9bd8-49ee9f88825a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f58dd86-0b90-42b0-b9f9-abbba9a7509e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d65bcb-102a-4f4a-a1c7-9ebf9d2794f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "025043f0-f385-44dd-bccd-1d883fe26c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25a80e6b-cc2b-4871-9608-936d1b5254d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faad0bfa-e12c-4929-b192-d7dd4a9d910a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc132bb-4ba1-439f-a223-e9d4ecc4db1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a7c906c-212b-444b-b43b-7efbada022e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9668b174-ed78-4418-afb0-1811fe70c44b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71011581-7bbe-4146-907f-da4153fffb93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "291a3108-e663-47d5-9183-8904ad71bf4a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e94b862-de59-490b-b615-6b130b97792f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57479693-42b8-4db2-a0df-213a61bc357f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad242653-ea79-4238-9807-242f6467e387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c9216b-a5e9-45fe-98f1-59bbc2c6f351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a98048-71c8-4692-ac70-38d06a5da495",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8afd5744-6d8c-4051-8ee5-39df4346e48a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da1430fb-44bb-4cec-8cb3-3030ad4ba4cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92d5d93-b5d9-40bf-99b7-3f3e546194c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "418b56ab-a841-4497-9da7-fdc6b0f8b527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138280fe-8a16-4ba2-9b13-8be62a08ff4a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9bf902-8cf4-40ef-9af0-26caa9e50cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88355de3-4605-4662-b37e-c254fa072ccf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf49fa6a-2e74-40da-9cd2-ce260a6ef1b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29de88a0-1a90-4601-a082-56e762bbbfe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41fa1fe8-5685-4620-9af5-198484f0ab61",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3321852e-4d59-443a-82b0-a6f0e5e73f84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db0de559-1e47-4312-9641-16b4214a3e87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c960ca3d-2f3c-4ba4-8318-b258fa6468c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75374c7d-1d56-4f16-9713-b7d19cf25d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8207c859-7f1d-4c5a-9664-599f65a0216b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f3b00e-5e82-46aa-b34e-d20ba65043e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19a7853d-8c66-4c9e-9e29-3b06fef0ffc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "394f7948-1d00-4a5a-b664-d13c23b5af2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f351d842-043a-42df-96e7-d7cdfd027297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c034f63-bcb9-4d70-9fb2-5517490dadfc",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e87489-19a8-4124-a5ac-85d663409058",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4784830-92a1-4752-b1d0-ad07d3676eab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f947f78d-19e4-4e3c-af16-428601f3f49f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0143095c-c9e2-42e0-b7c1-3f1def33ed39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "affb26ba-6b1e-4ebc-b5df-6b8274cd76fb",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c4a2aa-ce70-4e09-8cea-965e6054ddfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8f39d3e-2027-4eb9-a814-7cc1d807d333"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "973f09ca-f6c5-4c77-835f-baece4dd1961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a6089d3-a705-467d-b530-605b4c91f0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4595890c-97bb-499c-9624-2dd48cac3c0c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbee0a43-0147-4a82-9dd7-4356b0131eb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fd01f6a-38d3-4b86-bb65-b14bda0e5edb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf726d1-da9f-4d6c-aaad-54d560b16f65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bd0ce3c-fc15-4e23-b19e-dba284688c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f7e3fb-f9a4-467e-9cd1-edd02ad104d7",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f376ba-ed73-4c71-9be5-a6a27bbaac91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41f12840-8c6e-41b8-80bd-201df0a6be80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d8b5a3-1a30-4631-a9f5-3956cd87b8a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee65960b-b6dd-46f5-a8a6-d1439b103c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d720d5b-320e-4bc9-9404-6f2e0f9f618f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d74022-d0d0-4f0a-ae7e-c5264334352b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0b5104d-d3c3-4542-b6ff-14f38e0fdbe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ea807b-acf6-46d1-8099-dd0ce4165dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cec7ab9-c012-40db-a771-d0a505e7002a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14793d2c-c374-4646-bdca-323b10dc599c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a0ef65-047a-4b07-95e9-8a7d418b45c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ff67085-de5f-4342-8529-04a89c6b0a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "789d3903-3c7c-45e7-9459-3109aebd137e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ea8028-7b9b-4696-956d-668cc073f7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9667c1c7-50c9-4217-8b16-46c76ab85802",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784c06d9-be9b-43f8-8838-793f96b6ccdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15b87d0c-75df-42dd-9d6c-488d78df081c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d98860-fb19-43bf-8031-ff259da26c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76c825c6-2dfd-4fd2-a222-ec2ea4f8eed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcac2417-70b3-423c-b920-27e2216f63e2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105a61ea-c3fb-4787-990d-8c652efa9113",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8c88e88-2cc6-4f39-9993-078c8b46e06b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc700ea-4b54-4e36-a234-ffc9a1c22f22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b94055e-9230-4691-85c1-f4d58037f245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11a23cc-5df9-43a2-a750-163199247433",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2499d1d1-0cf2-4773-9280-ad8448de9da8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "856582ea-7509-4394-9e8e-404650466efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f98fee-c437-4c34-b3bf-74962b1333c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad4d8e9-a8c4-454d-a49e-8ef174dda31f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c493d5-08ef-4eb1-ab18-5ec0980d6b35",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9657b7-e4b0-48cf-8523-5038a7c94c29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e049012c-7c8d-4803-a353-2c53002f81e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17bebe34-690b-4946-8e46-54f5d5646420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d12b1eb-7cdd-44bf-8409-2dbafd76430d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e79b8e-cfd7-443f-a0c3-ce09f3f9c27f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55e239f-828f-4307-af5d-303fd8aa0f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1341e11d-8662-4ba7-a0fd-e6859096ef0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bd3ed7-0dc0-4823-b582-1b40dedc5b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63828fb-6560-4846-9713-8c0a84c21454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4b7753-5dfb-4d3a-a3a7-5a36ba43b84e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca8aefa-d015-4131-9631-227894ccfbf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d3ee594-8dd7-40cf-a4ef-0fa99338083a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7f9176-133f-4339-b3c9-dd889356e298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848fc825-ff33-49b1-964a-3ff66b731978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3bf4ec0-113f-472a-9ac9-55a83aff000d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68161e5c-4385-4e41-8cd8-0c8b25c4ee59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39d5fc9d-ec99-42c9-8bbc-b633f0d45932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "688f6d75-44be-4cd5-ae02-a9e0c0e9e72b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46aa825d-1312-4842-9ca9-0bdaba0af9eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d77e66aa-3288-43d3-86d9-5f85528e452d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37005057-c085-4740-9617-257ca5280e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b523484c-fd9b-480d-bb7d-1b44c7d234f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49ce7db-4a54-4d07-9c89-7267b2573030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ed4fdd2-2e21-4ef0-93b2-d38d18d70f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fbaa0f2-646d-4634-859f-39e36cdb16ae",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefb5606-5ec5-467c-9004-a46223e6b198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de9a5fa4-0db0-495e-a1bd-b32b3a7a61be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16daa0b5-0139-4b7b-9044-787bd34bdaae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "313048dd-b986-4957-81fa-f870390cc04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83040e02-2f36-4e57-9720-acaacebdce52",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b944cbe4-e927-453e-9324-dd967a484f7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884412ba-d9fe-4c4a-8d30-ac097c3c8b6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7623b4-a9fd-4058-882d-c5ddd5069eb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b60bafb8-b1f6-4327-abe2-a3be042beb59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f71fbb2-7025-4d81-8b5d-0e1d69d459a8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b55d09-3d27-48d5-b497-673a4f53a600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd591a9b-6fa6-463e-b5cd-d1423bb1f1a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba68983f-e135-4987-9117-15fa987f0cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "346f4c46-58e4-437b-bf85-0d3f7a2a5391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc644c2-5301-4a11-a2d7-ef34ed2fab6a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb381ac-00e7-4d5e-8375-11a87a061172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd687eaa-9670-4155-85b6-be0651df2958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf7a802-f94a-4375-905b-34d65aa3c021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae8e34e4-5242-4495-b46b-129738b07465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7301fd1-758e-4bb6-b63f-5c3190e83643",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d572b03-c1c9-4bf4-a124-1d43d2f6a2bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27e3c8a1-3d9c-49aa-8d75-d755ee348c0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f78cfd8-8722-477a-8be3-9fb747d805b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bc18cc5-10d5-49f7-9756-5b9aef213774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601e727a-d304-4b20-bcd2-9f77daa1cf16",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebeca0d1-f39d-4147-a958-13333d6abbf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2417727a-027c-47c5-ad9d-3c10eed0b3af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a68b374-0d2d-4d88-b516-4defb31d3599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4b09a1b-2169-4c97-8b9d-2a7b124621dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a595d129-cd1c-4d38-8de0-f64c279889ad",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929e7ff5-86ab-4c4e-9887-5268062f92c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99187c34-5e14-4340-9ca4-1324944e5132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa7466d-95c2-4306-9491-3d8bbd29c518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82ea2ebc-d5c9-486b-a471-dc862d023d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2187fe4-fdf1-4be5-88f8-daa271eceb46",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2246698b-07f1-40ac-be6d-c416c6165427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc7c0c8-b32a-4f7f-a9cd-9f486e0bcee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96772af9-f065-4ca0-8506-75d8196ec895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56842ce7-2c14-49b5-83e7-56b01e217f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4008cf9c-be73-4373-9919-2751bf02d580",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c9b9ea-d60d-4c39-8a47-15fb17a4b794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f9c0c7d-06c2-4357-a051-12606f810d79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8217e2-99b4-420f-b6c7-f29f8a6a374f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88792f49-68f8-4746-b282-a2ddc08a16bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f580a89-f4f5-4bb8-8240-d6ff7b50ed6e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ec650d-1ab4-413b-bd0f-0ea5a6e37c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee74495-3cc4-43b7-8cb8-935ddb9e0ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6468888-b537-40f6-8aa7-0d657462f6bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8cc16c7-2ab2-4126-afa6-5251eeb9bace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4359fd77-2b1b-4f2b-9b8b-84bea841f336",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839649fe-f72b-464b-ba7c-8a795b27ad0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47342e8-c81c-4539-bcf2-c36da14abe3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f01eb95-c18c-4b37-99b9-7dac1ebd6cb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fcb36cd-9d4a-4f1b-b3e4-9dee5548fc60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce5fb52-b4a3-48ca-b52f-8601c3e083fb",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ae8525-7d2e-42d6-a549-e379c97f2e5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc0b1fbc-8f8d-444b-ae2b-b9483ed070e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96940d0d-ae63-4198-8e99-f18dc471b3ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c13781e1-d910-49c2-b3cf-26dd5f7e3bb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31644bc2-cd38-4c26-a23c-d22e384582b7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07cfcc8-b3ed-41f0-bb59-ac8f69c86d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fdfd1c8-ff01-49dd-ac40-ce5bac2154c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "604d4b71-fdd6-4bb8-a3d4-78bb4781fc44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4f4bcc3-44ee-484c-aa13-a0218137d0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3cb267-ac33-4d9d-b170-8eac42d9c279",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf59f20-3b4a-4ea4-8792-c0e7f2a84170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1832819-9584-4d53-b544-d724eed712b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9b5d98-eda1-435d-baf7-f0c05b56dd50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d19713a-6c2b-4fe5-9139-3a97c244b86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d49cc38-6837-499c-9064-3419d748c1aa",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8bfc3d6-12ab-4e58-b9a9-8d140a3b64c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c6c544c-2b98-409c-b2ee-cf046244f4bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c80651-dd79-49ed-9600-d7c8948eb7cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e841cbac-1daa-4182-8c43-fbc449c17840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34adb152-fc79-40f4-b7cb-ffedd4c2c02f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58fd650-354b-4569-a827-b2a267131c70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ead262-af28-4e7b-934b-66fbd13b1b1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a2c6fe-c2fc-4967-b646-c78915058ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41d69468-05a2-4bcf-a723-b952ced83f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95163695-ae9b-4faa-81fc-6d9feb8c51cb",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa678430-203c-438a-859e-99fb7d91f35f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "969d5508-b2e1-4386-8765-ad35bc28a9a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47701561-12f3-42a7-890c-32345103ed94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63d4dffd-d363-4a22-a84a-d7ab5ae4420a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0dac08-6400-4205-96d3-65de8f1b01ff",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e83f33-8dbb-4c1d-be24-df0ca650e360",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b91e50-d4bf-4f4e-a8e4-17b9f8850724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cfa3bc-8d22-430c-925e-9674d8e1b845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6993a24c-52c7-4f0a-a8a8-28a49cf78ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e64ff1a-4670-4cd8-874e-4a428f3e398f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e2efd2-d1f5-4bc9-8bd0-3eab0a77ee8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c3076a6-22af-4c5f-9f22-ea9b1ed17acc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1cc9a5d-e6bc-4e50-92bf-0a44db6b21a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc199204-a036-4cc8-975a-c16d6d9fe377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44ff16c-1ac7-4b99-828b-007d4c8360f5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55707ae9-52f4-4d8a-ad55-323d102a1604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27268652-705e-4807-90c4-aa4adc31dee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36dc95a2-8cb2-44f1-bbd2-d5827de5d459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33177f39-ede2-421a-92bc-bdc590354676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a68e134-9b28-46f3-92b0-173ee2d7eedf",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f231e1-1dde-4ca0-a5f4-206f81961fd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "280c1969-1e2c-4d03-aa42-04fbb5cfaed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a856b2c-4451-4bf1-bdef-b1a646ccb575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aca713c4-9efd-498e-9a3f-0e166c64b4ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7c9906-ac1a-4086-88c2-7bdf2c3f6ed5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed06918c-ecf8-4811-b2fd-ec5a03d67e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86602bc9-47c3-4afd-81b9-d77b1031493d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4f28c6-bea3-44dd-9fcc-1b1ecb43c8a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f250e7e-5a07-4026-80b3-b1c3d0bbc36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0198b21-52c0-4474-946f-2da447b73c67",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19452ad1-0fc8-4e58-99d1-cae52cd5be8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a03f322-a842-443f-afdb-0076f18a9a93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f518fcc6-ef05-43ad-aa7a-92c51a0cc93b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6539b8a-3911-406b-9c51-cf288c92f698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f940090-9139-471a-ba61-5620ba361361",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d390634-a1d4-40dd-bf52-f996bd623113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb6076c7-d92e-40ca-b510-8e6c04729d0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43abe060-34fc-4945-b835-35b3591bf160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b2dc88-0dec-4b29-bda7-17df3d8add48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521c0397-e0d9-4964-ad90-8f5f0e9547b0",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afdcbaab-c81a-4dab-b090-598c7bde6b5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8d37546-76a9-443c-894c-b96ed7a1513a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c5cc9f-cb8b-4e2e-9ad8-84c49df5e7e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61112518-d716-45d1-b775-9f2701114be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ce9cf7-cb1c-45cc-a0e7-c25ddcac23ed",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07e5304-f505-444f-9e95-dde857653dca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cb9f80c-290b-4a0a-8176-2a98f1932d0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9fffab-52a4-4ff0-9722-be4b398bad1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19604bad-d39c-4505-ab56-5f3a638ae75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a29046f0-f407-496e-922b-81fc6b8f7964",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6f81f7-0dcc-4aa7-8515-9b5fa3e875dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80be3832-dc81-4ece-992f-f4f7c1b94b5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1ba6e4-23d8-414e-b328-572c36d3031b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b70ed1d3-2916-4c01-b848-389af9007c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af97327-4b53-4bb7-97b3-24d5dcad4858",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96186c4-e0b4-4c3d-b24f-e36a0965e3b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33e161da-29fd-49d4-91ea-b1172f4b21db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb06d26-8c37-473a-9d91-9fc35c378d31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86f72ce5-ca60-4ea4-9a6e-f29047022020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b64cd3d-c049-4d6a-9d8e-1f1011548252",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199118c9-1f44-4b14-b5ad-0dfe21b60a93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f464743-3695-405e-960f-f671b43cf1dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea88df55-7d69-464f-887d-c789782d1b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b806228c-c5b0-4b4b-917e-40838e113147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a49e65-a365-4201-92a8-2813318bea85",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de10ad36-c71a-4a82-b161-e501259a4916",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6ce1441-4fe5-4913-9a2b-2b9e752338c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18284c04-5ebb-4346-8a2a-a1905b0fcb62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15979856-9743-49d2-b8d7-febed957257e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ebe0fc-9b6a-49f1-abbb-356e1f24564b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8fafff3-d90a-4040-8a26-266534ea0277",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60140beb-f4c9-4b10-b476-adf19487c8f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e2df71-e55b-495f-ba19-b78d196d3aea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73533790-f6de-49b3-a578-29842ed54e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8545573-d833-4145-95aa-a4ef1365bd85",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b39602-1481-4626-baf5-005e83279ac2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8f88b21-800a-40b2-b714-fe00112141a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "880197fa-713e-484d-9c47-4c3c89c8b737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d82c9d7-d9cd-4d43-b8bb-cb7df9fbf86b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df90d30-1818-4f85-a0e2-8461518a56bf",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d567ecb-c9ea-4b20-b839-2f8c6f7552cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ab3687b-4632-4d36-840f-4046909dd577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e20b7e-249f-4120-9db4-b5b52da7db0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18936850-b8ee-4acb-a1bd-31b1f2d3227b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceec6d39-8a32-4f7d-ab56-be3c59bf787a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17368ff4-bbec-42f9-8442-d2cb6a12007f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a7bc4f4-47c4-4d18-8876-ecc7f405f41c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5240da8-69d5-4e2a-bf31-c872869cbe1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a4d6dba-d624-4fca-b66c-1577a5d2244a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe5dfcc-f5cb-412a-afb7-bc6db33d3fdb",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923c833b-34a2-4852-8160-e87ef047f405",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e145b393-4c5f-467b-ac2a-87f12de2efb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87bd9a0-1aaa-4168-ab26-596692aaabeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "598b755a-6b8c-40f4-843e-2fa53497e059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22916d47-10ab-4616-99da-c9c7e5b2cd0f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd1147e-92bd-4ba0-a74c-3dc3d9b1bd04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27876283-b4e1-414a-a8fd-feaf9cce91cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10edfd07-3820-4de7-8718-8ee8c3dfebfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98c91a99-db55-488b-8ceb-13347bffe967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32764f0-8feb-4d48-a20a-a9a1494240b6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ca0f4a-863a-44f3-8d1a-a5f4c08c8f90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17a48611-4314-4b2a-92f6-90fd72d8e00d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede0a44c-9142-4678-9251-ade14c08ea73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5632f2a-3e7e-4ca3-99b8-496db6282319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b7e5b2-cee1-4563-a490-2358e0dacb34",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8263b46b-bef1-4511-9ada-dcc20dac33d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0be05a8f-5be9-4989-8dd6-c6ea5c7d32e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5c36ac-04fa-4f65-bfef-99028dfd4dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1234ea07-0167-469a-a561-be5938035016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eae02a3-e1e5-4cb4-8938-d7392a0261b4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9503f05b-5ec6-4735-bfbe-50f275ab0479",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb0c2438-36e3-4807-ae23-be8dae49eeab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "652cf363-130d-417d-a64f-8c32bd3b8164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edba6e9c-8e9d-4894-87a6-41ff243ab330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3688ae-f8e8-49c0-8859-4b3704179d79",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e45ae9e-ee69-4234-92e3-f0c76848d34c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51a38976-866f-4b11-899e-5662bf55e000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af645c4-face-4ffc-b16d-57f1ad1a644a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "561d2c9c-3b84-42ab-949e-5cf1bc19b5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e86772d-c654-44d5-b570-a85aa1558f99",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8cde7f-038c-487a-9272-9164f6f86ef4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff0d4d82-0dd9-4365-a2e0-860b0e61cd34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffda52dc-0b89-4884-a191-bd948c226ec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56482181-9d74-4606-bc61-af84f2fc3459"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36f881d-c09d-46dc-b634-83810b58a8ae",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279e4a81-4522-48cf-9ec9-654b1ce7d8a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47073568-0e81-4e84-89df-1d4ce276a3ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3616b52-344b-4671-aa1a-517e1b668737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7c4e5e5-019f-4260-912d-9cdeb1a95bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9eaced-75e2-4741-baa8-2dde5ff45dfa",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90f7dee-7204-42a1-acd2-6fc4809e2867",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4c82b44-4863-4841-819d-8b3c3504c1be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f3e6e0-094d-4204-86c7-e98b250b6ace",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4040752-3787-4c5b-8969-f0f252761ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de58eed-df45-4587-96f4-6bc86688f9c6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b9b4fa-a959-4a0a-b0cc-9c8fde624952",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "505a23ad-9c86-4194-bae3-94ac5ec16ed7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1643b19a-ea42-4eec-b9cb-65a8ec8a206e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "639c65c9-6083-44a1-994e-2cc10c168b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d002add6-cf22-4fc8-9250-d162b975c0ab",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe87116-5fb9-4a72-af95-49808a4c9951",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a5d7ec2-53da-4e11-ad99-a0f7ccc45c4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "065329ae-6475-4c99-8d1e-365ecb8fdd29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5556cb0e-4adf-4aaf-a31a-3f672e6eb0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad602ccf-43eb-4645-a4c7-44bfb835fbdf",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0b68fa-dbb2-4bb3-a597-739844eed59d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84eab5c4-49db-4460-a4f5-e6f6ad08a469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "181f0296-c7b5-48d6-9ec3-5f43bb9bf692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4538644-c35b-4000-b0b1-b79fe1896d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a49325-2d03-457e-bdba-36a55d34d520",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae007242-309d-49fb-9965-15044864a835",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "972bfbbf-36fe-4998-8b82-abdd40d2fd4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e2783b-8ae6-4e5b-ac4b-0d0a957c7547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c9ac49-2079-4c51-9710-afdad07fde28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9527098-41f6-431c-a8a1-1946c20797b5",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a23f20-e2ae-4401-ad63-0a7c8cdf96cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f15778f-08ea-4c80-9f7b-01463f7818de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e98f50-4130-47bf-a5d4-f317be8a1569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7316e9f0-e498-49a1-8015-663044e9e48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988e0507-8e24-4c72-9ac9-2b63ae44785b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88bd815-f9a1-49e3-aedc-462594dfa9e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "664d6026-d6e9-4385-8300-cf245b1c92ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b008a94-8345-4c5d-a622-cd757dc0eccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e238affd-a057-4c10-96ce-6e81c5ce42da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1604ee41-9452-4017-a8ff-7b310bbb061e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0ada3d-dcd2-42c4-af53-c21093f3aff9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b17a87c-2ab7-4546-b254-ea066bf08cfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "635fa0bc-eb28-44ff-aae0-9d4d6f4f12d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc6b122-d990-4c85-9695-d3e617710b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16d8b1d-918f-4507-aeb9-8d1edbc85d43",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb6743b-84cf-401a-b2ee-f1135c39537f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8385a556-3896-4d8e-b0d1-61335e1ecdff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ea15a2-458a-4f26-b69b-fef97ad23b8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7dc899f-fd6a-4057-91d3-1bdfceea4b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ac357e-c386-41df-b78c-68eb4d13d785",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8317b27a-4d42-4e12-8abd-0390a853a1f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1d97f6e-e6c3-47fc-afcc-ac2040ebe1a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dcf2b75-679c-4b58-921f-1be450577e74",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e46e352-1696-48f1-8c4c-711ab6f5a382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe68129-40de-4d21-9fd6-945bd31654f2",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eed26a1-46c8-4a72-8587-17051c241d19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fafdc337-d8e5-42fc-bb71-36ed51ec3caa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43041d42-65ee-4470-a7d5-bbf4f6d6f382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72a7928b-3158-4efb-ba91-8df4d6c56d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d6c2828-427f-4695-9d38-7b4b8588d3b6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13de58f0-330f-44e6-b325-aab592a367c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fb583ab-b59e-4eb6-912f-f8915874b3b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ef60ea-d68b-4972-a536-e2f3ccff0045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d600e63-89dd-4794-b6c2-223f78852cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b756db-626b-416a-83e8-8d9e77e9b3f2",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abdaa729-24dd-4857-aa07-15a64ba92cbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b207bdbf-6b23-42b8-969b-a6f4bb3e1ec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c9d1b2-5024-49c1-a9df-6b357e613cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4313ec64-d480-423a-b4fa-410c1a2e5ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ffd1c4-d1d5-4689-b955-495a5dea3c41",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c20f6b72-04e7-4cd5-88aa-ff6d83b1cb6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb64e3cb-1ad3-4c3f-a816-33c2757e8278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de4a8de-b41f-4bb6-8d97-a2bff89bf3e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b5b2a29-75c7-45cd-9d9c-6cab5e5783ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a87425-040d-4654-bc1b-520b9f70956a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e82569f-2c08-4b83-be48-fa6212aad5c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1107e1eb-847e-4fee-bdab-f7216dd0ad01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7d8129-80ae-479d-a7e5-b2cc2ede23a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbc90db4-0f46-4508-8799-e2220e229ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5855cbc0-3791-479f-89ab-689f3e943623",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b231cd-2d9b-4c7c-90c4-e879a07792c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "295297f7-2906-442f-8b87-7f4c3545b552"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a816d7-3091-462b-814a-a928896c3af8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66783f5d-d4a6-48d0-87ba-f824bae2af6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0172c90b-3ca2-43df-a470-1d573f7b32b5",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032941b0-31ef-45a8-81b6-1ef04b2c3333",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39f22403-fa3a-4f38-bba4-be689b0ae7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e585a228-19a4-4826-a88a-a916fe80eb34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5452d6-3af8-4b31-a032-c47f19eee8f7"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d98371f0-9e6d-4d63-9d77-ae3b980ca88f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b83fc6c-6298-46e8-9ef7-de32372df711"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "216abcc5-e6e1-4acb-b5e2-0d9690eaddd9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fa434716-0f23-4b3e-a6c7-89d4a31cb887"
                    }
                  }
                ]
              },
              {
                "id": "8f877f54-0652-4da2-b265-7663b2194aa6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3437b56e-5ce8-43d8-90a2-d7b19c174473",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd007d2-1904-40fb-bc14-8fd2c473cdce",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7573c73e-80a8-458d-a6bf-1df1d393ce29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3cf4450-4206-453a-bc3c-81e84342bbcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a116196c-c64a-4f40-bc42-a743f4059a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0865df08-d3dd-49e1-852f-38fa447270f8",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c230d3e9-0a99-4b86-bed7-78f71e6ddd3f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0236b05e-c008-40f1-a896-de71ed82f5a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1906e3b-5557-488f-ad48-376fd4a800eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd01db5d-186f-4480-a8e7-08cfdba64c95"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d76fdc9-f51b-40e1-9e84-020c6a33f766",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "340fa221-996e-4a4b-9d5f-62185fb918fb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8be8338e-6771-40cd-9b65-97fdc39579a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "598c8ea8-30c9-4350-8e21-2c4e7c116099"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "6a70427a-671c-41b2-99bc-1f344f608662",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e4a5ee79-5412-403c-ac6a-9d07d9a2a848",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2e495fd-2c1e-4ccb-b9b3-cea1e2176b2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0065c886-0564-46ab-aa33-ee1273af21da"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16b1b58b-69c2-414d-bf6a-ee07eb0fcc89",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6a2f84a-e77c-427f-95c4-96fb2769844c"
                    }
                  }
                ]
              },
              {
                "id": "99e073be-7049-4a8c-abf0-549ad980c682",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0707acd3-6eee-4341-aad0-ad3ac38e91c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93a9e0ab-3391-44f8-99e5-f6fb4c5c5cf0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4379b03b-90cf-4c37-83f1-2bcfdf8fd805",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea1f56b1-a9a9-490c-89f8-937d76257ae9"
                    }
                  }
                ]
              },
              {
                "id": "cf0b46e3-5e80-4a49-b75d-29caf89755f2",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1f303e9-7107-4c8d-a724-cd7d989d292d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fbe01ad3-158e-4969-826b-00b22e93fb47"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ce07a42-8c33-4b39-a863-fee566a6a956",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae42dd9e-59d9-4a23-adac-d594c1ab2e60"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c162ce9-0382-4457-825c-240e937236aa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2d800e94-b4eb-462f-ba7e-7db5ee43c94f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae8688d1-66c6-41e3-928d-b0be7489cf01",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "00f30838-cd20-4dbe-a178-9443f4fec3e2"
            }
          }
        ]
      },
      {
        "id": "2e06dd63-7d1c-4c39-a16e-9c50c8fe3f26",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "794fecc8-2f00-4425-babc-805a45b46621",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c9e6077-b555-446c-bd75-6e92651d27c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c1296eaf-92a7-4ab2-a1a2-55453111e0ac",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25418f51-2da1-4f06-bdc9-66e0029f140f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4a28285c-7065-410f-bd7f-26e269264f61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8b0f98-0c3f-4192-8248-e3ac922a2672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77cc9010-4a0d-4b19-906a-4f4f2ec2912a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65697d1e-fd43-49cd-a817-e4deebc972cc",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8be1b4-9d23-4a11-90e3-2e36db70011d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "15addb52-35cc-463c-a42c-ed6f1df11276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75945dc3-c6ae-44ff-8ecd-d2f6e249b429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7343b412-368c-4dfa-a350-13d9b4b5e9c6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d1a3cf8-b415-4992-8d9e-d848ec0d2612",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20d1522e-9ee8-4c3f-b3e0-44e4cb7fbf8b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3a290e3-3d0f-4b82-babb-04b845f3803a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9136efb-8c9e-42a3-9e7b-a7aec449a740"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c740b65-11f6-413b-8e06-fcf358aaa6da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "af568a85-7b30-4bcc-8376-f8795520359c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "895ab5f8-9867-4385-8dc5-58bbd85ea07f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0934e25e-028f-4dee-bdde-8b70747b3477"
            }
          }
        ]
      },
      {
        "id": "627a861d-2f34-45c8-ba08-bb6ab2161d56",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9e470c89-4a20-4496-bde3-9eb3525a4d19",
            "name": "Negative Testing",
            "item": [
              {
                "id": "92cb5b40-5e6b-412f-80d3-550be78614b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11dd9a3b-44b0-4b01-94cb-e27158addd22",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7bc8052-4964-4832-ba97-eb920ebb34f3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "433d5feb-fe48-495b-ad63-366127d4b949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43981b1-d809-40b1-984d-0eb5b25bb9fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95fb3d35-ed4c-4e74-a0ea-1136c681cc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c4c440-2150-4d78-8f1b-eaebfcb32bdd",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecf0fb9-715d-46ee-ab4e-968da3385083",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "116d5ac3-62b3-4f7f-9af5-1d6de533b2a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d85512-13b1-4be7-b013-3140a01d1a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1907b812-8700-40c3-b243-6bd45c5f1476"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb55f75d-296b-4abc-9352-777b92ab16ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "687fa264-afcb-46dc-a0ef-068994d0257e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7287a7d1-436e-484e-bc80-bd063d92a44c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f349fe7c-5c8f-4229-8e62-34f4fa22f282"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f816e58-fcfc-46bf-938e-a27d5eaa486a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ff3e4c3d-fcd3-4f3f-8e45-48b8063d38ed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c221a97-aa94-40bc-9371-0275f2ee8514",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f32b5dc2-3703-4aed-8c64-f3293b11b8c4"
            }
          }
        ]
      },
      {
        "id": "63581f14-d49e-4c35-b86c-db3c5f6671f3",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6497432f-f71b-4cae-a214-051e1b39c59a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b8b90e1-61e2-4605-ae15-1acb83ff7ecd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bfb04970-a86b-4187-bdd4-aac415b8bd23",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e31acb-c7c6-4ad1-a78a-72d803662549",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "231134cb-f0ac-4e30-bdd3-a46a8d25aec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "265fcd34-58c3-41d2-944f-3a4e94d36cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12e3400f-6c88-4431-89b0-e299d7e1760b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac84928-46dd-4ef9-b57b-c9e7bcbcf726",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a49821a-60e2-4e9d-a5aa-833b83dab3ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "640c8af4-62d5-40da-8c89-05e6b961f3f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f28176-dff8-42c0-8e58-94e1471399bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "381d1b3b-10e5-4b61-bb0f-a7856784757e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aee1aa45-716b-4ba0-b854-8eda6466d5d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f61451a9-91e3-4ef6-8be5-ce2d6fb9da22"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfde4ac4-959d-423d-ab76-531dce034e78",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ec00175-8bfe-4c30-98ee-fa31b5d42c57"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "374bfbe6-828f-4be9-a1fe-3e4108af07e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "290755f0-7190-4838-b09b-c035416234ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "10784581-8536-4f01-8465-606f2bfc0b24",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0627154f-5179-49f2-92ea-71632e421a50"
            }
          }
        ]
      },
      {
        "id": "64fe9b11-cc81-4f25-b904-46d33c7e2d1b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3bd0db0-a622-4e6b-ae2d-cb1acea58606",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0414db58-b2aa-4699-b52a-a8f9d16c3070",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9a3151ec-0e22-4c79-8f9e-f4f140399b1f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dbe321a5-a1b5-4a63-8052-20bc06459e74",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2a6a5c6-75c4-4252-9fe9-eab0bfda5c4a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 505,
        "pending": 0,
        "failed": 103
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 85.5153846153846,
      "responseMin": 18,
      "responseMax": 617,
      "responseSd": 99.36802106043703,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1668214102637,
      "completed": 1668214135497
    },
    "executions": [
      {
        "id": "e4370364-8d98-4940-b56f-96d06cb7fdb5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "41b911ad-9a19-4703-878b-1eaab65a290f",
          "httpRequestId": "990dc2a5-2504-411d-9300-7c265b4c6cbf"
        },
        "item": {
          "id": "e4370364-8d98-4940-b56f-96d06cb7fdb5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a4cd3739-9a32-49e6-b5a3-0ab93924d5bc",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 0
        }
      },
      {
        "id": "37cf5d33-580b-486c-810e-f533d38445d0",
        "cursor": {
          "ref": "a0f342a0-b654-415e-9d69-50d7f9a7c7fa",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7d692dc3-6f05-458d-8966-4f3068d0a701"
        },
        "item": {
          "id": "37cf5d33-580b-486c-810e-f533d38445d0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5159c731-7da2-4c04-85c0-7c525418199c",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "5089ea9c-50d9-4b82-a218-c77d66b96ecc",
        "cursor": {
          "ref": "cc5f7f07-1b0c-4a3c-bf45-eb9dfd117d1e",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "38e3e10c-9434-496f-9c0e-cdcc7ebadcaf"
        },
        "item": {
          "id": "5089ea9c-50d9-4b82-a218-c77d66b96ecc",
          "name": "did_json"
        },
        "response": {
          "id": "5a741939-b036-4170-be3d-5cddf89a8f76",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3565ecb9-cb27-4fb1-8aff-90a2d1d0bbb6",
        "cursor": {
          "ref": "1ff7bfa7-66bc-4a84-beb1-401b1a383de3",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6bd490f2-893d-4351-86cb-0e03725d618f"
        },
        "item": {
          "id": "3565ecb9-cb27-4fb1-8aff-90a2d1d0bbb6",
          "name": "did:invalid"
        },
        "response": {
          "id": "71b48400-3d9d-4a53-92ef-b5b789629c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3565ecb9-cb27-4fb1-8aff-90a2d1d0bbb6",
        "cursor": {
          "ref": "1ff7bfa7-66bc-4a84-beb1-401b1a383de3",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6bd490f2-893d-4351-86cb-0e03725d618f"
        },
        "item": {
          "id": "3565ecb9-cb27-4fb1-8aff-90a2d1d0bbb6",
          "name": "did:invalid"
        },
        "response": {
          "id": "71b48400-3d9d-4a53-92ef-b5b789629c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ce7069-6e95-431c-9e2d-a7df88e5af88",
        "cursor": {
          "ref": "e40ec923-4dad-4c90-819b-16a36e9b308b",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2ff26a48-d76d-4728-8dcf-39a8aa062f9b"
        },
        "item": {
          "id": "d4ce7069-6e95-431c-9e2d-a7df88e5af88",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "8f5de8e9-2066-418e-83ed-1bf5cbe8fd1c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 131,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc766793-d3ad-4295-9923-bf1d85c97baf",
        "cursor": {
          "ref": "cbb54823-c4d8-4852-a177-c3c9ea43dea8",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e1907acf-9370-4e8d-a85d-8d1644f8e027"
        },
        "item": {
          "id": "fc766793-d3ad-4295-9923-bf1d85c97baf",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "aa0fcf45-c9fd-4202-bb7a-72e806b431fc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 33,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185d647d-f116-467a-9928-f4710a319cca",
        "cursor": {
          "ref": "138085ca-6cb2-44cc-887c-287bdfad59d1",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8a9404a9-8095-483f-80e4-f1db39856cec"
        },
        "item": {
          "id": "185d647d-f116-467a-9928-f4710a319cca",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0a601b92-d25e-490e-847f-252c24d93985",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed51241-8eb6-476f-bfc0-1c0ba80313dd",
        "cursor": {
          "ref": "f1530883-943f-4237-928d-f6360b9de85c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9062350f-e72f-4477-9016-9401cb95ae95"
        },
        "item": {
          "id": "2ed51241-8eb6-476f-bfc0-1c0ba80313dd",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a12637c0-d122-4ba8-9cb0-191241ce7a10",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed51241-8eb6-476f-bfc0-1c0ba80313dd",
        "cursor": {
          "ref": "f1530883-943f-4237-928d-f6360b9de85c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9062350f-e72f-4477-9016-9401cb95ae95"
        },
        "item": {
          "id": "2ed51241-8eb6-476f-bfc0-1c0ba80313dd",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a12637c0-d122-4ba8-9cb0-191241ce7a10",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d14f33-ddf4-4b6e-9427-b356e1b8e6ae",
        "cursor": {
          "ref": "8cb9f247-34a8-4b1c-9007-adda555a67b1",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "986ccd45-2e05-46c5-88f5-eb7457c73f55"
        },
        "item": {
          "id": "16d14f33-ddf4-4b6e-9427-b356e1b8e6ae",
          "name": "identifiers"
        },
        "response": {
          "id": "f9a2dc37-593d-4efe-a043-213b1aa419a5",
          "status": "OK",
          "code": 200,
          "responseTime": 188,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d988292a-9942-4b66-989b-b3b8fe5d5cd9",
        "cursor": {
          "ref": "9e3aafb9-ba33-4a49-9528-d54c63c7f2d7",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "71a3799f-1359-4092-82ea-8a557b08b80c"
        },
        "item": {
          "id": "d988292a-9942-4b66-989b-b3b8fe5d5cd9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a08285b5-a320-4e2d-9240-ecbfb41116fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d988292a-9942-4b66-989b-b3b8fe5d5cd9",
        "cursor": {
          "ref": "9e3aafb9-ba33-4a49-9528-d54c63c7f2d7",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "71a3799f-1359-4092-82ea-8a557b08b80c"
        },
        "item": {
          "id": "d988292a-9942-4b66-989b-b3b8fe5d5cd9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a08285b5-a320-4e2d-9240-ecbfb41116fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad4605a4-a8d3-4a8b-af31-b4dc129fad25",
        "cursor": {
          "ref": "1e8a7c3e-9237-4f99-bf71-0f29b57c56db",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7b8a4f3b-e8b3-450a-8511-92ac561c66e0"
        },
        "item": {
          "id": "ad4605a4-a8d3-4a8b-af31-b4dc129fad25",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1fedee4d-cb0e-448c-a329-4d51db011dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f4735d-d4ba-4dc4-b936-82d4652dffbb",
        "cursor": {
          "ref": "db57ba09-953e-40a7-95f8-32938766280b",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ea26c778-92f3-4650-8c53-58a74a1ec60d"
        },
        "item": {
          "id": "c5f4735d-d4ba-4dc4-b936-82d4652dffbb",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1188d311-f191-4a5d-8fb9-c440324148bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf8d553-07b4-4775-9b0a-d9b27a339f72",
        "cursor": {
          "ref": "9cf76f6a-0799-4e1e-b153-85e5fc0079c8",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "00b77fd3-697f-4f59-b6be-85dc83c7b6ed"
        },
        "item": {
          "id": "ecf8d553-07b4-4775-9b0a-d9b27a339f72",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1f53328d-2ed1-4c4b-8106-e9d87dc65aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ddb1977-2f9b-47cb-96af-f9a1e5a4ca2b",
        "cursor": {
          "ref": "c8b1bfe9-7cb6-434f-9be4-2bf1c33b6ca8",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "563e02f2-e44f-400c-933b-2cf68d3fd26f"
        },
        "item": {
          "id": "5ddb1977-2f9b-47cb-96af-f9a1e5a4ca2b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c73ea7e8-c596-4367-a287-34ecf06e36f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ce5ddf-fb4b-4d05-b9a3-4c10bdea3269",
        "cursor": {
          "ref": "8e960188-a6f2-45a5-996e-1714553f73c2",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "cfce918d-e270-4167-9425-597a76ed44c8"
        },
        "item": {
          "id": "d9ce5ddf-fb4b-4d05-b9a3-4c10bdea3269",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "56e30910-fc87-440e-b29f-4fd1b344b60a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8bbe64-c8cf-4eb9-85b5-fb3ebf052828",
        "cursor": {
          "ref": "72c14b07-653f-49fd-a55d-1738ce760e2f",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e4e1e26b-6fdc-4386-8726-972c1dcc7f91"
        },
        "item": {
          "id": "1d8bbe64-c8cf-4eb9-85b5-fb3ebf052828",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "dfc93a15-8d16-4e0a-b79e-fbd2b1e15890",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "68475e48-59c0-436b-9936-d4c3c054f7da",
        "cursor": {
          "ref": "bedacda5-7ce3-418a-a856-33a24042e924",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ff35d23d-074d-4d4f-9f93-3854f16532d3"
        },
        "item": {
          "id": "68475e48-59c0-436b-9936-d4c3c054f7da",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4da8b04c-410d-44cf-ad34-2dcd47dea81e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf98ae4-6476-4ac7-a9ee-0e14fc868754",
        "cursor": {
          "ref": "6161d509-2ef6-4df6-a9db-02748454b271",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0e142733-7d03-43f9-a0d6-44941f7a2925"
        },
        "item": {
          "id": "bbf98ae4-6476-4ac7-a9ee-0e14fc868754",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "15bda52c-7fc0-4c4f-a4ab-43345b3abf5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97eb5469-ddee-42a6-a792-8bd4ef40ae25",
        "cursor": {
          "ref": "2f89d18f-fe9f-4e7a-9850-7dad8f67bb17",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cbb04faf-06b4-45c6-921e-d202f3652214"
        },
        "item": {
          "id": "97eb5469-ddee-42a6-a792-8bd4ef40ae25",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "de6c5e78-86c6-4ad7-ab45-0e3ffc1667d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a657436c-2ed0-49fb-9b1d-dc96eab37f29",
        "cursor": {
          "ref": "6f8cc7f1-f5b4-4e29-9296-c9bbcd48e186",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cd576007-cf0d-4623-a4a0-452052fa4781"
        },
        "item": {
          "id": "a657436c-2ed0-49fb-9b1d-dc96eab37f29",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "08f4c555-b3e2-4159-ba1d-03d71d64ddda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cafcfb02-6b0d-4fb0-9d01-d0bae0b787df",
        "cursor": {
          "ref": "eb273a53-a69d-48e9-8d6a-8385c13a6fea",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c485ad46-9f2f-4704-87f8-9e47d91467fa"
        },
        "item": {
          "id": "cafcfb02-6b0d-4fb0-9d01-d0bae0b787df",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c166e205-6c99-4fd1-8556-db4030ce3865",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 609
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "b6d331eb-02f4-4183-9079-5994d067b060",
        "cursor": {
          "ref": "6ec4ea2b-4273-4a61-b6d8-490a4ef8346a",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3e99340a-ce73-49f6-be5b-b5477d0567a6"
        },
        "item": {
          "id": "b6d331eb-02f4-4183-9079-5994d067b060",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7459407e-5952-4fe6-86a7-d5937b9cfbd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3426c7c2-6de3-400c-ac11-3903f7045ebe",
        "cursor": {
          "ref": "c7f0b99b-0465-48b7-ba37-6e9129d771ea",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9c3502b7-c047-4de9-93a4-15fdf988878d"
        },
        "item": {
          "id": "3426c7c2-6de3-400c-ac11-3903f7045ebe",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "917536d5-88fc-4e03-8fa4-0dde33fcf598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90fcc51-7c98-4e84-8e8d-f7fcab23488d",
        "cursor": {
          "ref": "c705843a-e220-4150-b318-1119ac555452",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "01255eef-ff25-48dd-8904-fa6721ecd7ba"
        },
        "item": {
          "id": "a90fcc51-7c98-4e84-8e8d-f7fcab23488d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f5f5f2f8-8ddc-443a-9a0a-9f34943ffcd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f02ca6b8-d79b-4455-bf81-800ceb20e06b",
        "cursor": {
          "ref": "76a74e91-e12e-44e1-adcb-51f10111478a",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "54e01345-22d0-4005-bb2b-600a2e4c4a9e"
        },
        "item": {
          "id": "f02ca6b8-d79b-4455-bf81-800ceb20e06b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "809380e7-3519-4c88-a29d-37e4a9dd0941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c998ae-b7b5-4812-a2d1-fc2bf9030686",
        "cursor": {
          "ref": "fec55cbf-5299-40ef-94b8-d6c8d1c55c3e",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fd7cef9e-e7f4-476d-a90c-2620c6eb9576"
        },
        "item": {
          "id": "52c998ae-b7b5-4812-a2d1-fc2bf9030686",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "007b4bb8-4ed7-4fec-a435-592a7cc1d85a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831f42c2-bedb-48b7-9534-c10aa82f75bb",
        "cursor": {
          "ref": "f8fd484c-537c-4081-b37a-4b572a7a9a14",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6502b5e5-3892-4a2d-b6a7-f5a203c2e218"
        },
        "item": {
          "id": "831f42c2-bedb-48b7-9534-c10aa82f75bb",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "06480941-6725-48e3-9e7e-66557ed3812d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d19babe2-56ee-4dfd-a9ab-af357f84fa47",
        "cursor": {
          "ref": "2f957233-22f7-46f1-9ee5-fc9a38e932ee",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a0bf910d-733e-40b2-be9b-fc0ed5e51397"
        },
        "item": {
          "id": "d19babe2-56ee-4dfd-a9ab-af357f84fa47",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e4422f1f-862c-4729-9cdc-68169649315b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f1e2fa8-c405-42e5-b6ac-7f386cc2e95a",
        "cursor": {
          "ref": "3b21547d-bbdc-4e4f-b557-8f3ca4cfc7c1",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e67b8e57-40d5-4b6c-8a46-cd16c8756c92"
        },
        "item": {
          "id": "1f1e2fa8-c405-42e5-b6ac-7f386cc2e95a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e779abaf-20c9-467a-b73e-e9f19e2e8441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4de7b50-594a-4aeb-ac74-bada859c33ef",
        "cursor": {
          "ref": "8c1b6bc7-f21f-452e-80fb-5a7c77df8f5e",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "107bbae0-849b-436d-ba99-592a1f050936"
        },
        "item": {
          "id": "f4de7b50-594a-4aeb-ac74-bada859c33ef",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b5060ea0-87e9-49a6-83a8-6dc9b8d87562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0562b23f-faba-4b44-a28e-48b7f4ee893e",
        "cursor": {
          "ref": "5fb8ea25-7f04-4adf-b809-04f00e99ee63",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b8e96a82-78e7-4b55-ab76-ef8caae445c5"
        },
        "item": {
          "id": "0562b23f-faba-4b44-a28e-48b7f4ee893e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "adda6027-c148-4120-a216-19b069da5e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c8c986-d811-4433-8864-a87dcaba9cb0",
        "cursor": {
          "ref": "d92439d8-6723-4e80-8f6c-c363578ef12a",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c3f52e57-6d45-484d-ac55-35bc1a5869a5"
        },
        "item": {
          "id": "29c8c986-d811-4433-8864-a87dcaba9cb0",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ad97fc7c-08d3-4a62-bbec-81501b5d1316",
          "status": "Created",
          "code": 201,
          "responseTime": 386,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "71ef132a-c90e-4ace-8a8f-a50de575832b",
        "cursor": {
          "ref": "667bb19b-5f0e-495d-ba0c-b45bad6df6a2",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "420ce271-c995-4ffb-aef9-6b4701a22bcd"
        },
        "item": {
          "id": "71ef132a-c90e-4ace-8a8f-a50de575832b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ed6ea9e5-0d5d-4c4f-ba50-c8f1d1aa2d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cea346a-6371-47c5-8a15-7a01f4d9c507",
        "cursor": {
          "ref": "ddcdf7af-18a7-4fac-876f-3b6f04219cf2",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5f134f40-9531-4a3f-9399-68ba28df6817"
        },
        "item": {
          "id": "2cea346a-6371-47c5-8a15-7a01f4d9c507",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1cf5d9c5-92d6-4e41-909d-c70d9aabd648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a58f942-2d02-487b-8b4b-54cda05b4588",
        "cursor": {
          "ref": "99cd0b52-5ec2-4f75-af95-17d63abdceb0",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9cc51d86-79a2-4d43-989e-e03748c7dc7f"
        },
        "item": {
          "id": "8a58f942-2d02-487b-8b4b-54cda05b4588",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0ccb25d9-9bc3-4b07-9be5-d31b36f86e51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4fd9ecc-1ced-4085-a342-0b3e7025c0f3",
        "cursor": {
          "ref": "0bda1c3e-b643-403b-96b2-4a5939bef72c",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "26847f3d-6c9d-4713-b02f-488d9d418b18"
        },
        "item": {
          "id": "a4fd9ecc-1ced-4085-a342-0b3e7025c0f3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "711d5cb6-5844-41f4-921c-294a8859a0a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6fd5bf-e73f-478a-a237-049f39ec7727",
        "cursor": {
          "ref": "b55d1cf5-8744-4458-bcbb-2c42cf2aef36",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "af1ad9e0-c372-4ff7-bcc1-27fec8a36044"
        },
        "item": {
          "id": "6d6fd5bf-e73f-478a-a237-049f39ec7727",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "69975f06-5481-40a5-b753-880879fcb866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dfb0648-7774-4dfc-a62a-c26b8b054949",
        "cursor": {
          "ref": "46c011ed-1715-4b04-a358-643c4c0af5e2",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b1313c3d-61d8-4a52-b65c-06a9db898ba8"
        },
        "item": {
          "id": "9dfb0648-7774-4dfc-a62a-c26b8b054949",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "84ab2e53-4148-420c-9f79-d9028bc6b4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6991e45-9881-48c8-abe6-53bda1b2ed7c",
        "cursor": {
          "ref": "5315ae2e-aed3-4dc8-aaf5-f36be60d6063",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7e254272-e1da-45c6-80df-00a905a6c8e4"
        },
        "item": {
          "id": "a6991e45-9881-48c8-abe6-53bda1b2ed7c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5382f0b0-fe3a-46a3-a619-bdad96b4a95a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed29105-ba5e-4345-9f92-1f428326d19f",
        "cursor": {
          "ref": "cb44a3f8-c53d-4e4a-89e4-43d72397090b",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2c9509b9-97d6-4a30-b142-41df5f64b870"
        },
        "item": {
          "id": "7ed29105-ba5e-4345-9f92-1f428326d19f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2c751ee4-6a4c-41fc-94e7-c4c6a78a35d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8c3dd4-4371-4ac0-b3b3-4fff7c3016fd",
        "cursor": {
          "ref": "e5c71595-8cca-4b24-bfd4-fa521cb33a7f",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e58173af-1071-4fd7-947e-917b696dd6f5"
        },
        "item": {
          "id": "7f8c3dd4-4371-4ac0-b3b3-4fff7c3016fd",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "688b1c6d-0cb6-478f-98f5-b28a53d1c07e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "947bc95e-7d19-4a42-beb9-722ead2b041f",
        "cursor": {
          "ref": "a17c71cb-90e2-4925-b428-399725955c91",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8d2adf2d-0bfb-4970-967c-a00880220bed"
        },
        "item": {
          "id": "947bc95e-7d19-4a42-beb9-722ead2b041f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a717bfe3-8dd4-48d7-b6ee-1d77477999a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6184d683-ea59-4936-86ad-f8e471e66909",
        "cursor": {
          "ref": "4447ff7b-5417-4a9e-9c0f-d179f6fa6ec4",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1a935bd8-f31c-46d8-86de-dde15f62b198"
        },
        "item": {
          "id": "6184d683-ea59-4936-86ad-f8e471e66909",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7b5291b8-8b19-42fa-a75a-0581b47a4a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e4ba3b-ed78-4dc8-a4c6-57770c65e4b1",
        "cursor": {
          "ref": "c99babbf-c562-466e-bfdd-4fefa2d187d3",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f760f8ab-d528-49c3-8a92-bece5a070df5"
        },
        "item": {
          "id": "34e4ba3b-ed78-4dc8-a4c6-57770c65e4b1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4dd029c7-4a2c-435f-9eae-02773ae04090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e157bc38-6737-42c5-924f-c387bdbfdc78",
        "cursor": {
          "ref": "2c21f933-0f93-4efc-834f-c5b028ffa79a",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e63683fa-6d1a-49b0-8bbd-6159eff45dbf"
        },
        "item": {
          "id": "e157bc38-6737-42c5-924f-c387bdbfdc78",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "64373c88-7b31-4e30-8c3a-2c4912181f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d1567b1e-bbc9-4274-ac68-5b5d07ddb202",
        "cursor": {
          "ref": "98a48c2c-8730-4e82-97c3-19dabdc4f5c1",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "82ebd3c6-79af-4f67-a04a-4f5432fbc604"
        },
        "item": {
          "id": "d1567b1e-bbc9-4274-ac68-5b5d07ddb202",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b45433e0-0d4e-407f-91d8-880905124751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c81ad73-165f-43b7-b682-acde7dc37c5e",
        "cursor": {
          "ref": "52ae1197-1de8-442a-afdf-67fe3671d2a6",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "78095af3-ceb0-4987-a757-e4a77a521799"
        },
        "item": {
          "id": "7c81ad73-165f-43b7-b682-acde7dc37c5e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e57f4d9e-a7d5-4572-920d-111b27f58351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a6ab815-95cf-4efc-bfd3-ab5ebc206745",
        "cursor": {
          "ref": "6e9c4410-f212-4c6e-8e1e-e5c8f05e6da2",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c2bc2df5-87d0-46b4-8c1e-f385805d403d"
        },
        "item": {
          "id": "6a6ab815-95cf-4efc-bfd3-ab5ebc206745",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "fb689044-333a-4e0a-a1f1-ab7bc542a053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcbf7d39-ba38-471b-9ca3-0b65c8ebb0c1",
        "cursor": {
          "ref": "4099dbc9-fe32-4b23-88af-a404c09658f3",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "075457bc-d026-4a90-abad-1e6cf7d114a8"
        },
        "item": {
          "id": "fcbf7d39-ba38-471b-9ca3-0b65c8ebb0c1",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9661df49-3874-4f84-8dff-5b2f628e9b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbaacfb3-0cb4-45d3-b9af-d0a200d79c26",
        "cursor": {
          "ref": "5ccdd524-15b5-4b5a-b4ed-8fc4bf9a8d57",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "217b76f4-2296-4f3d-a8ae-13edd6c42348"
        },
        "item": {
          "id": "cbaacfb3-0cb4-45d3-b9af-d0a200d79c26",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b840a7e3-8a7b-490f-9998-459f85a3608d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66073f0b-327d-468e-8f95-985f88a28930",
        "cursor": {
          "ref": "83c0e885-61fb-48c2-9a3c-abdd91d3c6a8",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d84df5d4-9824-4d81-8779-fc50a0835cc1"
        },
        "item": {
          "id": "66073f0b-327d-468e-8f95-985f88a28930",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "72fac821-74b7-466e-bf6b-44395b37f5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a83c5cd-2fca-47a2-a64a-3b3a38db7968",
        "cursor": {
          "ref": "88d0f51b-88b6-49b5-9d1f-2548aed69442",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ccbf4f09-abdf-4357-a319-1f0f4a29f37e"
        },
        "item": {
          "id": "3a83c5cd-2fca-47a2-a64a-3b3a38db7968",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9318ea84-7c07-46a6-85ae-d47c93d5f4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "045411a7-ce46-44ad-bd1f-da0af745c071",
        "cursor": {
          "ref": "595a9904-55c6-48eb-83d9-b80bc8d1c48a",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "95dc49d5-1e59-42c2-8696-7af2dab15a4a"
        },
        "item": {
          "id": "045411a7-ce46-44ad-bd1f-da0af745c071",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cd15d3b8-388c-4382-a047-28397041b6ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c32508-1203-4e4f-a387-24bcc3f2b8fa",
        "cursor": {
          "ref": "44e09e09-2887-431f-8a91-0d917be1ca07",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a1ce51eb-dd36-4829-9585-2e051b783235"
        },
        "item": {
          "id": "c2c32508-1203-4e4f-a387-24bcc3f2b8fa",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "96614095-2222-4957-ab24-83e63e14496b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c67655-8cd5-4222-bb1a-d3f25450da8f",
        "cursor": {
          "ref": "53a761f6-2707-4927-8446-62fda25f026e",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "23cebd4d-0784-4c26-b212-7d44c74a873d"
        },
        "item": {
          "id": "13c67655-8cd5-4222-bb1a-d3f25450da8f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a9c887e1-6581-49b6-b4fe-a4fd25ae3d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed78f8e-2782-4704-b00d-7cdff913a991",
        "cursor": {
          "ref": "f13fd360-fbf1-4dcc-91ed-90ce392fe8a8",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b8d8cf93-f2c0-4d3b-9281-22712b0e4bc8"
        },
        "item": {
          "id": "fed78f8e-2782-4704-b00d-7cdff913a991",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c0f6a19a-b9ab-4f03-b7e5-810cc7a4c607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7fe58b-c26d-45ee-bbd6-14543e1c97f3",
        "cursor": {
          "ref": "0f5f98f8-a284-4c72-9da5-4b73ae2403ac",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4591f49f-47ad-4b79-ba06-12e55ec083e6"
        },
        "item": {
          "id": "5f7fe58b-c26d-45ee-bbd6-14543e1c97f3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "dbe71121-ffe1-4dfa-8a80-558738b90e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aacc483d-e84d-4a56-b806-53dee538c127",
        "cursor": {
          "ref": "8f6351c2-812a-4cb6-bec5-83d23996755c",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4b69b4d5-456b-4e34-99a0-503b987a20eb"
        },
        "item": {
          "id": "aacc483d-e84d-4a56-b806-53dee538c127",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6a6027a8-5701-44bb-bc26-8aeed36c4807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a89e302-a2c0-4bfa-ab8e-c5a414912d71",
        "cursor": {
          "ref": "a7e158de-a4cd-4c74-8b7a-fb51d375608a",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0430d0c5-aefc-411c-abe9-646e68f10b42"
        },
        "item": {
          "id": "2a89e302-a2c0-4bfa-ab8e-c5a414912d71",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2500ae36-aa75-49a0-bd5f-9c6802c3985d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42711942-3c92-4ead-b5a4-37615282ebac",
        "cursor": {
          "ref": "c3edb054-2c8e-429c-94d8-756400cdb97d",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6cba5e0e-ca82-460d-b203-a1a1dda3265a"
        },
        "item": {
          "id": "42711942-3c92-4ead-b5a4-37615282ebac",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "79ce5d18-1bc8-4f2d-85ab-9b72856af5d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bbeafc-0823-4fbc-89fb-150d54bba327",
        "cursor": {
          "ref": "27cfd5b1-d98c-4933-a8c7-de292cf09850",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c15b7d28-73cc-45ac-8486-517acd571221"
        },
        "item": {
          "id": "05bbeafc-0823-4fbc-89fb-150d54bba327",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2841506b-91c3-4c49-aaf9-92a10df31594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bafd3fc-7151-4467-9d6a-b1f3babff042",
        "cursor": {
          "ref": "08c1ea64-4d98-45fe-83ef-30afa1a2f6e2",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a2af6b2e-ba77-4cff-aed3-25ec8087e07c"
        },
        "item": {
          "id": "9bafd3fc-7151-4467-9d6a-b1f3babff042",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "aa0a3d97-96dd-46aa-9874-fe5ea49821c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af1f9a0-1095-4dd4-9b18-f0cc57684e0b",
        "cursor": {
          "ref": "dca45d09-3da2-4d40-b78e-7a8cf990b472",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3d9685f7-ab02-4cb3-9b9b-21c670ce89af"
        },
        "item": {
          "id": "7af1f9a0-1095-4dd4-9b18-f0cc57684e0b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "800754cd-fbe3-44d1-bdbe-0ac9f9cfd44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782a264a-f5f1-4f53-9549-677cb58278ef",
        "cursor": {
          "ref": "fa3551a5-da61-456c-b70c-daae99308b9b",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "bb34a062-9a0f-4ad2-b554-677977379fde"
        },
        "item": {
          "id": "782a264a-f5f1-4f53-9549-677cb58278ef",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a77f1c2b-2b70-46de-8633-858f099d89a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50cd9b3a-dedc-4e8f-b680-7b684be41d87",
        "cursor": {
          "ref": "ad8eddf8-cf5c-4c51-beb9-6256f89e3629",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "dac42bcb-111b-432a-a0f3-50f8398655fd"
        },
        "item": {
          "id": "50cd9b3a-dedc-4e8f-b680-7b684be41d87",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "95a08e21-968f-4e2a-ac1a-5e82c4cc43f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ccaebfa-830a-48e9-831f-11c20a3f3c18",
        "cursor": {
          "ref": "3884a53f-9286-4585-bb35-ceeae4d9b6da",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "19a15644-6e3c-4f62-9a96-052295c0b681"
        },
        "item": {
          "id": "5ccaebfa-830a-48e9-831f-11c20a3f3c18",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "21029745-afec-449e-a2fc-890dcbf255d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9041da47-db8f-4df0-9176-ad1dd6d249e7",
        "cursor": {
          "ref": "2b0d28ca-cce0-4455-a284-7d58b5c97ba0",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "55669f89-0cff-4831-81f2-da8bac0f15cf"
        },
        "item": {
          "id": "9041da47-db8f-4df0-9176-ad1dd6d249e7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "65f1b6a2-9a79-4055-b207-ea6852ba0d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b16146-d653-4ba2-a990-554441d306dc",
        "cursor": {
          "ref": "3d1ae9ac-2cda-491a-822c-59308fce587e",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "34a5d114-01f7-4814-9d8b-6285a6b328e2"
        },
        "item": {
          "id": "d7b16146-d653-4ba2-a990-554441d306dc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "338e3acc-cb7f-4bb5-89cd-1a41b9df7657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386774c6-99fd-49f5-9c4e-8add562bc3b6",
        "cursor": {
          "ref": "70a3f398-6512-47df-8ef8-6b28ac633a72",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "eaef20b7-945c-4c51-be5c-9895294204ed"
        },
        "item": {
          "id": "386774c6-99fd-49f5-9c4e-8add562bc3b6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6b150a8c-dcc5-4baf-b596-7f4a07b280a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea61ea1-0004-4450-929d-2f1339314e67",
        "cursor": {
          "ref": "d0ba235c-124a-4cdb-9b37-d41b2346b5ba",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fc1d142c-f3ff-4562-846b-714150987949"
        },
        "item": {
          "id": "bea61ea1-0004-4450-929d-2f1339314e67",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3cf272b4-15b9-4720-9bce-f7f8ae04aafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "463b478c-ca54-425d-b56e-79dc7f4c2c63",
        "cursor": {
          "ref": "fea43687-9ba4-4e31-b9da-3af68d9e50e6",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ec17ef66-5eef-458e-b78a-a1d8b745b732"
        },
        "item": {
          "id": "463b478c-ca54-425d-b56e-79dc7f4c2c63",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bc12015a-a147-48be-9a6e-ebdb2d82a268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652b47a9-1244-4881-a743-9c199928b35e",
        "cursor": {
          "ref": "cbf6f543-3c0d-43b5-b81c-f7ad4a178423",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "349e45b2-d9b0-449b-9a5d-d72427421c4a"
        },
        "item": {
          "id": "652b47a9-1244-4881-a743-9c199928b35e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "aa66989a-3050-483d-b687-fc4df64432bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc576ae3-5efa-41d2-a048-da85f6bd2640",
        "cursor": {
          "ref": "ff500a1c-ed8d-491b-bb66-367f343b9203",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b8d805c5-9a9a-4565-82b2-4a8b6f1324f5"
        },
        "item": {
          "id": "fc576ae3-5efa-41d2-a048-da85f6bd2640",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cc82a5ac-7434-471e-b0d6-fc41f52eac30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c17341b-88c8-483a-8ddd-1bd065976ebb",
        "cursor": {
          "ref": "5a696444-0bd5-4351-b1f2-18cfddf8e002",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e87ca055-7482-4fab-9070-50e8267eab61"
        },
        "item": {
          "id": "2c17341b-88c8-483a-8ddd-1bd065976ebb",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "86a2f198-6d0d-4e2c-871e-21f8477baca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f698dc-21d3-411a-a13b-212cbc66b157",
        "cursor": {
          "ref": "9579a18a-a7ae-4b41-8f3b-f9042fa0ba5f",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "040eeada-863f-448e-b97d-0e5e87396b7d"
        },
        "item": {
          "id": "05f698dc-21d3-411a-a13b-212cbc66b157",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "999f6257-c9ef-486d-95ff-37c1bcd98d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a6ee5a-128c-429e-a4d7-1ae405460dac",
        "cursor": {
          "ref": "033c639d-c5de-4e85-b078-70dfad83136e",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7f0096c2-fd70-4e57-a7cd-514f35e6bd82"
        },
        "item": {
          "id": "66a6ee5a-128c-429e-a4d7-1ae405460dac",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "eb048f7a-afc4-42c7-910e-691b029260ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041fc88a-6339-4f1b-99c7-f02e8a9930b7",
        "cursor": {
          "ref": "22bc2134-8e02-48ff-b2a7-6b760a6b2f48",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e87b4125-5c5e-4f83-bf4b-79223f29abd9"
        },
        "item": {
          "id": "041fc88a-6339-4f1b-99c7-f02e8a9930b7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "cf802e72-0d2f-4d77-9d1f-35c46e2257dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb054782-7b8a-4f02-9e08-21497933b3c3",
        "cursor": {
          "ref": "fe1fe6cc-113d-41a9-bb63-3e22148aa798",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ccf26ed4-7de4-4e47-a645-6f1554300044"
        },
        "item": {
          "id": "bb054782-7b8a-4f02-9e08-21497933b3c3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f6d8461e-1d3a-44fd-875f-0c021e0ea21e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78153a56-c4fe-4c6e-89e7-96ea2f4c6282",
        "cursor": {
          "ref": "43c7f72b-6f21-46dd-97bc-b35f90c819c3",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7a74f56f-3a2f-4596-8e09-16b4dd251ddd"
        },
        "item": {
          "id": "78153a56-c4fe-4c6e-89e7-96ea2f4c6282",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "da51c75a-9deb-45ab-a505-27325b19f540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d790c4-94e2-44db-9045-b63251d3a345",
        "cursor": {
          "ref": "450589f0-80be-4992-9269-365a79e77fef",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "92eac655-55fe-43a0-895c-18f5b9450b91"
        },
        "item": {
          "id": "89d790c4-94e2-44db-9045-b63251d3a345",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "fc8aca77-68fe-495d-bcda-d9f9fb2a421d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2acfa0-9e58-4a3e-a3b3-716bf7d13b18",
        "cursor": {
          "ref": "05dfe2cc-49b7-4d4d-bd61-39f9d294b789",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c097f304-78c7-4084-b343-049df99dba60"
        },
        "item": {
          "id": "ea2acfa0-9e58-4a3e-a3b3-716bf7d13b18",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "17c3500d-41de-4d0a-b42c-fcb4f5a241f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5342e4f-4ce0-428b-9714-af33a07c1b17",
        "cursor": {
          "ref": "a341294d-cee3-4e3e-9c0c-11631d26cbef",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f9bd82e0-00e5-44a2-800f-7ef2d437b3af"
        },
        "item": {
          "id": "f5342e4f-4ce0-428b-9714-af33a07c1b17",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a210c9c0-ce67-4b65-bba6-4da84d676f3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91011fd-9c1c-4355-af8f-1933c1d64f48",
        "cursor": {
          "ref": "0039ce4c-dcfa-4e73-bb75-679e1726211b",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5064e34d-0ba1-4721-a014-bf329d269730"
        },
        "item": {
          "id": "b91011fd-9c1c-4355-af8f-1933c1d64f48",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f89d8ab6-6ad5-4dbf-bd88-84ab0de0a378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 263,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0237c568-7317-4ad6-8f32-f336aa7ae6b0",
        "cursor": {
          "ref": "e678c797-c8a2-44b5-ab6a-45a66cd618aa",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "80a6c557-aa0b-40c9-8d08-724d73d0c71c"
        },
        "item": {
          "id": "0237c568-7317-4ad6-8f32-f336aa7ae6b0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "52cf4f42-85ca-4d3b-a36e-52127d7df83c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44708233-5576-4ec7-9f41-054e51889fa0",
        "cursor": {
          "ref": "a6d8ad3d-9fee-4dd0-99bd-b4339c018f72",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "44d5f5b1-b42e-4af6-89d6-07226c521540"
        },
        "item": {
          "id": "44708233-5576-4ec7-9f41-054e51889fa0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ab1aa7bb-55a7-46c3-bf8c-1df843b4a92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c4be91-9233-42a9-9587-2dd2fd458cfe",
        "cursor": {
          "ref": "8748686d-338a-4627-b473-670f2641a990",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9e1237ad-79e4-437a-80e7-53a997ed2913"
        },
        "item": {
          "id": "d0c4be91-9233-42a9-9587-2dd2fd458cfe",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "db0dea19-7ffe-4ca0-9444-7296826f8d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376f17f2-9caa-45cb-ae01-ec9304200985",
        "cursor": {
          "ref": "2bb85f67-acc3-4d59-bb0d-1c7db6b0f37b",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "bb5ebd82-7013-464d-8972-cbd72202f9e6"
        },
        "item": {
          "id": "376f17f2-9caa-45cb-ae01-ec9304200985",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "acb50bc5-a79d-48bc-89b8-a8e5c62b0310",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "db6e5dcc-ba44-4016-bbe3-3ceeef4440a6",
        "cursor": {
          "ref": "c5cebcb1-40dd-4082-8824-149d8f7c45dc",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5c3f7279-e4dc-40ac-b7e1-3d995a4e31b8"
        },
        "item": {
          "id": "db6e5dcc-ba44-4016-bbe3-3ceeef4440a6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f0e4fa4f-0320-480f-a86a-296d7cf89d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d85d02-6efd-4fa3-a091-1e829fd0c377",
        "cursor": {
          "ref": "40c5c2a0-c86c-41e5-a64d-e5602f4ad741",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bb0d5314-5be0-4118-96bc-b95088aa3e2b"
        },
        "item": {
          "id": "05d85d02-6efd-4fa3-a091-1e829fd0c377",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9dbfe56b-71a1-47aa-82d6-404d5084ecad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a67529-6392-454e-9ff5-f50587e94339",
        "cursor": {
          "ref": "56b64384-7a57-4103-be87-8a2b1db3ca81",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e96dc315-6802-4fff-9cad-3c7a06917c78"
        },
        "item": {
          "id": "d5a67529-6392-454e-9ff5-f50587e94339",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f6761ee7-af9a-41a4-9540-eb124b6d81f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c0fd83-97a0-4519-95fa-79f0efe822cc",
        "cursor": {
          "ref": "e71a8d89-9c77-4399-aadf-a40f8a3637bc",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a016a0fa-e38f-4faf-ba9c-807e03edccaa"
        },
        "item": {
          "id": "17c0fd83-97a0-4519-95fa-79f0efe822cc",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "12153cc7-65e0-49ba-b5dd-e1ac09719d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "919c0872-8d9f-4d9d-9069-4a4821cdd218",
        "cursor": {
          "ref": "afc64867-e4ef-4416-88a9-c6cf78d83185",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a15da627-fa6f-4f38-9e9c-0bf38c047464"
        },
        "item": {
          "id": "919c0872-8d9f-4d9d-9069-4a4821cdd218",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e1abdccd-2277-4a28-9e92-bf46615f2f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e37cd6-66e9-4c1f-adc8-bdaa80ffe5d3",
        "cursor": {
          "ref": "46f8b35e-f405-40fe-9406-d55d2ee62c37",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "eb418ba6-5313-41bc-9e55-37ceacf37f92"
        },
        "item": {
          "id": "e9e37cd6-66e9-4c1f-adc8-bdaa80ffe5d3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "49523ac2-55b0-4db9-8985-812aaefed80e",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "a2233f7f-59dd-447e-be39-dc08eaa1e403",
        "cursor": {
          "ref": "b624cebd-507e-41ac-b05b-6f2ce5e36407",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "53b33d87-7afe-46ce-8b58-8b3122f29688"
        },
        "item": {
          "id": "a2233f7f-59dd-447e-be39-dc08eaa1e403",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "28c9d819-c22f-4f88-8f6e-635987313a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b671bac1-113b-42ac-ba72-a09ec67c869d",
        "cursor": {
          "ref": "d8682759-2d58-471c-ae3b-83d1726baf09",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1e1bd852-c5ac-45d9-a836-89b4135943e2"
        },
        "item": {
          "id": "b671bac1-113b-42ac-ba72-a09ec67c869d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e5c3bdc4-fe51-4174-bef3-d19177d4e272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18039e81-d1fc-4df2-bd16-035db0e556b0",
        "cursor": {
          "ref": "1095ddc2-753a-4bc5-96b7-d7c6bd50b531",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "934814c0-ffe4-4f08-a2e1-066fada9b8ce"
        },
        "item": {
          "id": "18039e81-d1fc-4df2-bd16-035db0e556b0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "debc5a89-6e49-4207-9466-4b7799deca87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a99fac-41a8-4b6f-8421-7628fdea745a",
        "cursor": {
          "ref": "004c868c-14b3-46a7-b6ce-f55227920250",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0830c5db-beb6-4877-b81d-86b430557ee6"
        },
        "item": {
          "id": "d2a99fac-41a8-4b6f-8421-7628fdea745a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b4c5b6db-70fe-41c5-93b3-160025520ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e05c07-4ee8-4f14-8b1b-cf47e47b72f1",
        "cursor": {
          "ref": "53e3976f-90de-4b49-a6ad-771756b4316e",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "21801658-140f-4a7f-8765-51e77e1798b4"
        },
        "item": {
          "id": "48e05c07-4ee8-4f14-8b1b-cf47e47b72f1",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f6a75424-f9e3-47f4-890a-ac02c4ad79d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75271df-d024-4ebd-9aff-a4521d6c0c00",
        "cursor": {
          "ref": "da00fe7d-e3ba-48d5-b009-6111954f1717",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9fe9b92c-5b63-40bb-8b6e-0437b3db32c0"
        },
        "item": {
          "id": "d75271df-d024-4ebd-9aff-a4521d6c0c00",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "036d0be9-2f97-4d25-a72e-6bb7691ebe79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbdfb677-fde8-4770-8107-5a2e4cf1d94b",
        "cursor": {
          "ref": "8b8a8279-5b36-4c69-96b4-4a520c0a4430",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "52e15eeb-ab6d-41e5-9aa7-2d4516a4b091"
        },
        "item": {
          "id": "bbdfb677-fde8-4770-8107-5a2e4cf1d94b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5ea30553-b1f9-4c91-8aad-4d790ce53788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b294985-c765-4e74-aff0-efa26f66f2e2",
        "cursor": {
          "ref": "2f78afd1-16a9-4361-a8be-c8f9c49d2cde",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "50026855-2bcc-4e4a-b743-03df933e3b2c"
        },
        "item": {
          "id": "2b294985-c765-4e74-aff0-efa26f66f2e2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "74195499-9b23-45de-b68b-bbff3819b8bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ff4f58-a5e7-41a8-bb17-c03eb13a671e",
        "cursor": {
          "ref": "622f3e6f-4d29-43a9-8d9c-9a79325f3a2e",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d1e4f0b3-cb59-496a-9f03-0c0ac7914606"
        },
        "item": {
          "id": "f9ff4f58-a5e7-41a8-bb17-c03eb13a671e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "54414fad-1231-42e1-a40a-5258952b7f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "c782623d-fcee-4682-8874-f82e33b16360",
        "cursor": {
          "ref": "ebc5e08e-2d5a-4a51-8ba5-484425848a86",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c5f957ab-be48-4cd6-93a5-bbbc033c2828"
        },
        "item": {
          "id": "c782623d-fcee-4682-8874-f82e33b16360",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "604222b6-747b-4334-9c85-02b748ff23d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "3b6e67f7-c688-4d31-8448-dfdf57844333",
        "cursor": {
          "ref": "2eb75d97-c410-427f-8df7-e1feaeb9a2cc",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "fe23cf20-980e-4d4a-9925-0368d2a9392d"
        },
        "item": {
          "id": "3b6e67f7-c688-4d31-8448-dfdf57844333",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ac0ce848-61e2-4abc-9f99-3acadad3de69",
          "status": "Created",
          "code": 201,
          "responseTime": 388,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected undefined to equal 'did:web:dev.vc.stg.mesur.io:v1'",
              "stack": "AssertionError: expected undefined to equal 'did:web:dev.vc.stg.mesur.io:v1'\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": ".empty was passed non-string primitive undefined",
              "stack": "AssertionError: .empty was passed non-string primitive undefined\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "expected undefined to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected undefined to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot read properties of undefined (reading 'created')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'created')\n   at Object.eval sandbox-script.js:6:104)"
            }
          }
        ]
      },
      {
        "id": "350e921a-7adc-421d-8b62-d69e326692f3",
        "cursor": {
          "ref": "45b361d5-5da3-4c1d-9e7f-5364b81e68a5",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c9aa4558-a17f-43bd-b42f-f80aa1c586b8"
        },
        "item": {
          "id": "350e921a-7adc-421d-8b62-d69e326692f3",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "58f2c52c-85d9-4df1-a293-bc9366fbe78a",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 616
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "320d1d98-1751-444c-8b71-af3918db2804",
        "cursor": {
          "ref": "822c803f-9352-4af3-9fe1-b07eb7c05199",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "da944b62-c2dd-4320-ab3d-c56dd10ed27f"
        },
        "item": {
          "id": "320d1d98-1751-444c-8b71-af3918db2804",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ef319df9-d960-48b6-ac36-db5263dd66fe",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 563
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "566155a5-ad1b-4cd9-9a2b-bd9212edc233",
        "cursor": {
          "ref": "ee773c5e-cfc2-4753-9897-4f4755c8856d",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "131d62a2-e695-4149-aa06-dfdf584da919"
        },
        "item": {
          "id": "566155a5-ad1b-4cd9-9a2b-bd9212edc233",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3bddec0c-07b6-49d4-b75d-82f4395d06d3",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 583
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "cb38f226-450f-4e2a-aaa9-e81f16148cc9",
        "cursor": {
          "ref": "f754a12c-1758-449b-91b8-0a12678687b6",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "831b86d6-2f3f-4f4e-bde3-8f0ccdc16f44"
        },
        "item": {
          "id": "cb38f226-450f-4e2a-aaa9-e81f16148cc9",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "56ea6a8f-5d4a-4bf2-b3ac-5fe1b579e3eb",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 553
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot destructure property 'created' of 'pm.response.json(...).proof' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'created' of 'pm.response.json(...).proof' as it is undefined.\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "dfa14ff5-aee0-4793-b668-d4117120b0d2",
        "cursor": {
          "ref": "55aea1d2-2d7b-449c-816f-0835fd722fa1",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fe4f5ba0-6f2f-4c9c-8733-3c6d60510451"
        },
        "item": {
          "id": "dfa14ff5-aee0-4793-b668-d4117120b0d2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ac1105dc-9368-442d-8c2e-c4ce040bda2c",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 561
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property '@context', data should have required property 'type', data should have required property 'issuer', data should have required property 'issuanceDate', data should have required property 'credentialSubject', data should have required property 'proof', data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "b825754d-26c3-490c-bc52-ed054c9aae68",
        "cursor": {
          "ref": "409886bc-b0a8-4de2-a4b5-8c3b90998afa",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b6bccb17-92d8-4324-ada0-4524ace6c71c"
        },
        "item": {
          "id": "b825754d-26c3-490c-bc52-ed054c9aae68",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f7870acf-e1eb-4440-987b-f3f850108ea9",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "b825754d-26c3-490c-bc52-ed054c9aae68",
        "cursor": {
          "ref": "409886bc-b0a8-4de2-a4b5-8c3b90998afa",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b6bccb17-92d8-4324-ada0-4524ace6c71c"
        },
        "item": {
          "id": "b825754d-26c3-490c-bc52-ed054c9aae68",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f7870acf-e1eb-4440-987b-f3f850108ea9",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "2454eea1-b131-4f32-8730-4603cac59357",
        "cursor": {
          "ref": "8e5b2f98-c41e-411f-ad7b-0953d2a9fb7a",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3b9ec56f-1e78-499b-aca7-0c105c4d0e81"
        },
        "item": {
          "id": "2454eea1-b131-4f32-8730-4603cac59357",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8fb0b61f-d88b-4da1-ac24-4d3edcf317ff",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "26bb1df1-3452-40cd-8284-5e14af8a397e",
        "cursor": {
          "ref": "c631c81b-697b-4958-ae85-67056acb87a8",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a9e6285b-8fce-44fb-9c9e-4adf0c864150"
        },
        "item": {
          "id": "26bb1df1-3452-40cd-8284-5e14af8a397e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3aef5a26-085d-4559-a602-9918b8974f01",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "2a417147-c344-46ce-bcbb-47925d9f8f4c",
        "cursor": {
          "ref": "f677a637-104e-4ba8-96e7-3ea2b35e9e45",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a6516631-8e66-402c-91c9-375ced68f0bf"
        },
        "item": {
          "id": "2a417147-c344-46ce-bcbb-47925d9f8f4c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0f7c93de-c058-4c2b-9df1-ed56c94630fc",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "45acea8f-73a1-4f86-852f-62b79dc8cbc9",
        "cursor": {
          "ref": "25fa02e9-73b0-481d-8e58-4f1addeee4e9",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "31bb3dc1-a2e7-43ca-bc95-69906d3ff35f"
        },
        "item": {
          "id": "45acea8f-73a1-4f86-852f-62b79dc8cbc9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a5da5490-7c56-48ed-8df9-d114bb089944",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "90d1add3-e649-4eaa-b88a-380b48e74837",
        "cursor": {
          "ref": "e4fa1e54-0034-42eb-9e23-eac7e38e1091",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a1e16f57-a4f2-4390-a277-5da7d6c44791"
        },
        "item": {
          "id": "90d1add3-e649-4eaa-b88a-380b48e74837",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d9a229ee-5cdf-4284-832d-a450144c5c83",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "62473010-c49b-4d2d-97d3-544211f316fc",
        "cursor": {
          "ref": "e504cbdb-11a5-46e5-bab8-2c113a282165",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "aa40016c-7bb4-4939-b809-f5d354f7ffd7"
        },
        "item": {
          "id": "62473010-c49b-4d2d-97d3-544211f316fc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "950e2d42-7fe9-4ed3-8ef5-e84bf333f004",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "ad399ae0-783c-4eb8-b2f4-2bb9d0870931",
        "cursor": {
          "ref": "33434c9b-b82f-426d-be91-4ba275b2560b",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bec7237d-0397-4770-81f0-e502da0f7687"
        },
        "item": {
          "id": "ad399ae0-783c-4eb8-b2f4-2bb9d0870931",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ac4ca43e-cfab-4e9e-8a49-b1591c4f4a93",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "34d6635d-2052-4a06-9aed-6e2887108c1c",
        "cursor": {
          "ref": "fbd8852e-5fcb-4c0c-b78a-88952fb461f3",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9fedaf20-b661-4a9e-bbfa-cb096a7cd8e8"
        },
        "item": {
          "id": "34d6635d-2052-4a06-9aed-6e2887108c1c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "75577534-ccc8-428e-a487-0bcf7ccea44f",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "0c7ffda6-d81d-4c94-8e9f-ce58b580c25d",
        "cursor": {
          "ref": "1b6dfeb7-423f-4624-8416-3d3633948c7d",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f8947249-1029-4664-a32f-f3b25e6d67bd"
        },
        "item": {
          "id": "0c7ffda6-d81d-4c94-8e9f-ce58b580c25d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "46b0a480-c3b7-46ff-ba43-1d9a2c923de0",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "784f6410-e07e-4c19-b120-6d4ce880eef5",
        "cursor": {
          "ref": "47fb8e61-729a-4a3b-9534-2af81e3e7826",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "24cd98e2-d092-4731-b01e-9aede54e6ea6"
        },
        "item": {
          "id": "784f6410-e07e-4c19-b120-6d4ce880eef5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e1b6ca09-eae4-41fc-873f-94d203a36b81",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "08819148-4c64-4259-898c-1d7a2586d4da",
        "cursor": {
          "ref": "9555575c-c15d-4f44-b785-baadf6f4c02d",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "aab725bc-db7d-4665-b5af-53ff05bb2957"
        },
        "item": {
          "id": "08819148-4c64-4259-898c-1d7a2586d4da",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3e782790-e3f7-44cb-a193-b6c8e214df6b",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "7af963d4-1dde-438e-b1e0-8eb390b374ff",
        "cursor": {
          "ref": "036c2435-f864-40dc-9363-b2cd08bafdc7",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "471f9e06-b962-4e63-865c-3b9ccfd3f41e"
        },
        "item": {
          "id": "7af963d4-1dde-438e-b1e0-8eb390b374ff",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "df914084-0679-47f1-ac44-c5d3f4315c76",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "d25363ad-19c3-4da9-ad60-f7af3973e8b3",
        "cursor": {
          "ref": "9f2afe50-442b-47c0-b08d-8af3ebace900",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2a18898b-d337-4404-8d39-398e235a365b"
        },
        "item": {
          "id": "d25363ad-19c3-4da9-ad60-f7af3973e8b3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f9f10627-ece6-486b-99e5-1041a11b4689",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "f4ed9815-b1f3-4600-bd19-650da7170a1d",
        "cursor": {
          "ref": "54c590a0-22d7-46bb-a8b0-d7d36c64bf84",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "518e92b3-3d55-4e7e-a5c4-4cedf1e7876c"
        },
        "item": {
          "id": "f4ed9815-b1f3-4600-bd19-650da7170a1d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ddccd6d2-c333-4287-8d98-e5bbc6360c8c",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "fe575fa6-afe5-4414-86bb-4955c67dd0a0",
        "cursor": {
          "ref": "389a65ff-47d5-434a-8ff6-1e2bdadf9f1f",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1f5ab26f-19e2-4a2b-b5ef-abf4564583b4"
        },
        "item": {
          "id": "fe575fa6-afe5-4414-86bb-4955c67dd0a0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "731efa22-d8c0-413c-ac70-9f2507f6cbec",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "f58e1b06-f11d-423d-9829-ab3a90d25f17",
        "cursor": {
          "ref": "51978cdc-e860-4829-92a0-85407805c740",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d2d846f6-fe68-4ab0-84bb-0a50a06010e2"
        },
        "item": {
          "id": "f58e1b06-f11d-423d-9829-ab3a90d25f17",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0bb94980-1c26-486b-877e-0b730ed9665a",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "1ab82bed-da23-4053-830a-813eddb83f16",
        "cursor": {
          "ref": "d717d9fc-34fa-4414-a50e-e74b45fe13d1",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5d6c9544-b31b-4cd1-8f93-be6bb064b7b9"
        },
        "item": {
          "id": "1ab82bed-da23-4053-830a-813eddb83f16",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6380e3d4-92d0-45b9-a1e7-79806972f1da",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "f8e5244d-c3cd-4f3f-a05a-97744e9fbb7f",
        "cursor": {
          "ref": "1e62dc43-930b-45cb-98ee-1021fa64d639",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b6b8e960-c938-4fdd-972a-60337cb91ad9"
        },
        "item": {
          "id": "f8e5244d-c3cd-4f3f-a05a-97744e9fbb7f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "46bc0a68-db1a-4634-8051-d960232b59f3",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "aa9bcea3-c7c9-40fb-a319-2969088a600c",
        "cursor": {
          "ref": "9a0e1b09-7451-4999-bff3-ae992449d5f0",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6f3ca33a-c059-48da-bdc8-d3497367cbbc"
        },
        "item": {
          "id": "aa9bcea3-c7c9-40fb-a319-2969088a600c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d6843809-a570-4c39-aab7-dee7adf6cbf0",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "1b1b9e4e-5b0b-4476-8a2d-ac966e599a38",
        "cursor": {
          "ref": "3510bce5-1fa9-4bdd-aacf-90060296eb23",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1b1d7237-22ee-40cd-a964-cfdf464f734f"
        },
        "item": {
          "id": "1b1b9e4e-5b0b-4476-8a2d-ac966e599a38",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a31ca3be-a05d-4af7-977b-7a653c9a4573",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "b9d01a8a-f824-4727-a34b-2afb31d05bf2",
        "cursor": {
          "ref": "96231090-cd3b-4265-9860-5089e08834ec",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d1e2068a-9edb-45e1-a5b9-21fb9ceadae1"
        },
        "item": {
          "id": "b9d01a8a-f824-4727-a34b-2afb31d05bf2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ef9bfe4a-3214-4f82-9c2f-68917d3f174f",
          "status": "OK",
          "code": 200,
          "responseTime": 32,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "ec3b0ea7-c91f-4523-b545-7fce9bf5040a",
        "cursor": {
          "ref": "8503f2bd-fbb1-408e-8dcf-f36dfa42a1c2",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d618fae5-bb41-4d7d-ba8d-ce845a0a5d97"
        },
        "item": {
          "id": "ec3b0ea7-c91f-4523-b545-7fce9bf5040a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ab7c8dca-d6d1-4d59-8dcd-d00dfa8997be",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "c60b5fb8-a358-4fd5-9c85-9981064fc8f5",
        "cursor": {
          "ref": "444a13d1-2b3f-46d2-aba3-6a17650fad20",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "daec2925-a7a5-4538-b062-916ac4da749f"
        },
        "item": {
          "id": "c60b5fb8-a358-4fd5-9c85-9981064fc8f5",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f1a81daa-cb98-403e-ab78-e99ec37acb23",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "313ca066-0d96-4fab-87c1-3cee2e4e9573",
        "cursor": {
          "ref": "960281bc-64a7-49a2-8029-99ad2227f814",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "fc9bb9af-5e12-4011-88d9-fb832687659c"
        },
        "item": {
          "id": "313ca066-0d96-4fab-87c1-3cee2e4e9573",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fbc6230c-d157-47d2-ac57-3168a9df2291",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "887b2c06-afc1-4175-b7c8-6f6a6bbf7641",
        "cursor": {
          "ref": "d175ae2f-ca64-4379-adf2-357f09690853",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "8e8d8b55-3c91-4f83-b203-fce395b08e58"
        },
        "item": {
          "id": "887b2c06-afc1-4175-b7c8-6f6a6bbf7641",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c6d537a4-1c7c-4c16-a93c-6f90eee723c7",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "8a91692c-9be1-4830-9324-45600b316591",
        "cursor": {
          "ref": "7380f197-b771-4bf9-b4a5-0534f70578a3",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8448d8db-803d-417a-a5b7-1d082bfe49d5"
        },
        "item": {
          "id": "8a91692c-9be1-4830-9324-45600b316591",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a0c5e9c0-f12c-4c6c-ab12-7e5f96079501",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "053b7b76-1a7e-4c69-af42-4c2180e6146b",
        "cursor": {
          "ref": "b1261c7e-111c-408c-97d0-84ecc1bf6c09",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "74e9d0f5-54c4-46ad-a066-04cb13923a6c"
        },
        "item": {
          "id": "053b7b76-1a7e-4c69-af42-4c2180e6146b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "47c1087a-cae8-40bb-bf14-56a8b28d34ea",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "dbe806f0-0e1f-4644-8b9a-272c963a3f9d",
        "cursor": {
          "ref": "cd81746c-6534-4b0c-b09b-70aa7013e06c",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9b8567fd-c4e0-4be9-92ee-8213f563d932"
        },
        "item": {
          "id": "dbe806f0-0e1f-4644-8b9a-272c963a3f9d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d1e671af-bfa2-4543-b94c-7e5e7acf91ab",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "73df44e3-8e49-4498-9f58-5f907a292c15",
        "cursor": {
          "ref": "a29d641f-1c43-40ec-a078-806b2035028f",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "953b6c3e-c828-4d81-8717-50ca425ec212"
        },
        "item": {
          "id": "73df44e3-8e49-4498-9f58-5f907a292c15",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "75a181c9-ffb2-4d55-a5fa-d1323cac990f",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "9fb1e35e-bf8a-48df-a3b0-0b3eee718142",
        "cursor": {
          "ref": "53e90bd3-6053-4d15-a292-f3b246ffce68",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2e69775a-b49b-456e-81de-77b64d5bbd51"
        },
        "item": {
          "id": "9fb1e35e-bf8a-48df-a3b0-0b3eee718142",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "dc530e0c-e950-423c-a2e5-e1e087392b28",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "f3584594-15f4-4188-a2c7-2a33f6308e65",
        "cursor": {
          "ref": "0f8b4497-7709-4328-a70b-5cf91825be8d",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0a9f18d8-9b4f-4411-8e66-1677d9654c53"
        },
        "item": {
          "id": "f3584594-15f4-4188-a2c7-2a33f6308e65",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "aac95fad-ba6d-4e92-98ef-046d9f5d220c",
          "status": "OK",
          "code": 200,
          "responseTime": 30,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "35b97fcf-ac5c-43c1-8128-119bbe9823e6",
        "cursor": {
          "ref": "c39717ee-2fdb-4e8d-8f0a-acee533c0a40",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f4d68797-fc50-49f8-a9da-6069c090074a"
        },
        "item": {
          "id": "35b97fcf-ac5c-43c1-8128-119bbe9823e6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4849e5b6-ad9d-4638-ba8d-13eb8d10f549",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee08c62b-cad3-428d-9e8d-4d54a5673556",
        "cursor": {
          "ref": "e76f8304-79b4-41f9-ab9e-04e165ec7a09",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "01c6801d-c2e8-4fac-b225-228712b712f5"
        },
        "item": {
          "id": "ee08c62b-cad3-428d-9e8d-4d54a5673556",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "1b11e933-dd47-4503-b291-86a9acafea9f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dbde45c-72cc-4e86-aecd-d1d78ab892e5",
        "cursor": {
          "ref": "63febc91-6a48-47be-ba01-309f17db7de8",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "62e189a0-99a3-4394-aa51-2e779ec596c8"
        },
        "item": {
          "id": "1dbde45c-72cc-4e86-aecd-d1d78ab892e5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "da4d8a70-87df-4149-ab4a-9710f82e1978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dbde45c-72cc-4e86-aecd-d1d78ab892e5",
        "cursor": {
          "ref": "63febc91-6a48-47be-ba01-309f17db7de8",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "62e189a0-99a3-4394-aa51-2e779ec596c8"
        },
        "item": {
          "id": "1dbde45c-72cc-4e86-aecd-d1d78ab892e5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "da4d8a70-87df-4149-ab4a-9710f82e1978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f682bd82-2a9f-4337-9e7c-6b8151330deb",
        "cursor": {
          "ref": "1559382c-5b65-4929-9955-efcea0dcc4a7",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "94230461-2650-46c9-8c0d-badf24666dbe"
        },
        "item": {
          "id": "f682bd82-2a9f-4337-9e7c-6b8151330deb",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "76bb246f-49c2-4f85-98a1-49324a70ff9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc24fc1-6e58-42a3-b9cc-f6c3a0490d60",
        "cursor": {
          "ref": "b9133d28-c4bf-4a58-83f3-2a8ee1b94ad1",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "50e2697f-a82d-4366-8040-f56c19dc4b30"
        },
        "item": {
          "id": "0fc24fc1-6e58-42a3-b9cc-f6c3a0490d60",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a15531f4-c3f7-4e65-b40f-6a47c08fbe2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deea856f-bf1e-4a94-bc6f-d50ad843de04",
        "cursor": {
          "ref": "ad3d3741-401b-48e0-98cd-f90d9a877d01",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4a2e52ab-d426-4757-84da-c6f3f4abb4b0"
        },
        "item": {
          "id": "deea856f-bf1e-4a94-bc6f-d50ad843de04",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ae19fc66-ea63-4960-870d-5460c383a796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bd6a27a-4799-41e5-a770-bd69ad252425",
        "cursor": {
          "ref": "14aeb2f9-6464-4f46-81ac-c0c6ed354f2a",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "894bfd34-0471-4973-8674-d9e9c29c204a"
        },
        "item": {
          "id": "8bd6a27a-4799-41e5-a770-bd69ad252425",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2a203d13-a255-4ae7-99c2-1f9474e262d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4719d757-f984-49c2-89f6-8b17a5a605b4",
        "cursor": {
          "ref": "0d3a671d-a793-403d-a68d-3969ea93d488",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3c4c720d-9886-4291-8b93-382ee46c023b"
        },
        "item": {
          "id": "4719d757-f984-49c2-89f6-8b17a5a605b4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "57a86c20-c54a-48de-ab25-8c9a2f9dea9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b96d399-0476-4919-b864-f24f05addb5c",
        "cursor": {
          "ref": "617e0b69-23aa-4e0b-aceb-40f6dbcdf7d6",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "76d55ad7-05a0-421d-b651-4915867ec3b0"
        },
        "item": {
          "id": "2b96d399-0476-4919-b864-f24f05addb5c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4bd9633a-fa72-4c22-b3f5-dd039ed049e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 617,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4459c73c-0e46-4dd5-9e23-cf0731a492be",
        "cursor": {
          "ref": "d7300ddb-bf36-47d4-8de5-2c0f5b5e5a06",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "20563131-5f8d-4695-aeeb-5ce2bbc02f73"
        },
        "item": {
          "id": "4459c73c-0e46-4dd5-9e23-cf0731a492be",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2e2f6fdb-3455-40fd-9c34-9b9719995c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaadce3b-8463-4995-8eb2-bcc8990254bf",
        "cursor": {
          "ref": "521517a1-cd81-40c5-bcb0-c8ce99da27c4",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a8f15ddd-d34a-4639-b4b6-47216dab4fec"
        },
        "item": {
          "id": "eaadce3b-8463-4995-8eb2-bcc8990254bf",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "55c731e3-fda7-43e3-bcea-c3fa4d5d8235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e54065de-1493-47ea-bf25-7da2337ecc6e",
        "cursor": {
          "ref": "456d4f15-90bf-4aea-ad6a-f8ca6bb70a18",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "587b882c-b096-40fe-a5c0-f8c5fa7d7201"
        },
        "item": {
          "id": "e54065de-1493-47ea-bf25-7da2337ecc6e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d31fe7a0-3735-4679-9b10-564fafdcff52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db684630-acd0-4ddf-8521-177f8826ef10",
        "cursor": {
          "ref": "353e2b65-624a-4124-a887-61fa3d5a8c6c",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e16c249c-ef91-44a2-87fb-01c1fa885256"
        },
        "item": {
          "id": "db684630-acd0-4ddf-8521-177f8826ef10",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ffe40c59-d2a9-450c-b173-bfd64f8eb82a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066a8810-9e07-4a8f-be21-c8d7612b275e",
        "cursor": {
          "ref": "b96fef9f-39c9-4b06-a209-98a116405f51",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b40d3dd7-b50d-40b7-9c56-f192ebcb51f3"
        },
        "item": {
          "id": "066a8810-9e07-4a8f-be21-c8d7612b275e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "85cf79a4-4862-4681-a05a-d26267ff3cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ffb13da-a716-425b-b0a0-0cf5be74ee5e",
        "cursor": {
          "ref": "3db6232f-d9cb-4090-86cf-692e2f91051c",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2d2e3c00-b7d6-48b2-bc0e-97ca89172ee6"
        },
        "item": {
          "id": "3ffb13da-a716-425b-b0a0-0cf5be74ee5e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "54416afd-bba1-4af8-b218-cfecc7ed785e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89a9ca8b-d2b9-4c12-8589-e7142149c561",
        "cursor": {
          "ref": "3ee1ee83-24db-421d-9893-1eaa9d59ede5",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0ea1af94-b0a0-4eaf-b8e4-31a16520999f"
        },
        "item": {
          "id": "89a9ca8b-d2b9-4c12-8589-e7142149c561",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "27eff2a9-5fb1-47ac-84c5-5560ac8e7e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5639338-e2ed-4857-b9b7-4e87905ff5d5",
        "cursor": {
          "ref": "a0e1b31c-7502-448c-b568-dcbe6cd40af4",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5648be0c-dd0c-44f4-af89-25a3e5b2dc0a"
        },
        "item": {
          "id": "b5639338-e2ed-4857-b9b7-4e87905ff5d5",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "bd322d1b-960a-41ed-a047-50c277011818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82375287-bc35-4ff7-bbca-d0a153ffc4c6",
        "cursor": {
          "ref": "576881b5-1f4a-4ba3-b081-d1bb7fbdbea9",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9b7ab875-17d0-4593-97f5-32a57641ec0c"
        },
        "item": {
          "id": "82375287-bc35-4ff7-bbca-d0a153ffc4c6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c342ce78-d974-4864-a33b-d9a8d8924f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30644c61-9e7f-4a6c-82a4-8fdb14944e85",
        "cursor": {
          "ref": "79935f35-2e4c-4261-8e10-b227cc23cb24",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "17c3024b-c10a-4c5f-912d-1ba71eda0ec4"
        },
        "item": {
          "id": "30644c61-9e7f-4a6c-82a4-8fdb14944e85",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "86ec52c2-ceab-4221-925e-5a180139b9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a0d7143-86ee-47be-9bd8-49ee9f88825a",
        "cursor": {
          "ref": "d30966b2-6dce-473c-ba6b-a87882d4bc5d",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "07907b18-1942-4154-b9ad-4495ac337c15"
        },
        "item": {
          "id": "6a0d7143-86ee-47be-9bd8-49ee9f88825a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2526c619-2149-457d-a77a-2d9b12907a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 331,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faad0bfa-e12c-4929-b192-d7dd4a9d910a",
        "cursor": {
          "ref": "5082cfed-c2ff-449a-91a6-2b42b962812b",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3d09035b-d036-4774-8d9e-508194c1976e"
        },
        "item": {
          "id": "faad0bfa-e12c-4929-b192-d7dd4a9d910a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e5156f62-dc36-4ee1-8422-8003a4de4ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "291a3108-e663-47d5-9183-8904ad71bf4a",
        "cursor": {
          "ref": "9940fd2f-8c31-4407-bb63-680583237e8e",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "6aa6ea51-85dd-4869-a858-89ca40cc4a92"
        },
        "item": {
          "id": "291a3108-e663-47d5-9183-8904ad71bf4a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b3fb72e7-bba4-4a18-9b6f-c188fefdf6ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a98048-71c8-4692-ac70-38d06a5da495",
        "cursor": {
          "ref": "cf90cf7f-d5b2-4927-afa6-1ef5299506e3",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "52824b7c-9246-4e00-8f61-a2728afc9476"
        },
        "item": {
          "id": "27a98048-71c8-4692-ac70-38d06a5da495",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ef422c09-56df-4611-9dad-5c4132ec6452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 188,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138280fe-8a16-4ba2-9b13-8be62a08ff4a",
        "cursor": {
          "ref": "ded484bd-efcf-4079-95f5-b81cafbd6904",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "12913473-8f20-4dec-8d04-fd2ad68d2c1c"
        },
        "item": {
          "id": "138280fe-8a16-4ba2-9b13-8be62a08ff4a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "25039d0d-7178-467c-bcae-e56a0ec13184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41fa1fe8-5685-4620-9af5-198484f0ab61",
        "cursor": {
          "ref": "4234408d-d4e4-492b-b8a7-d4c647c297d3",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2316f587-01f8-4b8e-b3fc-69cbd702a022"
        },
        "item": {
          "id": "41fa1fe8-5685-4620-9af5-198484f0ab61",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "628cac71-9d46-4d29-b8a6-f4e2d3381cdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8207c859-7f1d-4c5a-9664-599f65a0216b",
        "cursor": {
          "ref": "e41c861e-637a-497c-9a1b-2b8a72589a51",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "55f993b5-acd9-4e9d-96b1-f8a9df35b7d8"
        },
        "item": {
          "id": "8207c859-7f1d-4c5a-9664-599f65a0216b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "3e5ea2fa-d3e3-46a8-829a-01e657dddf88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c034f63-bcb9-4d70-9fb2-5517490dadfc",
        "cursor": {
          "ref": "c66b2263-26de-40aa-8b26-98e02158f46e",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c88b523e-0358-438f-a6fc-5f820b003ae2"
        },
        "item": {
          "id": "0c034f63-bcb9-4d70-9fb2-5517490dadfc",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1f7b9662-3e4f-4383-8419-cc9c1452dbcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "affb26ba-6b1e-4ebc-b5df-6b8274cd76fb",
        "cursor": {
          "ref": "fb1a64d0-f5a2-4842-849b-09eebd99c7be",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "05d7177c-7cb7-4f66-ab88-295a22e14f68"
        },
        "item": {
          "id": "affb26ba-6b1e-4ebc-b5df-6b8274cd76fb",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4454de03-c54c-4c78-ac4f-4402252e4e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4595890c-97bb-499c-9624-2dd48cac3c0c",
        "cursor": {
          "ref": "a5c6aa59-8425-469a-9ef0-f1b0691f44a5",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7d4232b1-d96f-44d1-ac72-4b9e40567bc3"
        },
        "item": {
          "id": "4595890c-97bb-499c-9624-2dd48cac3c0c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "02da05d3-9868-4f0f-9e92-c33763798132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f7e3fb-f9a4-467e-9cd1-edd02ad104d7",
        "cursor": {
          "ref": "0cd6a67d-dda8-4a11-9a39-1714dd6300e1",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "bbc27b3e-0561-468f-b2f7-5f48cfc0013d"
        },
        "item": {
          "id": "e1f7e3fb-f9a4-467e-9cd1-edd02ad104d7",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a3dd17ff-5245-407a-940e-97d61601a684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d720d5b-320e-4bc9-9404-6f2e0f9f618f",
        "cursor": {
          "ref": "14bfc644-d91e-43e2-9dda-073999da0a14",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c6c4385a-7929-47ce-a078-f49a7ed1d9d3"
        },
        "item": {
          "id": "7d720d5b-320e-4bc9-9404-6f2e0f9f618f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5542ed59-c1a8-430f-9c87-6ed2035a81f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14793d2c-c374-4646-bdca-323b10dc599c",
        "cursor": {
          "ref": "2af39550-c216-482a-8b77-ef1b02ad38d7",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "8fcb3583-28dc-4b8c-b958-58d05c79ca70"
        },
        "item": {
          "id": "14793d2c-c374-4646-bdca-323b10dc599c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "fe443321-5845-48aa-9900-5c5aa1f37095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9667c1c7-50c9-4217-8b16-46c76ab85802",
        "cursor": {
          "ref": "d3329450-428e-4933-80a9-7abff08c5ae9",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d0bcf811-925c-45d0-9996-d4039d8093b3"
        },
        "item": {
          "id": "9667c1c7-50c9-4217-8b16-46c76ab85802",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8571fb13-4516-494e-8b7a-2205ee0e007b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcac2417-70b3-423c-b920-27e2216f63e2",
        "cursor": {
          "ref": "75035265-badc-48da-861a-4bdaa7e5f2d0",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f4907224-a5fb-45ab-9f14-fec875ef4ed9"
        },
        "item": {
          "id": "dcac2417-70b3-423c-b920-27e2216f63e2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "be73cf80-2bab-40a8-a11e-55bbc9d3ff96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a11a23cc-5df9-43a2-a750-163199247433",
        "cursor": {
          "ref": "00321e21-e1b0-4dcf-9438-443e4c6227a5",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "52bc0e70-f2b0-49e4-9f25-8059a4dc5074"
        },
        "item": {
          "id": "a11a23cc-5df9-43a2-a750-163199247433",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "007b605a-3ac7-4c7b-bee0-34a925f64820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c493d5-08ef-4eb1-ab18-5ec0980d6b35",
        "cursor": {
          "ref": "a3871bf0-1127-40b2-9271-34f16facbada",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "358dcc88-ba6e-4c83-a1dd-7fa3f0ecbb0b"
        },
        "item": {
          "id": "85c493d5-08ef-4eb1-ab18-5ec0980d6b35",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f686501b-190d-444f-9ee5-562add96a6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e79b8e-cfd7-443f-a0c3-ce09f3f9c27f",
        "cursor": {
          "ref": "e3ed27a8-ae80-488f-b274-ef1811293c6c",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "79cf13bd-d8ce-48db-baeb-10680ba0d330"
        },
        "item": {
          "id": "23e79b8e-cfd7-443f-a0c3-ce09f3f9c27f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "de9444eb-e6c0-41df-91dd-20868365fadf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4b7753-5dfb-4d3a-a3a7-5a36ba43b84e",
        "cursor": {
          "ref": "97d05dc5-21a7-47ac-9973-bb623703de93",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a64fcd0d-3aaa-4804-89a4-6106180eed46"
        },
        "item": {
          "id": "7d4b7753-5dfb-4d3a-a3a7-5a36ba43b84e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ba8c2593-186c-4aeb-947c-5b42cbecaf92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3bf4ec0-113f-472a-9ac9-55a83aff000d",
        "cursor": {
          "ref": "abe911a0-f355-4e3a-bb0b-f777b80f8964",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "bac55cab-7d5e-4311-8924-053b3cefaa31"
        },
        "item": {
          "id": "e3bf4ec0-113f-472a-9ac9-55a83aff000d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "56ff31e9-c5fb-45b8-9eda-3c38ab6aeeda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 187,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d77e66aa-3288-43d3-86d9-5f85528e452d",
        "cursor": {
          "ref": "d92e7591-8376-46e3-96ad-90ef39a63f4a",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4b140585-8d4b-40aa-a9ea-ee08eeafc9f2"
        },
        "item": {
          "id": "d77e66aa-3288-43d3-86d9-5f85528e452d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3348b3bc-3cac-48bd-a629-8f1a8224e468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 204,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fbaa0f2-646d-4634-859f-39e36cdb16ae",
        "cursor": {
          "ref": "f81dfff0-bf9f-4bf9-85d5-cf45608690a4",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a2474de2-f990-42fa-a2ec-d37586c74f2b"
        },
        "item": {
          "id": "6fbaa0f2-646d-4634-859f-39e36cdb16ae",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b7f8784a-c142-40bb-944c-392e8a4b4994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83040e02-2f36-4e57-9720-acaacebdce52",
        "cursor": {
          "ref": "5504527c-c561-40fb-8542-8b018df874ce",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9fb07372-36b8-43d5-8cd5-a93f72198888"
        },
        "item": {
          "id": "83040e02-2f36-4e57-9720-acaacebdce52",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9deb6c5b-f058-41c8-9446-9d2d5b05a118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 286,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f71fbb2-7025-4d81-8b5d-0e1d69d459a8",
        "cursor": {
          "ref": "bdc3d9cf-676f-443c-b963-6561255e90fa",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f4d0e703-71db-4c6a-8007-28f9604a578e"
        },
        "item": {
          "id": "1f71fbb2-7025-4d81-8b5d-0e1d69d459a8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "41095780-4a73-4e72-b354-a77f940563c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc644c2-5301-4a11-a2d7-ef34ed2fab6a",
        "cursor": {
          "ref": "c072fafc-a0af-43cd-aa8c-b235ecf8ce5b",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8fc63175-7c85-4b74-8f41-831aed199527"
        },
        "item": {
          "id": "0dc644c2-5301-4a11-a2d7-ef34ed2fab6a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "eb8fea3c-12b2-416b-9a7a-3c6973ec4196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7301fd1-758e-4bb6-b63f-5c3190e83643",
        "cursor": {
          "ref": "83ab9100-e4b1-40a9-bb35-cad56a5cce1c",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fc75f3f4-1950-4304-9ccc-d2b175406b85"
        },
        "item": {
          "id": "b7301fd1-758e-4bb6-b63f-5c3190e83643",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d53218fe-e667-4ddf-bf7a-200fb814e28d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601e727a-d304-4b20-bcd2-9f77daa1cf16",
        "cursor": {
          "ref": "3f8b5337-3ded-4b4c-80bc-4f9f3d9ceb29",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "042ada71-7d4a-4710-9907-5a039bf87136"
        },
        "item": {
          "id": "601e727a-d304-4b20-bcd2-9f77daa1cf16",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0e6367c0-ef79-435f-b0fe-4fc13666a6be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a595d129-cd1c-4d38-8de0-f64c279889ad",
        "cursor": {
          "ref": "a1870bb9-1eac-44a0-b6e5-849a639ee2dc",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3caa58b8-8dff-4d83-842c-895b439adb58"
        },
        "item": {
          "id": "a595d129-cd1c-4d38-8de0-f64c279889ad",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "41820abe-55d0-4131-a1fd-80c7b601cef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2187fe4-fdf1-4be5-88f8-daa271eceb46",
        "cursor": {
          "ref": "fd1f55ab-1860-4895-9042-c3e56659ba5c",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6734a98d-a1ea-4904-9f7a-bcb30071975e"
        },
        "item": {
          "id": "a2187fe4-fdf1-4be5-88f8-daa271eceb46",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0738ac68-9597-48d6-80c6-ba988027a452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4008cf9c-be73-4373-9919-2751bf02d580",
        "cursor": {
          "ref": "9df95874-ed46-4f76-a81d-75909f247917",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3b97a259-fc37-465d-897c-afbcacebf469"
        },
        "item": {
          "id": "4008cf9c-be73-4373-9919-2751bf02d580",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "700ef389-1609-4459-b659-d713d1520f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f580a89-f4f5-4bb8-8240-d6ff7b50ed6e",
        "cursor": {
          "ref": "0d71630d-9b7e-44dd-a511-6bc4b5d5bcd6",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5748dcc9-73d0-46d5-b915-72658a5cb56f"
        },
        "item": {
          "id": "3f580a89-f4f5-4bb8-8240-d6ff7b50ed6e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "cc56d360-07e2-4a99-8524-1e725fe13c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 211,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4359fd77-2b1b-4f2b-9b8b-84bea841f336",
        "cursor": {
          "ref": "e252fb5d-ed21-4830-8e44-b132016f83f0",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5d8755dd-82b1-4aff-972d-7ba7c7464ca1"
        },
        "item": {
          "id": "4359fd77-2b1b-4f2b-9b8b-84bea841f336",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c8c28cec-6a16-403c-9096-caaa0ae29383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 197,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce5fb52-b4a3-48ca-b52f-8601c3e083fb",
        "cursor": {
          "ref": "db421a97-1c98-4940-89ec-0e089818b19f",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "21285679-f754-4f7c-9e3e-042aeb055d8e"
        },
        "item": {
          "id": "cce5fb52-b4a3-48ca-b52f-8601c3e083fb",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "556336fd-f9ae-4614-b608-d3fad7f8be29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31644bc2-cd38-4c26-a23c-d22e384582b7",
        "cursor": {
          "ref": "b5668c24-4d3e-4054-9014-c6f6c6126334",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a9f2203c-2d8e-4389-9364-23af88cf45a3"
        },
        "item": {
          "id": "31644bc2-cd38-4c26-a23c-d22e384582b7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "8763462b-28a1-45ea-b6c3-c2b8606bd73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3cb267-ac33-4d9d-b170-8eac42d9c279",
        "cursor": {
          "ref": "cb25098c-438c-4674-a886-dcf6dd57999a",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1d16c47d-2141-489f-9c2a-a9aab502c773"
        },
        "item": {
          "id": "4a3cb267-ac33-4d9d-b170-8eac42d9c279",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8350022f-5562-4fe1-a2b2-9f525a12c55b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 210,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d49cc38-6837-499c-9064-3419d748c1aa",
        "cursor": {
          "ref": "224ba248-4046-4617-b5c2-880e357b9b98",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3aaccf66-8215-4b22-8721-d463bd118a49"
        },
        "item": {
          "id": "1d49cc38-6837-499c-9064-3419d748c1aa",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7521e0fb-aecc-421f-b023-8e822aa671dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34adb152-fc79-40f4-b7cb-ffedd4c2c02f",
        "cursor": {
          "ref": "efa19abb-ba52-40bc-8690-4fd60df9d8a2",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7c9b56d4-5cab-4449-b207-b63fb6151526"
        },
        "item": {
          "id": "34adb152-fc79-40f4-b7cb-ffedd4c2c02f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "68ef1fd4-37e3-4363-94bf-084d336f1db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95163695-ae9b-4faa-81fc-6d9feb8c51cb",
        "cursor": {
          "ref": "39836169-b9dd-4737-bd8b-a4581242a805",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8ed7ed61-1b14-449f-a7cc-bd8b78b31c1a"
        },
        "item": {
          "id": "95163695-ae9b-4faa-81fc-6d9feb8c51cb",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d0607d3e-d9e1-4a72-b974-38e94d1fabfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0dac08-6400-4205-96d3-65de8f1b01ff",
        "cursor": {
          "ref": "e9dd6b1a-68b2-4e00-8101-3b80023d8e8d",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5b82bd86-ec1d-4b47-ba7d-dacade678f72"
        },
        "item": {
          "id": "8f0dac08-6400-4205-96d3-65de8f1b01ff",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "74c5971f-0ccd-45d7-bac8-c54af686e1a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e64ff1a-4670-4cd8-874e-4a428f3e398f",
        "cursor": {
          "ref": "eb20c55f-5b95-4f34-b2af-1141e2d564ff",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "21eb41dd-1697-4d0d-a9b3-f4360520dd08"
        },
        "item": {
          "id": "3e64ff1a-4670-4cd8-874e-4a428f3e398f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "40ed30b3-8dfc-4788-9c3e-03ab34c43419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44ff16c-1ac7-4b99-828b-007d4c8360f5",
        "cursor": {
          "ref": "39a6d382-8221-42db-8559-3a6ad79f1aee",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "01153a65-5283-4c84-8e9b-748f9d2edcdd"
        },
        "item": {
          "id": "c44ff16c-1ac7-4b99-828b-007d4c8360f5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b3237416-7132-4d4b-87a4-d9b657f5fbb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a68e134-9b28-46f3-92b0-173ee2d7eedf",
        "cursor": {
          "ref": "0f347f84-36f1-4c88-9d01-dcb8ba175eae",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "83946e41-32c2-4caa-b97b-6723e009cb39"
        },
        "item": {
          "id": "8a68e134-9b28-46f3-92b0-173ee2d7eedf",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f994564c-a22c-4502-ab76-81f1a917ee76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7c9906-ac1a-4086-88c2-7bdf2c3f6ed5",
        "cursor": {
          "ref": "c347acae-538f-4d97-b2d9-f3b29a4dd836",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "52072124-28d0-45f4-9b72-61a5e4033443"
        },
        "item": {
          "id": "dc7c9906-ac1a-4086-88c2-7bdf2c3f6ed5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5cd3afef-c61b-436a-abf7-370e4598a418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0198b21-52c0-4474-946f-2da447b73c67",
        "cursor": {
          "ref": "409d3021-fe7d-410e-9341-7e0aa90685af",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "af12d21d-cfe7-4db5-a6d3-8061f67988cf"
        },
        "item": {
          "id": "f0198b21-52c0-4474-946f-2da447b73c67",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0b08fe7a-1493-4ed0-8c99-544e1e55761b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f940090-9139-471a-ba61-5620ba361361",
        "cursor": {
          "ref": "c206d1ec-8146-4183-9052-424938f3b0ab",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3435f2a5-e4e2-4d54-b0fb-0b643b08ae3c"
        },
        "item": {
          "id": "5f940090-9139-471a-ba61-5620ba361361",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e3396a66-7214-4796-bfa4-58feb5e4e9f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521c0397-e0d9-4964-ad90-8f5f0e9547b0",
        "cursor": {
          "ref": "c686db9d-e259-4474-a2a5-c65d0e8d2a6b",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "142ba094-5bd2-409b-8ad9-3520b358114b"
        },
        "item": {
          "id": "521c0397-e0d9-4964-ad90-8f5f0e9547b0",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "931378ea-d720-44b1-a45a-c6e4283a0aca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ce9cf7-cb1c-45cc-a0e7-c25ddcac23ed",
        "cursor": {
          "ref": "05a0c815-0f11-414f-a01c-1a5a219ff81e",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8ad8ddca-da98-48fb-abfc-509d0c189eb2"
        },
        "item": {
          "id": "65ce9cf7-cb1c-45cc-a0e7-c25ddcac23ed",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "88a723e0-78f6-44a7-886e-9f7ed6b0cc47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a29046f0-f407-496e-922b-81fc6b8f7964",
        "cursor": {
          "ref": "f7e419a3-41f6-4fb8-8f86-81e1b57aa7a1",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f2a93935-81c5-45ec-891d-29dc61202211"
        },
        "item": {
          "id": "a29046f0-f407-496e-922b-81fc6b8f7964",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b9b8cb03-ba35-4d1c-92fd-4ab293f488ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af97327-4b53-4bb7-97b3-24d5dcad4858",
        "cursor": {
          "ref": "9220c864-c7c5-4a17-87ff-df25d3fdb2b1",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "590c80de-7aeb-48ec-af72-ce33fa9b23bf"
        },
        "item": {
          "id": "2af97327-4b53-4bb7-97b3-24d5dcad4858",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9a994cb3-8db1-4d10-961f-a78ba181ad75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b64cd3d-c049-4d6a-9d8e-1f1011548252",
        "cursor": {
          "ref": "e6a1f907-d2cf-45d1-92fe-fdc3484af178",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c395d003-4f23-4d46-a94f-023dbcfb8584"
        },
        "item": {
          "id": "9b64cd3d-c049-4d6a-9d8e-1f1011548252",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d911ec29-82d1-460b-85c1-93f75c0adb34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a49e65-a365-4201-92a8-2813318bea85",
        "cursor": {
          "ref": "e2d4c41b-4478-49de-9b39-c8776d27908d",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5732f081-9e74-4053-9f24-f0bbb3fd6fb7"
        },
        "item": {
          "id": "b0a49e65-a365-4201-92a8-2813318bea85",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3b5f4a8c-376d-4b44-b8a2-f622d91e3b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ebe0fc-9b6a-49f1-abbb-356e1f24564b",
        "cursor": {
          "ref": "8e39c1db-6964-4435-810c-f46dcd7d5f53",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c47d6ce6-e48d-4049-8b89-8fae13d5a26b"
        },
        "item": {
          "id": "e2ebe0fc-9b6a-49f1-abbb-356e1f24564b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "fad9ff5b-6e84-4bb4-93b8-7742f7deda58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8545573-d833-4145-95aa-a4ef1365bd85",
        "cursor": {
          "ref": "8f4d605b-0c5a-4ff7-9178-b9863b71c75b",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "18a3842f-f920-4afe-8f8e-a0d2c79bf070"
        },
        "item": {
          "id": "f8545573-d833-4145-95aa-a4ef1365bd85",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "a838b3ac-c5ba-4771-92ef-03354f8dba54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df90d30-1818-4f85-a0e2-8461518a56bf",
        "cursor": {
          "ref": "dbe4d7a2-9418-40e4-8f88-71f0f197cfcd",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "454b68ec-4013-4d5c-bc20-3ceb873c628a"
        },
        "item": {
          "id": "5df90d30-1818-4f85-a0e2-8461518a56bf",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "86949837-138d-4a75-9364-e87b6081d95f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceec6d39-8a32-4f7d-ab56-be3c59bf787a",
        "cursor": {
          "ref": "3a90ba00-85ac-4830-ad05-dbbcf783067c",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "60cc7b00-6ba2-4552-9d93-b2f3d0eefdcf"
        },
        "item": {
          "id": "ceec6d39-8a32-4f7d-ab56-be3c59bf787a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6c100286-044f-4907-81a3-7d8d6b63f59d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe5dfcc-f5cb-412a-afb7-bc6db33d3fdb",
        "cursor": {
          "ref": "5423a44a-d109-4fcf-b61d-7bd553aeed90",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "70d5e69f-b6dd-4135-ab4f-053181789095"
        },
        "item": {
          "id": "5fe5dfcc-f5cb-412a-afb7-bc6db33d3fdb",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f83b614e-4c38-4738-9351-50b65c8951f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22916d47-10ab-4616-99da-c9c7e5b2cd0f",
        "cursor": {
          "ref": "a7203e8b-1038-40cb-ba7d-eaaaeb7e2a7b",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a274a75a-ccd0-44f0-8bb6-1751d8e49965"
        },
        "item": {
          "id": "22916d47-10ab-4616-99da-c9c7e5b2cd0f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a274cfd1-dd09-420d-ba2b-27ff3610d5b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32764f0-8feb-4d48-a20a-a9a1494240b6",
        "cursor": {
          "ref": "f143758d-41bf-4ae2-acd6-2129db1a72f9",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f5072888-04a8-45df-b4b5-91a654563c64"
        },
        "item": {
          "id": "b32764f0-8feb-4d48-a20a-a9a1494240b6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1ab238d4-46b8-4277-9fdb-21a092c259bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b7e5b2-cee1-4563-a490-2358e0dacb34",
        "cursor": {
          "ref": "254c6f5a-7c7d-4b16-8197-402dda06bb07",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4c767630-7fb4-48bc-bdf7-1d14e084cec3"
        },
        "item": {
          "id": "23b7e5b2-cee1-4563-a490-2358e0dacb34",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "27ecc019-7f91-4119-92e6-93bbe2cc543f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eae02a3-e1e5-4cb4-8938-d7392a0261b4",
        "cursor": {
          "ref": "d248bace-3f87-479d-afbf-1faadfff7a70",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5393f78e-ff03-4eb6-b76e-06bda4cd458b"
        },
        "item": {
          "id": "9eae02a3-e1e5-4cb4-8938-d7392a0261b4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c116ad80-247c-457d-9880-532f2eb0b9e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3688ae-f8e8-49c0-8859-4b3704179d79",
        "cursor": {
          "ref": "d0f7fd05-1eb6-45ae-bc1d-f9d9b8179b5d",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "12f6a1bb-536b-4cac-8db7-1269b0faa496"
        },
        "item": {
          "id": "4e3688ae-f8e8-49c0-8859-4b3704179d79",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "559764f0-d13c-4671-a643-867a188e67ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e86772d-c654-44d5-b570-a85aa1558f99",
        "cursor": {
          "ref": "e1e725b7-fa34-4cbc-b7b1-6ef4e874d7ed",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2ecbf4d3-292d-4f41-9d76-a66ef416952b"
        },
        "item": {
          "id": "2e86772d-c654-44d5-b570-a85aa1558f99",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b67cf39b-4a0a-467d-b67b-69a6d7efdb61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36f881d-c09d-46dc-b634-83810b58a8ae",
        "cursor": {
          "ref": "f25c7728-8fce-4996-a7bf-9f3127e6b9e7",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "815e4f7c-c5a8-42c7-9d63-2aaa974e0d66"
        },
        "item": {
          "id": "c36f881d-c09d-46dc-b634-83810b58a8ae",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "523cb9af-a28b-44c6-96a7-2e752be289df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9eaced-75e2-4741-baa8-2dde5ff45dfa",
        "cursor": {
          "ref": "761ebcab-1890-409e-8c46-1ab2f70eb10e",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "9cd5675d-6783-43da-8377-aeccf3670d6b"
        },
        "item": {
          "id": "ca9eaced-75e2-4741-baa8-2dde5ff45dfa",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9d628cf6-ec53-457b-a99b-0bea66a56fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de58eed-df45-4587-96f4-6bc86688f9c6",
        "cursor": {
          "ref": "7c76bdd8-ec4d-4d82-9fa3-46cd7bffaaba",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6b26cd2b-bde6-4c43-b022-c6c11e228e9e"
        },
        "item": {
          "id": "6de58eed-df45-4587-96f4-6bc86688f9c6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "db56f030-16aa-4cc2-b1e0-451047796a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d002add6-cf22-4fc8-9250-d162b975c0ab",
        "cursor": {
          "ref": "a814580a-6666-4c51-b08c-7b2218334721",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4b3b4f51-0d13-4c87-829b-df8e31da23c5"
        },
        "item": {
          "id": "d002add6-cf22-4fc8-9250-d162b975c0ab",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2234fa2c-9d23-4cd1-992d-3c1b24b3886c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad602ccf-43eb-4645-a4c7-44bfb835fbdf",
        "cursor": {
          "ref": "07801dd7-18a0-41f0-9145-fbbdeb3f592b",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "01870981-8351-4066-a492-1d17edce539d"
        },
        "item": {
          "id": "ad602ccf-43eb-4645-a4c7-44bfb835fbdf",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "bae0b223-0436-467f-af09-492489714c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a49325-2d03-457e-bdba-36a55d34d520",
        "cursor": {
          "ref": "c44f4bdd-c1a9-4137-93f3-9ed342d0ed94",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "253661b0-13cd-4aa9-884b-7a4f3e49b020"
        },
        "item": {
          "id": "d9a49325-2d03-457e-bdba-36a55d34d520",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "c4368bf9-7070-4a11-b0a1-af0d64ca843e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9527098-41f6-431c-a8a1-1946c20797b5",
        "cursor": {
          "ref": "3fdfe4a6-1253-4d23-a179-517931c81987",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7a5444e6-1f90-4ac5-8c0f-f37c4e1e9161"
        },
        "item": {
          "id": "a9527098-41f6-431c-a8a1-1946c20797b5",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9be8fcfb-76dd-40ee-909f-edd029ba83eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988e0507-8e24-4c72-9ac9-2b63ae44785b",
        "cursor": {
          "ref": "dc406397-6a22-47bf-be00-77805d711467",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "73194cff-b02c-4968-a9c1-4abb378c5d14"
        },
        "item": {
          "id": "988e0507-8e24-4c72-9ac9-2b63ae44785b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "34937cb1-59e3-418f-9ab9-64f9e31ef883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1604ee41-9452-4017-a8ff-7b310bbb061e",
        "cursor": {
          "ref": "d5ab4d1c-ae3f-4cda-be27-f4afa5b69c11",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "caf689a4-2f29-4ee8-892f-9859a8df9ea3"
        },
        "item": {
          "id": "1604ee41-9452-4017-a8ff-7b310bbb061e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0631c3c2-e93b-4a54-a391-26500cfa6a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16d8b1d-918f-4507-aeb9-8d1edbc85d43",
        "cursor": {
          "ref": "08166ae8-d114-4e6c-9819-fac756c0dcc4",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "14ed5c51-978b-463d-b1f5-57a96776f4ff"
        },
        "item": {
          "id": "f16d8b1d-918f-4507-aeb9-8d1edbc85d43",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "94a3a382-9f6e-4cf0-9f2f-99f0ff0c2c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ac357e-c386-41df-b78c-68eb4d13d785",
        "cursor": {
          "ref": "a3a09649-4e17-4faa-8d15-e65ed2c2e8e1",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2a8d7749-13c1-4ec8-931f-9bff137a36cf"
        },
        "item": {
          "id": "47ac357e-c386-41df-b78c-68eb4d13d785",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fd011e51-16c1-4c23-a5f1-f3bb3e4c4455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe68129-40de-4d21-9fd6-945bd31654f2",
        "cursor": {
          "ref": "de12e1c4-adae-4b4e-8bd3-ce9d44a3dc3a",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "47089840-b3c6-4ccc-970d-7bfcc24cfe3c"
        },
        "item": {
          "id": "abe68129-40de-4d21-9fd6-945bd31654f2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f59affba-c4e8-4a4e-902b-75015533c9d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d6c2828-427f-4695-9d38-7b4b8588d3b6",
        "cursor": {
          "ref": "e69ca26d-f697-492f-9986-b4d45555435c",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4b6b95bd-b993-4be5-bbae-5017be44cd54"
        },
        "item": {
          "id": "1d6c2828-427f-4695-9d38-7b4b8588d3b6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e74723d1-d018-4cfe-be91-18efd0b5d12b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b756db-626b-416a-83e8-8d9e77e9b3f2",
        "cursor": {
          "ref": "d04d058d-cbcd-4311-b29d-b31388409488",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5c0267c1-1629-47ee-82e3-b747f69835b9"
        },
        "item": {
          "id": "31b756db-626b-416a-83e8-8d9e77e9b3f2",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "19b201a1-c781-4baa-842b-33de9a7a54cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ffd1c4-d1d5-4689-b955-495a5dea3c41",
        "cursor": {
          "ref": "529708cf-7b48-42c5-b8d5-99a6a832b24a",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6f222623-9175-42ee-b55d-1848da8dfc50"
        },
        "item": {
          "id": "80ffd1c4-d1d5-4689-b955-495a5dea3c41",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "72e24e0c-8530-4324-8c37-907c61550637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a87425-040d-4654-bc1b-520b9f70956a",
        "cursor": {
          "ref": "44d895f0-a2eb-4658-92ad-87308de545fa",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4689ab91-ad2b-4f2b-a216-06cccad8fc98"
        },
        "item": {
          "id": "20a87425-040d-4654-bc1b-520b9f70956a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1ba421eb-e9db-477d-88b4-59fc0575194b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5855cbc0-3791-479f-89ab-689f3e943623",
        "cursor": {
          "ref": "b9e200e4-dabc-45f0-8c66-28e4a5ae729b",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e59a37ed-a0e0-435c-8e41-349e1041c3d0"
        },
        "item": {
          "id": "5855cbc0-3791-479f-89ab-689f3e943623",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "45d8c77c-e8a7-4a2b-8ea8-106ec534de30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0172c90b-3ca2-43df-a470-1d573f7b32b5",
        "cursor": {
          "ref": "5c59ef94-af28-4e6d-9021-1fc2166cb63a",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1cad3672-d6a4-449d-83da-efcda20cdf5c"
        },
        "item": {
          "id": "0172c90b-3ca2-43df-a470-1d573f7b32b5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d198f76b-0bc3-4e1e-8684-488818e002cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3437b56e-5ce8-43d8-90a2-d7b19c174473",
        "cursor": {
          "ref": "106b84dd-46e0-410a-a20c-fa02badabaaa",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "081c396c-91cd-4cd4-ac0f-f0467fbebdd0"
        },
        "item": {
          "id": "3437b56e-5ce8-43d8-90a2-d7b19c174473",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "fa2c679e-155a-435c-934e-09dd29aeb48e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0865df08-d3dd-49e1-852f-38fa447270f8",
        "cursor": {
          "ref": "d9d4d40d-2930-43db-b8a4-f65bab6a7dc2",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "d54e470a-9d5f-4702-9334-b34f13443dec"
        },
        "item": {
          "id": "0865df08-d3dd-49e1-852f-38fa447270f8",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "2caeb1ec-6b2e-4270-be7f-99fa48eb6791",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a5ee79-5412-403c-ac6a-9d07d9a2a848",
        "cursor": {
          "ref": "1367500b-4228-49ee-bbed-89057a03bea8",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2eb07182-d34c-41e5-bec3-386e1777a83b"
        },
        "item": {
          "id": "e4a5ee79-5412-403c-ac6a-9d07d9a2a848",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a9cf65b4-9c3f-4b69-b3d8-2bb63d558d14",
          "status": "OK",
          "code": 200,
          "responseTime": 428,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e073be-7049-4a8c-abf0-549ad980c682",
        "cursor": {
          "ref": "676fecef-e2ee-4aff-81ac-ac110674a73a",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4b29dabe-1622-4580-a724-282c34a64a39"
        },
        "item": {
          "id": "99e073be-7049-4a8c-abf0-549ad980c682",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "59e8310f-898f-4b4f-8f67-e4343f1de680",
          "status": "OK",
          "code": 200,
          "responseTime": 322,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf0b46e3-5e80-4a49-b75d-29caf89755f2",
        "cursor": {
          "ref": "c0f3a101-4e30-4272-a25b-f19584bdd3ed",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "af17c107-ce72-4af9-b112-b47b7c72f331"
        },
        "item": {
          "id": "cf0b46e3-5e80-4a49-b75d-29caf89755f2",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "08d50c75-5272-4016-91e8-f6954d3b05a6",
          "status": "OK",
          "code": 200,
          "responseTime": 581,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1296eaf-92a7-4ab2-a1a2-55453111e0ac",
        "cursor": {
          "ref": "f2c937fd-9d2c-4a5d-a3aa-3fdc459e2a9f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "74eb0bc5-5a33-4de2-9bf4-f8510f0cabd1"
        },
        "item": {
          "id": "c1296eaf-92a7-4ab2-a1a2-55453111e0ac",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b0af04c2-5949-43ce-ba42-47a478b7a3f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1296eaf-92a7-4ab2-a1a2-55453111e0ac",
        "cursor": {
          "ref": "f2c937fd-9d2c-4a5d-a3aa-3fdc459e2a9f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "74eb0bc5-5a33-4de2-9bf4-f8510f0cabd1"
        },
        "item": {
          "id": "c1296eaf-92a7-4ab2-a1a2-55453111e0ac",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b0af04c2-5949-43ce-ba42-47a478b7a3f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1296eaf-92a7-4ab2-a1a2-55453111e0ac",
        "cursor": {
          "ref": "f2c937fd-9d2c-4a5d-a3aa-3fdc459e2a9f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "74eb0bc5-5a33-4de2-9bf4-f8510f0cabd1"
        },
        "item": {
          "id": "c1296eaf-92a7-4ab2-a1a2-55453111e0ac",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b0af04c2-5949-43ce-ba42-47a478b7a3f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65697d1e-fd43-49cd-a817-e4deebc972cc",
        "cursor": {
          "ref": "d1b3beb1-4ffa-4830-a5dd-cf531c675e0a",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "592b5fed-7f61-4f88-8d36-85ad8e7058a9"
        },
        "item": {
          "id": "65697d1e-fd43-49cd-a817-e4deebc972cc",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "57ed3e37-8102-4987-a451-a5513caa6e3c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 33,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11dd9a3b-44b0-4b01-94cb-e27158addd22",
        "cursor": {
          "ref": "8d319d33-c606-418d-8076-b786ee3cf399",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "db20b9d4-105d-49e9-a46d-799b03a9926b"
        },
        "item": {
          "id": "11dd9a3b-44b0-4b01-94cb-e27158addd22",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "63fcf5e2-b644-4303-94c2-1f1e340d70a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "11dd9a3b-44b0-4b01-94cb-e27158addd22",
        "cursor": {
          "ref": "8d319d33-c606-418d-8076-b786ee3cf399",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "db20b9d4-105d-49e9-a46d-799b03a9926b"
        },
        "item": {
          "id": "11dd9a3b-44b0-4b01-94cb-e27158addd22",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "63fcf5e2-b644-4303-94c2-1f1e340d70a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "e3c4c440-2150-4d78-8f1b-eaebfcb32bdd",
        "cursor": {
          "ref": "55f926eb-5eef-42fd-a7a0-df350f5fd68a",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1e5efc16-8803-4ab1-afa2-1df6f15f7cd6"
        },
        "item": {
          "id": "e3c4c440-2150-4d78-8f1b-eaebfcb32bdd",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "7774694d-eb43-422c-a20d-3649c1e92d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "bfb04970-a86b-4187-bdd4-aac415b8bd23",
        "cursor": {
          "ref": "f8c162a4-c3b9-41cf-9d6d-c2a68d48fe75",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "08512ca8-c61c-4731-9e54-9ee4d9502cef"
        },
        "item": {
          "id": "bfb04970-a86b-4187-bdd4-aac415b8bd23",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1c74673e-3b60-4fc5-8971-4cac795e3bea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "bfb04970-a86b-4187-bdd4-aac415b8bd23",
        "cursor": {
          "ref": "f8c162a4-c3b9-41cf-9d6d-c2a68d48fe75",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "08512ca8-c61c-4731-9e54-9ee4d9502cef"
        },
        "item": {
          "id": "bfb04970-a86b-4187-bdd4-aac415b8bd23",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1c74673e-3b60-4fc5-8971-4cac795e3bea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1ac84928-46dd-4ef9-b57b-c9e7bcbcf726",
        "cursor": {
          "ref": "1484038b-fff0-4d07-aace-bb21f12aff20",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e7fee483-c457-4c34-abc6-5f13316f772c"
        },
        "item": {
          "id": "1ac84928-46dd-4ef9-b57b-c9e7bcbcf726",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "d007fe4e-7910-4cf4-bbd4-a9843e4712cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}