{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "857784f1-f78b-4626-8946-29722946d40e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "365c2cc7-0f46-4f3a-af01-3418f98a403f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f22b1903-119b-4062-8738-32633832a4da",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "47d13819-8519-4c6d-86df-28bf6d52842d"
                }
              }
            ]
          },
          {
            "id": "ee5b5f5e-1265-4593-be12-d7d19404df94",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0746a1a3-698d-4669-bdb6-b75ab5163171",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0f6a2402-5ec2-47dd-9e29-30c9c8af500a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "59b20272-2d6a-4212-9d13-dad18fcf77c2",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c9744ddd-5607-4e06-9dfc-678adbb9c687",
            "name": "Positive Testing",
            "item": [
              {
                "id": "01498a1e-f0a8-4e76-a418-7a919d4f42a2",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8f97365-af94-498c-8038-1bbde21e6bb0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb32a01e-a89f-4330-a1a3-6809b8b0cc04"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "206aeac3-7402-4286-a278-86c30703b348",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1da59dae-f6a8-45dc-8a9f-960ff3a9d11a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "14e1ac63-2370-46ed-8744-347f4303a5df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "18d378e1-1c99-456f-b4c3-0cbaf8fcbd43"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "917bde26-cb6d-4c74-8023-f36d03f1fb93",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3ec6a0fd-24b1-49ed-8c48-8fbd490bde96"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8d3650f-8077-41c0-bea2-cdbafe08988d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2969e54d-3cfa-4e2d-8068-c4df3953f84b"
            }
          }
        ]
      },
      {
        "id": "e5dbfcb1-756e-41c6-9eea-c8f447f3a877",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "87303652-60d7-4b67-bf57-06373682e6c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4b479029-0a13-4414-b3d4-10c842a88545",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "84bd238b-c88a-441f-9132-74a842e7f513",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec8f51c-e94a-4e4a-94fe-3c880de83a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1aa148b7-3326-499f-9e98-0fc8c89677a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab42c678-5da8-43c7-bb33-7e00b2ec212d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e54a7c-70f5-48ef-aec8-97983e8f4676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6e68337-fcf2-43b5-8b92-6916894a4d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1c7d65-b8cf-41df-b294-2edc7face4d6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5800e038-66b2-4160-aced-7dbc85a62f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5bfc5b9-5a97-4d88-b395-5140ad91767b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e39ed8cc-31d9-4496-81f5-5b30ad3e06c0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f7fe9e19-9b8c-45df-a5e9-3f2ae5bc9193",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7732fb-b65f-4a00-a864-d231d2db0d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7df888ba-758a-4f91-aa4d-6308abbf5d39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15758aff-9b63-4842-8574-028a5384de87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f8a2919-f670-41ea-9083-f08a4542a4c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c21d02-f26d-4ab0-a561-0ac2bea13947",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53dc15e7-05c7-4cd9-ab09-272a94660ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7ff4b16-e59a-45a7-8be1-eb1ed3c9bee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3726606-0113-4e14-a345-9a350f088e58",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b126b9a8-8a4b-4849-b8fa-b771978d9740"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5ecc77f7-87c0-4f67-8c9d-d0ae15800396",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e261ebbb-bfc2-475d-801c-de5e736a96fe",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b96c169-4040-4d42-8d9f-6d625f933dec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0d9cc8db-01b9-496f-97b6-dc1a54ecbd41"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e63bd89e-b633-4a0f-8951-9bd51556ea16",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "cd2d30bf-de76-435e-adb6-f6dd1a530b08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e90a319f-f7ea-4655-b94a-22f05708f299",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "deed14ac-7246-47bb-a594-7fa205d42435"
            }
          }
        ]
      },
      {
        "id": "c246a9ae-abac-4a21-a2f9-74206a0ae90b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e5a5dae9-ea38-41bd-aaec-24311c63ae62",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fa6ab5de-17ea-45f9-b561-d5ee5bcb771d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "95a8b20d-b56d-4d12-901a-833631b31eeb",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1bf5f3-2117-42b3-9eb0-6ea3b4c2c15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca4af2a-8464-44bf-8552-52e4979587d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75bd2bf7-e8ec-46af-8c1a-93883fac110b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0a6faf6-3f15-4b96-bee7-db5fff5df810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aad676f-6331-4052-b0b9-bb9155a76ac0",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc3d5b1-373c-4b47-b5b5-d2b5a76de422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b71c728-701c-4c11-be90-08ca10109483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bdbdd25-5558-413f-af4c-f01f64fcf928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47b25bfa-2d6d-4503-9271-a07b9a250bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e33f9ec-1743-4b3f-af4f-53be53c83bd6",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8135eb-ac11-4b19-a060-edf5005c466c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52f11af2-ed24-4d34-904d-60fe0e96debd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74d47c5-4154-4ac6-a055-cc0de3e635b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a39225c4-1070-4d02-a7c2-8365c0612a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc5c1a1f-f438-423d-ad5e-d243e3eda6cc",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc9c5bf-33b5-495c-8abd-5ba1a5eb74b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d20482df-064a-435c-b907-9873f37b8b2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8cf598f-85e6-4385-94fa-1c90638d06dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f8275eb-1892-4492-a58a-a47214533905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0d12a8-2308-48b2-b7df-1b8107ec18ae",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c03307fe-ff5e-4cc9-8041-d598e163265b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee91a0e7-41b0-4740-82f5-f25a8a99204c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6fa44e-0613-445e-88f2-f45accfa6221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "113d9bcd-0451-458f-9e60-d961ac13e5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b234329d-5155-49c5-8dd4-8563e0d80835",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed357f0-4e5d-44ec-be0b-6f6f14d80fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6cfe21c-ad4f-4282-9aad-f466c1619894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c2a03a-f5dc-4c0f-9151-a8cd59325c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7fe168b-4d8b-4287-a5ed-0dee2d155b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70fe4ce0-bb81-48f7-9898-3b9060a30f7e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af06ee9-596a-4ba2-8236-adeb01042220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "787e20b9-61f2-43ec-8388-9346123ae0a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32dea77-f1a6-4720-b1b8-d987f382bbdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "418f60ee-a550-4e27-a5b3-e3526aefa78d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1cd5e1-5b83-450f-8883-f75b29af58a1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d3d21d-3d63-411f-a505-9578b267835b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7d58735-88bc-406d-81fd-87d933c42856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f069cc23-c321-4213-83f8-b80054652554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22cc045e-bad6-4334-a098-b341e5c2702a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72fae90f-2fe4-4c05-b4be-edc54210b5bc",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b48eb34-47d0-4a7f-8551-b3338b76d1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e88e6a6-06e5-46f6-9152-b436c8863c7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96fb2a58-d9d0-4bb8-bfbf-b8c6e3cd6fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db08878e-b614-4b81-a819-9e085ec66e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1f90b6-a10b-4b8a-b7cd-1f49aa0e727b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4fc6137-1eaa-4c25-b2fe-205782bbfe9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e23b92bd-176a-47a1-9a03-e841f43f200c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdff70b-fb28-4c65-97dc-01d8509a6753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f01b63e4-6175-47b6-8aa9-9a12896a70ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d4f21d-7e21-46b2-b81c-ae85e5ac9932",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef9a867-7eff-4016-85f4-0a971c79932f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d7eb83-2752-4ccf-9386-e7518793abf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378a6a5b-62a1-4331-96d1-478cecc026cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd99fe39-30ce-4a40-beb4-6113739876f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b08a52-99e5-485c-9933-e76a9553d2c9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81ebb09-fa57-4aa1-bf16-0d9ce3975906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f44b3e94-1ac8-48a6-8dea-6e7288024561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25aa7ffe-5a18-4763-bcf4-210edbdd26a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c110c2d-fe72-43d4-8de4-55057eab3d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab28a4d7-8b9b-4516-9d3c-7caffaa67d84",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d2cacfb-aa21-49e3-a45a-dfead3b7ae19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0088185-17f5-4b55-9e71-16212412965c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d16512-0d4e-4929-b415-b90d35931503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b90f9f7d-dd9e-4246-943e-e77c0531d41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "241bdbd0-d3ab-444a-a246-0f92a34cedbf",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c739cf-e15c-4ca5-a172-838c8c10e7d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "487620fb-7e8c-4dc2-b7dd-52ac8fcb93d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359dbf2a-f56e-482a-96e6-00617997d571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac1733ec-0d72-4e04-b8b4-809d0842d2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa10986f-1a8b-4795-b31a-9bdad759fe18",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c216c8-655c-4ad4-b524-559be2e63435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aac48373-6b9a-4bdd-a4ba-0fdaffdf95ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565015ba-fa0a-4eef-8a21-55a729ee1482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebb58ed8-2bfa-4fde-ad83-29a6f79b2bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437d75cd-dc27-4031-8c04-6e605b4ead17",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d31c3e-fefe-498f-9e7d-1fedbd5f9142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e3c7a0c-c805-4fd4-aa5a-57c666de6fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2924e0-5ddf-41a7-8da5-b50d3dd3051b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8fd46c4b-dcf4-469e-ba8f-f37f90c54ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b4c4f0-59a8-4e9d-9ea9-e6479615e0d6",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ad028a-0e50-412c-80c3-733802f63d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6256bc07-07f9-472f-a6ec-9cd9ca777619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "395494fc-aed6-49ca-b808-156f58134714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f911868-c926-40d3-8ea4-024501be872e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5f8fe5-5505-4e20-a3ed-7148be2ee06b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8615d5ef-6748-46c0-acce-01c86ac1cbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0008a231-05bf-4f05-904c-13dba7f88b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb89c4a3-a62e-4001-8675-7587ce5c676c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be76c8db-5428-4ea3-a379-68d4f126e2d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "987a5e8c-b24f-4ac9-87b0-21431c60e586",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb3520b-a2d6-437c-86fb-32939f4d86df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c920eb7e-6da1-4110-acf4-31bec5dc4dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b6300b-52dc-4688-8f7c-a80ad1f5cb1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3d7b7da-3c9a-4b82-bc31-1bb09ad81a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e230ac30-cd8a-4e2a-b86f-21e97aed031b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396b60fc-3d56-4997-bdb6-122e857dc17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f749738c-c4b7-4baa-b9b0-96aa0d78fb83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be054951-8c9f-4bc6-b630-857d692d2ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e3ea06c-4b15-4369-859f-6a4ecb3b45a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8b18ee-121a-4032-a342-2f4d1aa2b8ed",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b5d396-a5d2-4062-8153-1c436800d026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "769c390a-17e6-4cb2-bab5-3ea4afe0431a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf04712-4912-42a2-a680-a726e55a359e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7429ff7f-f3ac-4c7c-b83e-8f0103bd5907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1189cef2-5b6b-420a-9f7f-b81ba2ca6706",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15b1b39-249a-46c9-baac-3b3db4756923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f6c7d56-48a2-4856-9e56-726ba0a04b39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5206a468-556d-4d12-abbd-1cf45cde1f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd82ff9-77ba-494a-b113-30bc16a21d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc6e9bb-594f-4b40-9eac-bf071d37aa09",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cacd0336-0ef6-492b-82b3-75ae448117a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0f41aa0-5d69-481c-b5e2-2f149779014b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94645421-ecf5-405c-8afd-845e36792660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ed12af9-c085-40e9-97ab-13e0e75b55dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccfc341c-6889-47db-8f88-a40a31bea8ec",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d428bf9-0f03-4d56-8bef-ebee7689446f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7eb170c-85d9-44f2-932c-41f0eae263d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c4892a-2cbe-47df-94d8-46257d5d7ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f822dffe-0f0f-4ad6-b9a6-40a60446e4d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e78ebe-22d2-4812-8ee8-464e2d0e334a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6363522a-ca65-4a85-928e-79f90e915d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd41af4a-064d-4a55-b023-9785207a531d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a25abee7-eb4c-49de-b93b-781469376ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d0d2119a-f186-489d-9250-a7be8a1ae940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315d530b-704b-46e2-8c83-f4989cef111d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7425c1-2921-4590-afb2-a1277aac1388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcd8f35b-e57f-47fb-9db4-5b03bc0d38a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd2c2ca5-2b3b-4e8d-912b-07eb8b8fe214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b10ca82-9d72-4cb3-ac25-1b5f4a42fce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dcca1f6-7258-4ec8-98cc-c088f674d65a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "028433d8-10f8-4649-8326-56a8d035162e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecd56582-581d-4147-9e14-44e697d2d74d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708d2730-8504-438d-992a-082d9bd81328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f1d885-7f5b-43d1-b138-30419c28bdaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb341b78-b5f3-4dae-a891-d7408ad0bd0c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6325e554-2617-458f-8152-3fad53e0ccaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edf48eef-9df8-46d3-b8a5-a98cc55362d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "602fbe79-6b67-48c5-988f-ecb475aba78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ffb0707-ced0-4194-b3eb-fd53a5e9d5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda4c394-6709-4dff-b228-1813fee7755d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e24ed0-4959-498d-9d23-c05eec9c873f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d16eee-61a3-4b7e-b7a3-964c40805b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8acfe05-1101-4fa6-a4d8-72679e4dbaf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aab4e42b-1ac2-4d06-a3bb-2fc2893eccc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e820c6a3-6469-46a0-b975-1edb76ebaf71",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97448dfe-f420-4690-99db-f820ec962415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5523bae-a8e6-4b2f-bd03-ab0defba4124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a06f8e24-056a-4165-973a-705a93d83d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4b82fbb-1176-40df-b6d2-887493197246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a758d501-8374-4cc0-ab80-e90b0a10d7d5",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d83a06f-b35c-4df5-88cb-188e2ca84bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "630c0305-87f7-433d-b4ad-3032ab7bfbe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66474d3-e729-419e-89b6-8d83920a5bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "61f991ce-138f-4f51-87d4-8fa0c3e53c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e8ade9-bae3-4b2e-9812-99506218b8c6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "685bf876-5f5e-4727-a523-14ed44e0116e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc8b1b7-ef32-4547-9c73-13e40a6db137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df38dc0-48b8-4364-8e9a-f802abf9a298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "01d244e1-c3c6-4099-a1c1-e6ddc94db8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ed1b1b-e46d-46bc-b5b3-88e36322ad0f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5170bbcc-1b1e-40ee-bbe1-5f10ea8095a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773c6054-6e8a-47ca-a681-3a34e7821430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e4bda5-e8a0-42ac-9f95-4f5c829d7b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "584e84fb-0eb6-4c71-b332-21c5ff7095e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4f0e4d-4af7-4b03-94c7-f775e7fbc557",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1b2cf3-6b47-4f78-96b1-bae303786b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd60c3f7-7aba-483b-8e4f-576a9ac199af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44888935-0906-4d3f-aa59-62b77c0b8115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "499d574c-fca7-409a-996f-02b7af18c9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da0d5f4-74eb-40b9-922c-c777ee451391",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86fb347a-4afa-4ab2-8634-31dfb0b1a9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9689b643-d7b6-4431-a5b5-2c5cff575724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3521972c-e39c-4853-bdb0-97013bc9dfa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f641f284-1330-438f-99c8-6d7b49bea947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d52c8b-9715-4ac0-9673-1e6c8e64863d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7231f6ee-2d97-467b-a3a5-e9061724bf1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0cf57d3-98fd-4f84-bd9d-79f0eb3135b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04a2d8c-6cd6-426b-8c99-374ac38d1e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d370873-e0ae-4376-a050-77363aeb621e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4918e2fc-8941-4b8a-a90d-fe9d3c517dc0",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9480928f-8367-497a-8735-ae343bbd9017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f11f0484-2650-4387-b748-2eb291e55e3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580106da-92fa-47cb-a022-fd856bb328c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2ff883c6-1d0e-4c3e-9d7e-3c1718c66ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a17874d-c0fa-4ce7-8b08-06d0d7f96a82",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c1bb9d-fa54-4b15-a3c5-7ea5c4e5f2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae4bc9b7-e29c-473f-8327-60bcce00a296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b641de-9fe3-46ac-b3e4-28e07b52f82a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6febdcbb-64e5-4535-860a-e69f3d6a8b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859228ea-0518-4832-b031-545148a0469d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76261f4b-f7a7-409a-b4a3-ef14fa0af89f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff153c1-807a-4a9b-ae69-317882b849fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e925ac-caeb-4ebf-acdd-cdb65c9c01a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf929c0-1097-4327-9ca1-c52f0cebef54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082657f1-146b-4a25-a118-9353b8405534",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662ac3ec-6f21-444b-bc23-9c6be8c03879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3876e6b8-22fe-460b-8fa7-158a546df629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16423a7e-40bf-4c3a-af82-e607a1c908f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7854ee1-f5a8-4430-9ae4-bed490143361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c0008d-0488-4693-8c30-bd83ccf9e0c5",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c809c4-5a47-492f-9f4a-4d2d653e5028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe4873ee-297e-4942-958e-d8cce7926f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "463e8694-d699-4f3d-aa88-665ae104f199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cded1399-ced0-4622-bc5f-5988b2e702e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b491ce-f102-4350-b08d-2ee63726bd4a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f04e064-3aba-4464-828a-7768dfdc6f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3576a6a-4f8f-4299-bde3-d1ab4f876ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac7ff32-f390-4d8a-93f9-496da1435c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f11f291-2b7e-447d-880b-c0bdd8876cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ebca88-110c-4b51-86d1-5453e0e21dba",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc474bab-8dcc-4a23-a28c-2e04f10e8ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d5900c5-85e2-4be9-941a-837929ed8489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2fafe0d-bfb9-4c0b-b341-7ba9eedf41e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b054ed8-a19c-4301-9efe-9ea5d1fbcf06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2617d40b-380a-438f-8f62-a636a7735ce9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22470b52-969b-47c0-a573-824b81e41e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93152bcd-1fc5-4bc9-be0a-e39daaa53362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1290de-2e9c-47de-ad61-a87665fbb05c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "32d20448-ef0f-4bd5-98a5-cb5595b19fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661abeec-4827-4f92-ab52-3cb8eaf3612a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41c2939-c70d-4e05-9eec-c8cf440aaedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71fcbf98-9b14-43c8-b7ed-759a8d23d49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb791a7-01b0-40c0-be83-75bab1847bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e9a9822-9865-477e-99a8-6841ba9208a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b060aea-e94b-44b0-8d75-06488fd71e4e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f612a43b-d94e-476e-8137-0f8ba95ec704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57d9ce72-98d3-4d29-bf0f-414e6217bf23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48025afe-ac98-4091-82c1-6bbfa5dcb409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "224f0102-542a-4457-9a22-7b11a635f34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58390e88-278e-46e6-9fa6-bb7aeee569c0",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "148b128a-b199-4345-be0f-09efcc2b65ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4215bb8-be18-4f91-9522-c1e50501998e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b0537f-2210-4363-ab83-ad1c76bc2f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d3f8d8c-4b9b-48e0-93e5-0b153df61ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4821f234-c6d4-43ab-82d7-bd7ce2cda1d1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f972c2-faad-4934-9e9a-8aa56d2c468a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "643f62d9-8066-45a3-a6d8-3fb62f1caf03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dceedc2-d15f-42cb-bdd6-1dade0641e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "515a2c5d-6158-4a4a-ab9a-05964af4bb8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1230b821-79fa-449c-b180-ca025c72526c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a6b20c-6d7b-453f-88c2-7540ad81400a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "330c219b-d3ba-4816-bbb5-efd3d0c90707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3629650-bfa7-47d2-a88b-f9dfb4a01848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0619c16c-90bc-4d21-a5ef-b690c5067dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1ff4f4-1f65-4ef5-9e44-d7230d5004c1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6056b60e-6074-4995-b966-1ce5fa9b30fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15dc78e9-fbb3-4782-a43f-7910b4be6e19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35afe3e0-df6f-4fed-b9d8-5e61c3fbabdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "51c31a31-8ac3-4f21-99e8-df265eb0cfd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b45102-fd6a-48b0-a62f-109bf0c1fb4c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfcd27ad-f207-4317-9744-6d67e6198c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a09b1d0e-702e-4e2f-827d-f6401e20e984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31852629-12c8-4838-8a0c-8f50835235cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "491c0b16-6e82-4b5d-9a83-58831e62547f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd636467-672d-41d3-8511-9a56f747abe8",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b03eccc-b317-432a-abb1-67b9a7e5e471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a75a574-8fda-4092-ae6c-9d4b5fc18cc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e7cff8-c663-4d9b-b5ab-539a16dd69b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "48d99976-9534-4760-b489-b1e8be32f8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76260677-b0f3-4688-9b4a-9c9ac4622e93",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee428ce-0f93-433c-97d8-9f4125242f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dadb9ad0-5eca-4976-92d9-e98221011870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd48b43-73ce-4455-81e2-ea4ca26e4be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "20e561aa-46b1-497b-9182-f3797f448242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64acb2af-f3c8-4206-a9a6-a43a32f6e71a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c33db7-11b0-4faa-a293-51c605c348ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34948dd-407c-4fd2-8ce7-58ef88c043b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a64dfbb-e9df-44da-bdf7-7eacf82ea2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd4c2c2-9152-4012-8964-3e93897dfd0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2963e880-b40f-4d89-93e9-4ce296df37df",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06555b08-fc9d-4033-a85e-9cd14aa18c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ce2aae-fcc8-4d47-a311-e38a0b27831c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b55d26f-8a8d-4c25-bdfb-67ab708cc4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de7cb21d-9239-4eb4-920b-f55badf60fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c693333-a275-4b26-a1fa-eebdadb87446",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b8e3ec-b59f-4e56-8af4-91a0f1f255ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c444e0dc-5d6b-4cae-9d70-68a2970c46fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbaa64f4-4e05-4a49-996e-7aac80846adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc478146-fa58-46c3-b3a3-c8d22ddc0fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9f6914-f345-4441-84a1-2e3351162784",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f881b7-735f-43c2-b127-f9ec7ad685a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "469c5f57-51d6-469b-b9cb-f6bdd794fa23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698681bb-95c1-402e-bfc6-4b178eda106c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd257463-d2e3-4059-a7f2-e94594db3c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed99a04-0a18-4c00-94b0-6e5accd9141d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0f194d-b613-4bc4-a622-4ce4ca1b18c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b332a71c-989a-47a1-95a0-4417d4cce462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13fbe93-54d6-4c0b-a11d-317f26ee498e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d89b6754-cc45-4b98-93ce-236eaa19f1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d63541-8650-436e-9adc-e0a686dadc3d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e90db6-2900-4241-b8ca-8414a2a37af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27413d2e-768e-4bb4-a9c6-00d4e702d108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47534c83-d836-4050-ac22-7f73c046ffc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e7c4d6a-d9ea-469b-816f-7dba4b38bd4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4627208e-d4f2-4c55-b73f-317986bcf47a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "176bf522-7375-450b-88bd-4fde9100dae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "031701fb-4fde-442a-a89e-b8203f780695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b52c2cf-c927-41e5-9921-97bec2055f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "115b6c67-eaac-46eb-8454-025db04f6ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f546e1-7fd6-4566-a7e6-0964d2f44a3b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed25ac5-5c3c-4244-8d16-33da0e0e6abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1b458a1-15e3-486e-a607-3da4ba0ce2a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b69d12-2739-4b16-a145-8a0a331e6028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b3034f8-4247-4352-99a3-786d59575cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b95b128-f322-4233-b6ec-efce279b39c7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f326deba-bad7-4e96-969b-f5ef8c618793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dba8efae-9121-4e8b-b4e7-51846dd8b889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d673db46-ff3c-4536-bc86-a828c4f1520b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f88c749-f7cc-448e-9bd9-94d41c2114f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654edaab-e7ff-4c5a-98e1-31f690f613d6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "004a5912-92e6-41df-9e98-a4d52e402ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cedfd1e-937a-43fa-a2db-153dfeab8f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61624c9-c118-4a0a-b906-296191d5144c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "569b2097-1f50-42e0-af28-7a8cc91e59f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005e9a52-5b7c-4e45-bd64-d74338b03084",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89c7952-289c-4bc2-99f0-b14ccfcd535e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b98e4e1-202d-4a6a-ae0a-ef29189355d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0fc94fd-0edb-44c0-aacb-28c277734ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c565ae37-0c48-4155-b635-676f659c3277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee176c43-63ed-475d-96eb-b0801332557a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af48abc9-397e-4f78-8954-6fd3c6da8f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "804fe8ae-ddb9-4106-8fd3-2ab4a1839a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2edcae4-e752-4486-8e1a-3d5d0d0242cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5015c0e7-e8ce-4198-b5bb-7fa9582cd6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebb9df2-f613-4597-89ba-a8c070fb5638",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfda1f4-bd54-40cc-98d0-56d448d9cf3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb873e6-93d2-4c67-95a3-1196212b098b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45cb8766-8d60-4285-a908-68c66dff7907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a62b64e-6aca-4e5d-b6d3-d78bc8439007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c760472e-e035-47dd-8c56-be91755b0fbf",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "412b7be9-da0e-4b46-bec3-77f24afd6e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f24e0f7-f7ce-45c5-b5ae-4c90461d6aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0ac9fd-fbbf-4bf6-a6e3-b4e975d997ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6509bb76-9318-4cb8-bd8d-6ec631bdf2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fafdb51-368d-4887-88c2-c21d2c7e8e56",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5851ec-5c73-4642-a920-1c9c5223ec8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be33c0fd-3dcc-4036-94d5-854547b827a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274a4556-438a-45da-8c05-ed5b875dac59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "305eed61-48d7-4b68-972b-5c77158027e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62db6ad-2dac-4177-9bb7-44966919d605",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc893e2-4235-474b-b437-dce1a68cb060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c33bff-5e02-44f6-a009-915d4a6d4fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ecf929c-5bf5-4d6c-983f-1bad706e752f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5e57b0a0-42b2-48ab-ac63-3056a6710f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be6564dc-aacc-4494-bc36-050062bf509b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5672b0c-0bf2-41a0-b880-4f19f2e4c552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b25e95-170f-468d-9dca-5a602b2525c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5820b064-bef4-4173-90bb-a05075181640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "90337de6-b70b-491f-ac80-52b27a7cf892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b1a06f-92b5-47c8-88ac-0c57c9786509",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5020ff-b7c4-4908-821f-3702fdc02240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de175949-51ea-487d-abb4-6c9774a35dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4856baed-2707-4c28-ad38-b18c67cc7002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eefb73e6-742b-4809-a6e8-56d42fa99b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa988d2-05e2-4766-91eb-2d6bb219cfe3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd26f91-b49e-4b09-9c13-68eeaf133a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ac8d30d-6358-4782-a267-844a20bd3567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f886af5e-1b95-471f-bf2d-c949e0ef5bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbef6baf-07b8-46a0-9072-ba74f880fb14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e078d35-2d73-45a7-91a4-82ca55022566",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06fc0e8-63c3-4539-b66d-787f6c4273ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f353be-aa7b-4708-aa5c-b3b933b55b0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9a9468-e714-4f0f-91f1-49556a519a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42d02a8d-c6de-4fc0-a84b-660db9a94d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd4a348-cfaf-42cf-99d8-71c88629a7e5",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e1e442-3523-484d-9418-883794b4f3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfca1e7f-83a5-4abe-92d7-3406f893c056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98725d01-4e42-4dd2-b07f-cb448bf033d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a8224a4-74be-4312-b6a1-7b510ccf5724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6cdb48f-e736-42a2-abaa-11a210b1a578",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2e3852-cee7-4f4c-9ea8-3cc31bbaaad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b90d622-14fa-4186-8e58-4f176e7ad032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2c44a5-f53a-42b6-9d43-a37159979306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "21c9b919-e8d0-47c9-a175-dd47408e88ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5631a5d-56bb-4661-823d-2b89570fe323",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd84a35-a4cf-420a-bf4c-52d2b2a33d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67eaa06c-47af-4f4b-a932-a3a821bec4a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db2a106-8d2c-45cc-bd78-43aaa867fb48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "81f6c41c-1498-4979-84d6-07617e86efb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efbf5757-7146-4db2-99f2-3444b7d4dc20",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b274bc-8f21-4241-b66f-c6e78a65f524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23c14155-3a9b-413a-9ddc-59e35830c959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e41c50b-f60b-480a-a907-74b9b46aecd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "869d37a8-7f10-43b9-ba67-0d687eaf1073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4936903-ccef-475d-9cae-299095e77052",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5ef384-08e8-4782-aa3d-077ed560c4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8ae5cc6-6518-47d7-b0ad-0a2e5857e6fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa35769-21ce-4473-9702-2ec1ba1ea6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "266d178d-56c5-4e1a-bd49-e3deee231d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56adf68-a2eb-4974-b275-13a8224d5028",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf0b598-4ae0-49f9-986d-ddaed2865b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c25997e3-4890-48df-9975-6cbab4ce3216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85c4f10-cc12-483d-abdb-039fabfb880a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4a84e27-3b95-469c-af8b-c704388cd8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef76b32-174b-41d9-813f-38793d070536",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8052bab-778b-46cb-9153-28864853c82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7df75bd2-7b66-4710-891e-72d0f2ef84d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb2ea27-d1b9-4c8c-87ce-1c0b4025659e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "429675b7-21ba-48e7-8b2e-997361ca1a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa87f81-1b49-4d0f-a454-bdb46e028fb1",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a152ccf9-2008-477a-bac7-cf9a8f6d5a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30200599-5d77-4a68-bc0e-31281154e5d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d15b995-0883-48fa-932b-08eb7f19e7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b09a821-e605-4f10-bfba-bfe0eac0137c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c7f80c-5909-4769-a1a8-bae77a0a35c7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b28851-5415-4760-be4d-d3e982d94e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f934f095-03f5-4a0d-b76f-b1a68eaa5ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3ef0ac-3de9-4455-9de2-e28d1e028816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c5560ca-1cc1-43e2-adbf-543961fdd790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44a8eb1-5d90-43e4-8deb-32c486a17bb5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe49b27e-915c-415f-bf56-6fc1f52b3e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caea8cde-8d54-4910-87a1-2fff32fcf27d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6f66c1-2443-43a3-9ba4-a4bddca2826c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c390afd-5ea2-490c-ac88-2d8a02ff63e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e23893-7932-4a2a-bc84-32bef07f82c6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ba5365-47d4-4964-b5b5-55c042434f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e86c249a-a18c-4b7d-8d54-d5403dc068b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b91056d4-9a5d-4524-9aa6-723395d3dd07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bdad1e0-7e58-41a6-b5df-d7c372b11cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f9bb08-1d35-4f94-b465-0ac19db0c472",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b47410b-2e90-4565-b980-b8d965e163e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc902b6-448e-47f0-a9c5-0d482ddaaa0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c16054a-931a-4e5b-af53-ef4a6e1f9467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "09f01f51-137c-4b9d-a830-919b50a85f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9dc4499-75b6-4769-a836-2831fd5dd54b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eecb2f48-4bf8-40f3-a1ed-d8a0de41a432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6c13d7-6243-421c-8647-185ec47f872a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2accb62a-16d0-4266-8ec9-966ba23b5960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f80b72b-cf6b-4ea9-bd41-2064763f9c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b018d5c-087d-48e2-afac-32602cd2b83c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d2f5df-8feb-400c-81aa-d1e867e68603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5403867-7972-4c66-b82f-5531a0234878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a02add-e34b-41f5-94f9-e3b566272de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "25494110-acb3-41f5-87db-888816d9a8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228ad29a-4176-433d-8a50-9f9a6798636c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ba1fa1-7790-4f32-8dff-f9f90b4f08ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9309140-7d3f-4a19-97cf-b996a7c87710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c31b32-2984-4b26-9941-75b8fe46f571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab6f1123-0f23-4d62-8886-93d44f689ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da49027-e31f-4c1f-a8c9-68068bd5f1ef",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c78b61-2a62-4d08-8de3-db8b1bfe262d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a50419-2f38-4740-b41a-602e4aa3ac2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8e27e8-90f1-42c9-b117-29b7e78a4081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d4b5ff1-ec17-4f08-854b-5c8caca13fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcd959d-a34c-4092-bb8c-5a962d812e69",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b54cc9-4e65-48c1-9f46-a7ada65dd235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86512743-c5c9-48de-8460-e80e215cba28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5fdce41-1950-4cb0-a3d1-1f7aecb6c618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1adf4b77-fc0b-47bc-b91d-05fd6bb1ef3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d6eced0-190e-468e-a6a2-2155030db358",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc599fb2-bdbb-43e0-b21a-415871b89685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9268fda-aa02-44e5-9755-b6cde6e95ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82661de9-4caf-4cdf-8928-980e5f0befb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b49a15e2-8f5d-455b-8193-d0c84c405875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91770eaf-f45f-41e4-a9ea-dd580a0376ec",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7d24d1-dadc-4af5-8d42-b278225ebc5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f99b16b3-41b6-4630-8b32-f1eac9789f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d069e00-d722-40a3-a5b4-5d70292b40bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8e227bd-2dad-4afd-8884-ed6e14b29acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b132d3-fedb-4451-9d35-d78ecc276ed0",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a155d5ab-3781-4ea4-9394-411ad0212101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8103a742-f141-4ada-a08f-ad71af8d1789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49624db6-51b1-42c5-84ae-4b8ff12c9b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "88cf879a-8d52-4af2-8d2f-c23baa05bc03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09efbf31-27e3-40bb-b0f2-54eac8f79416",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "316c6a79-e3f5-4581-9909-91497c1403bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1ca5c1a2-c4a8-45b8-bd24-675d5e3583d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d509e3df-4896-4e3f-864c-f30f8b8e707b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a2f9ff8-2f03-4a5f-ae3b-0aa1c791ce2c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a1417298-7a2a-40f0-9dc4-13919c5cc16a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7b3a8160-13a1-4ed0-90f9-36bcfc93c7a6",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8db95f7-936b-4376-952a-fea6123c4b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "756d70d7-19ff-4739-8cd7-4b7a6a20a3e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9d866c-6704-4dd6-81a8-7756efdd6443",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "e38bac94-98c6-43bf-8ba7-21c68b1da98d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8272f64b-f59a-4b1f-9e36-a61ea24ff5de",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df3c108-f9b5-4770-a8c5-c66f8060178b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c4bd3ac1-5370-4f26-a742-3b0ef657d034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda90e4d-e142-4c53-a082-62c83ef2be81",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "82975a8d-af22-49dd-8293-bf0e46fad8cc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "239aa5ed-d3d6-4bc6-b762-3e348b705757",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "acf3bc02-3642-4580-a166-6b05e9c53dde"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e59dae7-391c-42a6-a3fb-cb02b0716b98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13510120-e4cd-4d5e-a2c5-9dbd8efbd5a8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "745ba607-4adf-4bda-aac2-944a028db8b8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "46762849-8dec-45c1-94d7-6fe393390a98"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5809e24f-1518-43a3-9935-0cac89b73d0e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "427bf333-228f-43ad-a38d-b531cdc0e261"
                }
              }
            ]
          },
          {
            "id": "c05ff4ca-d434-4a00-8e3d-d9ab84e89d5e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "11a0aa85-b306-4278-95ad-afed7f94cb1e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fed95993-45d4-461e-8a60-785317e1d9f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f652f001-cdf9-49ca-aaa6-c0e081fd09b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7c3caff-08be-4709-8a41-400f8b4094c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b9ac46cd-dd46-4bbb-9fd5-0e2913f801a2"
                    }
                  }
                ]
              },
              {
                "id": "19c69190-65db-4602-b778-28757118d4e9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "affd4e88-80c1-4fd9-b6ab-4d1d446f0e53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "00ea4170-f75f-4791-86eb-aa7705a6f9ce"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e2d5f96-68a5-42b9-9362-d6f141036ab2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8105b18e-8a86-4378-8788-8e348a372aa9"
                    }
                  }
                ]
              },
              {
                "id": "083e38f6-34fe-4b9a-908e-ea5d2d18cc1b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0784c163-e4b0-4d3e-b9d0-e6499c2d2d3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3798d83a-a29f-4eb9-9af8-d1b8861eea29"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "700285b6-8368-49ea-a023-38a1a832130e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "956a33c9-aaf1-456b-ab5e-a8ec8546edde"
                    }
                  }
                ]
              },
              {
                "id": "0d0d5d17-c0a2-4678-996f-733309f86fca",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a54965ec-d6cf-4ccf-a3eb-0d9c4f04a55a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "091dbc76-c510-4963-822f-3c49910ef8f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df041cbe-80b8-404a-95cd-e9ca4e06e1a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f3709f0a-b469-41de-aacd-fc488b7c810c"
                    }
                  }
                ]
              },
              {
                "id": "db98a92f-d516-4085-ba89-26cef7349e62",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fd34e90-48ee-44ff-bf12-da51cb740768",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "33a4ebdd-baa8-4c53-8455-3f0e92104ded"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27d8c407-2d40-49e7-b17a-2474a78950a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "388547d5-957a-4105-ae63-eabb342826ab"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2d622baf-af10-423c-9c07-8a69a82c2574",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e3871c88-bdba-4133-b7fc-cd297c91e003"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "01439b6e-eac3-4c0c-becb-16d4caf2ad03",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "329c539e-db7a-459d-9779-c2ced567bd82"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b47b6f4f-44c1-44e4-b0f0-470c8e847e6f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5da9a48b-7909-45be-b50e-64a498b139ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05a17749-3351-40ff-8a38-8cc96dff4510",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c62755cb-9213-4e7c-b9c2-46114464f376"
            }
          }
        ]
      },
      {
        "id": "46e78f9a-e99d-4173-94bd-7417f4b6f745",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bca4b78e-4adb-4d84-a678-c295614262d7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "82c74184-a7c7-4f84-8796-54e23d4afa67",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8286f9ae-d2ac-4901-8c3f-8a3669573282",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9528dba-77a6-4088-8987-266c6a23a64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec48de84-ed98-49e7-87e8-893ae76907ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0695503-3747-4848-869c-7b62a7c967d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e44dda1-7691-431d-ad38-6e9dc1eb751e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b59db1c1-a463-4361-bb6a-be972de968c3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38acd3db-0d43-43c8-b4a3-aa94ac340255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d7d6920-d305-4a63-9b27-da9ce1fd240a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61aeaecd-e6d6-4e48-a7c8-66bc7cd1c74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4efdc468-ac34-41e2-b2cc-0bab677a3bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e372df-ed09-4df3-8ba3-b0b70d7dac60",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8c9417-a856-41c8-b9ea-2477d8e67b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb10a188-d0b6-4fc9-b810-5bef6a390a5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809bd8f6-4d83-4916-a850-11bb7e9e33f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c4cf6e8-4008-49dc-8f67-a0fc6daac005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a62cdb70-2505-487d-a12a-b430ce812bbf",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ac2f0f-e2e3-465e-93f3-0cb5e18c26a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a5ffd0a-8639-496e-8b97-83773666f6db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475da237-9539-402f-abbd-1e2085b94082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c71dcc6b-b848-462a-a535-e24276ba740a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "982e6256-d3c0-48f9-8e3d-4f7dab215392",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81621f51-8821-4f07-afe8-e16b8ff5eb32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f09c95aa-2e7d-411e-a21d-210d25abc975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35fe6a8-60a2-412c-894f-d6a0e4fd6127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef0bd2e3-fca2-49f1-a82e-1a9815a30d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001a7652-d769-48b2-b4db-41adde87e148",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd06633-d532-4136-b49b-47040d951ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd216ef2-4541-483c-9306-5a62bc180310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996d4b70-743c-4b25-a0b7-944d60dcf2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc80b664-8b9a-4df1-baa8-2a42840aad38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043c475d-386e-448d-824b-fa9f54b26a49",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2f2354-7fc7-44fb-b4d4-7d61d38d49a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "530bdb37-45ab-4309-8384-2b1cfe7c36fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30aa9542-9659-4e08-80d7-bb3406280a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c24a08f-2925-4e18-998e-e3248182cba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce778af6-50ec-4b82-8997-debddaf4e4bc",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "958f3cb3-af4d-44a3-bee1-f41bac8ba3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "504e3ea6-9c7c-4959-b965-e713422aff1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a83eed3-97ba-4af5-bdfc-1b23f97506e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7481275f-2d08-4c65-87b8-a322f5e74c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9fff22-a80b-43cb-ab68-fd4d991dbbdb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ad16e0-a08c-4319-b791-4053c969a414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61ebf736-0eff-46f3-9eef-1bff76e9117f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3eb485c-e960-4a27-9b54-f99b3f6d368b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa9fc58-00a8-4eb5-8028-861cde1f9936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c051334a-7154-44e2-b19b-1c76913ac302",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d87fb08c-eb3e-4bb6-bd2f-a1f619294f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce2ddd20-5fce-44dc-a12d-f836bc42bba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9bbdc8-aa00-4317-9989-52ec70439b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8682ab0e-76a8-4289-a290-e2fa6212a49f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b40d28-00a8-4359-b5cb-7678fe749567",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e435067-52f5-49d4-8fe6-cf833c40001c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f4a70d5-db25-4994-9829-3380a622fff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef25d82-f501-476e-bbbe-9878f4a47ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "254f9ada-8d27-4cc9-8096-c3d7169091fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f60146e2-3f98-48c4-8715-d3e6b1f77725",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e60fdf8-2fb3-49ba-9bd2-bc8adc01140f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8095f72-6e56-4a6a-a8e0-6e9cc1d6a8a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5437ef50-a28b-401d-b7bd-9f119dc6e572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "75c365b9-60b7-4352-9099-d7f956a742fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128ed61f-3548-4344-9a9c-d999c9332185",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c992aa-7ef2-48ac-812f-acbfb4cdadef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9303280-d738-4515-bf3a-bb0692dd3901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae299994-1449-407d-bf8c-35098ec81cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b262baca-9aca-44d3-9b59-684a87c0bbbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5641ce5a-641d-4b12-a044-a10cf4c3abae",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "711786d8-b1f6-43e5-947c-c1881005a51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d249773d-1c19-4266-b3d3-b980f411e9e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fff27ee-31c6-4e6a-8d1a-4489f2bdf61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "012f2c0a-e087-4a5b-a162-fc18e30e6fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb42256e-ce50-4c43-abea-bd8bf8a18fa1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3a3a42-0e2b-4c17-bb8e-0714063e5370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7e8d928-5c21-4210-99e9-c8fa08e9f9b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45e1645-042a-469f-996c-55e8c4585380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "836eb153-2334-43f3-a4a2-2455d5dae5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637b47cc-b1a1-4f01-81f7-2010698c9cbb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7edfee3-3cd3-430e-a96b-8e32249a5faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "303bf504-55c2-442d-bd16-e9971b449194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c9d0a9-d584-4f23-ac6f-f36603dc98c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "62fdedff-d105-45c6-8303-ad56d19e2501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836865e3-33d7-4a12-adfd-bc92fe4f7c7e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "227595c3-fafa-49b4-926c-94f081f6fe77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1a9c16f-cb52-445f-b2ab-31036d5c5680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57da392-a43c-4132-9101-3d7fb8ec2ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d7dda00-a669-484b-a0bc-3baa9973d041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7003be-6ac1-40d7-9c0b-204c72637535",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74738e1f-4da8-4c40-97ee-fcfad4f69ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71609c53-7838-4519-b531-36b2ecc1e38f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e897a447-df5d-43a2-ad23-ebe1a56a6c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c645b663-d443-4fc8-92d3-1c6b2856598c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73eb411a-74db-4cdc-8dcf-e02c7bd48703",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34345fd1-7891-444f-b900-51fc53a56e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7649d693-73dc-4cf3-aea2-6e80c68821f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d8237f-044e-4197-8e0c-0f91461a795c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc090d58-ae2a-4551-8c72-b50d2b86a4f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5f8c08-5b11-4eaa-8173-5e2415da2ff3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2affe6-632a-4317-92cb-587a0f464f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdfc037b-0280-4380-afd7-9cc526508f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe65905-d351-49c1-9297-adf2f32f5e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f11ec57-b244-4190-97da-8d2d4034869b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f54441-0af7-4e99-bdbf-703a83591742",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58680f09-15c0-4a7b-b7f3-f37537c19479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89fd73b5-f582-4e71-897b-3fdd24dec107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65f1c0f9-549a-49b5-82f4-33a171788ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf2cda28-fba6-44fa-a6dd-78ef23e86371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063c37bb-7c3d-4ac1-b9f9-b58f1a15b13d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4061013-59ef-428b-ab00-92ed2338be94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef48ce10-fa1e-478c-968d-98f3d10f0f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aabc282-296f-456d-9d97-ad331ecae840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "184965be-1aca-47d2-a605-c029b4f7f27d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4431b50-54a4-4777-a9ed-b0101be011c4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f0e2b9-4558-4466-a272-0aa11d775c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57098527-1874-4658-ba1a-9c4c1789b020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f21388-cb2d-4a68-809c-87e770ce174b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17c57acb-96d7-4379-830f-503a33d48e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa64d6b-2d18-44ea-a4e9-a343559731cb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4433a4f2-c86f-4741-9ec3-63f44c469e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b43cd8de-84b6-4822-a0f7-05f569a6a1f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d738503-4a67-4d48-be76-b04dfff9bea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9952f834-a1f3-4ff9-a04a-28400f8e52eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd4057ef-c676-4993-80e0-39fe340ec9ca",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c718c6-f7f9-4358-8f4e-b558473c5053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e30d8cf8-50a6-4630-9628-771ccda229e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72702e24-a853-4cb9-aef4-74356b99306f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca730bd-c029-4256-b16e-f20b07a7de45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a917dbf5-244f-4782-8f34-9b1f9198ff44",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f82b9a-c182-4ba1-8355-d20abbdd61b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eff7993-427d-4c3d-9228-4f71fe89998a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ee380bd-870d-4579-8437-1ade989fe17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb1d519-3930-4856-8f08-626bb04c796a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b10cc5-9050-4ff4-83c0-ea50fb7954b3",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8942cf2-6d9d-4996-bf48-d72f392dc571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0db36081-5abc-4fae-80e3-806065232277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2bb2c71-d507-434e-8e96-204b34129cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b66208a-8b4b-4b86-9451-578e3b1fc5ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d92f6f-0617-41c6-99c4-ef7bf6d7fda3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1b8cd0-fc7e-407d-8e52-b75bf234594e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e6a4a8-4951-4393-8876-959aa62c7159"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deed00d9-e3dc-4cc4-b21d-94d794bc3312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "742369fe-9921-4b2b-8468-2f3f5b47aad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c863b065-de7b-4eee-ac8a-0566ac78cb97",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47f7c39-efce-4ee7-8725-d7b60d449628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b581dcfa-2ca4-4373-8847-c4a96753e496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca4bb83-237b-4223-80c4-301bea404312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42e0093b-8e9a-45fa-b7e6-ef47448a0648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542d78f6-a8fd-4f35-8dd3-e0c64ffdddd5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c09f6d-ddb2-4f42-84a7-bc14e72aeca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8ef2d96-37d4-4ecf-a9bc-43e8917a7f56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22779b61-fb27-4960-9419-70e9965723d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11e36ce1-003c-45eb-9369-b9000157652e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1990249-3df5-4f25-89bf-a830e4524194",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9208d42a-17c9-43e6-abd7-03d14e384b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c89864f9-38e0-4917-ad6f-655dfb1d9a25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20d3036-660b-4cf3-b056-7baf4b15a868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4c501b4-69a4-43f4-b5bd-f38b6b7b8f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b9f104-2a0b-42f9-82c8-cb46aff4f235",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b279607-577c-4dd8-882f-9a61f5f80c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e69b9382-f231-43c0-aee6-4d78bcf88a84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a796df1-fc4f-4b56-b87a-148a15d59512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb9d65ae-b378-4ac7-806e-ba47ed0c11ba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b3ac86e6-dbca-451f-91dc-9ebb750530e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d182f57f-2740-4361-8243-156e4f148b1e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6434968a-ad1b-4e25-a49b-829791f44526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370ae171-87e9-4a57-9571-9a3dbc5ba953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "173fef3d-c856-4fb5-bcc7-84a374449062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "45046bcb-d734-4f59-a5e2-1d65dd480283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890e8b1f-71b0-4baa-bcbc-4713ab2c960e",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e33e86-0362-4ea6-9e87-326a097931e1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "5bfe4fd4-1487-4b09-bc08-59365fe41d75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "021a7580-0f55-4ca8-9715-e3ecce300536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ab5e01a-3cdc-4e79-9c6e-dd5716e1023f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df9d55b6-76ac-4af0-aac4-bdcae7d318b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc97fa9f-44b9-4336-b4fb-f80f8547ea29"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "45f8d6e6-7448-4949-9f38-3af450128ec9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68f4dab3-1228-4c6d-97c4-fded2a3e31c5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a8ad9610-87e9-4182-a3f1-b52cfd028839",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4ee20e4f-3a71-4ef9-84f9-4209f65d2cfb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d890ccf5-1b2e-4043-85bf-2178f816fa8c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "60293f50-072a-4043-9a0c-5949f48ac417"
            }
          }
        ]
      },
      {
        "id": "5e165b74-ef0a-465a-8b48-f0f3334643a5",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0c54f37f-6696-4290-9c17-c2833b7291f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ef3b4a6e-ab44-4e8f-8d11-6594952ffa73",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "89152bf9-549a-412d-8c83-62d8cb0ddf06",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5499b9b3-1301-4701-b9dc-56ff27d7724e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce786cf-d3d5-4e6a-b8ac-3784214be1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09efddd-bc70-43e5-9d6c-29b8cbb2c8ce",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "792c5b6a-3ad6-4319-af63-a0c6b9cb9eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d498711e-0d14-4afc-8e6b-d3b7c5e9da89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5654d2-e9c7-4d04-b1ef-278abd87647a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e7044a-15ce-4ca5-8f68-47d71aea65df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b0da78b-fd3c-46c0-a173-893cb9012b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c56a1e5-d7f8-4eda-8298-cce16173ded6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f13dec1-ffba-4766-8e0e-57f280f3dcbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4965fdb-7bc6-4e2b-8225-8fc54589d71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b33844a-1ffb-4763-a181-c19eb2c0bdd9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ecc8e4-e890-4541-b7eb-9f17ecc3fff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d387bb52-6fbb-4045-a0d3-4a404a5cc746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31508f80-6283-424e-bea8-3ed59e18c25d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1abd4256-bbab-4761-8a84-557ef91e9823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b5cbe72-9508-4993-b52d-cf566e408d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be948492-0f90-41e4-b9c0-7cb85e4aa8f0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3bbed97-c9ba-4032-ae0c-840c79e734d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f54774-9921-4724-860f-92fd73ab4911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e746d303-1b53-43d1-93e2-52571034594c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5196a953-f41e-4e5e-ac48-dd779bb91e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f7af2e-1d29-4124-88b7-7fae47f19dac",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7a35b4-f3e9-4295-a472-0a9a7edb1d1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfd8e9ec-cb12-4959-aae7-d6d3d7d68ac0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c247f386-cf75-46d5-b5d2-500ffd2d3873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee2c5be9-0371-4208-9876-ecdb07299284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4259925-dc76-4a38-a977-7be5d58d142a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4acb8a4-859f-4092-9be2-f01bf9bd7a36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f340072d-06cd-4c70-b0b9-b91aa01cec80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0745a04-53d4-43a3-9677-dc6ee6100ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "072cab0f-9406-4b1e-a103-f76c7ddeeb8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b9abad5-f4a4-4977-91f5-660916e38467",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a78f4f7-e138-4361-9378-14272ab24ff2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42b977d5-4c1e-4733-8ddf-49047b806ff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe50c63-eec5-428a-928e-aec8b82d48bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11f97e4b-1096-439f-847a-c82d0968b597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddfc0d41-43b9-4fd4-a248-32e33441bbce",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b456873-03be-4840-8cb8-41259853ce1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58291b0a-e3bc-4b3b-ac9c-bc815c55b132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "336a0855-848a-42f1-b0f9-0ddc6f565012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9576078-7d1d-4ba1-b05f-48bfff674dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d7a874e-52ba-4042-be84-374a27580a08",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f26133-fe11-4824-983d-544f310e4c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ec5026-4563-4d13-bdda-e6a6812a5096"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "963f6e9a-8170-4544-b55d-ac2a8eb48ae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90bd9a55-ccda-410b-be8b-964c975c232f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263558d1-4ee5-4f0f-a785-67146cf07f69",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a25989-fe83-4fcc-b951-3d464018795e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a47feb01-e96c-41da-a195-403ab58d95f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "268425c7-6bec-4e8b-8c45-dc58056d080c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3774e412-21f7-407a-8219-0ade6af54d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0846f2c-824d-4116-95b0-6429af9c5001",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be58c9e-7ef9-4e55-8bd7-97952c1ceee6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dd9d0d1-8ed6-49fa-b4b1-0a44d4404c24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4ff020-1951-45ca-9095-7578600f50e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad6ae246-37bd-46be-9cd8-4e33b0fd4f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6daee8-2717-40b0-bb4f-fa8da839c952",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d40c344-d7b3-4f97-8d21-99dc68307a23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f628dacd-7e78-43ac-abf4-ce4074e6ce5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "686555aa-ba13-409a-acec-4684a0951813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09909506-c1a7-41b9-af90-6243b9435849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65db0c95-2136-4f24-9529-20269482da71",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ebb92c6-490f-4938-b51f-7119a0cf6fe5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e90f97d-0cfc-4aa5-afc0-6c93a46d7f9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6498eccd-521a-498b-862f-545ef310a7f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db4b118-a6fa-4150-b4f1-e96b21371bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6bf6b63-802e-496a-861f-4ab6676f6761",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96752c1d-9b31-4215-ae30-2a92fc1f4d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df72181-5ee6-4988-bb47-bc38547ecd40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96340eab-3eae-49f9-8df8-2d97ae2263a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f500e1-264e-46b6-a988-0c0f78598e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7342bc2d-11ab-4445-8903-4d2264eca7d3",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "545323f0-9238-43f3-9249-2584a4f47c57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a7ebcf5-ed97-40e4-a07f-007081abbb71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f962584-a1e5-41a5-8e16-52fc9b7039d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29889f8-c5fe-47fd-9d67-33d950370cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8bd1510-cfc6-455e-a129-1d5773775d0e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f5f711-acfd-4a71-811a-8f47f6289516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69817c03-9229-4735-ba7d-9bef9ad29d3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c75daaa-22a8-41d6-bb42-6b09fcd067e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8333002-e48a-4c6a-953b-b24fe5d02e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b58e623-752b-435e-900d-d28d1212bf0c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d2d1ccd-c446-4b1b-8493-f732ccb4d4ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "656fea72-28e2-4eaf-aada-a97dafbd65c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8f72d0-d885-427f-8aea-3fa17352653e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8846ffd7-3516-4db8-8b75-a48ce646c4d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e317c27a-d533-48ae-87cf-6065ce33a0f1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2191977e-2c85-405b-8981-c0b07f8dd42f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59e88737-6002-46ef-8834-7b474e43ac6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d615389-ad8d-45d9-baae-c0a53b77bfcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c06ecbf9-9965-4233-abf6-f3593a5e2422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103972b0-f795-4850-8907-4d8bc6506aeb",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a839cd8d-bcf5-41e4-ae4a-dd9c12333370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c7a55e4-b03b-4629-8c76-6e98a6b72484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0e18b1-d2a0-4d55-a8d7-b42ad186a13f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe436b4-9d66-4562-ae0b-9fd284f734a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f376095-728e-452d-9a51-11c91c2d7600",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab568af-3d25-4a6a-9ea1-039d8f0e8c52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8741378-c1fb-406d-bd73-9061351ed0f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "760860f7-7286-43fa-8877-7d0d0665b58f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b2a0d38-0fc9-48ba-a82b-247877e11982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc0d9785-8087-4041-b475-cad17a8aeac4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0965822-49ee-40b2-9d93-613260235ca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab036bf5-411b-4358-9330-e0b800a3dd1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4093e51a-0a9e-41e7-87c7-7fb51bbaaeb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "253d1aae-6138-48ab-bc70-2b47e2b2afa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77176c8f-1122-4c46-8917-5a6e3b28f6a6",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b407c2e-335b-4661-939f-497711e78ad0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "883e6942-ea1c-4c38-b242-52435c5b1613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df726584-42f0-4ad4-9a25-440e58dbd43b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b826c3bd-7e5c-4dc4-81a6-c5dc53ffc956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5c19fe-a7ec-4c6f-8ecc-ff809a3454ee",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c44d34-f334-42a8-80f0-d92f2cb1c02c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e9ff48c-8b92-4150-b018-0645125222f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81db0438-4ef5-4ef9-8eff-96c12ce72ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41547fd8-350a-404d-b283-5604dd82e302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451c4796-02f8-44bb-9230-e2368b55e96e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e837bcc4-9290-4fdb-83cf-1ba8c160ef8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9516415-4400-4e2c-b2a2-809a36741d7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7f1da9-6b4c-47ca-8dda-c399cdf87d37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a28f636-8e43-4612-8100-dd634cec755e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5e932f-663a-4e4d-a254-7005bd4d6184",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff0e489-dc86-47ac-bac4-700218818142",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e775a132-fd97-4468-8c4c-726f96cfc2db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c1a30d-4c2e-4e63-a152-6b376faa9d9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57bf410b-d50a-4517-8eae-41a5736961e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7aa35b-81ad-49df-858c-9ee3ebd29b28",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3728789e-0efb-4154-9892-a2fd6385498a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04f5eb2b-a7d2-420e-9a10-a881c500792e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf1c1e4-88da-4845-8c27-b5f843693dbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a752a78e-1845-4aa3-8188-92e99fb03ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93bd956f-d424-4fca-aed4-674a5400d888",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "381525cb-6105-45ef-8b77-f59f46bfff54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9bc4e07-510b-497b-b930-7bc07f0e0e3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37324127-243d-4c93-a913-84a8e93d2c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23477dc7-5c1b-49f4-9f22-6a26f2ec8e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6fdd48-9edf-4c09-8f21-dbe56b8bc214",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa54b86-520a-4b66-83e4-ac8b64ddd385",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f019a8d-bbb6-4863-8873-b609db23b158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f359e1a0-a1ca-491d-9733-66e75a201e5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb3ffd9-5cc4-4e84-a144-9fbfd0ee2dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eff9c11-f6cb-465d-a192-f7eea2d08a46",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7050fc-327a-4ca5-801d-39584049a372",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "209ba232-62bd-4ac8-8371-d5fb3a6ea8a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b7dbb60-feae-4db7-aacf-9f6772a7ef78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a44a9a96-c151-444a-817c-8bd134553b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e3b593-69d1-44de-8578-1535db85f898",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e73f02-34ad-4e4e-85bc-e3c3bf2ae733",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "153430c1-c84e-441e-a5db-31c518131344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "109f4ad9-bec4-45c4-9234-5cc89e96606c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7b46ffb-4aae-4e0e-88f6-e2aa211ed07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6caeb470-c969-4452-9c11-b2a29227fcff",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058db85b-bde4-40e5-a7a0-45bbafbd639f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed00153f-226f-4648-a464-b701d81e0ded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e7eb1b0-a3c9-4d79-990f-88e762886de0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbf4c4ca-8a47-4189-b2f6-d0b6ce940bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1332706-7fb9-4e6a-ab9a-c4e4bce48941",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51877432-b913-4c70-acd6-47d74315c9c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46ad89e5-88f2-4911-a20e-ad850aabe831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d76219-dbae-4454-ac9e-d4b676514223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40030c83-38dc-495f-bb18-5266b93cffb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4ac446-4b51-4a4b-ac08-6dedcdac0b5d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f21a55-8927-4c1d-aaff-862f5ee0a2f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26ffdfd8-5bdc-4adf-9554-2c15f7fc8ab4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "979cd129-d159-4be0-b6f5-f20c9f429833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3d8ccd5-e47a-4675-b4f3-3e4dfae0f316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b9b69e-cc31-4814-bfbe-b388b7d8bd3e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978c23d0-c120-4e65-b51b-f33226824660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6962e2b-5693-419b-9a91-e2a5b50359cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0985b235-d0cc-42c3-9bc9-e1de209a8f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "739d1bd4-2497-4a1b-acc0-cff80b2417fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9adfc733-4721-409f-97cf-4b79ed0c32e1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb496e5-3fef-4092-a6d6-616bd4f2750b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d77f7e0d-cfdb-4790-a407-e0b120fbddf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba95dda8-42ee-43bc-862e-14b5680f5eb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eafd5706-35a6-4e47-8bc8-cf82d3886366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7fb442-82f3-4e8f-bd09-3b9a6160905a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89548182-2067-4f9e-b013-5f3a398b69cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b056375b-1502-4267-8e4e-1ffce67997f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a1f61a-5fa2-4ce3-9d14-d402b130de66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa37bb3a-f05d-49bd-9f23-72517ecbd248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0922d6bc-8047-4f1d-be60-b5b26b2a3583",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96be0bc-80a6-46e5-8d81-84d1d8079331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640ff84e-ced4-459d-b0aa-cf903d74020e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0502ed17-3362-4e8e-aade-b7d29aa6b1b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b963836-3094-446e-849f-069ff2028192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f76bc6ab-2e49-47e4-9e57-7e0def2488c4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7249dcf5-ed4b-464e-8ccd-54cbc7b2ba9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6541b0dd-eebe-4290-86ed-bb507e09e813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04299a52-1cb1-4e7c-b885-8af66c94b2a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09caacad-f195-4a81-a4be-7954cb6e3fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998fd47d-2026-4589-b1cf-2f54c086ca52",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d523232-ba0d-4efa-8bc1-1ad187250d6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98bdc746-e432-4920-b948-302750963125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19384f19-ddd1-43d3-bef4-f5461b4fd93c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089c3f9f-c8ab-416f-8f5c-82e36e13c9f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec668ff1-0ba3-4f4c-b2e9-80ea97f0bfd3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ad7bc9-ebe3-44a0-b58d-a21b8d8e9407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fa3cd12-0938-4fe5-a480-1f6a506dcc8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51770ec0-bab6-4b4c-a846-ef4196e29107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f769c5-61a9-4fbe-af26-4809795c3ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a009b1-e790-4c80-b059-785ddc5b27b1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc59abdf-69c6-4bf5-819c-b10bee1b3cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9289ebac-c537-4828-88d6-8a43bfc910f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf81b55-fabe-4784-8f8f-f11d05f57e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6488f90b-ffc3-44cc-bfeb-1e19944cf21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca85eea-fb44-4326-b83d-1d5225a4c7d5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1fceac-dc43-4369-a174-b0fc9c8d7023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49acc8bd-939c-4ac3-9fae-17cf52bcb50d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9aa4a7-f129-4794-873b-71deb2e42e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b2502f-3255-4e0d-9590-2ab92c828fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1164cad-5aa0-4217-9885-5e393926119c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9179a9-d720-4df2-9971-ea2ea75802cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2aab92e-8aa7-450f-bf55-5d87eeb1a3d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb39fcb-5d68-4c2c-a44b-fd874d534d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faefa208-5cc9-4971-9645-9352c22ffab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdcb7dc7-60e5-4ed0-b7e8-11e1b0fe1b9d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcafcd83-d1d5-49e8-8b45-ea477aa9d860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0de991ed-8e73-4acd-8fbf-ebf47b2ce09e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42c24d2-9477-4fbe-a022-bc0f7bdebea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d07107c-5039-4e9a-8551-cd85d1684fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b777062d-aa09-4995-aac8-32c1b5dc8e73",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051d4a9c-01a2-4481-ac76-4f4d6e7ea702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41e6bfcc-ef7c-44bf-aeab-3d52fec8d353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb115f4-ca21-4134-b328-21e648494847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae11d2f-c15d-4702-8839-d75dd77d245e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7294e0-2399-407e-9246-2f0692ca57aa",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5850e5dc-467c-4616-a199-96415e807d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7c232a2-62b1-4790-b052-5e06470dfe5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea091fa-4903-4491-97a3-41ffe5430b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "086c3d7c-33ff-4e9c-bad3-c7fc80511164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14013bf2-4f2c-4299-8994-a786a6435cfb",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e73f958-f9d0-4856-84f0-4cefe88808be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef63159-95dd-4a75-b98f-95613411c25c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3873019d-54de-4a00-8dc8-a7f7484cdd95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "018865be-b0fe-446f-98ea-811b298892ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2234d6ab-edc0-4b4e-9625-6d8f7db9c9e4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fdff8aa-f80e-4963-8b96-e6150d72aabc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e1f46d-2c8b-40b4-ab48-3484aa1c1c3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35791ae2-bb27-4646-91f1-c36032fa519b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50036cb0-8725-4743-bdf4-1c7cd8f524fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f280b51e-591f-4ab2-b7c3-c51f7965be44",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3840236-2f91-48af-bccb-4b078408fefe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "487e0e45-80b1-4140-8b76-0df8239c2439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0b979c-736f-410c-87da-084aae195dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28918d6f-c657-4009-b2fe-ab22cacff889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db813b15-ead8-42b3-a0b1-bdeb3327165f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ecf54d-742d-46dc-aa94-14e763a0eecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3176bfe-e737-442a-b0c6-b84c1200ce6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd0b001-6180-4d37-974f-b5f0c2a7bc35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ad190b-9968-4b7a-a0f7-fd45d799e9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99bc862e-60c7-4784-8f44-0f918d90cd4b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1d9b03-dea6-4de4-a65e-d6ee3933fb9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d86f41d2-7e67-4dd3-80ec-31293b664921"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdf4a983-cfe4-4ce5-897f-1e9979447d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "305a6dbc-2192-469c-a25e-ae1ee60bcaa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcc1112-33b3-49e4-b62b-4a48e4c2d445",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab4d64f-0f0b-49ec-aa80-f84ea80d67b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f00bc8de-f425-46d8-b117-12b5ff6eb8cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b67ab56-107a-4279-a309-4c406f270990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14fa53ea-046c-4926-bb8a-37bda03dba6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6691ab45-f6c3-4f75-894e-3a0082d0e1e3",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff745b1-ce74-47ef-811d-dfe6cd659b77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b09cd2-8c0a-49e5-8ec0-8f9fb843f29d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d15444-aeb8-4756-8ed8-7a1eee5082e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51776019-2abe-46d2-8d37-8d3f6b6a0bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6333d92-9a35-4645-9d21-1e31fcdb769a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dca843f-75eb-4e17-8a05-9e68ffb3954a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f1672e-d259-4540-b0d1-c6d26b97eae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed37fd1-a4b0-47e2-9df3-bbd3542c4a07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb6a6dc1-b4d0-433e-a8e0-b59980682f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96aef319-6396-4fad-b1a3-55792702e7b5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5130771-ca6c-43c7-a1fd-08542f45412c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82fab8a8-2121-4c45-8980-714d2121c0d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee59c41a-eaa3-4f58-8630-8f3521ccae8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "563a4ff3-586f-475c-a073-b28b63cdf6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7113cc0-b044-4dd9-9262-8ae05d6aeecd",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72113dfd-dfc4-49e0-befe-4f1dd5d9e683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1ccfca3-9ae3-4969-9f85-d8c9051ec6a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "488cec33-dc26-4709-9937-059c0c1387dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c323fdaa-d533-4762-8d74-a245034c566a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a568c620-5969-4a66-b718-2658bedb1094",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3425aac6-d85d-4122-a970-61084165a68c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e685b981-cf65-4733-ba6e-d6e6ce201e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f723300a-9a66-4f96-91e2-6afdf80be0dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ae7d04-4659-4860-85eb-2c3a97c33811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d420ff0e-0c8b-4819-a989-49f1c1e7f00c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01b44f9-f67a-4c20-b3c9-b810065e1e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "049564a9-c836-447d-83bb-f1a2c3c7f5fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ffcc7e8-f1d6-4b07-b697-132af6dd28e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb8b3bb7-8430-485e-8011-a24efa410506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad38601-6a45-4bf5-ba7d-cf607cc03e72",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca26e6b0-1d9f-4148-b755-d3c678718211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25474a60-8ec3-4504-9265-027cffadbe94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf9d54f-463f-4372-89d6-18a45bc7b432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e840746-65f5-4e85-9eb4-f8aa86fdef74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db38082d-a052-4a77-b539-df54480cb750",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada06884-3f7a-4813-b016-4479decfe02a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0220a3a-ea9d-48c1-a860-3ff2fee3086f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14fcad31-9443-4259-a0b1-e9028449010c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84afe025-a27c-47e2-b343-cc76cb2427c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf5792b-292a-4924-8e53-519e33d78994",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7259ee-eee2-45a2-9a62-4aacd29c0b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ff1be42-6bc0-4e8d-96c9-25e625fb64ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8099f8eb-6ad8-4bb4-82ca-027d4245bac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e69a8983-8dbe-44a9-a075-9f96c92904ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719e851f-32ff-4d05-afd1-261249103714",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c9f963-b3eb-4c9a-86d5-9c5877bf43f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e516254-e12e-4c13-8a4c-ce91f7ecae50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c062249-bc2f-4fd8-b0fa-2ab98b6d611d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0da03fb-4aac-448f-84f5-c4afbfe7a8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36fd149-ec66-404c-9433-c50c53f69be2",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db09787-c999-4aa4-b570-8a1c92748ddd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e561237b-c098-42e6-9b76-ae4fa98412b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4527ec3-63af-4c04-b7bf-ca0ebc1c2abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10aac674-0620-4631-8e0d-d58be8468bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a421c7f7-0229-4380-ae32-4d7d714484e1",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c682f4-404c-454a-9be5-e0cf259e35f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa3107bb-5292-49a5-ab3a-a9fce6faf119"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb87ba8-5710-46ae-8016-801885a5af33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daa7af89-db57-4671-a848-688e04645de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae804622-fb13-4224-aa09-50cf94908d32",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0996c7-e4e0-4b98-9662-bb4e99a76987",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aba80cc5-1b75-4198-a41f-4e68de64a331"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "105daf04-da15-42a1-bec7-e858fb75c1cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "790441d5-9d8c-44b4-a22e-cc3a4d72d776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aecbb16-ad0e-4f89-bc71-79ea6edb5cd9",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a818909d-d75c-444d-ae2e-ab2798545b83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46f234bd-6d64-4174-ad60-6cd7e03efcc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7786bd0-5bee-465d-9fe1-0d8b3cb70a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c054d854-b95f-44ce-979d-da09f8fed138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d62323b-a7fd-41fc-af5c-4dda73b6088b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff416e3-8e5f-4b0f-8e69-54d085d56d19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1965705c-5332-4352-8b74-6a4afee02607"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f9ca036-ec57-47a8-abb0-d00a71dfd9c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09dbdeee-d909-4eb3-819a-8ed835cdd1be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a68b1e9-4149-4490-be54-14c4be05307d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367db296-8f80-491b-9654-fd11ed457603",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e50371d1-b95d-4048-92b0-77f4fa0e7673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdb69bc-f109-408c-aa06-9c9f57d027ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd75c96d-3d82-4916-84cd-fb365473ff6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e014414b-b6dd-4cb2-ae0d-90854f661d97",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e82c79e-49e1-4ecc-86b6-ce24229dcc45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e12d6d5e-76fd-4e37-8072-21fcd0b985c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6337658-1767-4969-b775-5fddee3a55c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4439f8fc-5f80-4165-80c5-79fa0fac134d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d63c81d-9650-4888-aba7-da544d395f44",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d7da5a2-c7ca-44b8-a994-3c023b85701a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6dc0ab7-bd65-41e9-b9a1-bb1b7a8ecb20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f37361d-5a47-4d0e-a1a8-b789deba3d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a459eed9-375a-4590-a58f-44f87134c44d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d735247f-646b-4582-9b26-184afb24e46a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81284136-3c3a-4e19-869c-602917ba727d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5dae5c4-fcb8-4d2d-b4f8-55da54197fd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4168094-c412-4a86-b4f6-c27d9717653d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e3309ac-3daa-4bd6-9fa1-139f7eb5c81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ef45de-f0ab-4d07-b965-a10871b4d982",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9379f8bd-2042-43c0-a26e-40a0c42e36e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01681c35-4af5-4ce9-96f1-93721de0dee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98650579-e5c9-43bc-8ccd-b5c184627462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f87b8900-ae81-403d-a6e7-a94e4df78592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94bb6fb-68c6-4477-b8dd-eceb99947b53",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0077bef-0dc6-455a-9a8f-c7c100945abc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2769e67b-8513-4657-bba7-b55c43479613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7cfcb6-d0d0-43ae-8b42-6250cc4b27b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df09c679-c06c-44c9-b094-d7b916c5ae0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561ab9e2-3345-421f-800e-e0206dd7a18c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1638aa-3f7c-45e4-b6ce-6471e130ca4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2069b11d-6c92-471c-b83f-28a94ba3a786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12f5848-2268-47e1-916b-6c38c6d7a417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255f73bc-d89a-4808-9f8f-c3de6ab97c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36bef638-3427-4fb4-ba4e-61cffac5914a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9838efda-e905-4d88-8df6-864c8ff3ff1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1b4ad7d-c58f-47cf-94dd-625745a3cda8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf14433-1311-4396-8905-9585b91b424f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36682cbc-e15b-48e2-8787-3cb92118ae6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4548ce9c-ac6c-49b4-917b-0cfeef997f57",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76eb0433-3a58-463c-8d86-5f6f8f2d118b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08d6f9db-4359-4e0e-96d6-0514f685aa61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5026bcda-308d-4212-a150-cb2b394bae67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66ef418b-3a80-4efa-8943-07db6f3f56bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c453c561-3dc3-4c4c-82e7-47cff84d5717",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ab31b3-a911-4f7b-9cb7-2d3c17bcc1e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e8489fd-0a30-4b59-a366-d393904609cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28ed8ec-aa3a-4314-97eb-3fdf89ad7029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "defc05c6-1b8a-45f0-b1fd-d2eb17336db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fefb2bed-b536-4e26-adf7-5ca6fd698625",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0f2eec-7382-492d-b273-d2dcd8c9e9a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eed41e1-5bb2-4fd1-a786-6ff2c276bfd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca576b18-7d38-439b-8876-6461e6e6f3b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f5467b-6be8-40f8-9b74-0a529368e7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c9720f-f701-480f-8a7c-2109389c9c14",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc5d1dc-899b-4206-8bdc-bb8fc59e3994",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a3e5db1-920f-4cc1-834b-2b62a059f1f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d65970-4e9e-49ca-bfed-8f4e3d29ed5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2c4be69-7428-4f73-8c0a-d82e157667a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae598a6-c7b7-4157-97ec-f4828c5c3489",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b9cb54-00dc-4c93-8602-064e8512a945",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51027c6c-bfb9-453e-a2ef-b641adb76885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4f0a08-2b2f-4630-aa2d-ac46f5184d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e66b6ccb-a4d5-4560-8ed0-71c42dc95edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cde1677-7542-41a0-bdf5-ed38e4f0afdb",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37057cf-7a8d-449d-9d86-b3379b9f6822",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "726c5805-d054-41ac-8769-83b99e4ba874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c790b0-41cf-4e98-9e6d-1140952f65ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f304882-0648-48dc-b00f-18577e379a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf01c17c-cd5e-4a5d-8d3c-25abf3626f2d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce719dc9-50c6-4ed7-b0ce-7c8cd5c76e54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "855acb58-9714-4786-beb6-dde8748f5dc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa0a147-b10a-4e9f-b496-1b845c7f472c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd04a0f8-b3e7-4c55-8b17-e39703502467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f90b27-b246-44a8-8c8e-dbaa7cfb37b0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b286543-86d6-4403-a58e-f4f005c7cc6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8adc2883-f4b5-4958-a9e4-f1907465fd30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a1a3a1-ec0f-484f-923a-6e40382db91f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1aed35a-d13c-4fca-afb7-3d8d6de05d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e9e736-11ac-40a0-8387-86f5bc8fe2b4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7483422f-54d2-47fe-a7dd-a5ccb87486ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2796aade-270b-442b-a6bf-cbd5f4477e95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d7aae0-b2c1-477a-bda2-7c9a942a06df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a946ce01-7f18-450e-a917-5c65c7d30bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6ddb73-4c1a-4a2b-88e5-08803dc86dab",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c0bcc9-f8af-4be5-868c-67f68f85ad2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19b3f0df-e479-4fa5-bce3-dfbda55be185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5620990b-2480-414e-a58d-1ed7d38d9258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa968cf-d27c-4a31-9fa9-003d4549a0b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6ea215-69a9-4a67-995b-dffe3428e2e2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313b69e7-593c-4727-bed5-bec5008df712",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba9c5baf-153a-4219-9fb2-b6f319c514c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "142a990a-55fe-4289-b061-ed2e41b4a9fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cde6f3f6-6f29-4058-b23f-eac9c7550f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e13876-dc13-4801-9309-4bc8dfcc8118",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09ceb74-2e5b-49e0-ba0e-9397ab0286fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43225474-1065-497f-8409-e7427a48b749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e688dcc4-ce70-4343-9459-d0c8d23b5199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9586bde9-5937-42e5-9edd-8d4666b3e403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acf5844-fab8-4baf-a9c6-ea75aa384ae0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff81f9bd-0d83-41f3-9d83-78e17f353ef3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57391fe3-e355-447f-a965-64341986d345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b39d4f-3ebb-4c7e-9941-402cca9599af",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "356abe2f-d622-4e88-b71c-338e40b916d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5564c8f-8000-4fc0-9a82-a266ed4f0dae",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddcdfde-fa5e-47a6-85d1-16a0f1e07ce0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43b76ac6-7710-482c-9e40-4e96a7fb0634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "759e3120-37e0-40b2-b116-fff8e657bba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ba21d88-d888-4a07-82bb-e0d9f96991e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3febb7-b894-4d30-82e5-b9ff3fc0450e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95cdb3ed-50b0-4e64-9d06-29ef48408915",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72ade158-0293-49c8-af9c-c46420c96c43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "746c58a0-f44f-4746-90ad-304fa435164a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "805c9762-9c90-4706-9f84-8e88bae9a9c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4af9998c-ad49-4bb9-8f63-ed8db5a0cdd9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861e474e-4612-4f58-8466-a0d4825800fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c7387ed-8d30-4936-a23d-5419633fcdf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1518972a-3c83-4666-975c-14c8cd5ef0e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50513f18-74c9-41c1-85de-df7b01ce2897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2361342d-14ab-484a-b535-0133694046e8",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193cc017-9ae2-4437-9035-4affe79ce0e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3212ce8c-611c-4da8-8108-a1bcb86a0873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c3fe24-3509-4257-8827-fb6ae8fce6c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d23f906-80e6-4c9c-a97d-21dd0eafb505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99baf346-21e1-4fd8-abb0-f663db96410c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1519969b-6015-403a-9e4c-77eac437dd6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7dd4b57-10e1-4006-90b6-2961b09a4858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "918ab3dd-40a8-467c-9347-6f42c5b90f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b77af4-b7b6-46cc-aade-f18131f8f318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e83c3f35-439a-4b56-abd1-9663836c6442",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65f0197-3a0e-4922-bc0e-f19fb28361c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aed690c7-ad5b-4e96-9d13-aba26b3f2b8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6313c49f-94d9-4d6a-aa04-877b2979d380",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21121219-7809-45ef-a94c-01d126b5957e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1550e5db-afe6-4df4-85e8-b3d6add781e7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a23e81-80f4-460c-8685-340d30e7a32e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51b8dd3a-63ec-431e-9b57-8062b5d4d79c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4036e3-c2f0-49ba-bded-750c3c78e2ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2323b71d-93d8-41bf-9ac6-ff3328174d35"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db6479df-209c-4c6d-a153-153dc90304d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c55c67a-7eac-4784-9069-024f51a651fd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6468b823-98b7-4cbe-898d-2b770a03ec95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "096e72ac-0ac8-4026-a6f4-f57861a1256b"
                    }
                  }
                ]
              },
              {
                "id": "215ea43f-368e-4675-a6bd-9f16dc17dec9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c39d21fc-231c-4742-a5c7-82982bee0f09",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54279180-d8fe-4262-8e66-fa567160fd6e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "67c815c0-db35-4e3b-8905-cb5bcb58225b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7246e2ad-cba4-4eef-aecf-cb03007d8dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "270f75fe-bce2-40f5-a8bf-549ae68750be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a089ecae-1702-43cb-ba9f-9220e79c162d",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26968fc-1f03-49ad-90eb-c20cb1538612",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "40f9a65c-8753-48d8-bb4a-9a2fe8e6ec74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "868b6136-22e8-4f92-b6c0-a2d162e6ab9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a94ba33-cf91-480a-b442-cac6a66c2ef1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ebced20-8f30-42f9-9092-4d55411ee340",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04e5a778-b89e-4b4f-9e86-0aeba86b42b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e852954-0e07-42cb-8e1d-903de9cb386a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96ac4582-ecd3-4e74-a729-e5c89f324315"
                    }
                  }
                ]
              },
              {
                "id": "459a37d1-8e50-4253-b31a-4aa73a7ef6ec",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ec4b58e2-8eeb-4e09-9cb0-72b1b0ea27e7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec9b236-7e11-4b17-a6d6-535c339cf041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "559575c8-5797-4f36-82f6-3b3f3198978f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c2eb6b-d00a-4e46-9dc0-6c7326a4ce45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29376f4b-6245-4260-86d7-1897296577a7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "849a978a-f24b-4ede-ba8d-41e330be6c8e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c55963ad-4603-40f3-b341-ce00581ebc44",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "513b6cc7-a238-4680-83a0-7e5797e2dd16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e20f31cb-f551-46ba-83e7-855af366a143"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eec2d74c-d659-4f82-8fbf-89cad42977f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b337b5d0-6ba2-4460-8b48-c31f1309c458"
                    }
                  }
                ]
              },
              {
                "id": "6782a634-8b2c-466f-8738-4e8866ffff4e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9dc757c5-c3db-4ce8-8d80-7b71d0b5285b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a2022d39-acf3-4a23-a191-8a303c06c4d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc1080c7-90bc-45ec-bf33-5f9f53d961a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c2bd2e9-77eb-4e00-8154-3d57aa62eef3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b9881b54-96ba-46d8-a619-5db5048c33f4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3e19471a-5775-4dab-b67e-3c7a8369b5e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "399f75b2-4285-42d3-95e6-d37cb7aee089",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "65f6fed4-bc96-4d1f-85f0-566a27818b80"
            }
          }
        ]
      },
      {
        "id": "e018b4d7-342a-459f-bbd1-5fcdcf8947fb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4c1fd92b-6da9-455b-a78c-025e8f97dede",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ce9fdfc9-a050-4a11-a223-1bb507139a6e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0040aca2-eca8-4682-a543-7329d9e3852d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda1f23e-44a2-471d-b51a-3ce943150ab6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "63d6b5b7-db9e-4613-8479-701d9e913362"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6447ba29-ee7f-4dc2-ac82-acdeedb08a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79f35bea-89fe-45b0-80ba-b78fa274f267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14008ff-cfd7-4151-b321-d81e79eebc78",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd60c49-d6ff-4ae5-b55c-660befc3863a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7f66a123-4c75-460c-9026-864c724f15a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b8c497-0cf9-47f0-8f96-913a5a66f6e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e354af1c-edbe-4d80-9f6e-49c2c33471ea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44e1ff51-3b04-4981-8545-4b54c81b8f64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70eb5724-aaf1-49ec-9f4f-c29bdb1d50e3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1a5312d-96c6-4d19-b7a0-d2c5cdce2927",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46401efb-5baa-44ec-8dbc-7841fb734bf5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e977d99-bbfd-418a-8cd5-24de949850c3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4ccea50b-1801-4440-8d87-1fb2ee2996dd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b182305-f324-4c06-8e2a-ec335ec19061",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "44607a65-49ef-4799-9f38-635ed7acd9cc"
            }
          }
        ]
      },
      {
        "id": "a0dd5085-0a95-40de-b1ee-f9c264eb191c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d5c8dd3a-d0f9-45b1-8a1d-766ac8ad6ab2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a68a8bbf-0fd2-4dd7-af54-af9e8ab5c68b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "93e3c989-1f1c-4206-95f4-87337dd4b32e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b607d005-1c66-42f5-91c2-6bb2d5edd955",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c5dbed2b-9da1-4dd7-9885-4aab03f3032e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a05178b-acf2-43f0-8eb8-dd023f7a78ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb923790-a4ae-44d7-b888-ae6e29f250a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1348407a-475c-4996-bdac-cfe732457720",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4293b663-4a61-46c1-a268-4cd56e8a8318",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bc136fb9-40c9-476a-80a6-3428fcb77f35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b1e476-da06-4cc8-ba36-b039480c3020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bfe0b4bc-fe32-4a91-9f0c-68b86e2ca54f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fe9d54d-e581-4eff-be28-6b8f57fa042f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c51808c8-b9d8-4034-aab7-05514344682c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4beb7d0-22d1-450f-b2d2-adadd1ee1cb2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24e7fb20-8477-48fa-8af2-59e576253870"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f032797-f80c-4134-bd9a-e836225ceb19",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "83db476b-a1fa-4de3-baaa-cc8a50c1ccb8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0b7b0158-7752-4e2d-bf77-1a62a438e58a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6982a283-350e-4dce-a2a6-bc996c8c76b9"
            }
          }
        ]
      },
      {
        "id": "123f3037-cf9c-4961-9540-bee4ffbf8807",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a6773ca2-bf42-4687-9f4c-e704f20a9f97",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b8bc41dd-18bc-4f87-91b3-28fda0f6d631",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fb1b1e48-7834-4281-965e-43f8e9a1c674",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9630277e-ac26-4afa-a3a6-d89f5bf57d66",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8e0634cb-7d34-42cc-b30a-a22fe10605e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "342d8e74-38f6-4153-8888-a0cc27af6398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7dd9b09e-016c-47e0-9445-c025b3073963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff269c38-7718-457f-8a7c-c457e07fed9e",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc0a538-321c-4e50-a1c6-d990f1570e7a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3263310f-27db-4438-833b-9d29868eab74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9503701c-5cf6-419b-9f55-e20e556b3b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efc51f22-5d1d-4d58-96dc-e062e5dc8dd0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "220bd652-a387-4d88-8f23-c04ee2d85a03",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "adbff840-0963-47a0-92a6-1cdf38c7f767"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc0f6baa-bcaa-4ef3-ac7a-6abcf38458f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed370e44-9939-4460-8fcc-a5761a139318"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5cbc9650-c15d-428e-b8e7-2ecd6ef4119d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3063364f-f584-4177-be0e-72c530646246"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f45d07c-1850-478b-99b9-418145ceb897",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d6e6916f-4dfa-46d9-a7ee-578541d4c8e5"
            }
          }
        ]
      },
      {
        "id": "55e0e87a-edb1-4f01-8c2a-f1135faa7e37",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "84851740-e3a2-456a-8697-26c7453e6741",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5734ac08-b0cc-47b6-88fa-bd3da13278c8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "18b312c8-6d6f-4b02-b5e7-500461365a88",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0506d116-6f12-4ad7-9da5-4a967a510aec",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4e3f2e6-1193-46b7-90d2-e0b4320a9054",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 77.11832061068706,
      "responseMin": 3,
      "responseMax": 752,
      "responseSd": 150.1006701886197,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1673051879728,
      "completed": 1673051910952
    },
    "executions": [
      {
        "id": "365c2cc7-0f46-4f3a-af01-3418f98a403f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "866e6c20-f237-4613-802e-22c75399fc82",
          "httpRequestId": "54b65e99-e5e8-4e58-97b5-04880fb5c832"
        },
        "item": {
          "id": "365c2cc7-0f46-4f3a-af01-3418f98a403f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1a27b5f0-8dd6-4778-a781-69f05b3f82c1",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 0
        }
      },
      {
        "id": "ee5b5f5e-1265-4593-be12-d7d19404df94",
        "cursor": {
          "ref": "191eb24d-f459-47e6-a076-4478f058a677",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "683ee312-bb4e-457a-ae14-f6109495934b"
        },
        "item": {
          "id": "ee5b5f5e-1265-4593-be12-d7d19404df94",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5142ab67-694d-41c8-8dc2-d5ec1d3f58c1",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "01498a1e-f0a8-4e76-a418-7a919d4f42a2",
        "cursor": {
          "ref": "37d4d5c9-4b90-45c7-b71c-448b77ae5623",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "93a3811f-7eb0-4374-bb27-c757bd9d0438"
        },
        "item": {
          "id": "01498a1e-f0a8-4e76-a418-7a919d4f42a2",
          "name": "did_json"
        },
        "response": {
          "id": "bcad64ba-7375-4e31-9475-b562a04db0ae",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bd238b-c88a-441f-9132-74a842e7f513",
        "cursor": {
          "ref": "f1c1b410-a310-49ed-8dae-f95f01138039",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "427fb9dd-9f35-4ddf-a7e3-edeb877e8f58"
        },
        "item": {
          "id": "84bd238b-c88a-441f-9132-74a842e7f513",
          "name": "did:invalid"
        },
        "response": {
          "id": "689a52a6-a4d4-48f9-9cb4-6b0f6974b176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bd238b-c88a-441f-9132-74a842e7f513",
        "cursor": {
          "ref": "f1c1b410-a310-49ed-8dae-f95f01138039",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "427fb9dd-9f35-4ddf-a7e3-edeb877e8f58"
        },
        "item": {
          "id": "84bd238b-c88a-441f-9132-74a842e7f513",
          "name": "did:invalid"
        },
        "response": {
          "id": "689a52a6-a4d4-48f9-9cb4-6b0f6974b176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab42c678-5da8-43c7-bb33-7e00b2ec212d",
        "cursor": {
          "ref": "8098c66f-c203-42e9-a2ca-7741899481d5",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "85ae1191-5fc2-4071-a613-cc1db51052fe"
        },
        "item": {
          "id": "ab42c678-5da8-43c7-bb33-7e00b2ec212d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2707fe00-a53d-4ff9-ba38-fee593a83c31",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1c7d65-b8cf-41df-b294-2edc7face4d6",
        "cursor": {
          "ref": "7b92cead-6182-46fe-a1cd-52ecabb56aae",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7271c4a9-3bae-4429-809c-d65bbcf3ae89"
        },
        "item": {
          "id": "bf1c7d65-b8cf-41df-b294-2edc7face4d6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c39d4dde-c07d-40f6-9fe4-ce9b4bb74371",
          "status": "Not Found",
          "code": 404,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7fe9e19-9b8c-45df-a5e9-3f2ae5bc9193",
        "cursor": {
          "ref": "b1d9270d-90ae-47b7-80f3-49d6d21fce80",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9041fb59-c68f-45f1-b218-0f20b26fc3b1"
        },
        "item": {
          "id": "f7fe9e19-9b8c-45df-a5e9-3f2ae5bc9193",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b3ff77dd-c144-4e8c-ba5f-5f2b812f9ff4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c21d02-f26d-4ab0-a561-0ac2bea13947",
        "cursor": {
          "ref": "6aed0d7a-9cca-47a2-a5ad-dd3c0cdd77c5",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5d83bcde-e090-4082-9f8d-e23a6c74da5b"
        },
        "item": {
          "id": "c5c21d02-f26d-4ab0-a561-0ac2bea13947",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "fdaf2fc3-3b48-42d5-88c4-4d36a267327b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c21d02-f26d-4ab0-a561-0ac2bea13947",
        "cursor": {
          "ref": "6aed0d7a-9cca-47a2-a5ad-dd3c0cdd77c5",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5d83bcde-e090-4082-9f8d-e23a6c74da5b"
        },
        "item": {
          "id": "c5c21d02-f26d-4ab0-a561-0ac2bea13947",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "fdaf2fc3-3b48-42d5-88c4-4d36a267327b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e261ebbb-bfc2-475d-801c-de5e736a96fe",
        "cursor": {
          "ref": "9fbeb61a-a96d-4a63-9c72-5eb3e93823e6",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "164b988a-117c-4d3b-acfb-374a96e21e0e"
        },
        "item": {
          "id": "e261ebbb-bfc2-475d-801c-de5e736a96fe",
          "name": "identifiers"
        },
        "response": {
          "id": "490f77e7-07b9-431c-b2ab-69902bbb59f1",
          "status": "OK",
          "code": 200,
          "responseTime": 42,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a8b20d-b56d-4d12-901a-833631b31eeb",
        "cursor": {
          "ref": "82d2f4e1-2247-49ca-a75d-65a9ed983392",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "97c680e0-f76d-42cf-9ba4-45e8192f4ca9"
        },
        "item": {
          "id": "95a8b20d-b56d-4d12-901a-833631b31eeb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1a9635d4-3cf0-4fa7-80c0-bf5219f6de20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a8b20d-b56d-4d12-901a-833631b31eeb",
        "cursor": {
          "ref": "82d2f4e1-2247-49ca-a75d-65a9ed983392",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "97c680e0-f76d-42cf-9ba4-45e8192f4ca9"
        },
        "item": {
          "id": "95a8b20d-b56d-4d12-901a-833631b31eeb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1a9635d4-3cf0-4fa7-80c0-bf5219f6de20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aad676f-6331-4052-b0b9-bb9155a76ac0",
        "cursor": {
          "ref": "d7554a69-b2d1-41c8-b30c-be1e6c5c2d37",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "dc348bb3-2085-45f4-80da-f8e1da3cea70"
        },
        "item": {
          "id": "0aad676f-6331-4052-b0b9-bb9155a76ac0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2c30c393-8706-456a-8fb6-48605a49122f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e33f9ec-1743-4b3f-af4f-53be53c83bd6",
        "cursor": {
          "ref": "156d67b3-9fd1-4f4e-9270-daa9804d6fb9",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b0a328e9-84a6-44e3-a64f-791e8c44da6b"
        },
        "item": {
          "id": "2e33f9ec-1743-4b3f-af4f-53be53c83bd6",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "c806769d-50c5-4563-bddc-e7c7c2480ef7",
          "status": "Created",
          "code": 201,
          "responseTime": 618,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "fc5c1a1f-f438-423d-ad5e-d243e3eda6cc",
        "cursor": {
          "ref": "51518167-5a6a-43de-ac7c-a2512243e2a9",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fcd5df65-3fea-47a8-94ac-d2f8eb8263f1"
        },
        "item": {
          "id": "fc5c1a1f-f438-423d-ad5e-d243e3eda6cc",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "26644fff-3f3b-47f1-8fe7-e87eb22440e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d0d12a8-2308-48b2-b7df-1b8107ec18ae",
        "cursor": {
          "ref": "46ab86d6-337d-4769-a4ea-28dea29201ed",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "958496d1-fb6a-443d-bf89-66d6b10873be"
        },
        "item": {
          "id": "1d0d12a8-2308-48b2-b7df-1b8107ec18ae",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "aea427e4-6744-497c-a929-e8d80c024206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b234329d-5155-49c5-8dd4-8563e0d80835",
        "cursor": {
          "ref": "f130127b-2f29-48af-8971-36d44dff04fd",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "650b42e9-460a-47fd-8b71-03f7aad5df2d"
        },
        "item": {
          "id": "b234329d-5155-49c5-8dd4-8563e0d80835",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0737672d-905c-4766-81f2-eff771be652e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70fe4ce0-bb81-48f7-9898-3b9060a30f7e",
        "cursor": {
          "ref": "2be03276-890e-4096-bc45-76598c0c4baf",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "bb2ebdac-489a-4f9e-8e77-589e6746ccde"
        },
        "item": {
          "id": "70fe4ce0-bb81-48f7-9898-3b9060a30f7e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1e6ef4ae-770d-4c7c-a7a4-6582307e673a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1cd5e1-5b83-450f-8883-f75b29af58a1",
        "cursor": {
          "ref": "d278a07a-8170-4a85-95a0-70b5b3f3be69",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "fbee5373-18d6-4202-93c8-a4dc0a915def"
        },
        "item": {
          "id": "fb1cd5e1-5b83-450f-8883-f75b29af58a1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "05850c1a-8391-4dd0-86c2-57c5d41538bb",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "72fae90f-2fe4-4c05-b4be-edc54210b5bc",
        "cursor": {
          "ref": "07a73c9c-63ae-485e-8a88-a5ddc1786e51",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c75ffe84-db73-4338-8445-e59573be4471"
        },
        "item": {
          "id": "72fae90f-2fe4-4c05-b4be-edc54210b5bc",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "27a70ae4-bd57-4261-a6e1-b0aa7ab6f277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1f90b6-a10b-4b8a-b7cd-1f49aa0e727b",
        "cursor": {
          "ref": "68ede310-49c6-454e-9813-dbd0aaec5359",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cb076298-d88b-4efe-a46d-8014071e7bce"
        },
        "item": {
          "id": "2a1f90b6-a10b-4b8a-b7cd-1f49aa0e727b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f60f8663-9565-40fa-ba05-65e85ada11a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d4f21d-7e21-46b2-b81c-ae85e5ac9932",
        "cursor": {
          "ref": "4491cb84-cc59-483e-9ce3-b34bd64794b7",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4657a27f-4ff7-4929-b61d-4fe3cdace40b"
        },
        "item": {
          "id": "51d4f21d-7e21-46b2-b81c-ae85e5ac9932",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "812e97d6-8535-4805-a433-153a39bfeda4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b08a52-99e5-485c-9933-e76a9553d2c9",
        "cursor": {
          "ref": "c58d5e66-77ea-4209-a700-8aca58c90743",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2bb05a83-93d9-4d36-a5ad-a1cf4afb284b"
        },
        "item": {
          "id": "a5b08a52-99e5-485c-9933-e76a9553d2c9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d08e6584-a907-4896-9d70-18d31e94cb54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab28a4d7-8b9b-4516-9d3c-7caffaa67d84",
        "cursor": {
          "ref": "e7fd7247-e595-45a6-9130-2bce45acf13d",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "faf4fffa-cc17-4bac-8d28-7933cb0b4a3a"
        },
        "item": {
          "id": "ab28a4d7-8b9b-4516-9d3c-7caffaa67d84",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "23ad5392-3dd0-49f3-9ac2-9963de54300a",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "241bdbd0-d3ab-444a-a246-0f92a34cedbf",
        "cursor": {
          "ref": "bbea76dc-a8c6-401e-b433-4c8cdba91066",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "408d0827-1416-440e-9726-2be9d8dba726"
        },
        "item": {
          "id": "241bdbd0-d3ab-444a-a246-0f92a34cedbf",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "fb238629-eebb-4147-b6b5-079bf24ab5c7",
          "status": "Created",
          "code": 201,
          "responseTime": 752,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "fa10986f-1a8b-4795-b31a-9bdad759fe18",
        "cursor": {
          "ref": "d46f280f-baad-442b-8692-d860201e0e5d",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f8f85dce-9294-4d7f-b8cd-3e7ed0473cbf"
        },
        "item": {
          "id": "fa10986f-1a8b-4795-b31a-9bdad759fe18",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b0a2c3d0-b7d9-439c-b70f-352c6a01daa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437d75cd-dc27-4031-8c04-6e605b4ead17",
        "cursor": {
          "ref": "b47f67b0-9a04-47fd-aa81-9f859cd01b81",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "cb05703f-e37c-42f1-a97f-79d5f1b14e3f"
        },
        "item": {
          "id": "437d75cd-dc27-4031-8c04-6e605b4ead17",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d6422b3e-9d79-4589-9c7a-4af96bade15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b4c4f0-59a8-4e9d-9ea9-e6479615e0d6",
        "cursor": {
          "ref": "ee0fcfb9-8859-4698-a57b-cee192051d9d",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ea9d0ccc-07a2-4f6b-877b-5bdaa136d1cc"
        },
        "item": {
          "id": "d8b4c4f0-59a8-4e9d-9ea9-e6479615e0d6",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b5c6b099-95cc-4ee1-86eb-fcb29e3cad35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5f8fe5-5505-4e20-a3ed-7148be2ee06b",
        "cursor": {
          "ref": "7a98df6f-3258-483c-852a-417763c5205e",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4c40b6e3-c7b3-45d3-a441-4473068a8843"
        },
        "item": {
          "id": "3f5f8fe5-5505-4e20-a3ed-7148be2ee06b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "95d2f0a7-6d91-48bc-8e26-8cbc6abc2b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987a5e8c-b24f-4ac9-87b0-21431c60e586",
        "cursor": {
          "ref": "ef6063ff-a9b7-402e-be83-49ca985beac4",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c938d6c4-1032-4396-96f9-3b68b62bd439"
        },
        "item": {
          "id": "987a5e8c-b24f-4ac9-87b0-21431c60e586",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f049ca2d-d8cc-4917-84f3-a4abf2ffddbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e230ac30-cd8a-4e2a-b86f-21e97aed031b",
        "cursor": {
          "ref": "51fcc438-d56f-4b32-bd3e-7e0244184243",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "27e15d1a-6b41-42e6-b208-559d701c6b01"
        },
        "item": {
          "id": "e230ac30-cd8a-4e2a-b86f-21e97aed031b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0acc3358-f50e-4412-82bf-6bf52b25afed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8b18ee-121a-4032-a342-2f4d1aa2b8ed",
        "cursor": {
          "ref": "fe41bd33-4bee-4973-86ba-27c8a68e548f",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6d32b80b-2985-45c2-99fa-18aa9dd81307"
        },
        "item": {
          "id": "ee8b18ee-121a-4032-a342-2f4d1aa2b8ed",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0fed7691-9093-42ac-86e3-2b1cf75a639d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1189cef2-5b6b-420a-9f7f-b81ba2ca6706",
        "cursor": {
          "ref": "39a690f6-b062-4215-a419-bfa7836039aa",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ce270406-84ff-4118-9985-990bbd4d6b80"
        },
        "item": {
          "id": "1189cef2-5b6b-420a-9f7f-b81ba2ca6706",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ae8c634a-65a6-4be1-8aef-b7997257626f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc6e9bb-594f-4b40-9eac-bf071d37aa09",
        "cursor": {
          "ref": "a5692ddd-c2c1-4201-be28-1916615161b0",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4ca4a9b9-7b7a-4672-b7e1-55b5c0f19224"
        },
        "item": {
          "id": "8fc6e9bb-594f-4b40-9eac-bf071d37aa09",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "00a2e240-62a7-4da8-91f6-b70ebd50e620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccfc341c-6889-47db-8f88-a40a31bea8ec",
        "cursor": {
          "ref": "b5eda643-c771-47b4-933d-abdab1ce0c96",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e09f995b-7867-4795-a380-5b258ddf346c"
        },
        "item": {
          "id": "ccfc341c-6889-47db-8f88-a40a31bea8ec",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "718342b5-3964-4bee-9189-22723ec3d545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e78ebe-22d2-4812-8ee8-464e2d0e334a",
        "cursor": {
          "ref": "a7bb277c-b087-437a-991c-45221fe9c548",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6b50ea93-d112-4641-b4bf-37ea397571c6"
        },
        "item": {
          "id": "72e78ebe-22d2-4812-8ee8-464e2d0e334a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e4ce60b8-6bd2-4d7c-8456-db7c5c876cd3",
          "status": "Created",
          "code": 201,
          "responseTime": 667,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "315d530b-704b-46e2-8c83-f4989cef111d",
        "cursor": {
          "ref": "6163d1fe-48b8-47c9-8c49-46902c455fc6",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6f8b087d-09e5-4390-99fa-5e6b409d5a38"
        },
        "item": {
          "id": "315d530b-704b-46e2-8c83-f4989cef111d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "adcea221-8502-4ade-b2a8-162384cf7da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dcca1f6-7258-4ec8-98cc-c088f674d65a",
        "cursor": {
          "ref": "5d878e8c-94e5-47b7-a11b-66cca45a732d",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "eec118dd-baa8-45ff-a108-1259e7c06037"
        },
        "item": {
          "id": "2dcca1f6-7258-4ec8-98cc-c088f674d65a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4db0fb17-8e9d-40a9-b859-35c10b7175a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb341b78-b5f3-4dae-a891-d7408ad0bd0c",
        "cursor": {
          "ref": "fb7f731e-9f63-492b-b2e8-61a6e4587204",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4c743432-6f36-4592-8b3c-f3fad53e6a2a"
        },
        "item": {
          "id": "bb341b78-b5f3-4dae-a891-d7408ad0bd0c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d298ec42-2a3f-469c-9cde-53ac98c71e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda4c394-6709-4dff-b228-1813fee7755d",
        "cursor": {
          "ref": "a6d2be5a-9d4b-4ac7-b4da-a9e386205dab",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3460e194-7c3f-4c1d-91aa-159bbb66b3d2"
        },
        "item": {
          "id": "cda4c394-6709-4dff-b228-1813fee7755d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "374c2942-8916-454a-a06b-93e128c73018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e820c6a3-6469-46a0-b975-1edb76ebaf71",
        "cursor": {
          "ref": "a503d1e6-ddf5-46ae-bf44-b5416930efe8",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "adb9983c-2831-4b63-ad02-adf9d5b27fa3"
        },
        "item": {
          "id": "e820c6a3-6469-46a0-b975-1edb76ebaf71",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4b769fd6-45e5-43eb-b457-211586f13d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a758d501-8374-4cc0-ab80-e90b0a10d7d5",
        "cursor": {
          "ref": "aaebb96a-160f-47fb-b458-aee284528065",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a97bf5b8-1db1-4f50-8039-12f61c5473ef"
        },
        "item": {
          "id": "a758d501-8374-4cc0-ab80-e90b0a10d7d5",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f098007d-df6e-4dad-abf0-016b00152497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98e8ade9-bae3-4b2e-9812-99506218b8c6",
        "cursor": {
          "ref": "17f23b20-bf01-4dad-b4ee-ef4fe11f2fcf",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2356fc2e-d434-4590-806f-53b060d21f6e"
        },
        "item": {
          "id": "98e8ade9-bae3-4b2e-9812-99506218b8c6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a3782fcb-08c6-453d-9f3d-3ddbe7a99161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ed1b1b-e46d-46bc-b5b3-88e36322ad0f",
        "cursor": {
          "ref": "a9693250-7ff0-44c9-a52e-05bc3f9bdec8",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3caa7268-b3db-40f1-856a-31ab80d46bce"
        },
        "item": {
          "id": "a4ed1b1b-e46d-46bc-b5b3-88e36322ad0f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d2fe3660-869c-4b6b-bc58-7e887c324ab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4f0e4d-4af7-4b03-94c7-f775e7fbc557",
        "cursor": {
          "ref": "8932ad55-46f6-4f0d-8991-db4c8ead61c3",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "15b0fab9-ec93-404f-9879-44f0993efa23"
        },
        "item": {
          "id": "ef4f0e4d-4af7-4b03-94c7-f775e7fbc557",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "20c5cc3d-b1b9-4ec7-9102-8276bb4a275e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da0d5f4-74eb-40b9-922c-c777ee451391",
        "cursor": {
          "ref": "74a0373a-dc45-402a-ab3f-dbbd1eda9c27",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ae34aecb-ddcb-44d2-b638-d5c678edb8b7"
        },
        "item": {
          "id": "7da0d5f4-74eb-40b9-922c-c777ee451391",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0db5fee7-ad18-4a23-b687-444912df5266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d52c8b-9715-4ac0-9673-1e6c8e64863d",
        "cursor": {
          "ref": "0afb0f66-3b4c-4556-8558-5c3e88de72ce",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1e4bc10f-896a-4fa0-b142-e51ecc7d9050"
        },
        "item": {
          "id": "73d52c8b-9715-4ac0-9673-1e6c8e64863d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b31c0a66-4fdb-4a01-9b6c-4fd6c0eddd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4918e2fc-8941-4b8a-a90d-fe9d3c517dc0",
        "cursor": {
          "ref": "f47758d8-4d0b-4aaa-b587-28564fd8faf4",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e2b1de2d-3982-40c4-8dba-7817c2bee64c"
        },
        "item": {
          "id": "4918e2fc-8941-4b8a-a90d-fe9d3c517dc0",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "14333d2e-7307-4ec9-b460-9a8b0949351e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a17874d-c0fa-4ce7-8b08-06d0d7f96a82",
        "cursor": {
          "ref": "e7db90e7-65e3-4430-8645-00f5587ca8a2",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f377efab-2c48-4496-8ba2-6b911644aa84"
        },
        "item": {
          "id": "5a17874d-c0fa-4ce7-8b08-06d0d7f96a82",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a6eeb42d-8103-4dc6-9316-b3e04041488c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 338,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "859228ea-0518-4832-b031-545148a0469d",
        "cursor": {
          "ref": "dcd57c87-e2a3-4376-b2b2-f17033d75ecd",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a9eb9739-f263-4779-a792-2205c5aff783"
        },
        "item": {
          "id": "859228ea-0518-4832-b031-545148a0469d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "43b0a7c1-9444-4bf0-9c53-043849230302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "082657f1-146b-4a25-a118-9353b8405534",
        "cursor": {
          "ref": "1e15eedf-d5b5-41e1-87d4-5bc8c5b3e7e9",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "81b50fd7-69e2-4635-8fcb-8d7de963431c"
        },
        "item": {
          "id": "082657f1-146b-4a25-a118-9353b8405534",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2670289b-5ae7-40f8-8203-b716db5cefd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c0008d-0488-4693-8c30-bd83ccf9e0c5",
        "cursor": {
          "ref": "3e6c3452-e3dd-4aa4-8652-396465484029",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "28561f58-507c-4491-b98c-3502842c445a"
        },
        "item": {
          "id": "00c0008d-0488-4693-8c30-bd83ccf9e0c5",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "91d605e8-6a5e-44ba-aa4a-a41c3d1dabaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b491ce-f102-4350-b08d-2ee63726bd4a",
        "cursor": {
          "ref": "91a2c9ba-7d3d-433c-9147-f18ff325173f",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "00c0d740-ed2a-41ea-8305-83bbfe6e9c39"
        },
        "item": {
          "id": "60b491ce-f102-4350-b08d-2ee63726bd4a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b387fbc1-7a30-4bee-9893-e1c297f17136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ebca88-110c-4b51-86d1-5453e0e21dba",
        "cursor": {
          "ref": "00bcaefe-2522-4ee1-9afb-1331c42e18c5",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "db9e2f46-8721-49df-bca8-22621a06e360"
        },
        "item": {
          "id": "70ebca88-110c-4b51-86d1-5453e0e21dba",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "bd76cbec-afbc-4e60-979a-2af6e66312b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2617d40b-380a-438f-8f62-a636a7735ce9",
        "cursor": {
          "ref": "9d1ba720-6ce5-4a82-92d2-29b76d6238d1",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9c61f449-a6dc-421e-bc96-1c2d6236e802"
        },
        "item": {
          "id": "2617d40b-380a-438f-8f62-a636a7735ce9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9ca5ad55-8392-4879-957f-c60df8260d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661abeec-4827-4f92-ab52-3cb8eaf3612a",
        "cursor": {
          "ref": "01857df6-ea43-4f64-b779-8116e4361039",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e4068b11-c5c2-4568-b7b4-3243f8f9b43b"
        },
        "item": {
          "id": "661abeec-4827-4f92-ab52-3cb8eaf3612a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1427706b-c1ef-4e7f-824d-0cc8cdba7707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 292,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "3b060aea-e94b-44b0-8d75-06488fd71e4e",
        "cursor": {
          "ref": "af0d87d1-c25d-4f3c-b836-39e74c6af3a9",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0ec08388-0e8a-43e7-9a79-d7122fe892a5"
        },
        "item": {
          "id": "3b060aea-e94b-44b0-8d75-06488fd71e4e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "02527865-aad6-405b-9339-92fd259b592b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58390e88-278e-46e6-9fa6-bb7aeee569c0",
        "cursor": {
          "ref": "bd92cb27-b4e8-483b-bb81-052120a71bb6",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6b568b50-b774-4d56-a5b5-f90011d885a6"
        },
        "item": {
          "id": "58390e88-278e-46e6-9fa6-bb7aeee569c0",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "de5fe768-d3bd-4a4d-b519-307a833f69e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4821f234-c6d4-43ab-82d7-bd7ce2cda1d1",
        "cursor": {
          "ref": "000e4005-ef9a-4683-9fc1-41af9929ceb8",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e3ce9817-e2e5-42de-8920-82e08873895d"
        },
        "item": {
          "id": "4821f234-c6d4-43ab-82d7-bd7ce2cda1d1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "525afaae-ccf5-49af-aee9-59b13f76a0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1230b821-79fa-449c-b180-ca025c72526c",
        "cursor": {
          "ref": "6f082c08-0f05-40b8-a796-a632f791372c",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4ecd4d58-1634-4064-9d14-cc4fbd7dd33e"
        },
        "item": {
          "id": "1230b821-79fa-449c-b180-ca025c72526c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "cfdb499f-54a7-470a-a75d-741f4292322b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1ff4f4-1f65-4ef5-9e44-d7230d5004c1",
        "cursor": {
          "ref": "497b3c6c-a029-4a6a-b44c-7eb9d6e75803",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6c447c27-2b28-4a20-ac88-3f61bee4c7f1"
        },
        "item": {
          "id": "da1ff4f4-1f65-4ef5-9e44-d7230d5004c1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a7f33864-9aaa-493b-898f-01b11aa51d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b45102-fd6a-48b0-a62f-109bf0c1fb4c",
        "cursor": {
          "ref": "40614525-18ff-4453-bfc4-9ca508bfea20",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "bbba4043-6485-46ee-907d-7a787ef03595"
        },
        "item": {
          "id": "51b45102-fd6a-48b0-a62f-109bf0c1fb4c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "22f4f963-3915-428b-9901-b6bf0fbc0947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd636467-672d-41d3-8511-9a56f747abe8",
        "cursor": {
          "ref": "767f9e23-e223-4fc0-94bc-cb0e076db6a5",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6c1dc430-a3c0-4b2f-9edc-14c014044bfb"
        },
        "item": {
          "id": "bd636467-672d-41d3-8511-9a56f747abe8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "149c6eae-96f8-4766-9573-15e08b5d1c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76260677-b0f3-4688-9b4a-9c9ac4622e93",
        "cursor": {
          "ref": "b56639e8-3fd2-4ca4-8be5-8d5cbf6b6080",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "95bef7db-5947-4a1a-98ff-51418087a628"
        },
        "item": {
          "id": "76260677-b0f3-4688-9b4a-9c9ac4622e93",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9e3ed4b8-d697-46a4-9112-3da196361df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64acb2af-f3c8-4206-a9a6-a43a32f6e71a",
        "cursor": {
          "ref": "cbabf591-9875-4329-856d-794e024712a5",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "42372db3-9941-4cc4-821a-5ed859673c68"
        },
        "item": {
          "id": "64acb2af-f3c8-4206-a9a6-a43a32f6e71a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3675587f-2340-48c1-a63c-ff7a66ebdb01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2963e880-b40f-4d89-93e9-4ce296df37df",
        "cursor": {
          "ref": "b2656f3b-bc2d-44ae-9a3c-210ef2de10c8",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c12f50bf-2dec-4eef-b1a5-99d2d945486a"
        },
        "item": {
          "id": "2963e880-b40f-4d89-93e9-4ce296df37df",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "43d8274c-7151-4548-a8f3-d7351a521a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c693333-a275-4b26-a1fa-eebdadb87446",
        "cursor": {
          "ref": "2a88aa54-0b5f-4c39-a2f6-4a6e26e53b73",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "3c574e00-e169-4cc0-b4dc-e7ffcff923a1"
        },
        "item": {
          "id": "5c693333-a275-4b26-a1fa-eebdadb87446",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5b0b3a08-8636-456e-b383-6389282e5d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9f6914-f345-4441-84a1-2e3351162784",
        "cursor": {
          "ref": "70aadc09-7680-4ccc-a7a5-e09550467667",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "109f225b-7964-404c-9c58-6b26ddf3ef88"
        },
        "item": {
          "id": "3d9f6914-f345-4441-84a1-2e3351162784",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a115ff33-fd4a-4a3a-9e45-8f79dcd61677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed99a04-0a18-4c00-94b0-6e5accd9141d",
        "cursor": {
          "ref": "5c2464dd-548c-4079-be26-c92254013e2e",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4f5b58b0-7a03-46db-90e2-b8ecb246d7f1"
        },
        "item": {
          "id": "6ed99a04-0a18-4c00-94b0-6e5accd9141d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "00d13593-23bf-4f47-b22f-775259433728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d63541-8650-436e-9adc-e0a686dadc3d",
        "cursor": {
          "ref": "bc789020-7f86-4876-861a-097f17690c65",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "77d290b9-9a57-4ff9-958d-fcae0ac1a603"
        },
        "item": {
          "id": "d8d63541-8650-436e-9adc-e0a686dadc3d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c2807ee5-bb9f-4f59-89ab-ec57e96c9355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4627208e-d4f2-4c55-b73f-317986bcf47a",
        "cursor": {
          "ref": "a0f3c3ac-527b-48cb-856c-0cf84e468441",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5024f06c-3990-4b38-b829-18c3485de773"
        },
        "item": {
          "id": "4627208e-d4f2-4c55-b73f-317986bcf47a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7bf8ca66-df41-49b8-9617-1b3134f217eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f546e1-7fd6-4566-a7e6-0964d2f44a3b",
        "cursor": {
          "ref": "4d0ca22d-7e91-4e2b-b5d9-e91978521371",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "87fef63b-e624-4188-ab9b-a9facf0325dc"
        },
        "item": {
          "id": "69f546e1-7fd6-4566-a7e6-0964d2f44a3b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "386fcf52-1648-4b5c-b6cb-5d8c86b6e6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b95b128-f322-4233-b6ec-efce279b39c7",
        "cursor": {
          "ref": "acb5f93a-37ac-4320-9b64-4fb4ef777649",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ee8c9191-7101-4f8f-ac7e-75c4521b960a"
        },
        "item": {
          "id": "3b95b128-f322-4233-b6ec-efce279b39c7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7b8ebc7c-f52b-4ca4-80e7-b92bcb25d92d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 166,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654edaab-e7ff-4c5a-98e1-31f690f613d6",
        "cursor": {
          "ref": "57be5599-9f90-4f8e-a1a9-4d487e0350c4",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1b810bf4-d38d-4b1e-aaae-64eb4ebe1479"
        },
        "item": {
          "id": "654edaab-e7ff-4c5a-98e1-31f690f613d6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3932295b-5fe2-4132-b7f6-43cec6abac98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "005e9a52-5b7c-4e45-bd64-d74338b03084",
        "cursor": {
          "ref": "1a7ed0d0-7116-408a-b732-da12d2faf3f1",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d1e343cc-8246-4392-9d24-2d5c96e113af"
        },
        "item": {
          "id": "005e9a52-5b7c-4e45-bd64-d74338b03084",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "68798ed3-ba44-4f46-8051-0773fce1bef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee176c43-63ed-475d-96eb-b0801332557a",
        "cursor": {
          "ref": "8b5bc989-a1a2-4dd0-9f65-a4c600a757f8",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "66fd8f31-b984-46f7-9602-a0bab4d42b29"
        },
        "item": {
          "id": "ee176c43-63ed-475d-96eb-b0801332557a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "bb783717-71fe-4d5a-8bdb-96af6f6bc3a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ebb9df2-f613-4597-89ba-a8c070fb5638",
        "cursor": {
          "ref": "85b33229-fa3a-4730-9450-f7287e0b9ac3",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "dfb55dd1-9edd-4b83-8dd8-226761c0a7a4"
        },
        "item": {
          "id": "7ebb9df2-f613-4597-89ba-a8c070fb5638",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "dcaadba9-966c-493b-8d64-7ff6837c7e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c760472e-e035-47dd-8c56-be91755b0fbf",
        "cursor": {
          "ref": "9d6fb03f-2632-42c5-a5c4-32452f9495c1",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a9b1c2ff-04ee-40cf-95ba-353ebe973181"
        },
        "item": {
          "id": "c760472e-e035-47dd-8c56-be91755b0fbf",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8aa51e97-d97b-4c9b-880f-c643c0805ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fafdb51-368d-4887-88c2-c21d2c7e8e56",
        "cursor": {
          "ref": "ee9cd64b-1a5e-4f22-9f5c-9c6e935ddbb7",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1db15fd0-6b40-4739-b95c-ccdc16f384b7"
        },
        "item": {
          "id": "4fafdb51-368d-4887-88c2-c21d2c7e8e56",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "fb36ab01-5079-4af0-83d4-1b4c76c2c77c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62db6ad-2dac-4177-9bb7-44966919d605",
        "cursor": {
          "ref": "30c3e823-8206-41a4-8502-a0e9d441584d",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e9d068c4-0a58-4c5f-be61-21f3920bb31e"
        },
        "item": {
          "id": "c62db6ad-2dac-4177-9bb7-44966919d605",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "402bd45b-d426-4874-b187-ffc0a68eb842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be6564dc-aacc-4494-bc36-050062bf509b",
        "cursor": {
          "ref": "0963a8d8-674e-4966-9638-3e33c9cfa860",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "64abb25c-5490-4697-a35c-8a03ac432c40"
        },
        "item": {
          "id": "be6564dc-aacc-4494-bc36-050062bf509b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3a69d472-5768-4c38-8c4a-de44c6b15fc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b1a06f-92b5-47c8-88ac-0c57c9786509",
        "cursor": {
          "ref": "1d548b31-87b9-4924-9446-f2ab99ea4d89",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4ba361a1-8553-4e66-8ff7-2fe89a41ba5c"
        },
        "item": {
          "id": "44b1a06f-92b5-47c8-88ac-0c57c9786509",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a062792f-ffb0-466b-bf48-e90d4445d30d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa988d2-05e2-4766-91eb-2d6bb219cfe3",
        "cursor": {
          "ref": "34081bb8-0173-45a0-9704-be77ca6c8780",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5bb73fa3-2681-4059-8982-dee9e1bd2828"
        },
        "item": {
          "id": "2aa988d2-05e2-4766-91eb-2d6bb219cfe3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "682aefe4-61ee-4d13-ac74-87c2a9778301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e078d35-2d73-45a7-91a4-82ca55022566",
        "cursor": {
          "ref": "cb65098b-d4cd-403f-a5ab-08fc10f97eb9",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f6eb44b2-cfa3-423f-a787-92bafa7d7a34"
        },
        "item": {
          "id": "1e078d35-2d73-45a7-91a4-82ca55022566",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f57edce0-5c22-4f90-bcc9-59940721d55f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd4a348-cfaf-42cf-99d8-71c88629a7e5",
        "cursor": {
          "ref": "98221cf0-9cd3-4606-b864-abb94c33ea42",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8a849195-43b8-4545-9963-c593e139416b"
        },
        "item": {
          "id": "1fd4a348-cfaf-42cf-99d8-71c88629a7e5",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "00fa699e-36e1-4e7b-a6d2-9e975cc9020c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6cdb48f-e736-42a2-abaa-11a210b1a578",
        "cursor": {
          "ref": "832472e5-200a-4275-ba1c-f7bff4db7bf8",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8506e108-5972-4c8a-950d-fd6fcc537b72"
        },
        "item": {
          "id": "a6cdb48f-e736-42a2-abaa-11a210b1a578",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "088a0b57-3734-4ca9-9229-9ebe7cfb68c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5631a5d-56bb-4661-823d-2b89570fe323",
        "cursor": {
          "ref": "8bb78a5f-bc15-4014-aaa1-2348ade4dcf3",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c1f7e8d8-6375-40b6-a1d8-780d3b5998b9"
        },
        "item": {
          "id": "b5631a5d-56bb-4661-823d-2b89570fe323",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "dc2c6f67-560a-41c8-a938-d941a80ed177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 362,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efbf5757-7146-4db2-99f2-3444b7d4dc20",
        "cursor": {
          "ref": "2ee4a35a-2903-4686-900f-423ddeb57d75",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "233045d7-66b9-4edc-9e10-131a3d8f8f2d"
        },
        "item": {
          "id": "efbf5757-7146-4db2-99f2-3444b7d4dc20",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "16b66b7e-7b23-4921-9c0e-94b917dce994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4936903-ccef-475d-9cae-299095e77052",
        "cursor": {
          "ref": "73f1747c-3575-4a16-a26f-d644fe1a362b",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "851d1e27-de05-4f60-8c56-4fc4956997e3"
        },
        "item": {
          "id": "b4936903-ccef-475d-9cae-299095e77052",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "47c3bd9e-8b12-4315-b542-310b4188926c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56adf68-a2eb-4974-b275-13a8224d5028",
        "cursor": {
          "ref": "75a9d31e-8185-46d1-b64a-37bb76968811",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a735c9dc-58eb-41dd-9a3a-fa467b9d97e6"
        },
        "item": {
          "id": "e56adf68-a2eb-4974-b275-13a8224d5028",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d1a9c6ad-3d0b-48f4-bbdd-de121ed267f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef76b32-174b-41d9-813f-38793d070536",
        "cursor": {
          "ref": "5a6b6098-1ebb-4e49-9b61-ef5e1c1824a9",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "cf53a071-c507-4918-a8ac-54908ec102fa"
        },
        "item": {
          "id": "8ef76b32-174b-41d9-813f-38793d070536",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f5df357e-95b9-4732-84da-1bea001e09fb",
          "status": "Created",
          "code": 201,
          "responseTime": 544,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "eaa87f81-1b49-4d0f-a454-bdb46e028fb1",
        "cursor": {
          "ref": "a21c51d4-89ec-45d5-85c4-e19a7af0504e",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0064f760-f85f-4cb1-b5ef-5c73fd80a498"
        },
        "item": {
          "id": "eaa87f81-1b49-4d0f-a454-bdb46e028fb1",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "924d8231-b2dd-4dce-ba8c-3a057e84af26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c7f80c-5909-4769-a1a8-bae77a0a35c7",
        "cursor": {
          "ref": "c3dc8593-9366-405f-a80b-b1decb90ac7f",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a1a13235-045a-460b-af7d-73108cf103a3"
        },
        "item": {
          "id": "40c7f80c-5909-4769-a1a8-bae77a0a35c7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f779cc40-1a50-4150-87dc-ea6f1bde3a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44a8eb1-5d90-43e4-8deb-32c486a17bb5",
        "cursor": {
          "ref": "23803adb-839a-4a68-9596-f92d7f6cd568",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "d0e14069-4633-4d40-acfd-91e0fdb45c11"
        },
        "item": {
          "id": "f44a8eb1-5d90-43e4-8deb-32c486a17bb5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "92863a97-2277-4ef4-80e9-50697b9538c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e23893-7932-4a2a-bc84-32bef07f82c6",
        "cursor": {
          "ref": "918f11a1-5807-4b6c-b2a0-60d93d0fffe5",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0d0d4501-d2b4-4d22-8d8b-ad8e98cca093"
        },
        "item": {
          "id": "b7e23893-7932-4a2a-bc84-32bef07f82c6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e96b62b4-545a-487c-820f-f2263e22ec4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f9bb08-1d35-4f94-b465-0ac19db0c472",
        "cursor": {
          "ref": "d106b991-217a-4c1f-995c-139874534e58",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f6b4d01b-418a-4581-8425-39d180d1a539"
        },
        "item": {
          "id": "94f9bb08-1d35-4f94-b465-0ac19db0c472",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "cb77c436-e613-4dc8-9844-16e53bf662ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9dc4499-75b6-4769-a836-2831fd5dd54b",
        "cursor": {
          "ref": "b1a3abe0-7fa3-4c27-8a02-e51b20e5503a",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a8b88d63-2825-49c4-a49a-3c0bc8733902"
        },
        "item": {
          "id": "b9dc4499-75b6-4769-a836-2831fd5dd54b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d6c4640a-f7e8-42cf-aaaa-c389523e585b",
          "status": "Created",
          "code": 201,
          "responseTime": 513,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "4b018d5c-087d-48e2-afac-32602cd2b83c",
        "cursor": {
          "ref": "1aea9723-1061-413a-accb-9c950a7c2852",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c41e0ac1-c93e-46c8-8def-ad41274bcb4b"
        },
        "item": {
          "id": "4b018d5c-087d-48e2-afac-32602cd2b83c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ec879408-a40c-44f3-a222-047241e98103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228ad29a-4176-433d-8a50-9f9a6798636c",
        "cursor": {
          "ref": "9446814d-fc99-4c65-95f3-0e8a5cd3b1a6",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "78472aaa-06f3-443b-aa27-147cb8c5574d"
        },
        "item": {
          "id": "228ad29a-4176-433d-8a50-9f9a6798636c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "20689eca-2319-434b-a9a9-2393157f0437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da49027-e31f-4c1f-a8c9-68068bd5f1ef",
        "cursor": {
          "ref": "7cf90873-2ed8-40c7-a11d-0e5a95a8f826",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a863b2e7-2cd7-4a83-a308-47e308e606ab"
        },
        "item": {
          "id": "7da49027-e31f-4c1f-a8c9-68068bd5f1ef",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8f36c0fd-2aa3-47a7-bebd-e51992749276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bcd959d-a34c-4092-bb8c-5a962d812e69",
        "cursor": {
          "ref": "7e85ca10-7e42-41e1-884b-4e5e33e88b77",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a5d5f1e3-ed3e-4944-98cd-44ad864b2ca6"
        },
        "item": {
          "id": "4bcd959d-a34c-4092-bb8c-5a962d812e69",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e68f3a1e-4335-4252-a32c-4b02e540469c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d6eced0-190e-468e-a6a2-2155030db358",
        "cursor": {
          "ref": "4b79e34c-2c77-481a-9415-e44315897873",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "303764c6-3153-473a-9632-d69ec2039ee1"
        },
        "item": {
          "id": "1d6eced0-190e-468e-a6a2-2155030db358",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b692cb36-946d-4417-a073-a8111a62de15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91770eaf-f45f-41e4-a9ea-dd580a0376ec",
        "cursor": {
          "ref": "1542c8f6-bd4f-4c90-b83b-a0b5f06e89c0",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "267b7c08-9804-4724-8ff9-2b3a67c26253"
        },
        "item": {
          "id": "91770eaf-f45f-41e4-a9ea-dd580a0376ec",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "cf3b24f8-ca1a-4d6c-96f7-174395af0978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b132d3-fedb-4451-9d35-d78ecc276ed0",
        "cursor": {
          "ref": "cc741b55-c8b6-416f-99bd-5ff78364c23c",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ffcaa982-92f8-4049-8ef4-ce7c60d822cc"
        },
        "item": {
          "id": "58b132d3-fedb-4451-9d35-d78ecc276ed0",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "63f52d10-31e2-466d-8be9-019bcf81ed1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09efbf31-27e3-40bb-b0f2-54eac8f79416",
        "cursor": {
          "ref": "92a9e074-6810-4f49-b60d-ae42c9410f15",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7e7837f9-70b8-4e94-ac0f-4a631a8bb846"
        },
        "item": {
          "id": "09efbf31-27e3-40bb-b0f2-54eac8f79416",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "69b6a7fe-e7ae-46ca-b4f8-f6f938e38a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b3a8160-13a1-4ed0-90f9-36bcfc93c7a6",
        "cursor": {
          "ref": "77becfe6-04dd-4317-b869-1c751d071c3a",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "26b7f815-dabb-4379-87bc-43f586337202"
        },
        "item": {
          "id": "7b3a8160-13a1-4ed0-90f9-36bcfc93c7a6",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e9930318-4f72-4cdd-82c1-49d76c542d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "8272f64b-f59a-4b1f-9e36-a61ea24ff5de",
        "cursor": {
          "ref": "73408b27-a9b6-4bbb-8aed-64b55232b960",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "abe707b5-f838-478c-bf1e-016436aeb2b4"
        },
        "item": {
          "id": "8272f64b-f59a-4b1f-9e36-a61ea24ff5de",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "0841bdf8-d7c8-4952-96e6-dff1aa1743f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "11a0aa85-b306-4278-95ad-afed7f94cb1e",
        "cursor": {
          "ref": "f79678ad-ca95-4d4f-a0f0-6f9bca6fe24b",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "43353375-5815-45e4-9e98-b83399253665"
        },
        "item": {
          "id": "11a0aa85-b306-4278-95ad-afed7f94cb1e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9524d6ed-7e48-4024-92af-445601626e53",
          "status": "Created",
          "code": 201,
          "responseTime": 610,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c69190-65db-4602-b778-28757118d4e9",
        "cursor": {
          "ref": "9242070d-e7c8-4518-afe7-b8a6f209077b",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3724274c-af3d-490e-a89c-0db54ff42243"
        },
        "item": {
          "id": "19c69190-65db-4602-b778-28757118d4e9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8fe14e91-1a0e-4614-972a-65846a83ccc4",
          "status": "Created",
          "code": 201,
          "responseTime": 498,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "083e38f6-34fe-4b9a-908e-ea5d2d18cc1b",
        "cursor": {
          "ref": "282bb5f5-bf78-488f-8979-ab6a1d2374bc",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "fc680170-0f5d-41bd-89c0-a8f7931272fe"
        },
        "item": {
          "id": "083e38f6-34fe-4b9a-908e-ea5d2d18cc1b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c15a34ff-ca26-4249-8b32-7ed54e551b6b",
          "status": "Created",
          "code": 201,
          "responseTime": 550,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d0d5d17-c0a2-4678-996f-733309f86fca",
        "cursor": {
          "ref": "5f4e1b89-39bb-4b19-9f64-9dfa57135551",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "784e2e53-60df-4155-8078-e8d99eacc9f4"
        },
        "item": {
          "id": "0d0d5d17-c0a2-4678-996f-733309f86fca",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "db770150-a491-466b-8ae0-ead84855875d",
          "status": "Created",
          "code": 201,
          "responseTime": 506,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "db98a92f-d516-4085-ba89-26cef7349e62",
        "cursor": {
          "ref": "968d326d-72b7-44cc-b5a1-06f8bab278dc",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "851e5349-abb6-4f46-91b7-41f58579e93e"
        },
        "item": {
          "id": "db98a92f-d516-4085-ba89-26cef7349e62",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6d5899d7-65bf-4a20-be93-cebbe3436962",
          "status": "Created",
          "code": 201,
          "responseTime": 516,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "8286f9ae-d2ac-4901-8c3f-8a3669573282",
        "cursor": {
          "ref": "bae538e3-a9b2-4f35-ad2b-48f3e1088e90",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8305f520-6bb7-4fdd-a822-1f1d3c9d698d"
        },
        "item": {
          "id": "8286f9ae-d2ac-4901-8c3f-8a3669573282",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bbb86819-31eb-4910-b104-5b9c39b26b04",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "8286f9ae-d2ac-4901-8c3f-8a3669573282",
        "cursor": {
          "ref": "bae538e3-a9b2-4f35-ad2b-48f3e1088e90",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8305f520-6bb7-4fdd-a822-1f1d3c9d698d"
        },
        "item": {
          "id": "8286f9ae-d2ac-4901-8c3f-8a3669573282",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bbb86819-31eb-4910-b104-5b9c39b26b04",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "b59db1c1-a463-4361-bb6a-be972de968c3",
        "cursor": {
          "ref": "4d5ff383-9626-4d18-90de-550206230543",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "768affaf-1cbd-4616-8d91-0e931138620b"
        },
        "item": {
          "id": "b59db1c1-a463-4361-bb6a-be972de968c3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f5fc5a93-13d0-40ad-bfe7-37fd4d2d3ab2",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "b0e372df-ed09-4df3-8ba3-b0b70d7dac60",
        "cursor": {
          "ref": "9cf4dcd4-67ff-4dbe-ad43-5632ec942bdf",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b2764ad8-5b52-4abe-a4ea-9fbe8d1905c0"
        },
        "item": {
          "id": "b0e372df-ed09-4df3-8ba3-b0b70d7dac60",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ae2cae04-892b-4f87-a677-aeff1d15a4bf",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "a62cdb70-2505-487d-a12a-b430ce812bbf",
        "cursor": {
          "ref": "031fe452-bc10-4765-ab5d-c7451b174403",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c6fd7c0f-797a-4659-8304-e6c42786c6f6"
        },
        "item": {
          "id": "a62cdb70-2505-487d-a12a-b430ce812bbf",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "013b9f8b-6eb3-4760-b3ed-2ae9886fd654",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "982e6256-d3c0-48f9-8e3d-4f7dab215392",
        "cursor": {
          "ref": "3a54cb07-b7f9-44be-877d-b01a4fc4db89",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a8947e98-fe97-4e2d-b2de-3096bebc723d"
        },
        "item": {
          "id": "982e6256-d3c0-48f9-8e3d-4f7dab215392",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d2ba90cb-ac1e-484c-838d-a66f4763f976",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "001a7652-d769-48b2-b4db-41adde87e148",
        "cursor": {
          "ref": "9d7df09a-05fb-45c1-9566-153ecabcd84c",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "afb586c7-87ed-4f46-8c4a-0583a8474f26"
        },
        "item": {
          "id": "001a7652-d769-48b2-b4db-41adde87e148",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "85af853b-75d5-437e-81b6-03ce5e21bccf",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "043c475d-386e-448d-824b-fa9f54b26a49",
        "cursor": {
          "ref": "b98b0bad-d4f7-40d9-829d-b70c79120b72",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6d2759f0-fa04-40c0-b2de-b88d3045f81f"
        },
        "item": {
          "id": "043c475d-386e-448d-824b-fa9f54b26a49",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "470306ce-234d-4241-9a77-adfd41c1b510",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "ce778af6-50ec-4b82-8997-debddaf4e4bc",
        "cursor": {
          "ref": "1b4453ab-8791-41e7-ade1-5353652bf235",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4bcfefcd-3142-4d52-8464-069bd7ccfb30"
        },
        "item": {
          "id": "ce778af6-50ec-4b82-8997-debddaf4e4bc",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cd239263-bbc7-4a19-a6a9-8902cd4603d9",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "1e9fff22-a80b-43cb-ab68-fd4d991dbbdb",
        "cursor": {
          "ref": "ae27c4c4-3701-467b-a78d-5dfb4cfb030d",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0b765304-f7bd-41c2-bee2-b9e144bc9edd"
        },
        "item": {
          "id": "1e9fff22-a80b-43cb-ab68-fd4d991dbbdb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6e893457-d840-444b-ab60-b9050b139d4c",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "c051334a-7154-44e2-b19b-1c76913ac302",
        "cursor": {
          "ref": "c531c3aa-8937-42bd-833b-f7efcb234aa9",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c2d61b07-c100-44c8-bcf0-b67ee6dddc2c"
        },
        "item": {
          "id": "c051334a-7154-44e2-b19b-1c76913ac302",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c013a2a5-94c3-4418-835c-d37eb3eab3bb",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "71b40d28-00a8-4359-b5cb-7678fe749567",
        "cursor": {
          "ref": "cb95e154-a18b-4e7c-be6d-a8a34e85789d",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "05f06730-51fe-4a22-9024-9eaab8e4584b"
        },
        "item": {
          "id": "71b40d28-00a8-4359-b5cb-7678fe749567",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "294fb083-1fbd-4c01-82a6-c07a8d5c7075",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "f60146e2-3f98-48c4-8715-d3e6b1f77725",
        "cursor": {
          "ref": "6b2ee6ef-2754-47f6-bbdb-0eb8a723f18a",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6654b781-e229-492b-b257-199e03e02251"
        },
        "item": {
          "id": "f60146e2-3f98-48c4-8715-d3e6b1f77725",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "00547901-c858-4678-b337-fb42bef055e9",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "128ed61f-3548-4344-9a9c-d999c9332185",
        "cursor": {
          "ref": "ae2e7d9a-e5b9-4c9b-aaad-334c9764f773",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "839d9b17-f0f7-4827-b664-64937f6469b9"
        },
        "item": {
          "id": "128ed61f-3548-4344-9a9c-d999c9332185",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5a0e1dff-9609-4196-8c0b-e3150682f011",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "5641ce5a-641d-4b12-a044-a10cf4c3abae",
        "cursor": {
          "ref": "a44f1ba6-dded-466a-ba08-889ccc59b59b",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8b12b7dd-b079-412c-afa8-6bc2427f57c3"
        },
        "item": {
          "id": "5641ce5a-641d-4b12-a044-a10cf4c3abae",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6e17eff7-f1f1-466d-991c-71740231f163",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "eb42256e-ce50-4c43-abea-bd8bf8a18fa1",
        "cursor": {
          "ref": "54f69a16-0ca9-4cec-afa4-67dcd89f4cc2",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5169ffde-3744-4cc6-81ce-1a0c14e4fa43"
        },
        "item": {
          "id": "eb42256e-ce50-4c43-abea-bd8bf8a18fa1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "89658a14-87c1-4216-bc0c-ab03d7e4b1af",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "637b47cc-b1a1-4f01-81f7-2010698c9cbb",
        "cursor": {
          "ref": "b8745d2c-bdf6-487c-8007-f5b8ef84aa57",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2d4ab648-7fa8-4e55-ac4a-341402f0995f"
        },
        "item": {
          "id": "637b47cc-b1a1-4f01-81f7-2010698c9cbb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ad452127-9062-44df-94da-948651c816ed",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "836865e3-33d7-4a12-adfd-bc92fe4f7c7e",
        "cursor": {
          "ref": "5183aa5f-c096-4956-8eb2-07cc227aa04a",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ac45fa17-8fd2-46fd-b37c-405a09196dba"
        },
        "item": {
          "id": "836865e3-33d7-4a12-adfd-bc92fe4f7c7e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f82696e9-6eeb-4d29-935c-441eb715a42d",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "4a7003be-6ac1-40d7-9c0b-204c72637535",
        "cursor": {
          "ref": "be8346ae-6b91-4be0-9eb4-e28ab67404d0",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "aec587d9-e070-417f-9b66-2fce3f8f156f"
        },
        "item": {
          "id": "4a7003be-6ac1-40d7-9c0b-204c72637535",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0ab0c903-79a0-4bbb-ac91-20bb2fc42f87",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "73eb411a-74db-4cdc-8dcf-e02c7bd48703",
        "cursor": {
          "ref": "acc03b68-80dc-4761-8d19-00a3ca7aa376",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "cae931bf-c70f-4462-8516-07b14f96c881"
        },
        "item": {
          "id": "73eb411a-74db-4cdc-8dcf-e02c7bd48703",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "60565b08-dbd6-406e-8f38-7a2cfac26a21",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "fe5f8c08-5b11-4eaa-8173-5e2415da2ff3",
        "cursor": {
          "ref": "4fcfb457-7d10-4a33-834d-4c837bd379bf",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "e5b577fb-8792-47ca-afc4-6e51c43d6ba0"
        },
        "item": {
          "id": "fe5f8c08-5b11-4eaa-8173-5e2415da2ff3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "39db60fc-7b57-4d0c-ae32-6a8178c7d8b2",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "54f54441-0af7-4e99-bdbf-703a83591742",
        "cursor": {
          "ref": "0e439fd3-15b9-49cf-9792-7df31a2b58d6",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "29162478-9ff2-48c6-bc8c-35bf35ed276f"
        },
        "item": {
          "id": "54f54441-0af7-4e99-bdbf-703a83591742",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9d6f1a99-98b4-420e-a273-3e757e45cc8d",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "063c37bb-7c3d-4ac1-b9f9-b58f1a15b13d",
        "cursor": {
          "ref": "23359643-6360-4ddc-8ab0-0ca1a50c1435",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "bf4386f1-d67c-485b-b7b1-1f6b28b9bd5e"
        },
        "item": {
          "id": "063c37bb-7c3d-4ac1-b9f9-b58f1a15b13d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "26c07a4e-0008-4f36-a376-55e4ddbde130",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "e4431b50-54a4-4777-a9ed-b0101be011c4",
        "cursor": {
          "ref": "e55326e5-cd82-488b-9b7d-63a338453595",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c93227fa-6675-4930-a292-f29686da5aa4"
        },
        "item": {
          "id": "e4431b50-54a4-4777-a9ed-b0101be011c4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5eda6e35-08f9-4c1e-bd87-6f2b25f49336",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "afa64d6b-2d18-44ea-a4e9-a343559731cb",
        "cursor": {
          "ref": "494d6d65-9447-4d0a-b648-9fb59386e5e3",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4e666f17-930c-4d15-ad01-bc61a50cc555"
        },
        "item": {
          "id": "afa64d6b-2d18-44ea-a4e9-a343559731cb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "deba354e-1b6b-49dc-a823-039c98d77c04",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "bd4057ef-c676-4993-80e0-39fe340ec9ca",
        "cursor": {
          "ref": "a33ea39b-465c-49f6-beb1-aeb11bbdf2d1",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4e759c2b-0241-4cce-a7a1-5dce5a7b149d"
        },
        "item": {
          "id": "bd4057ef-c676-4993-80e0-39fe340ec9ca",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7995355f-5375-478e-a222-ac81958986cd",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "a917dbf5-244f-4782-8f34-9b1f9198ff44",
        "cursor": {
          "ref": "5eb1ca57-5a97-47e6-b010-3303d1a95336",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c3564e5d-3072-4f7c-900d-68aa3ba6f78e"
        },
        "item": {
          "id": "a917dbf5-244f-4782-8f34-9b1f9198ff44",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d0708e4e-4d63-4342-8c0d-94a71fc3c1af",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "e4b10cc5-9050-4ff4-83c0-ea50fb7954b3",
        "cursor": {
          "ref": "16ab3b3d-9416-45f4-b3f1-cb1416660f12",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b1533dae-0135-4788-a68a-4ac177eb8f54"
        },
        "item": {
          "id": "e4b10cc5-9050-4ff4-83c0-ea50fb7954b3",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "dd8725c2-818e-4496-a404-78edc23849c7",
          "status": "OK",
          "code": 200,
          "responseTime": 3,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "42d92f6f-0617-41c6-99c4-ef7bf6d7fda3",
        "cursor": {
          "ref": "4ea8ceea-8a0a-4f09-af8b-54dfcf77b8be",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "af95c6d3-c32a-4dc8-83f3-f11131e42e8b"
        },
        "item": {
          "id": "42d92f6f-0617-41c6-99c4-ef7bf6d7fda3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2be4f16b-4a1f-4b9c-8b18-b1a553b0bcae",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "c863b065-de7b-4eee-ac8a-0566ac78cb97",
        "cursor": {
          "ref": "66aad461-2016-47e0-ae6f-8a2d70552e30",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8def693d-82e6-42e4-a2a8-f71cac937311"
        },
        "item": {
          "id": "c863b065-de7b-4eee-ac8a-0566ac78cb97",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7e7d9316-827b-4ca5-b4df-cb9f489c5876",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "542d78f6-a8fd-4f35-8dd3-e0c64ffdddd5",
        "cursor": {
          "ref": "502147d9-3088-4b51-92a4-3a6500ec310a",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6231c4d9-f0c7-4a4a-94b0-cfedd74400d4"
        },
        "item": {
          "id": "542d78f6-a8fd-4f35-8dd3-e0c64ffdddd5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0105323b-bc03-483e-a9d1-2bfaca2dce9f",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "a1990249-3df5-4f25-89bf-a830e4524194",
        "cursor": {
          "ref": "51920095-9b3f-4c6f-aa5b-49a013efc846",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "61fc2966-ccb8-48cc-8ae1-5bf5fb37a35c"
        },
        "item": {
          "id": "a1990249-3df5-4f25-89bf-a830e4524194",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8b462388-574f-40f8-8086-821cbaa48ad4",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "51b9f104-2a0b-42f9-82c8-cb46aff4f235",
        "cursor": {
          "ref": "05ae49e3-a607-49ba-8e34-1cbed242d779",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "aa75f0df-694d-4214-a6ce-b8e960fed229"
        },
        "item": {
          "id": "51b9f104-2a0b-42f9-82c8-cb46aff4f235",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "52c11bf1-1281-4aee-a865-7a416f6d6c91",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "d182f57f-2740-4361-8243-156e4f148b1e",
        "cursor": {
          "ref": "8a9cc73f-185e-4f0c-86af-834eb851e92c",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b228c012-6518-4460-bbd3-93f7238d510b"
        },
        "item": {
          "id": "d182f57f-2740-4361-8243-156e4f148b1e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7b899632-bc84-4b15-89fa-ce6184f03ca0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "890e8b1f-71b0-4baa-bcbc-4713ab2c960e",
        "cursor": {
          "ref": "10cec744-ceb6-47f5-9abe-a5b62b1ee9df",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a79f3b7c-8938-47a1-bfb8-69004e552be8"
        },
        "item": {
          "id": "890e8b1f-71b0-4baa-bcbc-4713ab2c960e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "f466dfa8-fd04-49ec-894e-58ec0673ee33",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89152bf9-549a-412d-8c83-62d8cb0ddf06",
        "cursor": {
          "ref": "5ca65677-3289-4199-9978-129a85639520",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1d19d9b8-207d-4a17-a33b-74c570ae0ca7"
        },
        "item": {
          "id": "89152bf9-549a-412d-8c83-62d8cb0ddf06",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "972c5d96-ebed-45a0-a01d-fd9415353eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89152bf9-549a-412d-8c83-62d8cb0ddf06",
        "cursor": {
          "ref": "5ca65677-3289-4199-9978-129a85639520",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1d19d9b8-207d-4a17-a33b-74c570ae0ca7"
        },
        "item": {
          "id": "89152bf9-549a-412d-8c83-62d8cb0ddf06",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "972c5d96-ebed-45a0-a01d-fd9415353eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09efddd-bc70-43e5-9d6c-29b8cbb2c8ce",
        "cursor": {
          "ref": "61f1eff9-1b7c-427e-89dc-61a9caaa7a1f",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d2d0a587-eae9-4b2d-86a1-8213beb1f803"
        },
        "item": {
          "id": "d09efddd-bc70-43e5-9d6c-29b8cbb2c8ce",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1333648c-4739-4009-801d-a9fe00a658b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5654d2-e9c7-4d04-b1ef-278abd87647a",
        "cursor": {
          "ref": "14c7fbe4-5ef6-440b-851f-44cfb68549f4",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d07a71f0-8ff6-4e77-8242-62fbfab52720"
        },
        "item": {
          "id": "6e5654d2-e9c7-4d04-b1ef-278abd87647a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4d5110cc-e551-4c4d-9f1c-d098e458b690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c56a1e5-d7f8-4eda-8298-cce16173ded6",
        "cursor": {
          "ref": "30296545-3ef0-4b5b-9673-14fe1930653f",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2b1a8a72-d2a9-4bde-b57d-1b1d291323a5"
        },
        "item": {
          "id": "8c56a1e5-d7f8-4eda-8298-cce16173ded6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "46d37bd5-de96-4412-ac72-568969b336e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b33844a-1ffb-4763-a181-c19eb2c0bdd9",
        "cursor": {
          "ref": "f4a450f6-e9a8-48b4-9395-11df4e967846",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "eab3acea-9dad-4f41-8438-e9f1fda5cb2e"
        },
        "item": {
          "id": "9b33844a-1ffb-4763-a181-c19eb2c0bdd9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "41471e5b-d81e-4122-9c46-db48aa3b7165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31508f80-6283-424e-bea8-3ed59e18c25d",
        "cursor": {
          "ref": "7e97888d-b590-4238-a1e2-a2ad62006b80",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "c2cde8df-abe8-4c42-8956-8f7fa106acf0"
        },
        "item": {
          "id": "31508f80-6283-424e-bea8-3ed59e18c25d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f85bdb27-e360-472d-ab1e-39b1d2c7d6ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be948492-0f90-41e4-b9c0-7cb85e4aa8f0",
        "cursor": {
          "ref": "8f1e59ff-30d4-4dce-a755-e9bc27659793",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ef78fc24-6f69-4fb5-9f91-071c5b679606"
        },
        "item": {
          "id": "be948492-0f90-41e4-b9c0-7cb85e4aa8f0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8d6db9df-ca85-4662-9066-bbb041dc53e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f7af2e-1d29-4124-88b7-7fae47f19dac",
        "cursor": {
          "ref": "558b0665-4ba6-4e2d-97de-8330f9f46f68",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "69772825-6321-4b62-a0d4-5d16175945bc"
        },
        "item": {
          "id": "59f7af2e-1d29-4124-88b7-7fae47f19dac",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "cbb828f1-6db0-4515-97f5-431d37debc5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4259925-dc76-4a38-a977-7be5d58d142a",
        "cursor": {
          "ref": "3b2cf63b-4b36-4dd2-9082-652a9de77562",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4c560de5-ad57-4c8c-b120-de4c49844a51"
        },
        "item": {
          "id": "c4259925-dc76-4a38-a977-7be5d58d142a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "36005b3b-78cd-47ee-b727-0196d94cdc0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b9abad5-f4a4-4977-91f5-660916e38467",
        "cursor": {
          "ref": "b6d10642-6201-4d0a-83a3-3a5fd40e5fd9",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "487949fe-0060-4c41-89a2-b58d45889729"
        },
        "item": {
          "id": "1b9abad5-f4a4-4977-91f5-660916e38467",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "bdec6a8e-50cd-4148-96d7-673eb51bd415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddfc0d41-43b9-4fd4-a248-32e33441bbce",
        "cursor": {
          "ref": "db080d70-8fbb-4a70-8387-7861fc30acd7",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "51960ffc-5eab-4608-9899-e8ec223130bc"
        },
        "item": {
          "id": "ddfc0d41-43b9-4fd4-a248-32e33441bbce",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c41de335-b4dd-4baf-8d45-56fa10e140fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d7a874e-52ba-4042-be84-374a27580a08",
        "cursor": {
          "ref": "e7361b12-3086-497f-bdbd-631e6bec25d6",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a62af924-bd5b-4400-a5be-44f301f05cb8"
        },
        "item": {
          "id": "0d7a874e-52ba-4042-be84-374a27580a08",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "29a2c19e-345a-4095-a9f0-f17d60d21471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263558d1-4ee5-4f0f-a785-67146cf07f69",
        "cursor": {
          "ref": "ad8a64f7-a186-46f6-bd1d-203187f257e2",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5b419753-2ac9-40e8-9a9d-f85195c68fa0"
        },
        "item": {
          "id": "263558d1-4ee5-4f0f-a785-67146cf07f69",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "68303cf9-4415-430c-b587-7b9bc97fefbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0846f2c-824d-4116-95b0-6429af9c5001",
        "cursor": {
          "ref": "0c0d7965-8dbc-4350-a06d-41be784d88da",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "059c1ff2-092a-46fb-be19-37a993ca3175"
        },
        "item": {
          "id": "a0846f2c-824d-4116-95b0-6429af9c5001",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5f35d3af-8519-472d-ad2c-49a247a9890e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6daee8-2717-40b0-bb4f-fa8da839c952",
        "cursor": {
          "ref": "2d57738f-861f-4edf-bd88-9bcb362792c1",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5c77bdf4-fe1c-4c99-b5ee-99fa48e84dbb"
        },
        "item": {
          "id": "6e6daee8-2717-40b0-bb4f-fa8da839c952",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f2aa88b9-f762-4074-a2d8-6c8de7b9fdbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65db0c95-2136-4f24-9529-20269482da71",
        "cursor": {
          "ref": "c2ca5dd3-a019-4717-893c-3ac66a52c520",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "92d7d375-f4e2-49b5-8611-2425a4a63008"
        },
        "item": {
          "id": "65db0c95-2136-4f24-9529-20269482da71",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "fd0de650-e7dd-42a6-b25e-d624635148e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6bf6b63-802e-496a-861f-4ab6676f6761",
        "cursor": {
          "ref": "1dca65a0-6eb3-4b2f-b2fa-60a09968f505",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bad46370-7abb-4edd-b89a-a5eba4c85982"
        },
        "item": {
          "id": "f6bf6b63-802e-496a-861f-4ab6676f6761",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cc8ca008-e04d-4043-8824-80d275e16835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7342bc2d-11ab-4445-8903-4d2264eca7d3",
        "cursor": {
          "ref": "0f33376c-b7ee-4c4b-9b92-c61b1a2d189b",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5dec6cba-12d9-4839-9122-c6a6302b0301"
        },
        "item": {
          "id": "7342bc2d-11ab-4445-8903-4d2264eca7d3",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "a18271e0-6c82-4458-a700-f87a237669e7",
          "status": "OK",
          "code": 200,
          "responseTime": 599,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "f8bd1510-cfc6-455e-a129-1d5773775d0e",
        "cursor": {
          "ref": "1892e047-3e02-441a-b727-b5c34e66b41a",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "024a5bb4-2d3a-4bfc-b873-3244551effcc"
        },
        "item": {
          "id": "f8bd1510-cfc6-455e-a129-1d5773775d0e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "32fc888e-1647-41da-b6e8-3de945b586d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b58e623-752b-435e-900d-d28d1212bf0c",
        "cursor": {
          "ref": "11c63305-9cc2-4116-bba5-711bd856d123",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "30603132-c3f1-4bea-af45-98ee0b233066"
        },
        "item": {
          "id": "0b58e623-752b-435e-900d-d28d1212bf0c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "98e90388-0fac-491e-8ede-f318a7929222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e317c27a-d533-48ae-87cf-6065ce33a0f1",
        "cursor": {
          "ref": "fcb80f06-0c17-4ec5-b664-5664cb6690a3",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e9aadba0-e196-4a40-a218-e37287750db4"
        },
        "item": {
          "id": "e317c27a-d533-48ae-87cf-6065ce33a0f1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5dcb4e2d-dfb1-4f1f-9c55-c0f8e491676c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 237,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103972b0-f795-4850-8907-4d8bc6506aeb",
        "cursor": {
          "ref": "40fe35b7-3512-460e-91ae-df91870499fd",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1859e550-44b1-427c-8a18-4ecce3f3129e"
        },
        "item": {
          "id": "103972b0-f795-4850-8907-4d8bc6506aeb",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ddd364f0-8dde-4bbf-8138-218039fd34f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 222,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f376095-728e-452d-9a51-11c91c2d7600",
        "cursor": {
          "ref": "646f6b0b-fe28-46f7-8526-3845e1dddc49",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "3eec87a3-1a11-49ff-a8d3-9d24cc85fb40"
        },
        "item": {
          "id": "9f376095-728e-452d-9a51-11c91c2d7600",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b8254c9f-2357-47ad-90d9-ddb432a01681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0d9785-8087-4041-b475-cad17a8aeac4",
        "cursor": {
          "ref": "1ee7f233-95a2-4aac-801a-26e44ad3869e",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "46376cc0-f165-4a9b-817f-aa5b3372aab6"
        },
        "item": {
          "id": "cc0d9785-8087-4041-b475-cad17a8aeac4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5caed070-3bc1-421c-a53f-6d4488ed52a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 235,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77176c8f-1122-4c46-8917-5a6e3b28f6a6",
        "cursor": {
          "ref": "73fb04a2-1dd6-4e16-bb6a-736070182b84",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1aa16b34-23bc-4607-8c0f-0aa7e91a57ed"
        },
        "item": {
          "id": "77176c8f-1122-4c46-8917-5a6e3b28f6a6",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6976fcef-94e8-4dcb-9a07-c8b273be0296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5c19fe-a7ec-4c6f-8ecc-ff809a3454ee",
        "cursor": {
          "ref": "df01f66e-9c9c-416c-9931-f28f1656473e",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c7f2a55b-0af7-46b4-b66b-a2f16d550b9e"
        },
        "item": {
          "id": "2c5c19fe-a7ec-4c6f-8ecc-ff809a3454ee",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "20a90019-1c06-4bca-b90e-b8d745c23d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "451c4796-02f8-44bb-9230-e2368b55e96e",
        "cursor": {
          "ref": "0f5b7a59-63f7-41af-9154-962c702a7e71",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "fbbc4c47-a5c0-4862-ab06-0682e60a04d1"
        },
        "item": {
          "id": "451c4796-02f8-44bb-9230-e2368b55e96e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "044b8d2f-d264-4de2-b748-62d36382e473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5e932f-663a-4e4d-a254-7005bd4d6184",
        "cursor": {
          "ref": "615cbf61-4dc7-4408-aced-a104c1e02d74",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "489c881a-5670-41fc-8d28-c3518e7be63d"
        },
        "item": {
          "id": "7f5e932f-663a-4e4d-a254-7005bd4d6184",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7849a0c8-3835-4a35-b945-6a7c68cf5b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7aa35b-81ad-49df-858c-9ee3ebd29b28",
        "cursor": {
          "ref": "dbe948a9-28f0-4269-9527-f787c639021d",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bb90760b-f9fe-43e7-9df3-9166fc2a81a6"
        },
        "item": {
          "id": "ed7aa35b-81ad-49df-858c-9ee3ebd29b28",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "61b3ecd6-be9a-46d2-8937-29e980e13dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93bd956f-d424-4fca-aed4-674a5400d888",
        "cursor": {
          "ref": "fce40bc1-c281-4fae-993a-c6eb1a1f02c8",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3e67b0f3-5c4c-4fe4-b9cc-445b961c2649"
        },
        "item": {
          "id": "93bd956f-d424-4fca-aed4-674a5400d888",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "79f57656-7914-4119-ad34-fd61a5b9bb68",
          "status": "OK",
          "code": 200,
          "responseTime": 236,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "2c6fdd48-9edf-4c09-8f21-dbe56b8bc214",
        "cursor": {
          "ref": "920e44f9-a3a9-4923-84ed-a488f9e1ae87",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4aa29384-3cf1-49d8-882b-01f9df0ad216"
        },
        "item": {
          "id": "2c6fdd48-9edf-4c09-8f21-dbe56b8bc214",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2230edc5-bf8c-458f-9263-5d854959c2eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eff9c11-f6cb-465d-a192-f7eea2d08a46",
        "cursor": {
          "ref": "a977a56a-bc07-4033-99d7-99ea0b2b293a",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "1206236b-7e9b-4689-acfb-f2f7d0c21a7b"
        },
        "item": {
          "id": "4eff9c11-f6cb-465d-a192-f7eea2d08a46",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9f22d137-cda3-42b6-ad49-9c7d90574db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e3b593-69d1-44de-8578-1535db85f898",
        "cursor": {
          "ref": "2709f357-55f0-4eb1-98c4-2af41c9aff50",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "db1d3727-b3b3-450b-9254-5d1bbf13290f"
        },
        "item": {
          "id": "22e3b593-69d1-44de-8578-1535db85f898",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ee20d11d-1107-465a-ac6e-270e5560de1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6caeb470-c969-4452-9c11-b2a29227fcff",
        "cursor": {
          "ref": "0f7754d1-4612-44de-9497-ae1d599f44ac",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "15db4d7f-7c38-4d60-87e2-2d24cdfbdc70"
        },
        "item": {
          "id": "6caeb470-c969-4452-9c11-b2a29227fcff",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c054af21-1f25-4f98-b4c3-4e2e822d3213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 228,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1332706-7fb9-4e6a-ab9a-c4e4bce48941",
        "cursor": {
          "ref": "a1249e88-218f-45df-9fe2-1b75b95b6f6c",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "997125a4-55da-49d3-a836-f77837c87510"
        },
        "item": {
          "id": "a1332706-7fb9-4e6a-ab9a-c4e4bce48941",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7566c011-0a0e-448e-8251-c5f8904a62f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4ac446-4b51-4a4b-ac08-6dedcdac0b5d",
        "cursor": {
          "ref": "a8cdd7e1-c43f-4a0c-a86f-6506696783a5",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b620451e-326a-4a2f-b02a-c7d747be4128"
        },
        "item": {
          "id": "2e4ac446-4b51-4a4b-ac08-6dedcdac0b5d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d1912619-6666-41a8-9fbc-9f3d10f10b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 282,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b9b69e-cc31-4814-bfbe-b388b7d8bd3e",
        "cursor": {
          "ref": "58508aae-11e0-4cc1-bdae-2e360800fb86",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0d311ce7-c2c5-47d1-aff1-adaefc312efb"
        },
        "item": {
          "id": "14b9b69e-cc31-4814-bfbe-b388b7d8bd3e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "22d33e81-866e-48b1-b93f-3c183737b695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 279,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9adfc733-4721-409f-97cf-4b79ed0c32e1",
        "cursor": {
          "ref": "0f29d185-f35a-432f-8945-8f2b29d6f6d9",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ce35a0ce-dca7-47dd-9c2c-98557afaf2b5"
        },
        "item": {
          "id": "9adfc733-4721-409f-97cf-4b79ed0c32e1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "16b22298-4916-448c-a47e-77d52549def2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 281,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7fb442-82f3-4e8f-bd09-3b9a6160905a",
        "cursor": {
          "ref": "f9f989bb-049b-4b99-b2d9-2c64715185ce",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8a427d46-ccd9-4368-8c7e-1ae3e658ac05"
        },
        "item": {
          "id": "bb7fb442-82f3-4e8f-bd09-3b9a6160905a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6cb85211-1d8a-43db-9e94-6d0635ad6181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 272,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0922d6bc-8047-4f1d-be60-b5b26b2a3583",
        "cursor": {
          "ref": "e1a56eff-4ba6-4a5d-bcf1-b71b70469653",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3fd97070-1e20-4b57-9161-f5c39aa9240e"
        },
        "item": {
          "id": "0922d6bc-8047-4f1d-be60-b5b26b2a3583",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f6cc179e-520f-4add-924b-1d63a0c9a2e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 359,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f76bc6ab-2e49-47e4-9e57-7e0def2488c4",
        "cursor": {
          "ref": "93494edc-6a4d-44d2-8d46-3300ac67b57b",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "cfa35f12-df98-45c6-92a7-c152053ccb31"
        },
        "item": {
          "id": "f76bc6ab-2e49-47e4-9e57-7e0def2488c4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0c59f27b-48bc-4715-90a6-7bca3f4f7a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998fd47d-2026-4589-b1cf-2f54c086ca52",
        "cursor": {
          "ref": "59f73b5c-3585-4c09-a31d-e44aed098331",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f12930c4-ea5f-4c6a-b37e-edc8ea8b0700"
        },
        "item": {
          "id": "998fd47d-2026-4589-b1cf-2f54c086ca52",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "46c93f5b-45fc-43be-b7ea-27e990fc076e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 284,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec668ff1-0ba3-4f4c-b2e9-80ea97f0bfd3",
        "cursor": {
          "ref": "40cc2f85-f6c6-4076-85b5-f763327ed2aa",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d2cbfc72-365f-49c5-ab24-650cd406d0ae"
        },
        "item": {
          "id": "ec668ff1-0ba3-4f4c-b2e9-80ea97f0bfd3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3d02b4a0-df10-4394-b5f9-045a56183627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 287,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a009b1-e790-4c80-b059-785ddc5b27b1",
        "cursor": {
          "ref": "9bfe2e5e-b28e-41cc-8362-7510491da100",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "603f8119-bd49-4ce5-81e3-dc6dbe6a1b2e"
        },
        "item": {
          "id": "16a009b1-e790-4c80-b059-785ddc5b27b1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "894e9ccb-3767-4334-9c74-6ab2498c11ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca85eea-fb44-4326-b83d-1d5225a4c7d5",
        "cursor": {
          "ref": "2a85d692-4fcd-4376-a83e-31315c201b71",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2a00a173-5379-4df2-b6a2-a5adfbf445be"
        },
        "item": {
          "id": "eca85eea-fb44-4326-b83d-1d5225a4c7d5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5ddfdcfc-e9d7-458a-9ac0-93b80248cb16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1164cad-5aa0-4217-9885-5e393926119c",
        "cursor": {
          "ref": "9bf2f58d-29d0-43a7-876c-d042e35644ea",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4555e991-ceb2-4be3-9216-c97489216e63"
        },
        "item": {
          "id": "c1164cad-5aa0-4217-9885-5e393926119c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "bc8d522d-db2e-4448-9302-31a9aed3b895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdcb7dc7-60e5-4ed0-b7e8-11e1b0fe1b9d",
        "cursor": {
          "ref": "156eb95b-fcc3-45e6-a17a-f4f73e7068cf",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "49e0abcb-6e80-4b48-ad76-63fe86f9fd45"
        },
        "item": {
          "id": "bdcb7dc7-60e5-4ed0-b7e8-11e1b0fe1b9d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "975a767d-189f-4ee9-8715-45b7c9eecb9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 328,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b777062d-aa09-4995-aac8-32c1b5dc8e73",
        "cursor": {
          "ref": "151b5afe-2789-4737-93a0-b512a01a1dcd",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f5698e3d-7769-487a-a31b-f7ea73492b79"
        },
        "item": {
          "id": "b777062d-aa09-4995-aac8-32c1b5dc8e73",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2ccd8a1d-a985-4d3e-b49b-2ed966e1073f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7294e0-2399-407e-9246-2f0692ca57aa",
        "cursor": {
          "ref": "34d6ef0c-0236-4ee8-8abd-edd5604ccb76",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "aa65ba14-fba7-4d25-b6ec-5b8a6712812f"
        },
        "item": {
          "id": "ad7294e0-2399-407e-9246-2f0692ca57aa",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1907f974-7663-4bc4-9def-edf25f219a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 262,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14013bf2-4f2c-4299-8994-a786a6435cfb",
        "cursor": {
          "ref": "47f6cd2d-7f18-4c3c-b97d-e78019dba71a",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e61b1dd3-5869-4cd3-9dde-5b9fd5a5c901"
        },
        "item": {
          "id": "14013bf2-4f2c-4299-8994-a786a6435cfb",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2b5bbf24-e495-4e97-a134-673529502d06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2234d6ab-edc0-4b4e-9625-6d8f7db9c9e4",
        "cursor": {
          "ref": "7254e843-f6e9-4df3-a60c-0a2ab25310cb",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4b182dfc-3165-4107-b1e0-86cd2fa5130f"
        },
        "item": {
          "id": "2234d6ab-edc0-4b4e-9625-6d8f7db9c9e4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "94ffc404-02e0-4057-823e-28a0f63887fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 270,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f280b51e-591f-4ab2-b7c3-c51f7965be44",
        "cursor": {
          "ref": "b8da0e57-7afa-46fb-b6d6-e3dbcd071941",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0ee0bb0f-bb05-41d0-9d84-3abbfaf9940e"
        },
        "item": {
          "id": "f280b51e-591f-4ab2-b7c3-c51f7965be44",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "adb5d96a-bbc0-4b5c-a7f9-117cf347bc4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db813b15-ead8-42b3-a0b1-bdeb3327165f",
        "cursor": {
          "ref": "fb7d4048-034b-481a-82f2-e02aded34bbc",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b9ff1101-728e-4473-a434-dcb59ac70fc0"
        },
        "item": {
          "id": "db813b15-ead8-42b3-a0b1-bdeb3327165f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "0de3a032-2a9b-4ce9-9fcf-4f0419342fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 271,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99bc862e-60c7-4784-8f44-0f918d90cd4b",
        "cursor": {
          "ref": "bb52049d-7bf0-49af-b442-e712e435afb5",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c45f8979-3c02-436f-a1e1-43476bf42a27"
        },
        "item": {
          "id": "99bc862e-60c7-4784-8f44-0f918d90cd4b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c50f123e-930f-45b8-865e-045d94d3cc14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 268,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dcc1112-33b3-49e4-b62b-4a48e4c2d445",
        "cursor": {
          "ref": "3a6d84e7-0508-4cdb-99dc-b3c3f2988e68",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9b356fd4-0f9b-417f-bc07-f57c89b54f9c"
        },
        "item": {
          "id": "9dcc1112-33b3-49e4-b62b-4a48e4c2d445",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "196df03f-478d-41ee-998f-2044be84a3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6691ab45-f6c3-4f75-894e-3a0082d0e1e3",
        "cursor": {
          "ref": "898da7fb-844d-4c3f-b508-055e80131468",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3eae3046-a44b-49f7-b54d-4257e75a6390"
        },
        "item": {
          "id": "6691ab45-f6c3-4f75-894e-3a0082d0e1e3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "75fe8b7c-ba17-4758-a92c-af2e3bda7e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6333d92-9a35-4645-9d21-1e31fcdb769a",
        "cursor": {
          "ref": "34b9118b-6f18-437c-b0a4-98c57877d816",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8d23031b-efe1-42c7-9586-259e66d852d3"
        },
        "item": {
          "id": "f6333d92-9a35-4645-9d21-1e31fcdb769a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "79cb96a1-2b68-47ec-8b67-4603647dda65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96aef319-6396-4fad-b1a3-55792702e7b5",
        "cursor": {
          "ref": "d6b13cf6-9d33-49c6-aaa7-c6eaa5472424",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d795400d-cd05-454d-b866-650b578dcee1"
        },
        "item": {
          "id": "96aef319-6396-4fad-b1a3-55792702e7b5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "912f165b-612c-47c4-a25c-eab0a5403d26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7113cc0-b044-4dd9-9262-8ae05d6aeecd",
        "cursor": {
          "ref": "e5260783-704b-4c81-80f5-3a863224038b",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "fe88cd72-3830-423e-960e-d651eb9ffcf4"
        },
        "item": {
          "id": "b7113cc0-b044-4dd9-9262-8ae05d6aeecd",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0c4661d4-8646-4515-9f34-6418523453ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a568c620-5969-4a66-b718-2658bedb1094",
        "cursor": {
          "ref": "f95d314c-454f-4510-833e-fdfbb3150afa",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "70375c06-be6e-4755-8950-c1cd3c18e295"
        },
        "item": {
          "id": "a568c620-5969-4a66-b718-2658bedb1094",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0baee193-550e-47df-8b8d-8d0aa8b5b0c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d420ff0e-0c8b-4819-a989-49f1c1e7f00c",
        "cursor": {
          "ref": "29d548d0-88c3-4649-8d0e-610370514997",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "46f3d945-6a2e-43ec-b340-6abedee7aadc"
        },
        "item": {
          "id": "d420ff0e-0c8b-4819-a989-49f1c1e7f00c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "87779517-3a05-4cb1-bd10-fdd635e3c3ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad38601-6a45-4bf5-ba7d-cf607cc03e72",
        "cursor": {
          "ref": "883bc483-647c-4979-9058-3a1c5df9da0a",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ba27e613-cd47-4ae6-ba7c-62500c47a5e1"
        },
        "item": {
          "id": "4ad38601-6a45-4bf5-ba7d-cf607cc03e72",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "589cd1dc-0fec-4110-b2d2-5c22c0af0d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db38082d-a052-4a77-b539-df54480cb750",
        "cursor": {
          "ref": "bff9a7df-94d3-4fc0-8985-3ca4bd2ec9e1",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9f251db3-5e98-4b10-a702-e3d710d86ee5"
        },
        "item": {
          "id": "db38082d-a052-4a77-b539-df54480cb750",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f63bf10b-0aba-4734-8e2b-8bd4068d6933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf5792b-292a-4924-8e53-519e33d78994",
        "cursor": {
          "ref": "ca86a3ee-ef54-4e5b-9bda-aa3a2d615103",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a09d3aca-31c4-4897-88c5-11aae714baf8"
        },
        "item": {
          "id": "2bf5792b-292a-4924-8e53-519e33d78994",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d50bf8f2-6e6d-4446-9a9f-218d97274d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719e851f-32ff-4d05-afd1-261249103714",
        "cursor": {
          "ref": "54715510-bebf-4489-a1d7-66774c14470d",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b2b7f749-4b3e-433c-a20f-485e65ef1390"
        },
        "item": {
          "id": "719e851f-32ff-4d05-afd1-261249103714",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7eedeb00-7fb4-4d07-88d1-be8acfea0de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36fd149-ec66-404c-9433-c50c53f69be2",
        "cursor": {
          "ref": "eddf9344-927f-4f98-8f14-1502a7f890b1",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8234c905-3d31-44d1-9494-8cccf7b8bd2c"
        },
        "item": {
          "id": "a36fd149-ec66-404c-9433-c50c53f69be2",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "07fe6997-f1e1-4044-a54d-c66d554790da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a421c7f7-0229-4380-ae32-4d7d714484e1",
        "cursor": {
          "ref": "68104725-b74a-458f-9d78-55c04474369f",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3ef3532a-b069-4c80-a7fe-3ebb1131a95d"
        },
        "item": {
          "id": "a421c7f7-0229-4380-ae32-4d7d714484e1",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "54d03a0e-7589-4b7f-82a6-58b41e6f91c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae804622-fb13-4224-aa09-50cf94908d32",
        "cursor": {
          "ref": "db66a2a7-9b40-4646-95da-9eb0a886f95d",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0c7a4739-f519-4aac-944b-f59e0a4d797e"
        },
        "item": {
          "id": "ae804622-fb13-4224-aa09-50cf94908d32",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d1751cb5-dce5-4d4b-b53b-95dacee91c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aecbb16-ad0e-4f89-bc71-79ea6edb5cd9",
        "cursor": {
          "ref": "bf5964b1-0ef2-4840-a5a3-392212930ab9",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ec277689-90d9-47ed-b9f5-c60b5f7546c9"
        },
        "item": {
          "id": "5aecbb16-ad0e-4f89-bc71-79ea6edb5cd9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "f673563b-a25c-4229-850e-8b5c3c7dfefb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d62323b-a7fd-41fc-af5c-4dda73b6088b",
        "cursor": {
          "ref": "efc37e7c-5cf8-4454-b197-9da1a645b6a8",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b69c9911-6ced-4b93-b6ec-8afb379f5d8e"
        },
        "item": {
          "id": "1d62323b-a7fd-41fc-af5c-4dda73b6088b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5bb98ad9-a776-4fc1-9282-ac974c901657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a68b1e9-4149-4490-be54-14c4be05307d",
        "cursor": {
          "ref": "c3828ed1-0cb9-4b2f-81d5-cbc39b746e80",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "95e03d4b-9a33-4861-ab6b-d4b74375d9cf"
        },
        "item": {
          "id": "2a68b1e9-4149-4490-be54-14c4be05307d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b08dde81-f2dd-41b6-9c20-5be61328f509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e014414b-b6dd-4cb2-ae0d-90854f661d97",
        "cursor": {
          "ref": "13b423e5-9f25-4cc1-954a-f449df92f9b8",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1d35f547-a0a3-4565-b9ca-1077cfd17ee2"
        },
        "item": {
          "id": "e014414b-b6dd-4cb2-ae0d-90854f661d97",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "311b20a1-9837-445e-ab46-117593634992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d63c81d-9650-4888-aba7-da544d395f44",
        "cursor": {
          "ref": "bd33eb1d-d690-4106-857e-199be9e55a0c",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ec2df183-a525-4db9-aead-672ba2561895"
        },
        "item": {
          "id": "0d63c81d-9650-4888-aba7-da544d395f44",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "bf8205eb-52ea-4d1e-a605-884eac2c4a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d735247f-646b-4582-9b26-184afb24e46a",
        "cursor": {
          "ref": "54d5c2a9-2fbf-4c5b-9dd8-af6466ae08fd",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "93195f43-95dc-4cc9-b589-04bac8e46023"
        },
        "item": {
          "id": "d735247f-646b-4582-9b26-184afb24e46a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a3bb8289-c60f-44f3-889c-6e2572df7076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ef45de-f0ab-4d07-b965-a10871b4d982",
        "cursor": {
          "ref": "37571210-375c-4290-a690-2cc831fd1ffd",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3ec52890-44f6-41c0-b858-0f5947791c4c"
        },
        "item": {
          "id": "83ef45de-f0ab-4d07-b965-a10871b4d982",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "924fbbb8-c13e-44bf-a9b1-f493c9f93ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94bb6fb-68c6-4477-b8dd-eceb99947b53",
        "cursor": {
          "ref": "1a6f5199-82c2-4967-a48f-72a4baec9213",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c2e10caa-c34a-465d-9c06-1e893a4712d5"
        },
        "item": {
          "id": "b94bb6fb-68c6-4477-b8dd-eceb99947b53",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b30fef4e-2c0e-46ba-9906-f7e355542ea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561ab9e2-3345-421f-800e-e0206dd7a18c",
        "cursor": {
          "ref": "bbe3cfa3-fc54-4fcb-af1b-558dabe53148",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "79f68795-9fe8-4c83-a884-1e7a0be0c2df"
        },
        "item": {
          "id": "561ab9e2-3345-421f-800e-e0206dd7a18c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "57949b42-605a-4f06-84ad-c430a8fc91f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36bef638-3427-4fb4-ba4e-61cffac5914a",
        "cursor": {
          "ref": "01b3f7db-c7d9-4e6b-9b28-061f47622621",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e1aa04a2-b803-42ad-bac2-45cfaa44d3a4"
        },
        "item": {
          "id": "36bef638-3427-4fb4-ba4e-61cffac5914a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d4b7ef7a-aac3-4be0-a280-5cbc7695ce5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4548ce9c-ac6c-49b4-917b-0cfeef997f57",
        "cursor": {
          "ref": "5d62d7bc-ee26-4ad6-9b5b-46b50f9b1e01",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c06ea069-f0c7-4457-a8b7-16f6489fdd97"
        },
        "item": {
          "id": "4548ce9c-ac6c-49b4-917b-0cfeef997f57",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8b4621e3-ab97-4cdc-a3ad-b2ae2fce7b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c453c561-3dc3-4c4c-82e7-47cff84d5717",
        "cursor": {
          "ref": "5abb2e3b-c29e-4179-b2eb-6def70e2178d",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "979294f2-594a-4894-8682-5507fe6f4ad4"
        },
        "item": {
          "id": "c453c561-3dc3-4c4c-82e7-47cff84d5717",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e023ead2-dd11-49da-9548-538971b2c968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fefb2bed-b536-4e26-adf7-5ca6fd698625",
        "cursor": {
          "ref": "a4546c91-f8e5-44e2-a686-806e6b18e203",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "08af3019-f72b-479a-b063-4319b93a4786"
        },
        "item": {
          "id": "fefb2bed-b536-4e26-adf7-5ca6fd698625",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "bc875f12-3f1e-41a1-b06a-857f12a4cb5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c9720f-f701-480f-8a7c-2109389c9c14",
        "cursor": {
          "ref": "5756dc70-23c7-4b0d-ac59-34f4b371ed3f",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5f8a35bb-eab7-4ca8-9f80-ffd1622366cd"
        },
        "item": {
          "id": "79c9720f-f701-480f-8a7c-2109389c9c14",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "813db697-2404-4ed4-8c52-4dc898919535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae598a6-c7b7-4157-97ec-f4828c5c3489",
        "cursor": {
          "ref": "1c99be7a-b5f7-4a3c-bf84-6aefdaad64cf",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "20e8c6b4-c21f-4474-aad7-e7c27361c225"
        },
        "item": {
          "id": "fae598a6-c7b7-4157-97ec-f4828c5c3489",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "cae2e7eb-35eb-4277-8985-b7e873e1a8e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cde1677-7542-41a0-bdf5-ed38e4f0afdb",
        "cursor": {
          "ref": "15d57f60-96fc-4ddb-b3b5-1210e2c87c6b",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b9eb3577-3fe8-4214-a6c1-1eebb86a11fd"
        },
        "item": {
          "id": "4cde1677-7542-41a0-bdf5-ed38e4f0afdb",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "22832a7a-efd3-4106-b1d7-22489c1d4382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf01c17c-cd5e-4a5d-8d3c-25abf3626f2d",
        "cursor": {
          "ref": "ffd61e82-73ee-42f2-9712-5ece4a8a4919",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "50cc0f76-7fea-4ad0-8be5-47049493aa3a"
        },
        "item": {
          "id": "bf01c17c-cd5e-4a5d-8d3c-25abf3626f2d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "caed7f5c-f07a-4015-8914-4826ed76cd61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f90b27-b246-44a8-8c8e-dbaa7cfb37b0",
        "cursor": {
          "ref": "9bb487e0-ff1d-4588-8062-36d0e5dcaef8",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6f28f6df-43e5-433a-ac3e-56b807c7ee2e"
        },
        "item": {
          "id": "33f90b27-b246-44a8-8c8e-dbaa7cfb37b0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "69720248-4fd3-4348-bf4d-de8000fa9d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e9e736-11ac-40a0-8387-86f5bc8fe2b4",
        "cursor": {
          "ref": "bce6fc73-66e8-462a-8332-d9fa802a6a97",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "450a01a4-01b2-419f-b560-f372873a85e5"
        },
        "item": {
          "id": "f4e9e736-11ac-40a0-8387-86f5bc8fe2b4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ffc9ce6c-9a38-41b0-aefa-434fe13ababd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6ddb73-4c1a-4a2b-88e5-08803dc86dab",
        "cursor": {
          "ref": "a0d80dd7-5fce-4ad5-a0cd-e747c20e1a13",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "79361c20-eb3b-4a49-a7f6-4f61b80b55ba"
        },
        "item": {
          "id": "cc6ddb73-4c1a-4a2b-88e5-08803dc86dab",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b437da74-40cb-4106-98ab-9740be6da259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6ea215-69a9-4a67-995b-dffe3428e2e2",
        "cursor": {
          "ref": "789a899b-db57-4781-83a5-5325919d2396",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "be300aaf-970f-43e7-a0cc-6e04a0c39e44"
        },
        "item": {
          "id": "da6ea215-69a9-4a67-995b-dffe3428e2e2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d5fa3c42-8444-4205-af6d-36d2a44d21b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e13876-dc13-4801-9309-4bc8dfcc8118",
        "cursor": {
          "ref": "de87eae5-aa38-4bed-8899-7460f9d5ca56",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3d30f666-c1bc-4ae4-84ac-89b2dc5ffb85"
        },
        "item": {
          "id": "d2e13876-dc13-4801-9309-4bc8dfcc8118",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b34db649-7f90-4758-8db3-c57f69e6fa07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acf5844-fab8-4baf-a9c6-ea75aa384ae0",
        "cursor": {
          "ref": "5ea01bae-51ae-4db0-8c4c-4f0cf7ed7534",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "05800852-e55f-431b-9fbd-2eaa6bc4327e"
        },
        "item": {
          "id": "8acf5844-fab8-4baf-a9c6-ea75aa384ae0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c4c51021-fb06-4c18-9c7b-68c2ef7a86ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5564c8f-8000-4fc0-9a82-a266ed4f0dae",
        "cursor": {
          "ref": "4f868ab7-e26b-4d1c-a18e-f4fa265cabc7",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "dfdd34de-c1e6-4e58-bbae-57364e991253"
        },
        "item": {
          "id": "c5564c8f-8000-4fc0-9a82-a266ed4f0dae",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ed78e4cf-ee5b-48c4-9819-79dd0dffe0f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3febb7-b894-4d30-82e5-b9ff3fc0450e",
        "cursor": {
          "ref": "e8ed6147-fb10-468f-b98d-8e23f254dbc5",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0974b0b5-7c59-42f5-ada6-1d73bf7c1043"
        },
        "item": {
          "id": "db3febb7-b894-4d30-82e5-b9ff3fc0450e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b7b44c33-e10a-4a78-8d67-3649cf39ce76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4af9998c-ad49-4bb9-8f63-ed8db5a0cdd9",
        "cursor": {
          "ref": "55aebd80-4a55-4d2c-9053-057805efc71f",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "13a301f4-ec8c-4636-b188-861f9fd3af6f"
        },
        "item": {
          "id": "4af9998c-ad49-4bb9-8f63-ed8db5a0cdd9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "03720013-75bb-4a36-9066-09526a7e4e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2361342d-14ab-484a-b535-0133694046e8",
        "cursor": {
          "ref": "0db7e97f-dc30-4c35-b892-8ae47bea8ec1",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4cf10bbb-3851-4a8e-b6b8-4450879bcc58"
        },
        "item": {
          "id": "2361342d-14ab-484a-b535-0133694046e8",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b6aba5f0-dbce-4cad-87a6-300524b51db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99baf346-21e1-4fd8-abb0-f663db96410c",
        "cursor": {
          "ref": "2b19061e-0480-4f9c-9e9c-9647838ce9d9",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "15a3db94-0475-4415-8c63-c366b8d0130f"
        },
        "item": {
          "id": "99baf346-21e1-4fd8-abb0-f663db96410c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "188bbc28-b7dd-4f13-994f-0b60938fbee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e83c3f35-439a-4b56-abd1-9663836c6442",
        "cursor": {
          "ref": "d217bdd0-325e-4602-a8f1-47768fe4789d",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cf69c84b-eb86-4534-98b4-3e497b16f7c2"
        },
        "item": {
          "id": "e83c3f35-439a-4b56-abd1-9663836c6442",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "76100841-ec07-483f-b324-b7a3b3fc2f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1550e5db-afe6-4df4-85e8-b3d6add781e7",
        "cursor": {
          "ref": "cc8f4960-a560-4047-8bc5-4f6b986e9974",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b8973c83-7d59-4a61-8624-bd1c95fcb4a9"
        },
        "item": {
          "id": "1550e5db-afe6-4df4-85e8-b3d6add781e7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ffcb6336-353e-42a6-b85f-12058d0f504e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39d21fc-231c-4742-a5c7-82982bee0f09",
        "cursor": {
          "ref": "8a21e1e8-0400-437a-94f1-a6ddfb2e8e77",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "61bff01b-61bf-407c-9313-af52cf4be634"
        },
        "item": {
          "id": "c39d21fc-231c-4742-a5c7-82982bee0f09",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a63e939a-c90c-4394-a810-de235dd7ea29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a089ecae-1702-43cb-ba9f-9220e79c162d",
        "cursor": {
          "ref": "f299c5af-a476-4fb8-b730-e3612092fe57",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f1eabe5e-7c4e-4a89-95e1-6dd324711bdd"
        },
        "item": {
          "id": "a089ecae-1702-43cb-ba9f-9220e79c162d",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "8b43a8f4-0b20-40e6-8e1b-3e5bd4884631",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 3,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4b58e2-8eeb-4e09-9cb0-72b1b0ea27e7",
        "cursor": {
          "ref": "a2a97be3-df94-48bd-bf2a-136fedcee452",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e5a7645d-02d2-40e3-8305-1f60d7f7f8d5"
        },
        "item": {
          "id": "ec4b58e2-8eeb-4e09-9cb0-72b1b0ea27e7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "580b2d03-7e81-41e4-9c5d-e86c726d9b3c",
          "status": "OK",
          "code": 200,
          "responseTime": 231,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "c55963ad-4603-40f3-b341-ce00581ebc44",
        "cursor": {
          "ref": "8b614243-19dc-4dac-99b0-ce8a70cf0ef8",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b41744f4-04bb-4aa6-927e-77ad1fe9d662"
        },
        "item": {
          "id": "c55963ad-4603-40f3-b341-ce00581ebc44",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6af06193-6c19-4d3a-b8db-53431fd077a4",
          "status": "OK",
          "code": 200,
          "responseTime": 586,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6782a634-8b2c-466f-8738-4e8866ffff4e",
        "cursor": {
          "ref": "16c73de8-71f1-4f8a-aa89-db3cba39a0c4",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2a3eaa49-6d73-4a9b-95f2-fc1783b783ed"
        },
        "item": {
          "id": "6782a634-8b2c-466f-8738-4e8866ffff4e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0dd39e89-5fbb-48b5-9dc7-999bc663aa24",
          "status": "OK",
          "code": 200,
          "responseTime": 483,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0040aca2-eca8-4682-a543-7329d9e3852d",
        "cursor": {
          "ref": "05f98134-6f34-49fc-9191-8c0c5494a4a0",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b8c6295f-751d-4c3d-b19a-da95f353633c"
        },
        "item": {
          "id": "0040aca2-eca8-4682-a543-7329d9e3852d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a8823e65-8470-45d6-8f4c-1f41e20d3666",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0040aca2-eca8-4682-a543-7329d9e3852d",
        "cursor": {
          "ref": "05f98134-6f34-49fc-9191-8c0c5494a4a0",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b8c6295f-751d-4c3d-b19a-da95f353633c"
        },
        "item": {
          "id": "0040aca2-eca8-4682-a543-7329d9e3852d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a8823e65-8470-45d6-8f4c-1f41e20d3666",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0040aca2-eca8-4682-a543-7329d9e3852d",
        "cursor": {
          "ref": "05f98134-6f34-49fc-9191-8c0c5494a4a0",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b8c6295f-751d-4c3d-b19a-da95f353633c"
        },
        "item": {
          "id": "0040aca2-eca8-4682-a543-7329d9e3852d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a8823e65-8470-45d6-8f4c-1f41e20d3666",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 3,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14008ff-cfd7-4151-b321-d81e79eebc78",
        "cursor": {
          "ref": "4110ba55-8f41-48fe-aa99-3829d39fadf3",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a075c748-7bdf-425f-91cb-1ddef69359ac"
        },
        "item": {
          "id": "a14008ff-cfd7-4151-b321-d81e79eebc78",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "008bf668-27ac-4b83-aba3-153bbf874ee2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 7,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e3c989-1f1c-4206-95f4-87337dd4b32e",
        "cursor": {
          "ref": "35d6ba10-f67c-40df-9a54-fa602ca9f919",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d33c4fae-b3a7-4492-b46f-89c5946116d9"
        },
        "item": {
          "id": "93e3c989-1f1c-4206-95f4-87337dd4b32e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0fd33414-9474-4f27-acdc-afee0e1faa2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "93e3c989-1f1c-4206-95f4-87337dd4b32e",
        "cursor": {
          "ref": "35d6ba10-f67c-40df-9a54-fa602ca9f919",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d33c4fae-b3a7-4492-b46f-89c5946116d9"
        },
        "item": {
          "id": "93e3c989-1f1c-4206-95f4-87337dd4b32e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0fd33414-9474-4f27-acdc-afee0e1faa2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1348407a-475c-4996-bdac-cfe732457720",
        "cursor": {
          "ref": "a470f90d-99e4-4044-9343-a0c4f767fe2a",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "eba9fbee-e508-46f2-ba5b-712c38f5a0a1"
        },
        "item": {
          "id": "1348407a-475c-4996-bdac-cfe732457720",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "72b7f972-7937-41a6-9c33-a259311f51bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "fb1b1e48-7834-4281-965e-43f8e9a1c674",
        "cursor": {
          "ref": "418e45ae-55c0-4957-883d-6b31903555f6",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "99722297-1631-4602-96b2-eb5f8344bf53"
        },
        "item": {
          "id": "fb1b1e48-7834-4281-965e-43f8e9a1c674",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c94f3ae5-5d4d-44fc-84d8-0d049e70d257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "fb1b1e48-7834-4281-965e-43f8e9a1c674",
        "cursor": {
          "ref": "418e45ae-55c0-4957-883d-6b31903555f6",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "99722297-1631-4602-96b2-eb5f8344bf53"
        },
        "item": {
          "id": "fb1b1e48-7834-4281-965e-43f8e9a1c674",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c94f3ae5-5d4d-44fc-84d8-0d049e70d257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "ff269c38-7718-457f-8a7c-c457e07fed9e",
        "cursor": {
          "ref": "1bf188ac-fd96-4cad-8eb1-6cbccfd7535f",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "be8cc7c3-d346-44d2-913d-a92baf45c047"
        },
        "item": {
          "id": "ff269c38-7718-457f-8a7c-c457e07fed9e",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "9e387195-12fd-49ed-8e8d-1146ff4dab51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}