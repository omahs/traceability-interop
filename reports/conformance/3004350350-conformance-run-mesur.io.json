{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f9ba593a-afb6-484e-bf47-8a13d60f075e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7e692f9b-37f6-4267-957a-a7d94821f3fa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e02f07cd-22b9-4cf9-b68f-e8d1b6b36757",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0dda5669-43d1-4619-b618-1c5cef24bb44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "283a2c8a-0e3f-4b45-8dee-0d2acd66cdee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "2a735fc1-6b46-43da-86a0-98c027b6b88b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4c6fdf67-1b50-4455-b5d4-382c0108cf73",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1154900b-1000-4571-83c7-5d82341430ce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6f6126ef-27ab-48e7-b0eb-7df419843b44",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a5b1c7-c8b1-46ac-99fd-cfc31303f409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fba939f5-00e9-4c76-ac8f-91881c0cbc5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a27a412-9d7c-4445-8e13-c0555ebbfe2d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cde4cbf-4a32-4ad8-8902-a5c39e8b361c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba459576-8b30-4d2d-8bca-3c425dc64ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b6c52c-9c0a-49d9-b25f-d9c8169dd233",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc3a2b0-2cb4-4e71-be38-fa86480c0293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26686eae-8db6-42b6-9d5b-0301d02dd145"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5de5ee9e-cffb-4f26-86e2-d897f2f09ad7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3fe7bfda-b38b-4bb6-bac9-f52277869b95",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a178db-11c9-4abf-bfa6-f66dff34451b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d47fdfc-c620-475e-862f-83b59bd130dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8085c27-dec9-43bd-96b6-8b6d573ee7d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b87a7c-4a58-49b2-8907-34ecc44b61c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e143f839-b63e-4d87-b07b-e636d6264aba",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a58a985-11b7-4542-ad2c-fa1b8bdcb49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ae8de9a-934e-44ce-b199-4661e3632398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc85e16-704e-4303-9d4d-ee0da0839907",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "f5fb9f1f-e8de-4eff-8f12-cc75fa55f464"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "214061f0-e351-4bcc-a713-310dd94252d6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "61c098d5-158d-4369-a639-bbccee5d9aae",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1cec5477-c62d-4d44-ac42-472bd4320451",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5b82b89d-2f8d-4d02-92f4-3b5b91b4e580"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c16e878-de53-45a2-8e6a-6b7ff358560e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e55af767-dc7b-4c65-9fb9-578a5246d882"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "37087dc9-b726-4267-978b-52d892ebb371",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a35cb23c-1e4c-4f6a-a318-becd874759b6"
            }
          }
        ]
      },
      {
        "id": "a12012a9-f044-4402-81c7-284f4b9d1142",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a567b186-27c6-4cb3-8113-125b0a3694bd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6a30930e-ff57-4120-93e6-ed4b9cf72320",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d0f31943-0c73-4d21-8a79-82b53aea5cfa",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46bfa75e-db47-43e6-a61c-b40d1cc61dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71c6bd37-8e2c-4000-8926-620b4f225033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a1eab7-192f-42e1-9ac4-ddf550c6585e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49ce4f9c-2f59-435f-9718-1b51fd10937d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f781da-5299-4ff3-a6fb-cb9cdbe51c4c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0974c066-6e27-4b96-a6c2-0df79d041832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea1187aa-2a6c-49a9-b5f9-26779fb8cc75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba4cff4-e0ef-485a-925f-9aabf1a5fd22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d53fce80-2b03-4ada-b0fd-3255c393714a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fc251d-5099-4914-85f4-614122ea1e6c",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c26e04-fda3-45ee-8105-52949df3c88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3759a811-01a2-44fd-bc67-b59adfe8a294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607f003a-d6b5-4499-a01f-bfd70d3d0992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c02229d-e988-4c30-addc-bd572f182221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "556871a7-e7d1-441b-8008-f6dd43a755f1",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b69145-815d-47d8-bd0c-6424296a8414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a0a0da4-2f8e-422e-9fed-0be3f6a32cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8137d1c1-5966-497b-a2a9-7a3342ba375e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "965a4f6c-fc42-454e-8b01-0f264ae8d460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5204a1a6-b341-481c-8f38-71accca002ed",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "694432b5-1992-4ade-a60c-5be1c75e359d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6a59107-cdca-41d2-8761-a6091da11841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d32fc82-985a-41e8-88ab-f0ebd9d42ad0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "672bc42e-0ec0-4405-b256-e7ce6dcbb52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd2dcff-88c8-42c9-aa80-298cec9185de",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c983782c-a04f-4879-9c84-1e2190be3689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d2cd5ed-706b-442e-9017-6c3c5fcbb392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c9fe9d-f8dc-4487-8fd0-00917ca00497",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d6dadba-5a3c-4845-9b13-ce32ac032046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd7f6d7-4e95-42d5-8e33-07885472c18f",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f876be-f0d6-4e1e-85d3-d32dfe1d1bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da07f450-63fd-4ca5-ab84-edfd2f83dc6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38fcfd20-889a-4af4-a19c-333b1e673876",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2f26c4b-85f0-4f70-b202-fd336c33a28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef97979-5eac-4e1b-bc6d-02be853f29d9",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acce2321-3460-4cd3-bb82-158f3de42e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa4fa3c7-dac7-4fba-9728-6f408c842c82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a3758c-d9e5-4fcf-978b-838a222669fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03211a85-7f93-4c1c-83dc-05b82caddb37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537e574c-350d-4dec-93b5-388ebb22e30f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4a5bbe-0fdb-4d18-b9d4-44abbe7bbfbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c24a7cba-6c63-4a99-9d2d-7bdd8001223d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9246d56e-6705-4ec6-a2d9-8f3968c24324",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f9fb65a-aa34-4b34-985f-a9063d3c8564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b80897e-bc41-44c0-8703-86f88493e53d",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c071721-2b1f-4df3-a391-f5202859cc48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0ac91dd-b985-4f0c-99ad-782f2467d3ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56fb975d-caf0-4ec4-8d64-5393297aa989",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abe7f554-bad7-4901-8691-8d80504129e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b596782c-fc4f-49ea-9ad5-00fe82f4a8ad",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2993350-feb0-493a-89cc-de535d92ea54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2785b622-4f5e-47a7-a250-8481015c5382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63c5aa8-f55a-4950-be33-fe858720eda7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "ec749f6e-59de-4410-b820-991c551df798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c325393-1517-484d-8a65-e14420d6de79",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49b4187-c2f0-428f-9689-3491a3bb26bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff7033b9-66bd-4cf8-be29-7cfb5d489238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1331dd-aba4-4def-ba17-88e098929a8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "242e86b8-98e6-4d90-b8d0-32ef20f85fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9188effa-0143-46f5-aa47-da53ec38229d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53eef4a3-f6ad-4db0-a1bd-ce78226bc69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3722a43-d757-4f1b-8fff-88609120ce3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd4b0eb5-6a29-4caf-89de-ba0350f375e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1661cc5-1a70-410d-a879-b6e75d9c8e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f846c9-e777-45d7-892f-f0a584f43e74",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2e1f21-4af4-404d-a119-b6c80a79d81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f11a7896-38ed-4682-9d69-e52eed0dad05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610b7817-304e-4512-a6f2-f7e8a10c4716",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "897b42b3-0dc6-448d-8d98-2fd33ccdb6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd325531-88d3-4110-b31d-c131d11d75c5",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29dda98c-1f77-438d-92c8-3df98ff8d934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e0a733-feb4-4616-8c94-61cdf5778ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23599ca6-1c10-43bc-9396-5e3b51232aad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "ee55e3ec-4832-4d7a-a0b3-3c5239a8fb22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c7dc35-e83b-41f2-8453-3ac89bdbe9a7",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9f9b37-c6ce-42e9-8718-2a054d834f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea331e56-4e24-4146-abdd-7296c423c135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2536c388-194f-466d-ac79-350529018ab0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "0c9a524b-ad24-46f1-8c4b-55525aa838d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afde3087-e2b4-41ed-8872-6f759867f6fb",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e0b02d-00fd-42b5-92b2-e6c4019e24a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799b1028-96a1-4338-846b-3d89d0e703d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f437004-4466-474a-a83a-56d5c433420c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "040e7958-1807-4a91-b9b3-7ff0b3edfe7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc1e8c9d-d224-41b1-9d27-96c553957359",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44580d89-ffc8-4139-ad0c-c33895981141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8acd2452-8a02-41b4-9acc-2347241e1f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0698e6d5-61a6-48ec-8091-272f2b8c9b6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "091672a2-9cb5-4d32-9b89-5345422d9d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f220b815-5440-4f82-94f8-7cd3d9383897",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b61dbe-cbf1-4309-af50-b8cd8d555455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d92c2899-dbcc-4714-95cf-ffd3e5abb251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e493cfb-8356-46bc-ba7e-d3ff9c3d1a2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b731bba-c524-4c83-bb12-5be17b3e52c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6511803b-45f8-45d0-b7a1-98d5b369e0fa",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1089cf5d-89ae-4a51-b70b-128852791a89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a14788-ee2c-4852-80c0-c6eb1159218d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98610f3f-f186-4ffa-881d-9cb09b1c2e2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "980d892b-679f-4a3c-8b70-5ea6586e81f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114a1662-7d06-486b-a03c-2b4f9ca9cca8",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f6ae07-85e8-45b0-9608-63c3d47890cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eecba9c4-0d01-4ca6-b14d-b9fc639ae7c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c400a5-e70c-484e-8549-2eeadfc63559",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6bafa0c-ece1-42be-b391-1ae243f5b684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6904e851-3d8b-4413-9b58-fb868ede85c1",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b27a4934-c695-4cdc-8a44-05aebd052b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93b2df94-5232-4b0f-9ee5-5bff7c3b0d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851ff8e0-9ac1-40ff-bcc3-d28bf6d12e23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0663118-70a2-4e63-a512-af4114b00cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f40fee-f05e-4fdd-9891-dd565a5a1a33",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef15091-14e1-421a-a7c6-7dcebf784813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52d6d55e-fa4d-44a8-9edf-d84f3e8ab567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a435bc3-7fdb-435c-9e98-5c1d63484f1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b82c88c-afc6-4c97-a413-8f96ce98a778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda5b772-a562-4128-bd29-938a2960375f",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4a3431-ebae-4cd6-b76c-482625f4877f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a901845-bc22-4774-966f-14ee9d6b0da4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1910454a-3612-41c4-b2a2-6d6cc51a4a91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05bd11ea-5fe5-4d07-a693-a8c87a476fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34bf4dd7-033d-4db1-8e64-791f6e86f719",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c77c69-7086-472a-9a01-779aae65bea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aeac0e9-a6fb-4dea-af20-026f1e054365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64fd75b9-6122-4749-aa5f-90d9afb126e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a15a91f7-bdff-42f3-a571-624c6c8ef38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d91617d-0570-4777-a7cc-922fcd3ed6da",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6ba12b-ce48-4de6-93f3-ec586e3f8769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b8b28bd-9e43-4889-b8c1-bb2139675afd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87b5cf00-5c2d-4268-8319-9dbf8ea1cf16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16ff56f4-9b8e-4d0e-9343-950ae0c87a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c154117-f23d-42e5-b383-65f6f41c06b3",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fce8df6-b320-4807-809c-4ef7ca20b972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "716401e1-3a51-48cc-9c39-f75bb4d4b121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6b228f-cf7f-431f-a6d2-966fe513cd76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a07c7c4e-9ccf-49f8-989b-118156b04ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a348544-d49a-4536-a4dd-3f9723a1611b",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8baca85a-79f2-44cd-a9e2-385f8ec965a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2919d929-cda3-4872-8659-f1e6d7e00d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83efa844-327a-4abe-96c3-f03afe2a22c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f302c4cb-838f-4cf0-8e9f-3301a424c430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a92ac0-7575-40e7-8ea0-4ee5f1c69fec",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b32f4ae-13d7-4fdd-b81b-b3b90fe965be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd56d516-c079-451d-b14e-334e5889bb33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27666d5-f171-4a3f-95bf-b21bb9ace525",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea500480-8dae-40ed-a599-1f65419375e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576d5190-9e96-41da-b911-4e459a9199c1",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc69b76b-5868-4384-ada7-beb37180ee58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434f6a07-88c1-4956-9fff-7663106f1602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350c3767-78a5-47fd-b73b-412231f6b5fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e731d5a0-6df8-456b-89f0-3779583499a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e4f201-99f0-4229-819d-aab3294e15b6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a62e203-39be-47b3-b838-e6392ac72c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8ca7e71e-870c-433d-9b70-e850774c8dbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7bde1ea-c17f-4e98-9a22-8e78f594ce73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e988cae9-eac8-43dd-9a07-21adc92f7b48"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "14bd0495-b84d-4b0a-8da4-8ed795c095d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7af8b85a-a25d-410f-a5c0-983723c3bd22",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07ceaab-9e3b-45af-b28a-967058da0ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "005b1bd1-459a-4662-b741-5255ba9163d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22fda85-d753-4a45-94e1-e5a52ba0266b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "94d051ea-4710-40c9-b2b3-1df3ae517003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b50d04-f5ab-4614-a0d7-5c01c2387271",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d153e75f-832d-47a4-b837-bf453376170a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f38b890-3144-49a8-bfde-e0e59ee22d3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb819d5-65e6-47c6-ab26-e7e10ceba3ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "9c6d7999-901b-49e5-bc85-110eedf43bda"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19d6969c-dbc9-4ad8-a2d2-0ad1715ecbc8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44935ed0-6ddd-4534-b1d7-2984ce8fbfdb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "60563e43-15d2-4b84-a423-1d433da473e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fcac084b-c706-4b05-adcc-d5c07f992a93"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3989af7a-d936-4128-b670-4bfd533df5e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "52112f26-25f3-4976-8739-22fe615fa273"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b91d942e-9e57-4789-a405-d7eabd6e8468",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "053bab72-e739-4205-b271-1393d25c7a83"
                }
              }
            ]
          },
          {
            "id": "ab40bb8a-215f-4e82-8c5a-97fa34db3366",
            "name": "Positive Testing",
            "item": [
              {
                "id": "634f05d1-c637-4d9f-9e48-b98d4cd93499",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dad1b111-f0c8-4f3d-8c01-670a154061d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "96c7b2aa-25bb-498c-96f3-bc42e1b73b51"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af919c7d-2e98-4fce-b815-b1032ae497fd",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "e37e4d5d-ada2-43cb-b5fe-9fbd1eac4f64"
                    }
                  }
                ]
              },
              {
                "id": "bda1cccc-5fc1-4773-9ac4-5f23d7347c5d",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c1b36e0-0a3f-471b-87b3-9ae04e492e0b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf3d6a0e-cd48-4406-a3d8-6ec880446539"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3366f081-aace-4162-8b5a-f07942798455",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "8fefdf16-1006-4679-b376-9395c42ea73f"
                    }
                  }
                ]
              },
              {
                "id": "623deedb-0aaf-4b56-b17d-b82c98161d06",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3305d315-d428-4b4d-8225-8d3a240853fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c6038292-ce8e-48c5-9f36-0892202c26c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2345304-9664-4031-be88-046f99349752",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "a7557190-971b-46fd-bb18-d11cdba5f794"
                    }
                  }
                ]
              },
              {
                "id": "587800a1-7c84-442d-bc0b-4e146555f447",
                "name": "credentials_issue:credential:alt.credentialSubject.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "636df367-a2bf-4769-8309-6c1ca0dbaeff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "513a283d-06da-43ce-b4d9-8925bb7f5187"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b82e67e4-4293-4e26-b0f2-6db2a14cfe28",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element.",
                        "rawBody.credential.credentialSubject = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "ed6b71ca-a13d-41ca-8dd2-973a25c9724f"
                    }
                  }
                ]
              },
              {
                "id": "49958493-3952-4186-b62f-ced21588c57d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "70e0eb75-65c8-48a8-b37f-5fbea21f3294",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof credentialSubject === 'string') {",
                        "  pm.expect(credentialSubject).to.equal(pm.variables.get(\"credential_subject\"))",
                        " } else {",
                        "  pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        " }",
                        "});"
                      ],
                      "_lastExecutionId": "60a3a445-f626-46fe-8f04-3f439992ba70"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be843f28-eeab-480a-8f34-d948cda2afde",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "b7b120ce-2dd8-43d8-805a-650ebce5f624"
                    }
                  }
                ]
              },
              {
                "id": "58441727-58aa-4359-b393-fc91838568d2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f67d952e-c6fc-46b0-9174-f4cdb9a2275e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "08f47942-a835-4a75-a63c-66417a239b41"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35a408e0-aca9-4d5d-a2d6-95219faf7f32",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "9ef1b1c2-6178-401f-8a5e-cb05b6730830"
                    }
                  }
                ]
              },
              {
                "id": "6f6be8f5-0333-4b5c-a163-96bed067efdc",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e7cf8f0-eddc-4491-b869-c2e8a6ba4ca5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "02b187cf-01e3-4361-a2ea-6fcfd319d9ee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "481761c4-fc23-46b6-8ff6-0eeb58856a5d",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "6e39e02d-44b1-475b-b0b9-1a26107279b4"
                    }
                  }
                ]
              },
              {
                "id": "79e7bb5e-e596-436c-921f-c343ab8bfe81",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc2596b5-1460-4526-83a2-a66837521e58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cfc2f704-520e-4c2a-ab04-872953ff8cc6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "800d754d-9a00-4e6d-89f5-8e7669c85acc",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "5feab303-17cc-4e6f-864d-9ca0493fc384"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "64ddbc7d-b74c-4039-a951-95bc8a35e80e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e5c2fd2a-38c1-4512-8a07-bb58ee1827d8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "52e873c4-1d44-4ab7-ae07-46e0dd33c494",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "82a5f743-afdd-422a-abe9-d27971ea8f6f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "012b077c-2323-4a5e-b92c-1f5f8057c4fc",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {",
                "            \"id\": \"{{credential_subject}}\"",
                "        }",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "2929ba75-1538-48bc-adf1-b7f534af596d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8b07c423-fb43-42d1-8b8d-be3504f6c2ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fcd29d1e-071a-4861-a580-5f005318fd29"
            }
          }
        ]
      },
      {
        "id": "847dbab4-a571-4e75-8dd5-f2731db90b6c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c6497db8-2c0e-4994-b22b-62100cfef9ea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9494fa9d-2779-45ea-a876-8cb9e7c55d6f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cd1a4e4a-f7c5-4d26-b873-6121a9163619",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a879d246-7640-4c53-9da5-93b7c01a3679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f5e53eb-5bd3-4c4a-a51d-bb49dd2fd5e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13679e46-76e0-4116-819f-6cfb98b5ca45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59fc50af-43c7-4159-b4b9-3aa3c31557f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1867f9-5496-40d5-bc99-255d1dbe12df",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0fd8bb-3561-4c1c-8f32-73d580d00453",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "d9eb914e-71b6-4bc3-b8ec-dd033257e5c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d2ca2f-821f-4261-a069-b323783e0356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7d02a5f-d13c-4929-bc23-52d3a6a6664c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6d32538-2f28-4461-beb0-af37748b79dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f00b441-7547-451e-bbb2-dffadeafc003"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed60ca78-d55c-4188-b469-f47277590067",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c762e60-1d8e-4f30-b94e-013639c02603"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "58a2f84d-3537-4886-9703-bed1fd3e041a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "881b4bfc-e62e-4f45-9052-751b621840d7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a1cfac76-5e09-4462-802c-94407638d1d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "43c3813a-dc32-4aba-aaee-bdadc76c5a2f"
            }
          }
        ]
      },
      {
        "id": "653ccd27-d8d9-43c2-a686-d70c4a62e101",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "89b38a3e-bf32-47ae-8557-3666a42e15a9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "34704b31-fbb6-462b-8685-861ad2aebea9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "634e24c5-93c2-4b78-ab72-b33475c8026c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25add78-994d-4fd2-b115-8ee59caa06ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"dummyVC\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "108b6eb0-5751-4313-a937-e9744c5402fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec43b9e6-bba2-4bd9-8aaa-f54c0317d02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9be0ee3b-8d3f-4125-a05d-36301d5c6219"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e2996bc4-5352-4f8d-b388-e2a7b2892dbf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ea176553-9d9f-431b-94ca-7894fd3310d1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7b0790-e5c6-4114-8764-fa599c6036a0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "f7ebb629-6ba5-4638-9ae9-ceee09a73449"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8562a062-ec4c-40c4-8d86-c75492482e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5721c39d-e25f-47d5-8cdf-a2352fbd5953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648ef67b-4bc4-405e-99d7-8b38e6cd8f61",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36bef294-e3a7-45a8-b09a-68fda59c8d75",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"dummyVC\")));"
                          ],
                          "_lastExecutionId": "b8b441c3-5add-41a6-87ee-811d1b4fa87b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4cfc368-cb27-44ea-963a-4ed483c701d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bffb5c39-4817-4db8-ae20-527e0a7ac307"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf5dd288-2c7e-449c-853b-260cda9d2d2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2cdf379-2d10-49be-a84b-85d9e95299e4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a62cbd7-2c33-4a66-9f01-22ec14da0246",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7eb0fcf-9a41-4ede-a158-9223ff1301c7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da5042ac-e3d9-4a5f-887a-006989f9824c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"dummyVC\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": \"did:example:123\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f70f2488-31e8-465e-a197-86b869296ba6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61c6a673-c293-4b84-b6eb-4868ff73b6f0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80633775-7f83-4e15-a7af-37954f47b1aa"
            }
          }
        ]
      },
      {
        "id": "3b9f0d60-0ffc-4b66-8990-0d6279f854b4",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d9c688e1-04aa-44ca-b593-c7ce6282b30e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "84dec627-72f0-4a12-8feb-facc7409dfaf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9dd152ef-7663-4d7a-9684-3a0135b147e3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e045d31a-1053-404d-a5f4-c544ce8cf25e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d64f0d7-de25-4859-98f2-ebc01119c220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24908e0f-a6af-4104-ab1d-3e0e8805ba6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70763309-5cd4-456a-9160-18f842d1dbe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a969f2-796c-4b82-8c7f-33880795d7e8",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96321abf-084c-41e0-871d-d6a2ce661e2e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "1f704b74-a6a2-4672-9550-4f4553f76a08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abeca9cf-672a-4e31-8367-feb65635b310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87c1addd-146c-47d4-9e02-8eaabbb44cd9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "abb904ca-f438-4f1e-8bf4-273f0b33257d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb03a99e-19ed-4ebb-92c5-000d712d6c10"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2df1fd32-b4e2-4abc-bfd3-a90dc6e746d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1f92fe5d-82c9-4a8c-a124-920c6760d7e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "acaeb63d-b005-4c36-a47e-db2d6e5cbec3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "fa54c316-7335-412a-85f6-ca68b7a159c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c209b718-702e-4134-bc31-a06a9778f79d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ebebe11-d3f1-4e30-b0b6-337aad14401b"
            }
          }
        ]
      },
      {
        "id": "113e268a-7503-47cc-894d-b9ed72c175fc",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "06d98bf2-7feb-4fb2-b346-e1a5aa7adce7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e3a8318b-b8bc-4e92-af58-2b6a42ca1c08",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "346551fa-2493-4b67-9d27-f8e91fce2964",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be5287e-b74b-4132-8c75-bcd6107c406b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffeb02c7-06be-41df-9069-f0fd2e1001ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b798fbd6-1f9f-410e-a048-6a31f047016f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ccc1b36-042d-4b2e-92f8-bebd6489acd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16380b7f-4928-484b-b647-de97877a205c",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156ec7a6-3f51-450a-a7bb-35aa451b14aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "49618bbd-5a00-498c-8f61-e66d05a0933a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84b3789-1bc2-46ad-a225-a2c3a051ddc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3540a316-900a-4e55-a5f0-01f8e7db4f26"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a4e6992-786d-4b60-9f58-3ce094b9af68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "261081fc-229c-4f9a-8b3d-2c59cd8f06b4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf5003a3-d109-4a93-9765-af7554f9885f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac630ec0-156c-45b0-8ba3-bc2128c51942"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "71d7d43e-9ed1-4066-bdc6-9be413532c05",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "552d8b7f-b119-43c9-81bf-892e77c80a57"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9eaad7f3-ab57-420b-8beb-300657dd5c58",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7cb0852f-0b38-4474-9914-4d4d71648fb4"
            }
          }
        ]
      },
      {
        "id": "481db661-f6fa-4777-9f81-34a77bdddaa5",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0056b1d6-e667-4e14-befc-9a57809b4272",
            "name": "Negative Testing",
            "item": [
              {
                "id": "48c2ba32-251a-4a78-b70b-bef902b90ad0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b2a2fbc2-62c5-4448-b917-8589df74b838",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98780a4a-4c7c-452d-a021-bbb2ea560f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c9a7f14-3c1f-47f1-8fcb-1b67f25eb145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a76a50-282a-4da8-84f2-9aaf7bfd858a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "10f95e69-0baa-4d53-b99d-bd3c59debdfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a55aad-dc0d-4341-8e16-5621e81a9e00",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04255953-43d1-4894-987b-411d5c84ebd8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "0d3149d9-f91c-480e-ae51-03d01a6c7c6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3909f738-450d-45fd-bc84-191ede49d77a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd1c43a2-2f25-4204-abda-9f1dcd7d4a73"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e977e4b-026d-43db-bed9-5a111506927b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47945c27-278f-4c68-bcd2-f7a8c793b188"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74c3ccfe-bab9-4a16-b4f1-ac7034022b18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1eb8078a-6d3a-4927-8665-d93066bffedb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c073972-f65d-4456-8981-77ad149dfc90",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "40a222ec-2599-4c40-9d58-49f27d9fdfbe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "78cd17e5-aff3-4985-9153-aa816a383286",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "219e985a-4f3e-4a18-8819-e9897098dd4f"
            }
          }
        ]
      },
      {
        "id": "2fae3cdd-ac09-4fcb-99fa-e72b0184402c",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "3fddf674-f2eb-490f-9a7c-e9ffd7797992",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 453,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 108,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 123,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 229,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 224,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 48.64814814814816,
      "responseMin": 9,
      "responseMax": 290,
      "responseSd": 59.94662978430537,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1662511990529,
      "completed": 1662511998802
    },
    "executions": [
      {
        "id": "e02f07cd-22b9-4cf9-b68f-e8d1b6b36757",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 59,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9b6703f1-bd9e-414f-bc41-f9a97e53505f",
          "httpRequestId": "10ff3d0d-120d-48d4-9658-be15e3672543"
        },
        "item": {
          "id": "e02f07cd-22b9-4cf9-b68f-e8d1b6b36757",
          "name": "did_json"
        },
        "response": {
          "id": "dd63179d-957b-45be-872c-0749ba8ee9db",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6126ef-27ab-48e7-b0eb-7df419843b44",
        "cursor": {
          "ref": "520bbe16-f3a9-4ba7-9b2c-f3e41ba9edd4",
          "length": 59,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5352611b-c4a5-4af8-8d6d-88225cd8fbc4"
        },
        "item": {
          "id": "6f6126ef-27ab-48e7-b0eb-7df419843b44",
          "name": "did:invalid"
        },
        "response": {
          "id": "71a00f87-0cb8-4b26-9c28-f87cf4c447b9",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6126ef-27ab-48e7-b0eb-7df419843b44",
        "cursor": {
          "ref": "520bbe16-f3a9-4ba7-9b2c-f3e41ba9edd4",
          "length": 59,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5352611b-c4a5-4af8-8d6d-88225cd8fbc4"
        },
        "item": {
          "id": "6f6126ef-27ab-48e7-b0eb-7df419843b44",
          "name": "did:invalid"
        },
        "response": {
          "id": "71a00f87-0cb8-4b26-9c28-f87cf4c447b9",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a27a412-9d7c-4445-8e13-c0555ebbfe2d",
        "cursor": {
          "ref": "fdf7091d-52e8-47c4-9aa3-03c8d56f886c",
          "length": 59,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5d2f34dc-466c-4d05-89dd-8d04c32af0b3"
        },
        "item": {
          "id": "4a27a412-9d7c-4445-8e13-c0555ebbfe2d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f6fa820a-c0ac-47dd-b4dc-3b1b10180fe2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 111,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "33b6c52c-9c0a-49d9-b25f-d9c8169dd233",
        "cursor": {
          "ref": "e0b908b6-480e-4405-be5b-af75ded343dc",
          "length": 59,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1eadcd2e-818c-4372-b4c3-20afcbfec43b"
        },
        "item": {
          "id": "33b6c52c-9c0a-49d9-b25f-d9c8169dd233",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0374e328-b6b5-44a8-a81f-72f7704430d5",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3fe7bfda-b38b-4bb6-bac9-f52277869b95",
        "cursor": {
          "ref": "e5c0f8c0-e70d-461e-b569-78481b7c66c6",
          "length": 59,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6a684c04-22a2-46b4-bf01-7bd6b207b631"
        },
        "item": {
          "id": "3fe7bfda-b38b-4bb6-bac9-f52277869b95",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "66d38615-e9ec-4849-8707-6e969d416b06",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "e143f839-b63e-4d87-b07b-e636d6264aba",
        "cursor": {
          "ref": "906f7daa-222c-4a5c-8650-9869c5351e71",
          "length": 59,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "eb26d941-93aa-42ee-8989-2bcbfe3ed4af"
        },
        "item": {
          "id": "e143f839-b63e-4d87-b07b-e636d6264aba",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ffba7c1f-3f96-4e34-a61d-1550512856bf",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "e143f839-b63e-4d87-b07b-e636d6264aba",
        "cursor": {
          "ref": "906f7daa-222c-4a5c-8650-9869c5351e71",
          "length": 59,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "eb26d941-93aa-42ee-8989-2bcbfe3ed4af"
        },
        "item": {
          "id": "e143f839-b63e-4d87-b07b-e636d6264aba",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "ffba7c1f-3f96-4e34-a61d-1550512856bf",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "61c098d5-158d-4369-a639-bbccee5d9aae",
        "cursor": {
          "ref": "4cfcbd77-1060-4f12-9a27-b0afefc51b1d",
          "length": 59,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cf1ff6ee-4ab1-4770-98fa-60773a0bb55f"
        },
        "item": {
          "id": "61c098d5-158d-4369-a639-bbccee5d9aae",
          "name": "identifiers"
        },
        "response": {
          "id": "6a34c9e6-a7d7-48ca-ac2b-a8db6ccd6cd2",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f31943-0c73-4d21-8a79-82b53aea5cfa",
        "cursor": {
          "ref": "1cc16e88-f9a5-4c23-a06d-74931ecbcc16",
          "length": 59,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d8f629fc-3521-4bfc-ad31-3b1b1ab5b187"
        },
        "item": {
          "id": "d0f31943-0c73-4d21-8a79-82b53aea5cfa",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cb1b59b8-d518-4e31-9f09-95fb4e621033",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 290,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d0f31943-0c73-4d21-8a79-82b53aea5cfa",
        "cursor": {
          "ref": "1cc16e88-f9a5-4c23-a06d-74931ecbcc16",
          "length": 59,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d8f629fc-3521-4bfc-ad31-3b1b1ab5b187"
        },
        "item": {
          "id": "d0f31943-0c73-4d21-8a79-82b53aea5cfa",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cb1b59b8-d518-4e31-9f09-95fb4e621033",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 290,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d0f31943-0c73-4d21-8a79-82b53aea5cfa",
        "cursor": {
          "ref": "1cc16e88-f9a5-4c23-a06d-74931ecbcc16",
          "length": 59,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d8f629fc-3521-4bfc-ad31-3b1b1ab5b187"
        },
        "item": {
          "id": "d0f31943-0c73-4d21-8a79-82b53aea5cfa",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cb1b59b8-d518-4e31-9f09-95fb4e621033",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 290,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "e5f781da-5299-4ff3-a6fb-cb9cdbe51c4c",
        "cursor": {
          "ref": "8a30570c-b14b-43b4-8e32-278df7484f08",
          "length": 59,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a843f6d4-a16b-48e7-be12-9422cae7fc6b"
        },
        "item": {
          "id": "e5f781da-5299-4ff3-a6fb-cb9cdbe51c4c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fb871700-5d05-4ffb-bbd0-5fa303d62133",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "e5f781da-5299-4ff3-a6fb-cb9cdbe51c4c",
        "cursor": {
          "ref": "8a30570c-b14b-43b4-8e32-278df7484f08",
          "length": 59,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a843f6d4-a16b-48e7-be12-9422cae7fc6b"
        },
        "item": {
          "id": "e5f781da-5299-4ff3-a6fb-cb9cdbe51c4c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fb871700-5d05-4ffb-bbd0-5fa303d62133",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "15fc251d-5099-4914-85f4-614122ea1e6c",
        "cursor": {
          "ref": "656e5bc1-7300-46de-a6e1-62f028ee0485",
          "length": 59,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e9bd368d-3b2c-408d-acf2-0f803221cd93"
        },
        "item": {
          "id": "15fc251d-5099-4914-85f4-614122ea1e6c",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "18401ca3-1aa4-4d2e-9020-5b980bda10ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "15fc251d-5099-4914-85f4-614122ea1e6c",
        "cursor": {
          "ref": "656e5bc1-7300-46de-a6e1-62f028ee0485",
          "length": 59,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e9bd368d-3b2c-408d-acf2-0f803221cd93"
        },
        "item": {
          "id": "15fc251d-5099-4914-85f4-614122ea1e6c",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "18401ca3-1aa4-4d2e-9020-5b980bda10ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "556871a7-e7d1-441b-8008-f6dd43a755f1",
        "cursor": {
          "ref": "45ee46c9-4ada-4c3a-a8a9-f9c378355eec",
          "length": 59,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1634ecc7-b633-4ef7-bdc5-9128aeb15e98"
        },
        "item": {
          "id": "556871a7-e7d1-441b-8008-f6dd43a755f1",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "c2a65808-60e7-416f-b445-5eb27e7aea0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "556871a7-e7d1-441b-8008-f6dd43a755f1",
        "cursor": {
          "ref": "45ee46c9-4ada-4c3a-a8a9-f9c378355eec",
          "length": 59,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1634ecc7-b633-4ef7-bdc5-9128aeb15e98"
        },
        "item": {
          "id": "556871a7-e7d1-441b-8008-f6dd43a755f1",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "c2a65808-60e7-416f-b445-5eb27e7aea0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "5204a1a6-b341-481c-8f38-71accca002ed",
        "cursor": {
          "ref": "4ecaa2ca-6872-4ede-b786-d499c9cb0586",
          "length": 59,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "78bf7e65-3ef0-4cff-ac00-50c8da71769f"
        },
        "item": {
          "id": "5204a1a6-b341-481c-8f38-71accca002ed",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "389ab5be-9569-4067-917e-ef64c7202afd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "5204a1a6-b341-481c-8f38-71accca002ed",
        "cursor": {
          "ref": "4ecaa2ca-6872-4ede-b786-d499c9cb0586",
          "length": 59,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "78bf7e65-3ef0-4cff-ac00-50c8da71769f"
        },
        "item": {
          "id": "5204a1a6-b341-481c-8f38-71accca002ed",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "389ab5be-9569-4067-917e-ef64c7202afd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "5cd2dcff-88c8-42c9-aa80-298cec9185de",
        "cursor": {
          "ref": "0ebd2073-97ad-472a-8d24-ae1261b81917",
          "length": 59,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0090af8c-a99e-4cff-ba76-46909563f60c"
        },
        "item": {
          "id": "5cd2dcff-88c8-42c9-aa80-298cec9185de",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "737d903b-9afe-4132-b0b1-873feed69a99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "5cd2dcff-88c8-42c9-aa80-298cec9185de",
        "cursor": {
          "ref": "0ebd2073-97ad-472a-8d24-ae1261b81917",
          "length": 59,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0090af8c-a99e-4cff-ba76-46909563f60c"
        },
        "item": {
          "id": "5cd2dcff-88c8-42c9-aa80-298cec9185de",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "737d903b-9afe-4132-b0b1-873feed69a99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 62,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "bcd7f6d7-4e95-42d5-8e33-07885472c18f",
        "cursor": {
          "ref": "0671cf96-5324-4cbc-b6fa-aae670d09d76",
          "length": 59,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e399664b-e964-4eba-8d45-5362dcbad655"
        },
        "item": {
          "id": "bcd7f6d7-4e95-42d5-8e33-07885472c18f",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "6df68c04-5836-4477-a069-a6299552e87a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "bcd7f6d7-4e95-42d5-8e33-07885472c18f",
        "cursor": {
          "ref": "0671cf96-5324-4cbc-b6fa-aae670d09d76",
          "length": 59,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e399664b-e964-4eba-8d45-5362dcbad655"
        },
        "item": {
          "id": "bcd7f6d7-4e95-42d5-8e33-07885472c18f",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "6df68c04-5836-4477-a069-a6299552e87a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "7ef97979-5eac-4e1b-bc6d-02be853f29d9",
        "cursor": {
          "ref": "40040180-d579-4d94-a403-e50c4e34776c",
          "length": 59,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "05dac1d3-f73f-4889-93c1-d75bb38af4f7"
        },
        "item": {
          "id": "7ef97979-5eac-4e1b-bc6d-02be853f29d9",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "efad3e29-2364-4d49-8a05-06fc2ef9f236",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "7ef97979-5eac-4e1b-bc6d-02be853f29d9",
        "cursor": {
          "ref": "40040180-d579-4d94-a403-e50c4e34776c",
          "length": 59,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "05dac1d3-f73f-4889-93c1-d75bb38af4f7"
        },
        "item": {
          "id": "7ef97979-5eac-4e1b-bc6d-02be853f29d9",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "efad3e29-2364-4d49-8a05-06fc2ef9f236",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "537e574c-350d-4dec-93b5-388ebb22e30f",
        "cursor": {
          "ref": "d2ed3007-e759-4f11-ad82-cccad837bc50",
          "length": 59,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "01d44cda-dfcb-4c9a-8b27-6aac7b889802"
        },
        "item": {
          "id": "537e574c-350d-4dec-93b5-388ebb22e30f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8673c04a-99b3-4aa9-88a0-24f5d7a07f8a",
          "status": "Created",
          "code": 201,
          "responseTime": 44,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "537e574c-350d-4dec-93b5-388ebb22e30f",
        "cursor": {
          "ref": "d2ed3007-e759-4f11-ad82-cccad837bc50",
          "length": 59,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "01d44cda-dfcb-4c9a-8b27-6aac7b889802"
        },
        "item": {
          "id": "537e574c-350d-4dec-93b5-388ebb22e30f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8673c04a-99b3-4aa9-88a0-24f5d7a07f8a",
          "status": "Created",
          "code": 201,
          "responseTime": 44,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "2b80897e-bc41-44c0-8703-86f88493e53d",
        "cursor": {
          "ref": "61206b32-7714-4d3d-a92b-ace8226f3474",
          "length": 59,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ffe6b4c9-d585-4f7a-b5fa-48498a6da458"
        },
        "item": {
          "id": "2b80897e-bc41-44c0-8703-86f88493e53d",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "1646351e-96d2-4975-80c5-f13c0a7a3ffd",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "2b80897e-bc41-44c0-8703-86f88493e53d",
        "cursor": {
          "ref": "61206b32-7714-4d3d-a92b-ace8226f3474",
          "length": 59,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ffe6b4c9-d585-4f7a-b5fa-48498a6da458"
        },
        "item": {
          "id": "2b80897e-bc41-44c0-8703-86f88493e53d",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "1646351e-96d2-4975-80c5-f13c0a7a3ffd",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "b596782c-fc4f-49ea-9ad5-00fe82f4a8ad",
        "cursor": {
          "ref": "f424a8ec-df67-440e-a2af-ea09dad0a142",
          "length": 59,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d3a33d4f-9a45-418a-b694-1652652a47b4"
        },
        "item": {
          "id": "b596782c-fc4f-49ea-9ad5-00fe82f4a8ad",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "2a229edc-0851-437b-9b35-7a42e0ddf7a9",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "b596782c-fc4f-49ea-9ad5-00fe82f4a8ad",
        "cursor": {
          "ref": "f424a8ec-df67-440e-a2af-ea09dad0a142",
          "length": 59,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d3a33d4f-9a45-418a-b694-1652652a47b4"
        },
        "item": {
          "id": "b596782c-fc4f-49ea-9ad5-00fe82f4a8ad",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "2a229edc-0851-437b-9b35-7a42e0ddf7a9",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "4c325393-1517-484d-8a65-e14420d6de79",
        "cursor": {
          "ref": "047d2a71-da84-4e27-9536-d3e3fe49d716",
          "length": 59,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9ddc5e93-65af-4711-ab4f-105d36d4f325"
        },
        "item": {
          "id": "4c325393-1517-484d-8a65-e14420d6de79",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "14e94b8c-e8f7-4774-b280-9fe698a5e11e",
          "status": "Created",
          "code": 201,
          "responseTime": 44,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "4c325393-1517-484d-8a65-e14420d6de79",
        "cursor": {
          "ref": "047d2a71-da84-4e27-9536-d3e3fe49d716",
          "length": 59,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9ddc5e93-65af-4711-ab4f-105d36d4f325"
        },
        "item": {
          "id": "4c325393-1517-484d-8a65-e14420d6de79",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "14e94b8c-e8f7-4774-b280-9fe698a5e11e",
          "status": "Created",
          "code": 201,
          "responseTime": 44,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "9188effa-0143-46f5-aa47-da53ec38229d",
        "cursor": {
          "ref": "e8e1d0fe-b26a-4fd9-a1d7-be4c3d746445",
          "length": 59,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1383003b-a5aa-40c1-8dcd-a4ce03bbec38"
        },
        "item": {
          "id": "9188effa-0143-46f5-aa47-da53ec38229d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "549645e8-2411-4962-8970-590118451dea",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "9188effa-0143-46f5-aa47-da53ec38229d",
        "cursor": {
          "ref": "e8e1d0fe-b26a-4fd9-a1d7-be4c3d746445",
          "length": 59,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1383003b-a5aa-40c1-8dcd-a4ce03bbec38"
        },
        "item": {
          "id": "9188effa-0143-46f5-aa47-da53ec38229d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "549645e8-2411-4962-8970-590118451dea",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "19f846c9-e777-45d7-892f-f0a584f43e74",
        "cursor": {
          "ref": "5a429b1c-0418-4c89-8aeb-ab97235fd7fa",
          "length": 59,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "09e430c4-9401-421b-a8a9-ef3d6386aa9f"
        },
        "item": {
          "id": "19f846c9-e777-45d7-892f-f0a584f43e74",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "aee3a9cf-6f0f-4910-b1d2-a35547108d95",
          "status": "Created",
          "code": 201,
          "responseTime": 45,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "19f846c9-e777-45d7-892f-f0a584f43e74",
        "cursor": {
          "ref": "5a429b1c-0418-4c89-8aeb-ab97235fd7fa",
          "length": 59,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "09e430c4-9401-421b-a8a9-ef3d6386aa9f"
        },
        "item": {
          "id": "19f846c9-e777-45d7-892f-f0a584f43e74",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "aee3a9cf-6f0f-4910-b1d2-a35547108d95",
          "status": "Created",
          "code": 201,
          "responseTime": 45,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "bd325531-88d3-4110-b31d-c131d11d75c5",
        "cursor": {
          "ref": "a071774c-ee40-4b23-bb6b-432232da4b4e",
          "length": 59,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7409acf1-7c70-4baf-801b-2da8546a0075"
        },
        "item": {
          "id": "bd325531-88d3-4110-b31d-c131d11d75c5",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "10575cdf-e254-4707-a396-63397803f7f6",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "bd325531-88d3-4110-b31d-c131d11d75c5",
        "cursor": {
          "ref": "a071774c-ee40-4b23-bb6b-432232da4b4e",
          "length": 59,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7409acf1-7c70-4baf-801b-2da8546a0075"
        },
        "item": {
          "id": "bd325531-88d3-4110-b31d-c131d11d75c5",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "10575cdf-e254-4707-a396-63397803f7f6",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "40c7dc35-e83b-41f2-8453-3ac89bdbe9a7",
        "cursor": {
          "ref": "57a0ea75-4c86-4238-9e27-c6afcb15d2c4",
          "length": 59,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "094d9abd-b081-45e1-8e29-5e0f124fd14d"
        },
        "item": {
          "id": "40c7dc35-e83b-41f2-8453-3ac89bdbe9a7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4e7595a7-7e5b-4eb4-9f85-22cc59328086",
          "status": "Created",
          "code": 201,
          "responseTime": 46,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "40c7dc35-e83b-41f2-8453-3ac89bdbe9a7",
        "cursor": {
          "ref": "57a0ea75-4c86-4238-9e27-c6afcb15d2c4",
          "length": 59,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "094d9abd-b081-45e1-8e29-5e0f124fd14d"
        },
        "item": {
          "id": "40c7dc35-e83b-41f2-8453-3ac89bdbe9a7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4e7595a7-7e5b-4eb4-9f85-22cc59328086",
          "status": "Created",
          "code": 201,
          "responseTime": 46,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "afde3087-e2b4-41ed-8872-6f759867f6fb",
        "cursor": {
          "ref": "13d768e6-f3bd-48e7-b8c6-7fc9831c6e41",
          "length": 59,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f6bb4233-5381-4a1a-b823-c9c8aa5afa3d"
        },
        "item": {
          "id": "afde3087-e2b4-41ed-8872-6f759867f6fb",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d4dd1dde-2579-4726-b3ba-2bde1716a8c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "afde3087-e2b4-41ed-8872-6f759867f6fb",
        "cursor": {
          "ref": "13d768e6-f3bd-48e7-b8c6-7fc9831c6e41",
          "length": 59,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f6bb4233-5381-4a1a-b823-c9c8aa5afa3d"
        },
        "item": {
          "id": "afde3087-e2b4-41ed-8872-6f759867f6fb",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d4dd1dde-2579-4726-b3ba-2bde1716a8c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "dc1e8c9d-d224-41b1-9d27-96c553957359",
        "cursor": {
          "ref": "87995969-340a-4251-8fcc-869352d0bbab",
          "length": 59,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d3844409-638d-4cf3-a9b2-0824d1929fa1"
        },
        "item": {
          "id": "dc1e8c9d-d224-41b1-9d27-96c553957359",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "41f6c9da-bdd5-48b6-b852-8591821f0f6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "dc1e8c9d-d224-41b1-9d27-96c553957359",
        "cursor": {
          "ref": "87995969-340a-4251-8fcc-869352d0bbab",
          "length": 59,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d3844409-638d-4cf3-a9b2-0824d1929fa1"
        },
        "item": {
          "id": "dc1e8c9d-d224-41b1-9d27-96c553957359",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "41f6c9da-bdd5-48b6-b852-8591821f0f6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "f220b815-5440-4f82-94f8-7cd3d9383897",
        "cursor": {
          "ref": "47bc0923-30a4-4423-803d-35d6433abcd7",
          "length": 59,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f54dcad0-9ee0-44df-b00a-1837bfaa08cd"
        },
        "item": {
          "id": "f220b815-5440-4f82-94f8-7cd3d9383897",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0cead728-582c-41f8-9413-643b22737252",
          "status": "Created",
          "code": 201,
          "responseTime": 47,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "f220b815-5440-4f82-94f8-7cd3d9383897",
        "cursor": {
          "ref": "47bc0923-30a4-4423-803d-35d6433abcd7",
          "length": 59,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f54dcad0-9ee0-44df-b00a-1837bfaa08cd"
        },
        "item": {
          "id": "f220b815-5440-4f82-94f8-7cd3d9383897",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0cead728-582c-41f8-9413-643b22737252",
          "status": "Created",
          "code": 201,
          "responseTime": 47,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "6511803b-45f8-45d0-b7a1-98d5b369e0fa",
        "cursor": {
          "ref": "b86181b9-f3b1-4a97-9801-6a93a4073197",
          "length": 59,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f96ef6d6-6e01-4df4-8ade-ceea291f56df"
        },
        "item": {
          "id": "6511803b-45f8-45d0-b7a1-98d5b369e0fa",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7ba30f1b-69a3-42c2-8c83-bf5774e0ea03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "6511803b-45f8-45d0-b7a1-98d5b369e0fa",
        "cursor": {
          "ref": "b86181b9-f3b1-4a97-9801-6a93a4073197",
          "length": 59,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f96ef6d6-6e01-4df4-8ade-ceea291f56df"
        },
        "item": {
          "id": "6511803b-45f8-45d0-b7a1-98d5b369e0fa",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7ba30f1b-69a3-42c2-8c83-bf5774e0ea03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "114a1662-7d06-486b-a03c-2b4f9ca9cca8",
        "cursor": {
          "ref": "efb8688c-ea4e-44c6-9be1-acdb116f95a8",
          "length": 59,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ed4d5cb7-3d42-4af6-a7f8-91a7afb5a25b"
        },
        "item": {
          "id": "114a1662-7d06-486b-a03c-2b4f9ca9cca8",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "f07ba612-8270-4241-a701-a740be9cdc04",
          "status": "Created",
          "code": 201,
          "responseTime": 41,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "114a1662-7d06-486b-a03c-2b4f9ca9cca8",
        "cursor": {
          "ref": "efb8688c-ea4e-44c6-9be1-acdb116f95a8",
          "length": 59,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ed4d5cb7-3d42-4af6-a7f8-91a7afb5a25b"
        },
        "item": {
          "id": "114a1662-7d06-486b-a03c-2b4f9ca9cca8",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "f07ba612-8270-4241-a701-a740be9cdc04",
          "status": "Created",
          "code": 201,
          "responseTime": 41,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "6904e851-3d8b-4413-9b58-fb868ede85c1",
        "cursor": {
          "ref": "122ecf44-4f1b-4e7f-8643-e39b48e23411",
          "length": 59,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "cdebea24-2c93-458f-9f31-e1257ea2f2c5"
        },
        "item": {
          "id": "6904e851-3d8b-4413-9b58-fb868ede85c1",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "36015ed5-e262-4c52-a2cf-4a9365853604",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "6904e851-3d8b-4413-9b58-fb868ede85c1",
        "cursor": {
          "ref": "122ecf44-4f1b-4e7f-8643-e39b48e23411",
          "length": 59,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "cdebea24-2c93-458f-9f31-e1257ea2f2c5"
        },
        "item": {
          "id": "6904e851-3d8b-4413-9b58-fb868ede85c1",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "36015ed5-e262-4c52-a2cf-4a9365853604",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "15f40fee-f05e-4fdd-9891-dd565a5a1a33",
        "cursor": {
          "ref": "e6d81efc-2de9-4f50-a8bd-fa20d3caa1ff",
          "length": 59,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a44e76fb-92ff-48ae-925b-3bb4ba584e39"
        },
        "item": {
          "id": "15f40fee-f05e-4fdd-9891-dd565a5a1a33",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "19a7b439-bbcf-4bce-90ba-705152f6ccd9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "15f40fee-f05e-4fdd-9891-dd565a5a1a33",
        "cursor": {
          "ref": "e6d81efc-2de9-4f50-a8bd-fa20d3caa1ff",
          "length": 59,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a44e76fb-92ff-48ae-925b-3bb4ba584e39"
        },
        "item": {
          "id": "15f40fee-f05e-4fdd-9891-dd565a5a1a33",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "19a7b439-bbcf-4bce-90ba-705152f6ccd9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "dda5b772-a562-4128-bd29-938a2960375f",
        "cursor": {
          "ref": "c2a855d3-785a-4781-a26c-f827f1fc3de9",
          "length": 59,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ed70de9e-febc-4872-b3ca-b6f793707ee7"
        },
        "item": {
          "id": "dda5b772-a562-4128-bd29-938a2960375f",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "4206a4d0-1ae0-48bb-8075-b8d905c81a4c",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "dda5b772-a562-4128-bd29-938a2960375f",
        "cursor": {
          "ref": "c2a855d3-785a-4781-a26c-f827f1fc3de9",
          "length": 59,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ed70de9e-febc-4872-b3ca-b6f793707ee7"
        },
        "item": {
          "id": "dda5b772-a562-4128-bd29-938a2960375f",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "4206a4d0-1ae0-48bb-8075-b8d905c81a4c",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "34bf4dd7-033d-4db1-8e64-791f6e86f719",
        "cursor": {
          "ref": "1a673a5b-8d91-45e7-bf14-f41c0ad40cca",
          "length": 59,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "afd53aaa-c768-4d93-86ae-2166c30e9ab2"
        },
        "item": {
          "id": "34bf4dd7-033d-4db1-8e64-791f6e86f719",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "52c34fe3-7599-41b7-bb05-a52985e2615b",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "34bf4dd7-033d-4db1-8e64-791f6e86f719",
        "cursor": {
          "ref": "1a673a5b-8d91-45e7-bf14-f41c0ad40cca",
          "length": 59,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "afd53aaa-c768-4d93-86ae-2166c30e9ab2"
        },
        "item": {
          "id": "34bf4dd7-033d-4db1-8e64-791f6e86f719",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "52c34fe3-7599-41b7-bb05-a52985e2615b",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "6d91617d-0570-4777-a7cc-922fcd3ed6da",
        "cursor": {
          "ref": "64e1b53b-846c-4ec3-9a16-bed198e75421",
          "length": 59,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6feeaeca-2518-4383-a334-2e38194a7800"
        },
        "item": {
          "id": "6d91617d-0570-4777-a7cc-922fcd3ed6da",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "c1d3188c-5eac-4514-88e3-8a02b4906aab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "6d91617d-0570-4777-a7cc-922fcd3ed6da",
        "cursor": {
          "ref": "64e1b53b-846c-4ec3-9a16-bed198e75421",
          "length": 59,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6feeaeca-2518-4383-a334-2e38194a7800"
        },
        "item": {
          "id": "6d91617d-0570-4777-a7cc-922fcd3ed6da",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "c1d3188c-5eac-4514-88e3-8a02b4906aab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "6c154117-f23d-42e5-b383-65f6f41c06b3",
        "cursor": {
          "ref": "e28d9676-726b-4669-beb1-f7c2446de120",
          "length": 59,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "48b2e4d4-bfba-4d24-8626-bbfdce2b8ff4"
        },
        "item": {
          "id": "6c154117-f23d-42e5-b383-65f6f41c06b3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0f7ad4da-d9ef-4f96-aa5b-67887e66f13c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "6c154117-f23d-42e5-b383-65f6f41c06b3",
        "cursor": {
          "ref": "e28d9676-726b-4669-beb1-f7c2446de120",
          "length": 59,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "48b2e4d4-bfba-4d24-8626-bbfdce2b8ff4"
        },
        "item": {
          "id": "6c154117-f23d-42e5-b383-65f6f41c06b3",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0f7ad4da-d9ef-4f96-aa5b-67887e66f13c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "7a348544-d49a-4536-a4dd-3f9723a1611b",
        "cursor": {
          "ref": "13ec6a11-2423-4622-8ddf-84fa197a16db",
          "length": 59,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a4aa0d9f-d70b-41db-a693-672c06d9892d"
        },
        "item": {
          "id": "7a348544-d49a-4536-a4dd-3f9723a1611b",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "2063ae5d-114a-425a-bf55-6b87bc228923",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "7a348544-d49a-4536-a4dd-3f9723a1611b",
        "cursor": {
          "ref": "13ec6a11-2423-4622-8ddf-84fa197a16db",
          "length": 59,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a4aa0d9f-d70b-41db-a693-672c06d9892d"
        },
        "item": {
          "id": "7a348544-d49a-4536-a4dd-3f9723a1611b",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "2063ae5d-114a-425a-bf55-6b87bc228923",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "c1a92ac0-7575-40e7-8ea0-4ee5f1c69fec",
        "cursor": {
          "ref": "0d2f72c3-d4e0-4aaf-a331-8e67f86c0506",
          "length": 59,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "becffc9e-2df7-4d5a-b482-9817f22f9669"
        },
        "item": {
          "id": "c1a92ac0-7575-40e7-8ea0-4ee5f1c69fec",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "233e63c6-9595-4779-8e7a-8ca8418b2022",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "c1a92ac0-7575-40e7-8ea0-4ee5f1c69fec",
        "cursor": {
          "ref": "0d2f72c3-d4e0-4aaf-a331-8e67f86c0506",
          "length": 59,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "becffc9e-2df7-4d5a-b482-9817f22f9669"
        },
        "item": {
          "id": "c1a92ac0-7575-40e7-8ea0-4ee5f1c69fec",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "233e63c6-9595-4779-8e7a-8ca8418b2022",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "576d5190-9e96-41da-b911-4e459a9199c1",
        "cursor": {
          "ref": "a483af1f-9a84-4f84-9660-17a05a06c6ae",
          "length": 59,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "47118f2f-f60f-4e76-86ac-9aecc8f715b5"
        },
        "item": {
          "id": "576d5190-9e96-41da-b911-4e459a9199c1",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "f776a71d-2d2a-44ec-b251-1778232acb75",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "576d5190-9e96-41da-b911-4e459a9199c1",
        "cursor": {
          "ref": "a483af1f-9a84-4f84-9660-17a05a06c6ae",
          "length": 59,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "47118f2f-f60f-4e76-86ac-9aecc8f715b5"
        },
        "item": {
          "id": "576d5190-9e96-41da-b911-4e459a9199c1",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "f776a71d-2d2a-44ec-b251-1778232acb75",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "b7e4f201-99f0-4229-819d-aab3294e15b6",
        "cursor": {
          "ref": "9a221bf0-62b4-43a2-b757-77185ad30fa9",
          "length": 59,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5079d6de-c6ca-485e-a1ce-d64e89fd63c4"
        },
        "item": {
          "id": "b7e4f201-99f0-4229-819d-aab3294e15b6",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "a17e5e55-acb4-4fab-9ddc-667a17985f9e",
          "status": "Created",
          "code": 201,
          "responseTime": 87,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "b7e4f201-99f0-4229-819d-aab3294e15b6",
        "cursor": {
          "ref": "9a221bf0-62b4-43a2-b757-77185ad30fa9",
          "length": 59,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5079d6de-c6ca-485e-a1ce-d64e89fd63c4"
        },
        "item": {
          "id": "b7e4f201-99f0-4229-819d-aab3294e15b6",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "a17e5e55-acb4-4fab-9ddc-667a17985f9e",
          "status": "Created",
          "code": 201,
          "responseTime": 87,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "7af8b85a-a25d-410f-a5c0-983723c3bd22",
        "cursor": {
          "ref": "2e85fb67-f864-49f2-afad-b4d516c01552",
          "length": 59,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "bc53916d-9c93-4f18-a296-96870ad59aa1"
        },
        "item": {
          "id": "7af8b85a-a25d-410f-a5c0-983723c3bd22",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c327cc42-4e7f-411d-bf55-9b43508bdfdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "7af8b85a-a25d-410f-a5c0-983723c3bd22",
        "cursor": {
          "ref": "2e85fb67-f864-49f2-afad-b4d516c01552",
          "length": 59,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "bc53916d-9c93-4f18-a296-96870ad59aa1"
        },
        "item": {
          "id": "7af8b85a-a25d-410f-a5c0-983723c3bd22",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c327cc42-4e7f-411d-bf55-9b43508bdfdc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "59b50d04-f5ab-4614-a0d7-5c01c2387271",
        "cursor": {
          "ref": "63d254d0-bacf-4271-8d1d-b0cfff7469d8",
          "length": 59,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b61ef951-eaa6-4246-9b81-e0524a5d9896"
        },
        "item": {
          "id": "59b50d04-f5ab-4614-a0d7-5c01c2387271",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "3f2c69e9-9b48-4e7e-b21e-34fc4556e8d1",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "59b50d04-f5ab-4614-a0d7-5c01c2387271",
        "cursor": {
          "ref": "63d254d0-bacf-4271-8d1d-b0cfff7469d8",
          "length": 59,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b61ef951-eaa6-4246-9b81-e0524a5d9896"
        },
        "item": {
          "id": "59b50d04-f5ab-4614-a0d7-5c01c2387271",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "3f2c69e9-9b48-4e7e-b21e-34fc4556e8d1",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "634f05d1-c637-4d9f-9e48-b98d4cd93499",
        "cursor": {
          "ref": "8e3ea766-c852-4e0b-ac94-203a39af8a5d",
          "length": 59,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "753674af-9606-47f9-91c1-ec0f443a09ec"
        },
        "item": {
          "id": "634f05d1-c637-4d9f-9e48-b98d4cd93499",
          "name": "credentials_issue"
        },
        "response": {
          "id": "838ecf30-c6be-4807-ad70-2d29d8750b9d",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected { id: 'did:example:123' } to equal 'did:example:123'",
              "stack": "AssertionError: expected { id: 'did:example:123' } to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "634f05d1-c637-4d9f-9e48-b98d4cd93499",
        "cursor": {
          "ref": "8e3ea766-c852-4e0b-ac94-203a39af8a5d",
          "length": 59,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "753674af-9606-47f9-91c1-ec0f443a09ec"
        },
        "item": {
          "id": "634f05d1-c637-4d9f-9e48-b98d4cd93499",
          "name": "credentials_issue"
        },
        "response": {
          "id": "838ecf30-c6be-4807-ad70-2d29d8750b9d",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:41)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "expected { id: 'did:example:123' } to equal 'did:example:123'",
              "stack": "AssertionError: expected { id: 'did:example:123' } to equal 'did:example:123'\n   at Object.eval sandbox-script.js:4:41)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda1cccc-5fc1-4773-9ac4-5f23d7347c5d",
        "cursor": {
          "ref": "91444cd8-0edd-48f1-8bf2-4c2d607de306",
          "length": 59,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f699e867-cb46-41cf-8b6e-5eb6d0ecb7f3"
        },
        "item": {
          "id": "bda1cccc-5fc1-4773-9ac4-5f23d7347c5d",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "2265bf9b-158a-4651-8115-84804c5d1d8e",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 679
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "bda1cccc-5fc1-4773-9ac4-5f23d7347c5d",
        "cursor": {
          "ref": "91444cd8-0edd-48f1-8bf2-4c2d607de306",
          "length": 59,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f699e867-cb46-41cf-8b6e-5eb6d0ecb7f3"
        },
        "item": {
          "id": "bda1cccc-5fc1-4773-9ac4-5f23d7347c5d",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "2265bf9b-158a-4651-8115-84804c5d1d8e",
          "status": "Created",
          "code": 201,
          "responseTime": 36,
          "responseSize": 679
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "623deedb-0aaf-4b56-b17d-b82c98161d06",
        "cursor": {
          "ref": "809b3b77-ade0-47b4-a2d1-793baa1fe699",
          "length": 59,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8dd36037-d84b-4ea4-9776-52b618da5fe2"
        },
        "item": {
          "id": "623deedb-0aaf-4b56-b17d-b82c98161d06",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0bfb9357-7da7-4cd3-9951-381fca6fdeb9",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "623deedb-0aaf-4b56-b17d-b82c98161d06",
        "cursor": {
          "ref": "809b3b77-ade0-47b4-a2d1-793baa1fe699",
          "length": 59,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8dd36037-d84b-4ea4-9776-52b618da5fe2"
        },
        "item": {
          "id": "623deedb-0aaf-4b56-b17d-b82c98161d06",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0bfb9357-7da7-4cd3-9951-381fca6fdeb9",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:43)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "587800a1-7c84-442d-bc0b-4e146555f447",
        "cursor": {
          "ref": "fc990d7b-3a6f-4e1d-8400-a28c25a64ef9",
          "length": 59,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9a2596d3-49e7-4d81-877b-416131dccf74"
        },
        "item": {
          "id": "587800a1-7c84-442d-bc0b-4e146555f447",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "58805d48-97f0-4d4b-a193-e5318c8132da",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "587800a1-7c84-442d-bc0b-4e146555f447",
        "cursor": {
          "ref": "fc990d7b-3a6f-4e1d-8400-a28c25a64ef9",
          "length": 59,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9a2596d3-49e7-4d81-877b-416131dccf74"
        },
        "item": {
          "id": "587800a1-7c84-442d-bc0b-4e146555f447",
          "name": "credentials_issue:credential:alt.credentialSubject.object"
        },
        "response": {
          "id": "58805d48-97f0-4d4b-a193-e5318c8132da",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "49958493-3952-4186-b62f-ced21588c57d",
        "cursor": {
          "ref": "ffe49497-bb43-4722-b878-3136d29220ad",
          "length": 59,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bc6a70e2-cd10-410d-8579-c6655e9f7a43"
        },
        "item": {
          "id": "49958493-3952-4186-b62f-ced21588c57d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "207f941a-0e7a-4125-b6e1-d2bfa1417f71",
          "status": "Created",
          "code": 201,
          "responseTime": 48,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "49958493-3952-4186-b62f-ced21588c57d",
        "cursor": {
          "ref": "ffe49497-bb43-4722-b878-3136d29220ad",
          "length": 59,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bc6a70e2-cd10-410d-8579-c6655e9f7a43"
        },
        "item": {
          "id": "49958493-3952-4186-b62f-ced21588c57d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "207f941a-0e7a-4125-b6e1-d2bfa1417f71",
          "status": "Created",
          "code": 201,
          "responseTime": 48,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:45)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "58441727-58aa-4359-b393-fc91838568d2",
        "cursor": {
          "ref": "d1939399-9003-451b-b4cd-b29356820d1d",
          "length": 59,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1051026d-4d28-4792-be05-0d39cb76b082"
        },
        "item": {
          "id": "58441727-58aa-4359-b393-fc91838568d2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ec96c9ac-c921-4a16-9fba-6ca72c218254",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "58441727-58aa-4359-b393-fc91838568d2",
        "cursor": {
          "ref": "d1939399-9003-451b-b4cd-b29356820d1d",
          "length": 59,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1051026d-4d28-4792-be05-0d39cb76b082"
        },
        "item": {
          "id": "58441727-58aa-4359-b393-fc91838568d2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ec96c9ac-c921-4a16-9fba-6ca72c218254",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6f6be8f5-0333-4b5c-a163-96bed067efdc",
        "cursor": {
          "ref": "90ce76ee-8e7a-4e9f-9811-d43e85ccf5f2",
          "length": 59,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d927fcee-81c4-4f59-a82d-2ff22635a2ef"
        },
        "item": {
          "id": "6f6be8f5-0333-4b5c-a163-96bed067efdc",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d7dc7087-7463-4264-aa11-8f4704e284c0",
          "status": "Created",
          "code": 201,
          "responseTime": 46,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "6f6be8f5-0333-4b5c-a163-96bed067efdc",
        "cursor": {
          "ref": "90ce76ee-8e7a-4e9f-9811-d43e85ccf5f2",
          "length": 59,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d927fcee-81c4-4f59-a82d-2ff22635a2ef"
        },
        "item": {
          "id": "6f6be8f5-0333-4b5c-a163-96bed067efdc",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d7dc7087-7463-4264-aa11-8f4704e284c0",
          "status": "Created",
          "code": 201,
          "responseTime": 46,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "79e7bb5e-e596-436c-921f-c343ab8bfe81",
        "cursor": {
          "ref": "984efcd1-bd28-43e1-8400-de54ece7b87f",
          "length": 59,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "63876b6a-3c33-4a6f-aae3-1254063eee41"
        },
        "item": {
          "id": "79e7bb5e-e596-436c-921f-c343ab8bfe81",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "4ec84184-8eb4-48fc-91de-d57f754484c5",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "79e7bb5e-e596-436c-921f-c343ab8bfe81",
        "cursor": {
          "ref": "984efcd1-bd28-43e1-8400-de54ece7b87f",
          "length": 59,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "63876b6a-3c33-4a6f-aae3-1254063eee41"
        },
        "item": {
          "id": "79e7bb5e-e596-436c-921f-c343ab8bfe81",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "4ec84184-8eb4-48fc-91de-d57f754484c5",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.proof.type should be equal to one of the allowed values, data should be string, data should match exactly one schema in oneOf\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "cd1a4e4a-f7c5-4d26-b873-6121a9163619",
        "cursor": {
          "ref": "e6ad7e62-23ae-4e48-bb1b-c8867c0896e1",
          "length": 59,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6568c4a3-bbe2-4df3-a43f-815b8e41e305"
        },
        "item": {
          "id": "cd1a4e4a-f7c5-4d26-b873-6121a9163619",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1454196b-0544-41c1-b1cf-d73cd8ad2c38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "cd1a4e4a-f7c5-4d26-b873-6121a9163619",
        "cursor": {
          "ref": "e6ad7e62-23ae-4e48-bb1b-c8867c0896e1",
          "length": 59,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6568c4a3-bbe2-4df3-a43f-815b8e41e305"
        },
        "item": {
          "id": "cd1a4e4a-f7c5-4d26-b873-6121a9163619",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1454196b-0544-41c1-b1cf-d73cd8ad2c38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "2f1867f9-5496-40d5-bc99-255d1dbe12df",
        "cursor": {
          "ref": "5a87ec0d-4343-49ab-b9c4-86112be035ea",
          "length": 59,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "91001a7d-eb15-46d4-84c1-ed71d5512ad2"
        },
        "item": {
          "id": "2f1867f9-5496-40d5-bc99-255d1dbe12df",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "ffb7ef65-5696-44c5-bac1-1472ed346593",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 10,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "634e24c5-93c2-4b78-ab72-b33475c8026c",
        "cursor": {
          "ref": "94ee689f-8ad3-4d79-874d-95686c1ba726",
          "length": 59,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "701964bf-a706-4d20-aeb0-b7448086aca7"
        },
        "item": {
          "id": "634e24c5-93c2-4b78-ab72-b33475c8026c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b2fe42b0-e6ca-4569-9834-25ed430ac860",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 16,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "634e24c5-93c2-4b78-ab72-b33475c8026c",
        "cursor": {
          "ref": "94ee689f-8ad3-4d79-874d-95686c1ba726",
          "length": 59,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "701964bf-a706-4d20-aeb0-b7448086aca7"
        },
        "item": {
          "id": "634e24c5-93c2-4b78-ab72-b33475c8026c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b2fe42b0-e6ca-4569-9834-25ed430ac860",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 16,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "ea176553-9d9f-431b-94ca-7894fd3310d1",
        "cursor": {
          "ref": "c88265f1-6891-4cc5-945b-1a748e94870d",
          "length": 59,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "dcb7a8ff-317d-44e8-8dcc-fec038911b2e"
        },
        "item": {
          "id": "ea176553-9d9f-431b-94ca-7894fd3310d1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "627db8b7-ee84-43ef-a3b8-fa9d12a1ad63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "648ef67b-4bc4-405e-99d7-8b38e6cd8f61",
        "cursor": {
          "ref": "658b9c0c-27a6-44d9-b327-4987e7cc59ac",
          "length": 59,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ae358c1a-fac2-498c-9c37-37012dcd3819"
        },
        "item": {
          "id": "648ef67b-4bc4-405e-99d7-8b38e6cd8f61",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "e28cc744-a7ab-4860-9602-ec8469fa7c90",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "9dd152ef-7663-4d7a-9684-3a0135b147e3",
        "cursor": {
          "ref": "89f23a9b-757c-4a4e-8b28-b515c2cae5a0",
          "length": 59,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2aff6bcf-b415-4aec-84ce-4e4c095512df"
        },
        "item": {
          "id": "9dd152ef-7663-4d7a-9684-3a0135b147e3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4ffcb9e0-4ec6-4e8d-947b-d21e51aa00ee",
          "status": "Not Found",
          "code": 404,
          "responseTime": 14,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "9dd152ef-7663-4d7a-9684-3a0135b147e3",
        "cursor": {
          "ref": "89f23a9b-757c-4a4e-8b28-b515c2cae5a0",
          "length": 59,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2aff6bcf-b415-4aec-84ce-4e4c095512df"
        },
        "item": {
          "id": "9dd152ef-7663-4d7a-9684-3a0135b147e3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4ffcb9e0-4ec6-4e8d-947b-d21e51aa00ee",
          "status": "Not Found",
          "code": 404,
          "responseTime": 14,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "51a969f2-796c-4b82-8c7f-33880795d7e8",
        "cursor": {
          "ref": "b9e2ebd5-7b32-498d-afbb-1612f265595c",
          "length": 59,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3c691f5d-d74e-4790-acc7-26b3db8be5e4"
        },
        "item": {
          "id": "51a969f2-796c-4b82-8c7f-33880795d7e8",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a256bbb3-8a57-42fc-940e-cf5e9ff45097",
          "status": "Not Found",
          "code": 404,
          "responseTime": 12,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "346551fa-2493-4b67-9d27-f8e91fce2964",
        "cursor": {
          "ref": "1c6a7459-d7f3-4895-a5e8-262bf6ff7183",
          "length": 59,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1e1a38ba-0585-4c82-a1b2-e942d6846f2a"
        },
        "item": {
          "id": "346551fa-2493-4b67-9d27-f8e91fce2964",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9da63920-bdf3-496a-8e9b-402240449b88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "346551fa-2493-4b67-9d27-f8e91fce2964",
        "cursor": {
          "ref": "1c6a7459-d7f3-4895-a5e8-262bf6ff7183",
          "length": 59,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1e1a38ba-0585-4c82-a1b2-e942d6846f2a"
        },
        "item": {
          "id": "346551fa-2493-4b67-9d27-f8e91fce2964",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9da63920-bdf3-496a-8e9b-402240449b88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "16380b7f-4928-484b-b647-de97877a205c",
        "cursor": {
          "ref": "013e4b91-5e12-4d8b-b322-450ba7afdb05",
          "length": 59,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "61f9889a-c003-418e-8aad-88a306456c4e"
        },
        "item": {
          "id": "16380b7f-4928-484b-b647-de97877a205c",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "baa9bdac-2e53-472f-8a38-e9346bccfe78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "b2a2fbc2-62c5-4448-b917-8589df74b838",
        "cursor": {
          "ref": "6fffa727-b620-4fd5-a3c5-b07f7011d01a",
          "length": 59,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0b378fd3-15b6-442a-b840-a44a4c44520e"
        },
        "item": {
          "id": "b2a2fbc2-62c5-4448-b917-8589df74b838",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "006a03ee-19eb-4bd8-af31-1fd31be01e1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "b2a2fbc2-62c5-4448-b917-8589df74b838",
        "cursor": {
          "ref": "6fffa727-b620-4fd5-a3c5-b07f7011d01a",
          "length": 59,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0b378fd3-15b6-442a-b840-a44a4c44520e"
        },
        "item": {
          "id": "b2a2fbc2-62c5-4448-b917-8589df74b838",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "006a03ee-19eb-4bd8-af31-1fd31be01e1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data should have required property 'message'\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "91a55aad-dc0d-4341-8e16-5621e81a9e00",
        "cursor": {
          "ref": "a6ecb8c3-b821-4b15-ab23-c240ef75705d",
          "length": 59,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e5a48c8e-bc45-42b6-ad70-dcb2b2e90909"
        },
        "item": {
          "id": "91a55aad-dc0d-4341-8e16-5621e81a9e00",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "c35f18eb-40bd-4172-b7ff-9482fe97c616",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'code', data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      }
    ]
  }
}