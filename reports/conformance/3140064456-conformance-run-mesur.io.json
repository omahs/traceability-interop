{
  "collection": {
    "info": {
      "_postman_id": "691a6d66-244e-4521-a0e5-6768dd6cf6f4",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e1ceea6f-498c-4d46-ae01-92c10e138b13",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "79b33af3-9104-4d05-ae53-06eff7079d91",
            "name": "Positive Testing",
            "item": [
              {
                "id": "91966c4b-4e3d-4f42-b561-a10cfb2d3a99",
                "name": "did_json",
                "request": {
                  "url": {
                    "path": [
                      "did.json"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8c16076-f55c-409a-aa5f-439b806cc820",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "053ae698-2f14-4681-af66-df60d647f03f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "347c6e56-515c-4d08-82c6-118f2431a44e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b1a878fc-44a2-4589-b080-beace071d65c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "706a59e5-4f42-4844-8bdc-3358fe80221b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fe16f087-473c-4c54-a2cf-1d798eab6157",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f5b321-2f75-4220-aefe-6f2d3dc2f130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cbcce7b1-2794-4f7f-9b0b-8170cfb439cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950710da-ab3d-4502-b42f-fff346e41106",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e16b77f-2463-43e0-bd6f-0bd98ba7ecca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ba1181d-7bb4-47d0-b725-24aee57b2dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13fa24ef-e2d4-4f35-9e64-a3392326a7e5",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77fc2266-e8fd-49a0-8b4b-a760e80b29a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a73dc4c-8ddc-4cbb-b29b-39b1d6b01500"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9b80cb66-7f87-48cc-928b-3d3397ccdbef",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2fb1185f-a89f-4b76-accf-fea6d030c71f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a47937-2fe2-4f81-a273-fc1ddb042071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a8b4856-6bb5-4d7a-9a2f-d9adea057a4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c7f8a4-af12-49cd-9dbe-9e4935036adf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb1392c6-be0f-4f39-adc5-48836d2b3873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b058322-af11-4b81-b3e2-4204ef0d05d4",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cac1ebb-a3a8-475a-a728-b1275d88eb39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e5d65ae-56aa-4ef1-b3bc-a72c6d5c08b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f8329b-a117-4a50-b3ef-f744d7a9abfc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "f897e2b0-35c5-4b0c-bec7-55d710fcffc4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0f69a2dd-2bcf-40fd-b633-58edd9715e92",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a54e224a-94db-42f2-a2fa-d1814252ec71",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6132ce6-a80a-4ef4-907a-2b6a76317d69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "77f3983f-69ad-4e24-b37b-b87dfdcc913d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1fef7acf-7ab2-487c-8fa6-38f8ce2f2c6f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "833b3eae-4324-4a45-8eba-688b645c0369"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d90f1b6f-9767-4681-82b5-fbe961345d6a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "992a1e9a-eb21-4992-bd9c-26146a291b16"
            }
          }
        ]
      },
      {
        "id": "17826546-5a1a-49cb-a4c2-7a7c738930a8",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "28004407-51d6-4385-9db3-66781f91a3da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a556e244-1c0d-42f1-b702-31a69442e2d1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8e6e70cf-1f24-4959-b536-c815c8746766",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ef84e0-a4dc-4cee-9895-0dfeb4b85e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4470a160-468e-406c-af0e-b5bf670e72d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293fc125-c775-48d7-892c-20a4db0a608d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential is required",
                            "delete rawBody.credential",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f22148e-975b-47c2-a51c-9fcfd27ed3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90dc09fa-759e-451e-8a91-1eaa66e3f177",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "255b2df7-ec8a-4adb-be2e-6c4f271c9432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61ba2ed3-3255-4758-ac0d-318eeb3fcb0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbbee54-ceb2-4119-a25d-e91c99a23c95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context is required",
                            "delete rawBody.credential[\"@context\"]",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dd0d8d9-65df-4291-8b4f-bb7182b88bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56b0f97-5c03-4673-bcf0-dae87c6dfd98",
                    "name": "credentials_issue:credential.@context:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520ecaca-bea0-4712-86ea-aa62059734b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4d41123-f866-4cb5-84f9-6409e0a8af33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10a6550-e075-4ebb-82f7-5a05a5879620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context must be an array",
                            "rawBody.credential[\"@context\"] = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9bf86fd-a349-44ac-b2aa-12dacca8e666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c38bd00-823f-4f66-8200-3e34f6ab84a9",
                    "name": "credentials_issue:credential.@context.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b599641-d174-4ae4-84ca-3cbeffe4275f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac05d6e5-5ecf-4803-a60d-e9fd0c2834d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b7a8a7-dac9-41a6-98be-24e0f52bd196",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.@context array must contain only strings",
                            "rawBody.credential[\"@context\"] = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64104835-e698-45cb-b1ad-7c6be6099b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e6c8240-faa4-4c8c-aa9e-6e8ca875cd19",
                    "name": "credentials_issue:credential.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f5a68c-7dae-4e6c-a891-b09ac00bc30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eafe8b2e-eeed-4c5a-bc65-651b910959c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913ddee3-f7fb-4229-94d9-0c40e8b26c3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.id must be string when present",
                            "rawBody.credential.id = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b907037a-7261-49f3-a58d-5d355c4a06e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c82694b-1e6d-42dc-af79-666d9af11824",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38714775-6d66-4459-b474-fdc5764fc9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb041683-d4a0-4f5a-8a65-380720671246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb7e8c3-7887-4173-ab38-2b15576c6b29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type is required",
                            "delete rawBody.credential.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9a1ce2e-6079-4772-8b8f-faa0ddbd4be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c07074-52aa-4283-85ee-88a3d610c344",
                    "name": "credentials_issue:credential.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21604753-c195-48be-95d8-c397ae9843c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a9ec03b-40ad-4983-a3b9-416b6971ea5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508ad4fe-5cca-469d-a19f-37646ed1b6db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type must be an array",
                            "rawBody.credential.type = 42;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6335e5af-9962-48ad-84ab-8078824ef3ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c02a95-b188-4476-be1a-65e27994dc5c",
                    "name": "credentials_issue:credential.type.members:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdc08b0-5cc9-4de0-9dcc-7fc04a23c575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec92316-c4cf-42da-93e8-15c0f2d49636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45db1373-590c-4e32-9193-b04d1785b98c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.type array must contain only strings",
                            "rawBody.credential.type = [1, 2, 3];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8665bd2f-3dd0-4cc0-8c83-7897ca903d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10320cc9-629e-4d5c-add9-fe333c6781de",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5423a0f4-c605-4665-bcf7-d6b8e598fd2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f0f54f2-8739-4390-b115-f42a3d6cb0a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979ae574-5e50-4482-b53d-8b1405a97193",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer is required",
                            "delete rawBody.credential.issuer",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5365b838-7a32-4759-9fd1-caa48cc87e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d6fbca-3a0a-4610-80a5-4a983a8a5644",
                    "name": "credentials_issue:credential.issuer:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "207ede76-dbe3-4b9a-9379-3863cf7f9544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fa52382-776a-4262-a79b-fffb4a65b332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989d6c6f-69b7-47ef-93b0-ac9650a9153f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a string or an object",
                            "rawBody.credential.issuer = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbe8f6e3-73fe-49e5-aa3d-c620c5646114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86a9949-9421-4fcb-bf51-47ed33ac6d69",
                    "name": "credentials_issue.credential.issuer:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb1775c-0cf4-41ae-87be-560d299ca40d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d23c08-e26c-4880-b0a1-fef6620b6043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be7faf9-1dd0-4e33-ba7e-0ec9ae66fb42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be a URI when it is a string value.",
                            "rawBody.credential.issuer = \"not.a.uri\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "49b9604c-89eb-4813-a959-e80dc19698b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e0d618-67bb-479a-85b8-055aab240ffc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a296030-27fb-4de7-be5f-5bee8310a3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c05a3b33-d852-428d-b054-09a40b712158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa7537d-2542-4c3e-8e13-3f1e38ba9c3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer must be known to the endpoint.",
                            "rawBody.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "446b4459-77cd-4e17-a763-ea74439cb684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6513922a-5960-4e2e-be77-d03593c2c85b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b8e3b2-886b-4e48-a731-99324bd0bd14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9c5c506-1432-48dc-b028-83c46c7cc9ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082b19e7-8a46-465e-8242-09ff5520731d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id is required when issuer is in object format",
                            "rawBody.credential.issuer = {};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "615eac8f-0017-4ae7-a0ee-701fc021d1a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3f0100-402e-45d4-8f3b-01f2fed60dd9",
                    "name": "credentials_issue:credential.issuer.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "652e4895-5c78-4588-b716-764b898bfe00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b9aaf66-8208-473d-bc64-820b858aba88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321d2699-db84-4989-b100-81e9eebaa058",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id must be a string.",
                            "rawBody.credential.issuer = {\"id\": [\"arrays are invalid\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6da64fc-be25-4b19-9715-e5228d85792b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9add5e-1519-4e62-b558-491ef97b5924",
                    "name": "credentials_issue.credential.issuer.id:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c189767-70a6-4eb3-898b-f93cd0ecb329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "014ea96f-1773-4cdb-9f72-02d921aed47f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea85e16-e2cc-4552-83d9-7f933b14c1c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be a URI.",
                            "rawBody.credential.issuer = {\"id\": \"not.a.uri\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "d14264d6-5873-4acb-8067-73e1c5e7fa9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8895ddb6-c888-4ea6-bfbe-0e5a83f0776c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32943377-a9e7-410a-a9cf-c75b9987f3ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be5898b8-f0c4-4940-a271-afca4924d267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999a9d1e-4c63-4f7f-8692-ca794747c59f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuer.id string must be known to the implementation.",
                            "rawBody.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));",
                            ""
                          ],
                          "_lastExecutionId": "780317a4-d6bd-43a4-a03f-b4f0bf514d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c222220-b0de-4e8c-a01d-f6012816cf33",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1903c60f-4840-4fe7-bb50-4931fcc9bcdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea817b2-ebbb-4f56-954d-c6ba49469833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea3d4ba-02aa-4a9d-a3a7-e6935a9f463f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate is required",
                            "delete rawBody.credential.issuanceDate",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a5ab1c6-ebf8-4c61-9b1e-806e2a64b673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e043971-df53-47c9-8676-1e917233e2e1",
                    "name": "credentials_issue:credential.issuanceDate:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5fa347-720d-4a57-9736-d2947616d5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6c2d162-3204-4945-8350-7915c3c6de93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526898aa-3f9a-455a-8e0b-3503a7979951",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be a string",
                            "rawBody.credential.issuanceDate = [\"arrays are invalid\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2d42aec-c415-4875-a6ce-99fd5acc7f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6beb82cc-a1da-491d-bb95-eb1f890914de",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe031f77-63a4-45a5-9ce7-4fd61bd689ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0506ae1b-c88d-4281-bab5-c9ad0bbdc9fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "104709b8-fada-4bf3-ab37-14ca922df77c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.issuanceDate must be an XML Date Time String",
                            "rawBody.credential.issuanceDate = \"not an xml date time string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a52be36f-05a7-4833-b9c4-859051b3c092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6beb2212-ed7d-41a5-97b9-4334a7c3c9af",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db083d2c-f33d-4686-9425-00eb6ded602f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d012c48a-a0e6-4634-b6b1-87a2f2e5caee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e231dbc-e25a-4f6a-8c93-f4dbb503ecd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject is required",
                            "delete rawBody.credential.credentialSubject",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57cb4a27-0b02-4ed6-a676-5d755e354744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df39a25-4188-4f6b-affd-018f4c0d9a0a",
                    "name": "credentials_issue:credential.credentialSubject:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f94509-1235-46e2-ab4c-4262eaf5e51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e4935a7-7d1c-4d19-9432-bffa2249986d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a986e2-791e-4289-a422-55056c5fee06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject must be an object",
                            "rawBody.credential.credentialSubject = \"did:example:1234\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8608f9ff-62d2-451c-80b1-1556bacc2691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e5ed3d-03c6-4ba9-bef8-2b92fe81264f",
                    "name": "credentials_issue:credential.credentialSubject.id:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ba11e7-2dff-4b81-a199-1aba76d2ec39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d823ced4-0be9-4b78-96cb-abb4c0c830ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb287e2b-54ee-48a3-8b0c-95b5da5d964d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// credential.credentialSubject can be an object with an optional \"id\"",
                            "// property that must be a string when present.",
                            "rawBody.credential.credentialSubject = {\"id\": [\"did:example:1234\"]};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ee19b85-6724-4f65-b404-0abb63f883eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f3592d-d8d7-4fa3-ba27-1e72e177778a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a60afa-a020-492b-a67e-1bfe4219c2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b43eeb84-dd5c-49ed-9a31-e458f9030a7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f40d33db-245f-4b9a-abf7-34ed1a89df04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options is required",
                            "delete rawBody.options",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d73e688-49d8-406d-9349-047f1b0a6485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0bf42f-6db6-4a9e-b3a9-a8aa02213f63",
                    "name": "credentials_issue:options:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5275857d-3888-4327-89f7-a18ecccc67f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f5f0ce-8e55-4c1f-baff-782ac204066b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c91705-f805-4839-aa62-54c3421eadcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options must be an object",
                            "rawBody.options = [\"array\", \"element\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df23aba3-8252-46d7-b044-80b630be68d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3deac9ea-ece8-47f5-810d-47c406d02444",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b167df-db2e-428f-bbfd-a87065595d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc466c28-0289-4321-8ad7-dd5bf4b7c989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0ab54a-01b4-4b49-a984-9088023bdddd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type is required",
                            "delete rawBody.options.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27810b72-9358-404d-adb4-ceca6249c8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7df69e-a20e-4b1b-b11c-a3e3afedeb0b",
                    "name": "credentials_issue:options.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e87827-573d-4ad7-b47d-93c47b97d206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1644e1-afc2-4efe-b2e1-54237279e7e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60812ef4-4047-4bc3-bdb3-fbdbecb2a002",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be a string",
                            "rawBody.options.type = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97f86fab-c8f2-4355-b227-7a6105689103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc41229b-0bd1-4926-9852-6e944f429dda",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f09475-6661-4950-abc4-f8ff46ea5375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c211ea03-a8ae-4873-b078-dc6e33ed3c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4f0bb1-843e-424b-b928-6d89f1b2fd9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.type must be valid",
                            "rawBody.options.type = \"invalid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ca465c6-5935-434e-8145-d2387bae880e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998bc2c6-b5c1-4b8d-b694-5fa4740383cf",
                    "name": "credentials_issue:options.created:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{access_token}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0700eb8-2d43-4d04-b248-dc7ce934b431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e4b6b45-ca5f-4e93-905f-3bfa9a6cf08f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b94b9d-39d1-4c7a-96c5-094f1ebb5a0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.created must be a string when present",
                            "rawBody.options.created = [\"an\", \"array\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dff2e6b2-d439-4f79-8198-70258590ec04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057e113a-8302-4f51-876d-c2d6e97d0228",
                    "name": "credentials_issue:options.credentialStatus:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc3cb2c-d7d3-4989-a8be-a8bf36046228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96914245-0af1-4db1-bb2d-edd72926c4f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e5027c-bd74-4666-9fb3-dc23443a27ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus must be an object when present",
                            "rawBody.options.credentialStatus = \"a string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9955920-d72d-41b9-a062-1f9848da1dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b460dd1c-eccf-45ba-93e9-d2d20c776a40",
                    "name": "credentials_issue:options.credentialStatus.type:wrong_type",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "032ba7c6-2b8e-4954-9d43-90544eea0472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dfd73f5-8be8-487a-8cc6-cdd430fd2ae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766ec8db-0e9c-4a69-9317-306238eadca0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be a string when present",
                            "rawBody.options.credentialStatus = {\"type\": {\"foo\": 42}};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d1b067b-fb9e-4786-b51d-5e4ff48338cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ec6221-b661-4bb0-9a47-2217310e51ee",
                    "name": "credentials_issue:options.credentialStatus.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff18d073-08b9-4783-9459-d7728acacea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "af8ff7b4-2c3a-4aea-9e24-50d4d62e5349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ff2473-396f-4e1a-a1f2-aa1e95e41f01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"rawBody\");",
                            "",
                            "// options.credentialStatus.type must be valid",
                            "rawBody.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e7ccd1f-c594-42e2-b764-bea3cfe9871d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6d636fbb-ea41-40ee-801d-b191f533d3c2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "475339fd-713a-41ec-9537-20b84adec979",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "478a43a7-2c90-4438-8fe0-10b45d5a7bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a281584-9831-460a-bfa0-8f8ef81e83f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741c82a5-99c6-44b5-b28a-5193e886ca11",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "69c2927c-df09-47ef-a27a-8d1b6010b815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db44d99-aff9-4784-8a6b-750c74563d2d",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97681da6-7cb4-4fe6-8752-8650e99e8da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "719d9f5f-7d89-4da1-aa98-959785e3148a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "118126d9-8bc8-4449-9acb-12520bad63e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "486008dc-9002-4fbb-9d36-aa8ee4f92188"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d996d4d-bd11-47f4-8cef-0fbc773b2b28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60593f6a-4d14-4e89-866a-675eb08f9adb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d89d5ee1-d402-4ca5-b624-c3d0ec5ca43d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6f67ecf-c556-4b1d-a526-77e8f99ef477"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "62ba08e8-c012-4390-91d7-1c24cc9286e0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5da0f7c3-5e32-46a4-8f41-491991d905e6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "520e94d6-5d1f-4176-be6d-baec29d84fcc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "117f0ec1-ffa5-41ed-9ccc-4b8273607ed4"
                }
              }
            ]
          },
          {
            "id": "90798ffc-94dc-46ec-9b1e-977041bf9178",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1aa1c442-698f-4787-8d65-adc58009d891",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fdcd42b-4150-4ba3-a28b-b5062e870807",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json();",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json();",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuance_date\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "01bea27b-7129-4b23-8365-0b4df479c1f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3921a579-dcdb-48e7-a1f3-4d1303359d67",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2c569f86-4cb8-4522-abf0-1a88d120eb29"
                    }
                  }
                ]
              },
              {
                "id": "f95cea85-ac63-445a-8540-28843e9beaca",
                "name": "credentials_issue:credential:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5da23436-825c-4d86-a106-2b847266cada",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "09933a17-bb15-4908-a50b-dc88aecbd1ab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b35c72d9-8e1a-4260-8d1a-2462ac41542c",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.id is optional",
                        "rawBody.credential.id = pm.variables.get(\"credential_id\");",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "8d542685-b8b2-4073-9a57-2e234a7038f1"
                    }
                  }
                ]
              },
              {
                "id": "e3e82502-b5f8-4334-9550-7328b3b440ed",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7222b13-ae6f-48be-b718-de05858ce89b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json();",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"credential_issuer_id\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f73ebc90-f889-4e39-afb4-205d3d1cdc76"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92f61990-e821-45b2-8d11-14ad358ef2ac",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.issuer can be an object with required 'id' element",
                        "rawBody.credential.issuer = {\"id\": pm.variables.get(\"credential_issuer_id\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "42adeaf5-04a8-47b8-be36-72e57ec044f1"
                    }
                  }
                ]
              },
              {
                "id": "cf68f734-0cdc-475e-b176-c99fb40f688c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b7d2bf2-b0fc-40b7-b60b-7f83a6e1f7ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json();",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credential_subject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2972ce9e-f028-4eeb-8079-cb2f564ff4a6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9a4cb95-7150-4068-817b-fa5ecb0c7d78",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// credential.credentialSubject can be an object with optional 'id' element",
                        "rawBody.credential.credentialSubject = {\"id\": pm.variables.get(\"credential_subject\") };",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "c4377c50-6e9f-464d-ba95-5415c75e54eb"
                    }
                  }
                ]
              },
              {
                "id": "1c3b2df0-a54e-4743-9e75-dc0fd7f94abe",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2bbe6a7-faef-4626-b829-b456f12026f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "73a32467-6eb6-4e99-81ff-5636c4d34d19"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5750b555-6955-4965-a163-06ba5be40898",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.created can be an optional string value",
                        "rawBody.options.created = \"an arbitrary string\";",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "2a803b9d-70d9-46a2-92bd-ba6c3a08d481"
                    }
                  }
                ]
              },
              {
                "id": "e8a647f4-2041-4231-a89a-d3cc2e83f1c6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f6d841b-9574-4327-b0c6-82dd4ee707e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8c6cfe50-308a-4f05-8205-8d191ba242c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aaaa793b-bb50-49a2-a01b-06f64f810bfb",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus can be an optional object",
                        "rawBody.options.credentialStatus = {};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "f59d9fb3-7e52-472f-97d8-743babf16152"
                    }
                  }
                ]
              },
              {
                "id": "c7e71d3a-b03f-42d9-a80e-19c7fea625f2",
                "name": "credentials_issue:options:opt.credentialStatus.type",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1602af84-595f-453c-ad16-6dcb67ec8d03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e9d1689-307c-4c3c-98c9-3ee1c3103dc8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "830fe02a-a22e-41b5-90d2-cf90b3b4e685",
                      "type": "text/javascript",
                      "exec": [
                        "let rawBody = pm.variables.get(\"rawBody\");",
                        "",
                        "// options.credentialStatus.type can specific string",
                        "rawBody.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "",
                        "// Request body must be serialized before sending over the wire.",
                        "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                      ],
                      "_lastExecutionId": "47258c3c-9b40-4bcd-999d-f80b1502d899"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "661efdf5-3de3-4450-93b5-2d5604f3dbea",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5d312db3-cadb-402b-b540-315550c942e5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ef53f70e-d361-4315-bdd9-684be132801f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "305f3c03-e8e4-42fb-a9e8-c579793b64cd"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "475d19fa-df5d-477e-a340-ca9102f094e1",
              "type": "text/javascript",
              "exec": [
                "// Raw body should exclude all optional items and should contain",
                "// first alternate version of any 'oneOf' elements defined in the",
                "// OpenAPI schema.",
                "",
                "pm.variables.set('issuance_date', '2006-01-02T15:04:05Z');",
                "",
                "pm.variables.set(\"rawBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": \"{{credential_issuer_id}}\",",
                "        \"issuanceDate\": \"{{issuance_date}}\",",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"created\": \"2020-04-02T18:48:36Z\"",
                "    }",
                "});",
                "",
                "// Obtain an access token with the required \"issue:credentials\" scope",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Obtain the credential issuer ID via did:web resolution",
                "utils(pm).getIssuerId();",
                "",
                "// Set the credential subject to use for testing",
                "if (!pm.variables.get('credential_subject')) {",
                "    pm.variables.set('credential_subject', 'did:example:123')",
                "}",
                "",
                "// Set the credential id to use for testing",
                "if (!pm.variables.get('credential_id')) {",
                "    pm.variables.set('credential_id', \"urn:uuid:{{$randomUUID}}\")",
                "}",
                ""
              ],
              "_lastExecutionId": "fabc360d-5c69-45b6-92b1-3b92e3761df8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4bbec320-1864-4230-aab2-e70491b5cc59",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "66e69cbb-1f4b-4695-9a70-40197f40ada1"
            }
          }
        ]
      },
      {
        "id": "fb662a02-d518-4c6e-94fd-162ac6300efc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b0222470-80c4-456c-b89e-b29b62273dbc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c863fe5-5d28-4274-807d-f01cbfe6863c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc16d285-14b6-4693-aed8-e3f5d0e2467b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0bc468b-6de1-41de-b54f-6292cc18bf6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3cfcaa1-bb28-4a8a-bdff-ee09980c171a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8cd99f-08da-4ced-9d4e-0076716700de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1b53a0a-c278-4352-a535-da0f9ca3f121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b588f164-9cbc-46b4-b88f-05b99ad0337a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be15bd9-68e3-4964-b1c6-e29a01278838",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6adfb812-4390-4015-8851-3d3fc77238d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc596c57-4cba-47d1-8322-5b86d6aeeeaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8269da8-9e76-4328-9863-fc84355d4039"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1806658d-fc2b-4e1a-ac04-b9d2314c9694",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65bd8543-e016-4a62-9210-1a1e244f149a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dad0f1fd-8a63-4cad-ba67-88013390e6d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2209b677-c4e3-43c7-8d80-b2c497be255c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0293906-af55-46da-b884-df99bd8f22f2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"update:credentials\" scope",
                "utils(pm).getAccessToken('update:credentials');",
                ""
              ],
              "_lastExecutionId": "512e894f-2426-4b7b-85d1-e21076adf24e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95970783-8183-4b12-bb97-20d0b87515c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe9a0fe2-b958-4c44-abd6-9be9c03e5433"
            }
          }
        ]
      },
      {
        "id": "4d650513-6e43-4078-9600-d5e85a4be7de",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "0dc397e8-b20e-4b84-aa3f-33ee5b0f8715",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8d7f849c-a881-4540-946e-001397411829",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dc0cfd2a-738f-42ea-b6bd-f63a0de5013c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4c223c-9a62-4444-b25b-4926eaaf2792",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66699f34-e3e6-4a79-9c34-326bdce62a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1046551-535f-42fa-87b3-ca49d1d3a7db",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e667c33-171d-4e59-b0e6-d693d22b5402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f4d50e6-51d9-4e9a-9517-21230d364eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e709ed-d863-4b4e-a825-be287036fd9b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32a4132-20b3-4216-8b0e-7abcdda8a82c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "448772a0-d56e-4aba-a9bb-af68cd50d77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e17052c-f747-425d-bae4-70f9f4c53574",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6d2050-a425-4697-98e9-24d655ee7ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b36bd00-be54-4923-bf64-b9048e9ea61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35331a1-8fa4-4720-95f9-eeb3fab861f5",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0396eb92-b312-4c84-91da-3d689429b2d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ce5752c-59f8-46e6-85d5-7a5ccb14ff2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c543e4-2e7c-4e5f-b234-bb7510c5ceb3",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4875291a-a44e-43b4-8861-ff90b2c24dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b4c5793-263a-436b-93ac-425f8c6eed35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "384ec854-dde8-4526-a0f2-bbf937341a49",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03dc0a9f-ee45-4e5f-8b78-f3c65d813cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65dea7d-6f72-4c03-b018-7ed62207a1e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5344469c-4f19-4e02-9313-7cdc09b44bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dea79b0-37ad-4f67-89de-71f0c9bb1145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7302920e-40e7-4335-bb41-ffaef2edefa5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76f1fe5-4c83-40b3-a533-94538e944dae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ede3d8b-bf5e-4c5f-b011-4278c1a90099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83dfa5d9-2b59-4bd3-b753-be956e464a51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36b47edd-6dbf-4385-bc2e-48172261e6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3bbaa7-6165-49df-97e5-37e06457f53c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997269d3-a00f-4091-8ae0-57d042b7b6f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "592dcf4f-9efa-4760-a9d6-ab3b933e0057"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5177def-a3d9-4177-9ccd-7076e9c16400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5214984-dab5-44a7-96ac-df27b4cdd9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b84bf56-7d07-499c-b1b6-1892e9e777f2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5220729-4ba1-4bc9-9b81-2a934bce8b3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b026677-5f31-42be-b655-372e46a30391"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef80085-c65f-4a47-9aa2-3d793e022c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e9606ce-6bb5-46bb-a3ee-763ef8915b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f88f1d-0153-4548-8e91-86cda114b9f5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zF1sQbNclnV5pE5MfuXqMaTVBquwie4ctwzSdbC_LJ1Lx5qRK6V-y9wl5oTvN_GpuOvMIvlG3kQdjgqL3GBKDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3f17f5-ef54-4c7b-9c86-67564a3868d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f407b66f-88f4-4765-a355-bb5832678286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa0cc3c-b428-4f86-8fbe-690b57e555a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "043c5e44-d524-4539-8f2c-960319119c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a2f0bf-68d7-4793-8f70-33f337cbb502",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4207e32-463e-47ca-8834-a995692bb075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c03a4a1-4a79-4deb-ad25-9b52bfb3572a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fed1483-adf9-44ec-941a-25e2a494748d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f043da9-ef25-437c-af5b-c9522ab51780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b4b3b5-31dd-444e-8535-6f7eb5fc1a0c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74e4e84-6894-4dfa-838a-912ad58c2ae1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d386781-998c-4da0-b4cd-312a8aeafeb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "288de32e-1393-4648-859a-c3d77d584c52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eba83b4-b1d8-4aba-81a4-0cdcfa5c7fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b641f476-f1c3-473b-90bc-e33d6924f6f3",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f613a87b-9b85-4e92-a451-18d85a66e2e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "905c93de-1626-43be-9e08-0e2f4139a1f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abfbae68-b7fe-43bb-99ff-9df2a82a23c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4646d78-c9d6-446f-8700-0bf935d5798d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8990332b-4408-4545-a1e9-f194e4095f30",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f31624-57d8-4d81-959b-ac9e0c00864d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db2e7799-f022-4d2b-a7df-fa790b8d798c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "743f8d6e-94e1-47ea-bceb-f79f389b400d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a23b8488-1fb2-4077-b0e6-d07cbdab9fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07305d6a-0449-4b2d-9074-61558749e4f4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf47ac0-46b8-4c08-b36a-ad595b113653",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87a7699f-ae42-4414-b16e-fa4e80ca9f24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8f0559-0b96-495c-9022-a6a6db00b448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc375c86-9f7f-44dd-8602-42973e473a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5253dbc1-037c-46ff-9327-7679d5820d77",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5aadf3-3c03-4c3d-bfa7-0655c8eb624e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884acd5e-5238-483c-ac47-16144d29b6e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a190bf4e-5fef-452d-bee9-8679713703e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "191e5af8-3915-41de-bebc-224bfc181a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb5826e-dd04-4548-a0ca-e81d66da2e44",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b502c6-050c-4614-af8b-7fcd98efc5ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb63ccb8-587f-4d0b-8368-5f44f53ed568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b0db33-f818-4f80-ab72-21fb9b3b47c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35f3096e-4ec3-4fab-9c96-cbabfa11201d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edccf162-1110-4d30-a033-252f94b98e88",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": false,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5828f32d-360a-4a5e-a895-7aef01ffdd1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e44696-fcd5-432e-99a4-a5f7df4b7389"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5327a8-9b50-4d8a-94c1-a280c3a39f87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9fa313b-5f98-46e7-8a05-a72f5adcf9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b0adc3d-6155-477b-b3b1-ce5317525f72",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": 123,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a9fbe0-bac7-4e39-9bdc-9b8c03cbc353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83a3a243-558c-4dcb-89b3-09a335d1a15b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27a9f4b-5562-4781-b0da-09ade9bf05c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878c24c8-c6ff-4339-b381-2eee742c613e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234e7bef-9a06-465c-90f1-26264ebbdddf",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": null,\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ff9649-6f55-4dd7-bb1a-befeb321695d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded6fe0f-3484-457c-93b4-ef2d9069a5b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b433069a-a061-463f-987d-0cccf2a3d800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9586d68c-8dcb-4c5f-9426-d9a503a42e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203e1f90-f6af-41ee-99c8-b97da4377583",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..5J-iTBtI5WNIe9L3kLF22cjjDx6iQuJAgl6yYYoIGMC-X_crKNlSlB5bRJsrb2MV-NDlWMtHe0grtMqRG1N0Bw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25307108-4b0d-4b98-b4b9-9512f7f64dc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "049e6129-af16-4896-bac7-0d6167837a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f2a83e-a866-4e82-9473-b2a9b8875485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ff3dd7-c700-4853-92d7-6eb4b0ab2918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd573614-d765-460f-af35-eb4ecf689fd7",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f74b05-358a-484e-a52e-d03e0137086f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9752afac-5692-4251-bd09-2a02fae62c10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d8ca25-43a2-4a16-a693-93cb9c50a23d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bd7b62a-67d9-4301-bd78-4de891772808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd4b739-f7b2-41bb-9066-da6e412060bb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d17151-489d-4c9d-b718-a4e399260c68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24ee4834-1396-4cc7-9585-8d4662579130"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f27671b-4227-495e-883e-e685a00fd5db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dcdae21-9c21-4ef1-ba8d-330545bf2f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acbb0dd9-c48a-42c5-8664-65c5ddd11226",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f221aa5-b3cd-4ccd-80f5-bc508c4609b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5412dbe1-1338-4310-8ec0-71a5dee920b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b15c39-7391-4421-a0b9-c59a037867ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24ea4fa0-2ea2-4a2e-a7f3-61ddc2e33dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7816b39-e7ca-47a0-bc21-edfb9805da57",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5894a4d8-921d-45f1-8708-aa3add53a0e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9abcaef-9f0c-4f61-9973-dcbe133490ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42199f9-5977-49e9-9532-c3429a4961ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af288fdd-5033-47bf-bc48-f95088e862ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f76c0f08-c902-48ed-91f1-4a30b42767ae",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e370ba7-f4ad-44a1-baf9-dcf56265d71f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c42ab495-24e7-4259-bd76-78aa023afb70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b28d139-24bc-4af8-adc0-16a3ac549c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "014f7d0a-c143-4cf8-a66f-68b4451a5c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7faa458-ce2b-4eb1-ad2a-17d5faf49404",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372af7d3-5b1f-4462-ba75-0df2c2ab62e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f898a14f-03ae-4224-a9e5-3f85783d9a7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "975f9b96-bd15-48ee-84d6-d0af53d94253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb85b6e0-0c99-4d64-81e2-7f20911afeb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbafd983-c114-4fc8-974d-2dc30fe8e3f6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3aa10f-5626-4533-9f37-005b37d55dcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08cab902-5b40-4939-a40c-c9452e3a2a5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf930e94-e890-4bd6-ae0e-1ccb31ead068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4cc5fd3-7a0b-42e2-8271-d1fc33b64546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c675a6-d69b-49b4-ac03-423a76f90ed9",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "149091b8-0f72-4174-9bdd-edb5434b7f2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6b669fa-8e07-4ee2-88cd-b46c878fd2a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6733e4c-d31f-4c46-afca-e547ab28e915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b20a66e-7dda-425e-a6b9-b10555e6ee0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583c5c3e-3c9e-42fb-b1d7-dfe3ec17d981",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ffc57a-44cf-4c65-8281-90f2ea1e013d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4005d442-34f2-4f80-9fc5-856ad397336a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f2e68d-9494-41ca-ad3c-0f8288a7ad16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff11485a-33b0-43a4-bd10-95fbf16f95dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40327a8a-3379-4993-8af3-1a1ea703d030",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01932e7e-e875-413e-8d78-3224fded035b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aed29d4f-e284-42bd-8b97-238a547e56c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7389b131-f7ce-4a43-96be-db6aacbcdcaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22f4e295-9602-4ff4-b2a0-b0471041973c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe25450-3d9d-4471-8710-38d16ddf4960",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79ee28c-71cf-4551-a49d-5ba1e84af925",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa3eddf5-1836-40d1-a664-d0181cb6f71b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "566c079f-57d7-4f33-8df1-93df3fb8ded3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b08ab8d-cbb6-4bd6-9445-eca4a8750d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0682343-b3a0-4b7a-ab7a-35b8edf3632d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b1e062-1100-426f-9179-3669731d8988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9f24ac3-7066-40cf-9b01-0cdd1ab00899"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7525d3c0-944f-48a1-b107-d66f5554f149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78b2641b-c57c-4f7f-ae77-50c82624d656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0bc58a-0067-4b90-a81d-8ab1796cd6d2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x7a3s_8HfmUqGT6SDkktN-jeRmBR2xQ_9tOhJx4kEG3SCsRTySfDxya9yy57LNv__qbY1eMkm9SNrwdYiqlBAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e49dcd-d368-43e0-ab62-0532ad909471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5186c301-0fe8-4524-9606-e6f9c8b1f28d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2829ab7a-0041-42a6-8312-bb5f50513c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a5662b9-6cab-44b8-8c45-d71509db836f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0693e077-79e2-4fae-982a-128809ffb924",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mMaPSvG48oEf3bv0t-6eLR3zvU3_BKoRIkgzkuZfm8zvjqbI7iy05D8k1mTeoSZEw3xYV-_sH1rChqGmmp7KDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a22f0c-dc47-4b2a-9cf7-e31d827fadd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea37abca-656c-4f35-99d2-ebbb7af0274b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e2083e-3778-45b2-96ee-24eeed1b943b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f9078e-89a7-4657-87aa-2c022f6b8509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7686bebf-5932-45dc-a92b-9cc63901735d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..rAVfo-Gnj0vUX6yDAr7pslI6XAAyF2LHTXpiZEmnH5Hb4RsKcmDZZawaLSCg931y1cBUgZ1PQvGbJEdb094ZDQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0532bd07-2845-45df-8f02-833d1d63745b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b87a45-32ad-4969-a742-499f733a51ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c45a5c-5fd0-4563-aeb0-8cf059c243e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "025188e8-f4d9-4469-9fb9-b49e7f3ad349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb0b8c2f-8777-496f-8d2c-dcbb4af75628",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pq8DsjUrDW8TnVRuS8CwfW5Y4dnqYcGsGryNh1gi-BW7vK0_f3gcnDpwJ0HTiHuNm_AyIVWJUPC2ZQHeiCB6CA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617f842f-1dcb-4245-92fd-a60c9f791268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "759886ad-9b8d-421e-8564-8f611f4f48d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0d4355-4814-4327-8a7f-c7da3677e952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9dc1116-33f1-451d-8a3c-a9a4423b4190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc76f32-4778-4a9a-b3d0-ef5b517ab0d4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67bc950f-32b3-4c9c-a938-019489cb7324",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c941324-1671-4967-ba08-d48724b9d527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "797704d7-d7e8-4545-8803-d06dc103b0f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2789ff01-8a33-440c-8434-4eb0c54e848b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b417077-d872-489c-bc04-85048cdfe481",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..vv4qa5LGRlgeMxW5G5VjEKDfjKKosQnvpx6oapYDlfUSWVagQsDoDcRmkotKzFHDcTh-opjGLp__agL6_d4OCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754fc96a-55b7-488a-a3a3-47a12c4a8bb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebab5fca-1e61-4831-ae5b-c9bb45e234e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f6f8663-071d-49ac-b9bd-da6025690e9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "017380e0-5a58-48aa-8018-de974e08fe31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f15000-3453-481f-b66d-36a4c2656133",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TTwcmWS6_0_t8XPlAGXbzWVSL_dL7OeYojY0FZz1WXCFvDfeAQtMh3dcIxuCeDqON6St3PODGfxluO_q1vWCDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc29860-02c8-4eae-bc4e-621197212c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8cd36b3-9249-4e5e-acf3-604654443d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "955c4727-1f85-4c4d-a7be-2c47ec0633ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d605e343-25b2-40ac-957a-e430676bc13c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a74848b2-7892-411b-ade8-3b21a4341ffd",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..wpkNYYEOCjKMWm9xTYNn0J7IgXZQbbkEoohMQbloz_Zxb15UVu6DqiqsENotAeHvlRWd7RH2O9v4FwWBeqvPDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0b47b9-f71e-42dd-ad71-9e1438616607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f62d8a3a-5f80-4125-8749-8a3394374cf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f38dd73-c402-4d89-97dd-478469fc66b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45bb6c9a-c903-45aa-b9d1-70abfab3d573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e388840-5c09-473d-952d-90e379bf98f5",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..BECBu6If6NVwC5rval2DG_n1znlYEyuy8m-akfpYk2JLDVw5zV_d62YTgwyA0q5zzmWDep8TALuV5n5sSdJFCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1909ecb4-5a05-4fdf-87ee-04a1288be1c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88ee670d-a3d6-4262-9175-2d5329e943bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8326a289-9ab2-4841-b171-bf518b3f753f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6dfd6b5-b0d3-4ccb-8c73-cd6185fe1533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6d174d-d549-41fe-8a01-793294abc045",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHJmwuqqXWMdd298m7RCTGyGoAzsCx1y9tewaHukqaJJoPn2-TLDCQuXvlnFeAYAE_Cy3j1UScfoVx5k-eclAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ba46dd-6140-42c8-a795-3f393ad4e079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ca477cc-527f-4f38-ae69-98b970cc476d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "611108ce-5517-4568-b3e4-281dac0fc65c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6ba2c3-cf91-4640-b5f3-0f94acb65521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458a7b68-f579-4b1c-ba90-5bc44e938410",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295832bf-03c1-499b-99d9-f6af9b755cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823b07b3-c5d5-434a-b096-ebe7ae8ba6fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f65add-603d-4cd6-8dcd-6538ffd287b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80c5cfb4-368c-4854-9237-c00f960fe847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e2c09c7-dfbe-4870-be9e-32d17b0a84ce",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..OzKfWk00QpV3_FJru3xJ3_ktwlU4O68prZWWCmdy3mQTbCz2lPFRl2sB4AkdD3AZUFMAnwxhscd9B0UnqxTZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce424a52-50b8-48ef-8063-7187b5f79c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e657dc-c1bf-41c8-b363-bf321ed42b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "402b8619-bbca-46cb-af48-0f8caf9d9922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5843c55-99de-4724-91f1-b73614280763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169b5956-85ee-4dfa-9f57-0155aace196b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1W7WM5cXb0daWooGxEOYn_zm72mkmpF_tu8Fij39luQwNGDgK7h4nZGBFcS80HTVqiBKxzlhGq1yNnpUlLG-Ag\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2047cd7e-46d5-462f-80a6-b6fde9d7264a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ac55eb6-76e8-44e4-9675-1eae75f23c3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "278b2aa7-a1f4-43c0-a756-2bab6718f223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a488f5a8-d862-441a-acff-8a5e4f4ff07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d402488f-8476-4fb4-8692-17293909df9e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dkiU2sStrvQWiNFK8cKmCbAcRGsC9kbDdKyr-NRlPc9ORQczitwUEymjviemIi1Oot23VohpyMcSFvgFIKIFDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae783ec-35ee-41f1-8e7d-e983edb1d1f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63ed5729-17ac-451e-8735-20f4f77419a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5532e55b-96f0-41ce-a1d5-f4aff63e29bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb84e879-7a9c-41ff-ba43-1278a358a4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a318c58-adab-4bcb-8df0-f4789befc327",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QU131f8dSzen-Dpxf0_p8mCPqhRA6wTO_1rRT4HbsYg0OuRNx_b4x8UtsOoeyuA38K5aL9p7xKeRYf19mmbZDw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305f7a05-d338-4cd9-8634-29bc090f1599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff13b7e-13cd-4ee5-8e16-e85e709cc4d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdad9cb2-4304-4d00-8b1f-ff3d96bdfaea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c0f8dcd-7aa3-4b8e-a33f-08f00a287b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77725a5b-31d5-49d0-aa40-4855f2fc9332",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..pNIbeUn6DL71QxEWTF1wQTqKfAJET5JB9FlmoLXk4-rv1owG68DqQY6qwcPx6fUbMijsWsXlvaFvzND0jAg1AA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4727e704-f4fe-4970-9241-b7fd521ca7c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78a33763-2825-441d-9575-414ef7399316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7801e653-7488-4e65-9940-3c2fff68d8dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f004375-561f-438a-8bb1-603ee81e3c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752a7c60-8437-4978-b2e8-ee0f8686d6de",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z0P0ndVABJRB7mCsv4C-EgB-1SxgnfrU2uQBDSwKm2KfB1jBnzsEzY9enxOn7V1lBAPNxELTEaxPCAK7_n3bBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e4c6a5-5c8c-493d-ba7c-02bd2e6605fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a81e283-93c1-4429-8dc9-55be819efefc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "729cd3ef-e772-4198-9b41-3e47830fa8e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0dd55a1-d5de-4de8-b31b-0213e2e820c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d4cc4a-e917-43db-b31c-0e1111f67bb2",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bed5814-29d5-40b9-8563-47461c7502a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b87b97-1e65-43d4-9fb2-e4a6cca18fd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b6beec-8502-4d11-a5bd-5dc2f1777be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0c5f100-f517-4ecd-baf2-f50fee07bca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88c4f5d-4ea1-48d8-b5ae-3d8c04411766",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2145ae-2737-45d6-ab8b-9366c7d6a2c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20fe1f98-dbb4-4a84-a7b8-18d0731d69a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e97f767-4e83-4972-873e-959cdf894f54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a02ae0f-10e4-451b-8ba1-ff85fd9a32c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd64a7e-20a0-4ccc-9d9c-72e0a99bc74c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..IXaPbANtKFiA3Sh28esCkg9kdwpHScJg3bOCF7Phmb5n9RC981EeIobgDnMzWIjP4v0S92FDEcZqA_XbW43GDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19033c9f-6ede-4bec-8224-0af70c44f406",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "377020a6-b0a9-485e-a2e9-e98b97b65aa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e22ad80-d354-4938-a765-d6aa42941b43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1add57d6-39c1-40dc-ac68-74e364b4998e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bba8688-18a5-4f66-9f9b-3cf582bb599a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iM5Xr2lBqwFIQhq9RI7Dv4K0dzdQ0z7i5YN4ELsstv9vDC9xA-GY2Ft-PsfubsbgVyQsQYjchCv23GULmhauCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9273e1cb-a913-4614-a27b-a678f379074a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "561c09fa-40c5-4a79-8c06-6301fc210a4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3de1bfb-2198-4ef2-bc90-06424e59f89b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e93a6b8-519c-4eee-8bc9-0def0fb53faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2c9bcd-7b27-42dd-b828-cce61c556f5d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..PbhlE_UhX8MVQULs7DoRe-QWk8PcmupGNRf8qCZbMwRE6bP7wyTCcJBQ-XD3Erp2cW9EjVHihTA_VsHi-02WAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d102dc7c-2572-4512-ac4c-f0debd0da737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3747f7d6-40ff-432b-bc22-6f04ff3183b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e29392f-0838-4fee-99ed-34691821b00d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "202cc667-1184-4945-8e35-538d257cd16a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75fcce67-8c28-4c27-a852-7a9fcc2813b0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2b87e6-a594-4dc1-88ab-23366979153a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9769e22e-eaf0-4b90-8ff5-32a3960ae234"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10b5347-749f-41d7-826a-d9c93a05f746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e86e8848-3bdd-429a-9c16-df51a17cf5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d55aea6-4ff9-4d41-864b-1c7ff0b913e4",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..GBcSurXcOJcVinhthkmqvV40OS1rN2fY57Kad0HMLUuykp14JJCtNw_gmtf6SwZxhB860OVsUmuNbZXsMCi-DQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d090d7-0837-4828-89af-4ce7048906f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a7c6fd8-4d1a-4a4a-a61f-f154616b7b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9e8d99-d9a9-4ca1-a9f1-444c76e8e589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "511d5a31-af91-4e8f-a064-523ae8227dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4db5af-7c65-4f68-a8a9-7d10786d6d37",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VWowmcXQAjabeJENG3aOcLzQ9HrvmSIs2pOWcaEMLdJtvJfP7oWohIBiqp94-eo1pd4Ocgk3hT0cLvS5qKBYAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e367efec-52a7-449a-a383-033cd992543b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99909b18-fb62-4bff-8a13-ffed7878ea18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b253f794-cf6e-4287-857b-2de8b26437d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f2857f-01c9-4cbf-94a6-61a01f0900ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82112d79-82a6-4857-9099-91705cf57b17",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..-awe55AAvkjymZEpagD4fdSQk0uCGFfjyFwg7upmg_CISWk12JfezKe-N3hjTwYKCSCjScynLGvlH2x4iSgbDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6981d5-69d2-46f4-bf4d-fc0700628f66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3205d2db-4eb1-4be3-b553-367f71b3587c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3690efdc-e9fa-4cc3-b4f5-7bdbb4bc8e47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0f7ea97-f33f-4ec8-b5f9-e8043f686a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84cac75d-ec08-4c1d-a064-5e8ab4d3db2e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..NDwZvVUWw-xG0zU8VsWhiXPWrYycgK_zwN8zZts05DTw23rOTd9IOXQxqhEMzo_X0c25jzowIbpDfEFxqfmnAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290d30ce-bbdd-445d-a361-24933307eb99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9670a9f0-1900-4908-b329-66bc6f6e0d27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e6650d-22f7-4aa5-a75d-42d207a6cc68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d3dbf2a-7903-41ee-b343-9559f648a0fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8fac08-3aa3-4b96-be37-6eedef47b1dc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..y_7VEjN1ENYoedOrj2jsIqgL7FSYelxGgFZD5ckqKvSDM5BVEWiEctD24BWppCndRR7WR9_1ByBm2F1yBSaoCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd768ee-43b9-4615-9bcf-1de816738458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "220cc52c-d1f4-4d5c-bbcb-0eba6135663c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd6ebb03-2219-497a-8493-653a10c3f380",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dbbc5dd-6bea-4d4f-9b7e-245112b1e6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82a8a10-0e90-493c-9db8-ad46c87226d3",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda5bea1-caca-4f35-94f5-ebee07b946c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7c986cf-8f54-4fcf-a812-aa23e2ace174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0563f5-5a3e-4002-bb71-f6a49a483618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfa6da33-d838-4ff5-8200-3e41c57b15b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c8a759-4622-4875-a56c-eb78500440c4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f3161d-3c47-4113-bdef-ecfb357d80ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "370d6ffa-dd4a-45e2-b1e3-8d4b0264f00b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "287d33a5-dbec-4619-8e1f-336d43aac322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a68a864-68f7-46a4-96de-c97db6834194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ac4e3b-00c7-4b2d-9592-5b890fa34497",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c53d980-ff79-4596-9c51-b838556fd697",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "577b5b2e-d0f6-4396-8d47-f38270154aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da56d5dc-3b42-4cc9-bccd-75c80a89a691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfee835b-3f55-41a6-a3c8-3ec30820ed2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f90e979-b32b-4f6d-8ef5-2a1357cd0a6f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a851645f-ce9e-4db4-8d4d-7b6af4519d9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f82e392-2718-42c6-bd07-d11850e2849b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a1e4fd-29e2-4aea-a094-b3b0d8374b10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf99b0c1-a9f3-42b2-af41-b42797dcb303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0a066e-733f-4c92-98aa-0304f9e97804",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02cc1e71-3839-439a-9581-cf7c69c90540",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a95b7ff-216d-45c9-a111-17c8bbb5caaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5932ade3-7b69-4dc9-8c5b-654bdfef0f61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1422fe01-787c-42ac-b7c5-047d77ea3024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d34a62-253b-432d-967b-06eb8565f5fb",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc541ba3-471b-4db1-8952-41c8fb3ef61f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dec112b2-8031-40ec-8861-3f598615d89f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c13226c-9f15-46bd-a4e0-b86e0ff2d096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce468797-e421-4d7b-9c98-ebf2dd0df49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a99743-929d-4ca9-b59b-f6cb02bda87a",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a869364-12f9-45d1-88ee-00ad8f98b04f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0507105f-4f1c-45b3-b0b6-0395ac6c3c14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42569c3e-ca9b-41d1-b67e-5fa5b3e75a61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd931b1-8f5e-461d-88a7-9399e5b40fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09030d29-452c-4948-ba54-7d87e8d53620",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79e6367-196e-4ff4-8b7d-ac84b2abd290",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41b3f14e-d262-41c4-beef-7ffa8b7014a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a6718e-1d6e-4f81-a693-e4ffc86da490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4804c31-b3b2-4218-a3a9-187c7ae3b0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f81fd3a-e2f7-4a51-8977-628791c8166c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b4ceab-e7d2-40eb-a584-86845bf92260",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e8910ab-cd5e-499f-94b5-45d8035eff95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd217e6d-3fc3-4340-80e5-d7a3e085909d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f344b8e3-5267-4fdc-a884-d1157768fd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff1a5ad-d9c2-4e4e-b1b4-0d6021a2d312",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce2c020-daf5-41ad-94dd-562b84f282de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5db518cd-fdcf-44d9-90b6-a688522e12f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d58b91a-c4bd-4294-9f19-70e4d5bc0bd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4eb824e-0f38-4330-9e3b-39a5bb09b95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ecf462-0473-4f5d-aaaf-03fb5c0a88a3",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4c95a5-d85d-4b8a-b31b-a568d3a94300",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dcbce33-da96-45a2-ad28-b0efc72b2e23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "975cf4a6-8816-4b99-b7a1-a8133a005fea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea831799-7e26-4b22-8887-8187e130c730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b38031-2ba5-4970-8ab9-b3a1b9c51d73",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db5fae7-8b36-4648-8973-4a94a58801b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a36b21d-5925-4f74-bc31-64e5df6ea639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6ae99c-b73b-4b93-982b-0c7559021a72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b527397-2193-41bc-89ee-8b3888663981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a5021d-71cb-4b0e-9727-6c6c2fb56155",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbda12f8-d09c-4f0f-8a43-20c403ec7ec1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41072445-8748-4c5b-92d2-6c4c1a3b7052"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e486f7-4bab-41bc-8618-8be0c0cde981",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "222bafe9-56d3-4353-b2f0-a2256463a6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f81a3b-5dcb-4b96-b772-535ff64091e7",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfba892-6c05-49cc-bd5a-757abbd9e788",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "823bae56-fd0c-41d1-bfc7-59dddf6fe35d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4502a60-69e1-4edc-9dd4-ad4f9cf26039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0beb7bf-1778-4557-a4b3-1391b6b3a6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ed63a3-9369-4977-9f8c-85b66578a8d2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a907b88d-f3be-4377-9f95-7820c8de8f1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e267f766-d42e-41ab-9eda-2f9526fc1467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe0a247-bb61-4ad3-9caa-b2c0c3391517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c53b82c-9599-4e99-ac72-3d689a3e9b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8dd105-040e-444b-b0d0-a9c956cc2b57",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070f164d-aa44-4005-bc64-8b8968aee2ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5fed1b5-f415-4c46-a829-1219f427c016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b41e27-7f7b-4eb7-8746-6805293d8936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb92fa9d-f797-4af5-98c0-9be170a3fe48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ec4fc3-47c8-41ae-9a0f-b6fb28fe057a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b084e569-b820-4e1b-9244-fca2438989fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a459cf93-039c-44db-ad8e-4009084db90d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce6fef3-ee53-41ec-8420-83c91c8af55c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b42ae9fb-a295-4dd1-86bf-43d40a6e8cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1759b935-3790-4f1a-a62a-897292e67632",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5406b9a4-03e1-41e0-819f-448dfd78be4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db9e4801-b0d2-48a5-b883-cea796b98741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "764d43eb-d236-4ee7-bec5-731bcbf4a268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36bfc52d-2df5-4316-a5db-9ed4c954d190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f0b1ae6-b440-4f36-a4b4-e5aeeb081014",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d5c6da-7757-44af-ad4e-9611e651ffaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4c4bfe7-3185-4df8-b6a8-0c26f9653b4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73b7e1c-83cc-4367-ac66-9a4082568457",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be3d9338-a122-4f74-8872-ef77a22f2f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5796c8f-de63-413b-a400-1bba4bf8693d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05674a80-0143-4040-bac1-7a4c711f9177",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32736a8a-56b6-480f-bec0-cf50f017b861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e99bd4-d811-4c8d-84f0-295c8d9a721c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078718e0-1ce7-43c0-8c48-f416d224e021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e40bdcff-a735-481b-ae78-88295f3c6985",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bade0d2-a874-4107-b1c1-cd2931cbda64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43193fc7-b4ef-444f-8184-4cf222c8edcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1888194-e503-4009-b085-aa2fe7b63d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33437a72-1f5a-426e-acad-d9c68a288120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a43e6f7-5c50-4afc-9b44-962321830cae",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487b8dbc-7060-4d6c-8727-5ba0e9a8fcbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fcbf415-78ab-4f65-b0d1-85dc630c1c48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf38b84-8903-443d-9f05-2b2fe8256823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b95f9662-6cf3-4c4b-9003-3b057271d956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d781855-a0a8-4225-84c1-9cb5e4fa66a9",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103e38e5-1221-4fe5-8dfb-bf47671f495d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4ceae0a-c4f9-4f35-8c6e-b19f9f9fad21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8930268c-6611-4272-835c-bc97e175389a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc58f4ff-e960-4007-9e84-e22b21d15628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0239e638-3798-4640-854e-514ee2721310",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b6fc87-96ed-41fc-b75e-68cfa0bdded8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a4c0967-d363-457d-bd34-765e88fbea36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "455ded57-f7d1-47a8-ac06-c329da224dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc389828-a703-41a4-931e-d2a3db46d9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88cba79-e6d7-4787-b6dd-2733c14bae83",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de459a60-602c-4736-8815-5e991db204c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9be9264-48cd-4213-9b87-94689727ee64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52e23c0-add8-40f5-ad73-5f7bbfc40997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "728b3d80-0177-4be8-babe-0d78f667b900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a4c9cc-93d6-4b0e-9e8b-cbdde6b8be87",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb14d37-1075-448f-a698-53f4a1bd5d30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "231a122a-1781-41c1-a7ec-ae60efc348ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc95f78-d190-4eb9-bb62-057411572dd5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e54d41-4455-4157-b27e-bfccbee1ff7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d23e6c-dfbf-4eb5-8316-fb416c68af76",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6db50c7-377b-4b06-8dd5-7a8fc98fccb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bf1e591-9f23-4750-9752-3d00a463e1e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f93478d-efd7-4306-992d-574f3bbf14ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "773f96ff-f52e-491b-89ee-d14103ee07c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da202d53-3d90-4fa0-8aa2-8b740931aeeb",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5d5c316-ad1b-4532-a1a6-4e72bd7cd9cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e902e19c-1572-4ab2-a4f9-74dea305f327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f65113-713b-4c7f-924a-d77b39dd5806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3621edd-2c21-49ad-b738-73ea7a476167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9634ce-5369-4d36-a640-3a58189bf766",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691a7c70-748c-44c6-aa95-afc3a0f6976c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0b68b4b-6539-4320-9e6e-acde05d2206c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc01b072-dc4c-4447-974c-7f7b4ad92ede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "314b01bb-6a64-41da-aa1f-649695a2b56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e3f40d-2698-43d4-8371-5de1a6fc24a6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4285ae62-0c02-4c55-93ed-da373fedf7f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44d6d021-b7a0-4265-ab59-3d4d655b3e3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5f0996-00e8-4993-802d-454920800fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3e3e25e-9fb1-45d1-b952-83d3dde23d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c1728d-7ea1-471c-83f0-ef2433cfe4f6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1784f487-fa0c-44e2-a85b-dddbf3eab4b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d0d404c-495c-4a37-8274-3765a8c96741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eec20cb-8f1a-4a9f-99ef-aeb5e705a39f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88e8cf0d-e362-401a-a0b8-1878b36aa3f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba7f474f-21d6-4da9-b4c6-a817995c8460",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e24142-a01c-427b-9838-616e396c6cee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26dd8f67-c17f-4711-9d35-307c7c1862fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f06740b4-9494-476b-bedf-9b371b42e1bf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd779e69-012b-45ce-a887-ac23e5d292a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c69ecee-3221-45ec-87a0-e53ad9b56da4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38415c0e-4643-4e77-949f-2f39c2952ef5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d70a59d-8593-4029-abb7-2a1c13505afb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f419126-e41c-4d50-87ac-57fc0fd70403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a029f90-8ed1-4bdb-b6b4-a099ca10dc6f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e17199b-e02f-408e-917d-ac63f2df3160",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "783ae3d6-dded-4bdd-852e-dee52413cceb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "96ee727d-e202-4def-9563-99f995eda160",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8376664b-c2be-401d-ba7d-0e4d862c3bf8"
                    }
                  }
                ]
              },
              {
                "id": "6f9cd8b4-e408-4848-9cc0-152d6beeaa28",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d471eed3-b60b-43bd-acca-8426fb412392",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76dc9a0-57b0-4d08-9d9b-30778e1fe47c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f6de82b3-dd35-4832-9c4a-99aed70822ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33877281-a983-401a-969a-51078a41c02d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7cda6793-2c3c-43e6-b691-d041dd45bfd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6027f3f2-c6d7-44ca-9708-f0fc59a22001",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b57ffbf-a616-43e8-927c-7fadfa3f3b5c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8d986f1c-a108-41a4-a7f9-49f39d7f13ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d5202f1-9137-4e21-b0c8-f209e256fe4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "685d7a1d-7c3a-430e-9890-cc5ec4493ffb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13d53550-8e98-49e0-b14e-fd02420f579b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f50087ef-6748-465d-a91f-4c9a40899a33"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "93d8d28d-4f03-4a3e-9957-2403c4e24444",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2a8cda8-c477-47aa-85b9-07c248a781cd"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "794b0f97-9c47-4a2c-835f-4c39724ff951",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7acb19ef-88f5-437f-ba31-04f57766bedd",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c526f89-3358-465b-8ce8-98c83c2c5321",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a91b7447-afe4-43f0-a132-ad12f63183c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "171bda5e-c2d3-467b-8c33-f0075dcdd1fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60a2427d-95ba-4cbd-8804-3ffd8478953f"
                    }
                  }
                ]
              },
              {
                "id": "495bbf5d-03a5-4a25-8ba2-0675b5e33480",
                "name": "credentials_verify:id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"id\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "081c195d-28b7-40a4-ae1b-f1a63956ebd4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e94d4fc5-79f3-4a01-b912-0e11d39fc503"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a23684d-e4d5-4cca-b205-6bd1f9858216",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cec7367f-366f-4798-a05a-d3c191f799c2"
                    }
                  }
                ]
              },
              {
                "id": "3ec27a0e-7aef-4c27-a926-401464937867",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "92c221c8-c43e-46bf-b4ff-6ec2962f7907",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "05a03274-1237-40e9-b049-335fcbf87e62"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb6931b5-8a4c-4666-adca-67df6e8ce03a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30c81ee5-c994-48d2-b4e3-2f363bddcb90"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7986dcb9-1fdc-49dd-979d-85a749daa7c4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9e4ab18d-a542-446e-8ba6-e68317420455"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa96847f-0de7-4fa2-a981-5b560614be02",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c267c118-8506-41fb-b70a-34551332b299"
            }
          }
        ]
      },
      {
        "id": "c00de54d-3e33-4a41-b575-8392af118489",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "775d4087-a74b-498b-9db7-76aa6c8a2856",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ca1b83ec-ee9d-4d54-be7a-035e2404d41b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "55e7fa40-afc9-43cb-94bd-2528227544dc",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74aed76-9eb3-4e80-b03d-01e74dea69e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f871e5cb-4383-4953-8aa8-407b36087326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b052d0d6-ad3e-4b30-97c4-88278011d190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12f62193-c7c1-4f3c-8ca9-5357d8a8ecfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab79af6f-1845-4686-98bc-0b9dc2857b53",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36297dc9-9fbe-4596-b54c-840b38996159",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "81b0b8a0-487d-4538-902b-685b7a5e753e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "171ad8b6-1c8a-411a-9117-32f6cb084634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbc7b8a0-ea0c-4b14-9cc0-c5c528d59b3d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b0782bc-17e9-434d-8533-9022df1b44eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9917f913-f62e-4fb3-995a-68b7a08df5d5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "54e1da63-ec5c-4a50-95ac-10318eefc585",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "070084f8-6a28-4c5a-9690-6f2b6acda2f6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5c245e6c-ffea-423c-91d3-94a75ce37ed9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope",
                "utils(pm).getAccessToken('submit:presentations');",
                ""
              ],
              "_lastExecutionId": "2f3618c1-236f-4485-86a2-1022cf86856e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "564d7bf3-5c54-4b17-8f64-f9471c7de34f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7f3ae22-c9e1-489c-b0d3-d8f1931971e7"
            }
          }
        ]
      },
      {
        "id": "656e2e88-3964-4e17-a270-71a119dc1016",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "24fcdcfe-03ce-46e3-9bd9-ef9fde97e740",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9711f012-6447-48fd-bd44-b5183ca22c30",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b7653474-92e1-4839-a6c2-71cf98f51b81",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb5703a-2036-45e8-af1a-2f756c018566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0492e69f-8734-4248-bf4e-ecb625090a0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de7655c-8735-49ba-90d0-d31096b9ff0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a257abdf-7602-4b22-8467-c75cae7f972b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738295a6-2a33-446a-8bfe-f935680039b2",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d901c434-105d-433b-ac1d-4806215cab25",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6f2cbb9e-d79f-457d-b2b1-3c6d2ef2df30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "485bd0b8-6743-433e-94f2-6764808fd843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab615bd1-3e2f-477b-9152-4633856bacb5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6a46f84-2c9f-4570-9a70-200bd6b9aefc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4bf2c58-bd8a-475c-9970-93e6197a2e2c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "74cef565-15f4-4380-b554-552d8f0265c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc937d16-b570-4366-a6c5-17ae54a83521"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b09869bf-3e45-4320-acff-51fd2e34b996",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope",
                "utils(pm).getAccessToken('prove:presentations');"
              ],
              "_lastExecutionId": "ddd7c1a1-6a51-4e54-a990-f24d9fa54e8f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce80728b-ccdd-4c5a-8050-41ceacbc4865",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8fafd3c8-42e9-4c3c-90c0-d9ce0a9c83f9"
            }
          }
        ]
      },
      {
        "id": "1300c6bb-24e0-427c-a4db-59c69f542aab",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b67c6328-5748-49ad-b9b9-21fba21878dd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a2a3ea79-011f-48a5-9d20-75088f33cee7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ae496def-7ad9-4aab-ae3a-3117db75035a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e39200c-2cdd-4d68-991d-abea147d2b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "788b9289-49ab-41f2-bcee-8f067a12ef20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9cad82-62be-4e44-b1cd-bf00415847b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c800fd5-2204-4675-b2a7-a1ea69ca15d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9988e6cb-7d65-4a67-8003-409d6d0d4a4f",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbb9cc5-8551-4b55-b5a7-e4929cd80fb0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "73011d50-0723-4d0b-ad24-3b11874d341c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3e5fd4-256a-430c-92b8-d26853caf16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7db30006-6727-406c-b9e4-9c5b4aaf83f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f937d0a9-aac1-4cf2-832c-6d46e9249e56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea619ddc-2ba5-4cc8-b06f-27d8b83cbd8a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "13dac231-d440-4ae8-8d10-c96acb1fc688",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03240ffa-d043-4403-9ef1-4f730e2510a1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eadf105d-29e2-4b23-b7d4-35a2255917f2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope",
                "utils(pm).getAccessToken('verify:presentations');"
              ],
              "_lastExecutionId": "f2eedd6a-295f-4b07-80cf-4f2e70c53735"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8dcd7dbf-744b-493d-bca8-9f3fe87db617",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "208e7403-d963-47b0-a5b7-483c33ccc2fa"
            }
          }
        ]
      },
      {
        "id": "ad4f4671-f27a-4c37-b468-fa53270e55b8",
        "name": "Presentations - Notify",
        "item": [],
        "event": []
      },
      {
        "id": "a4149334-e8d7-48bf-855c-4361c31a8fd7",
        "name": "Presentations - Submit",
        "item": [],
        "event": []
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 155,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1211,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 155,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 203,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 155,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 315,
        "pending": 0,
        "failed": 284
      },
      "testScripts": {
        "total": 611,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 600,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 43.19704433497536,
      "responseMin": 10,
      "responseMax": 571,
      "responseSd": 79.37167411213244,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1664326725872,
      "completed": 1664326741892
    },
    "executions": [
      {
        "id": "91966c4b-4e3d-4f42-b561-a10cfb2d3a99",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 155,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "340646c3-74aa-431b-a74b-c27f8e9597b9",
          "httpRequestId": "f08c6176-d572-4ecf-8f71-4a065575311f"
        },
        "item": {
          "id": "91966c4b-4e3d-4f42-b561-a10cfb2d3a99",
          "name": "did_json"
        },
        "response": {
          "id": "71648086-098f-4b0e-971a-1e1d868c600d",
          "status": "OK",
          "code": 200,
          "responseTime": 299,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.service[0].type should be array",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.service[0].type should be array\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "id": "fe16f087-473c-4c54-a2cf-1d798eab6157",
        "cursor": {
          "ref": "53b2805d-fb74-4e29-9e90-be1d634255d7",
          "length": 155,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2571bac5-33cd-410b-b844-1663d4f09abc"
        },
        "item": {
          "id": "fe16f087-473c-4c54-a2cf-1d798eab6157",
          "name": "did:invalid"
        },
        "response": {
          "id": "7b832e96-d2a0-4333-bf4e-6ea03852866a",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe16f087-473c-4c54-a2cf-1d798eab6157",
        "cursor": {
          "ref": "53b2805d-fb74-4e29-9e90-be1d634255d7",
          "length": 155,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2571bac5-33cd-410b-b844-1663d4f09abc"
        },
        "item": {
          "id": "fe16f087-473c-4c54-a2cf-1d798eab6157",
          "name": "did:invalid"
        },
        "response": {
          "id": "7b832e96-d2a0-4333-bf4e-6ea03852866a",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 100
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950710da-ab3d-4502-b42f-fff346e41106",
        "cursor": {
          "ref": "1d6034ec-9f07-4adc-b144-39ea251172e6",
          "length": 155,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "69b94c4d-cb6a-49c1-a8cb-9a8806f0bd5f"
        },
        "item": {
          "id": "950710da-ab3d-4502-b42f-fff346e41106",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "97304532-f9a6-4d6b-ac09-e6c941935359",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 108,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "id": "13fa24ef-e2d4-4f35-9e64-a3392326a7e5",
        "cursor": {
          "ref": "43ea41d2-e3f7-405f-86cf-66e4a633fec0",
          "length": 155,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c7c34b43-c742-48da-87be-584729226054"
        },
        "item": {
          "id": "13fa24ef-e2d4-4f35-9e64-a3392326a7e5",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "73ccbd7b-9e97-4014-99e9-1198f1a3a48f",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 200",
              "stack": "AssertionError: expected response to have status code 404 but got 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2fb1185f-a89f-4b76-accf-fea6d030c71f",
        "cursor": {
          "ref": "79aa7e2f-11f3-4aa1-b6af-528e1a6b66e0",
          "length": 155,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "50c785bc-3752-4349-a6ae-e91adf7f3b2a"
        },
        "item": {
          "id": "2fb1185f-a89f-4b76-accf-fea6d030c71f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b6a8372f-7685-4d47-bb60-e584df08acc9",
          "status": "OK",
          "code": 200,
          "responseTime": 174,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 200",
              "stack": "AssertionError: expected response to have status code 401 but got 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "1b058322-af11-4b81-b3e2-4204ef0d05d4",
        "cursor": {
          "ref": "15d472b0-04e9-4a5a-9999-56518fed3b63",
          "length": 155,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "33d29319-16aa-47ac-8022-324213a7f104"
        },
        "item": {
          "id": "1b058322-af11-4b81-b3e2-4204ef0d05d4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a0790a17-5dec-4c02-b875-d0fb38d2c082",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "1b058322-af11-4b81-b3e2-4204ef0d05d4",
        "cursor": {
          "ref": "15d472b0-04e9-4a5a-9999-56518fed3b63",
          "length": 155,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "33d29319-16aa-47ac-8022-324213a7f104"
        },
        "item": {
          "id": "1b058322-af11-4b81-b3e2-4204ef0d05d4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "a0790a17-5dec-4c02-b875-d0fb38d2c082",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "a54e224a-94db-42f2-a2fa-d1814252ec71",
        "cursor": {
          "ref": "f75f11dc-2505-4067-8d36-312dfa9b1598",
          "length": 155,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c7e541fb-d189-481a-a566-f51475b2200d"
        },
        "item": {
          "id": "a54e224a-94db-42f2-a2fa-d1814252ec71",
          "name": "identifiers"
        },
        "response": {
          "id": "2510ca8c-8c21-42c7-ba3a-983ec2bce33d",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 766
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "Error",
              "index": 1,
              "test": "response validates against schema",
              "message": "schema is invalid: data.properties['didDocument'].properties['service'].items.properties['oneOf'] should be object,boolean, data.properties['didDocument'].properties['service'].items should be array, data.properties['didDocument'].properties['service'].items should match some schema in anyOf",
              "stack": "Error: schema is invalid: data.properties['didDocument'].properties['service'].items.properties['oneOf'] should be object,boolean, data.properties['didDocument'].properties['service'].items should be array, data.properties['didDocument'].properties['service'].items should match some schema in anyOf\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "8e6e70cf-1f24-4959-b536-c815c8746766",
        "cursor": {
          "ref": "5a337be5-0433-46c3-b394-67db9f8932c3",
          "length": 155,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "337fd3a9-2028-4a5d-b7a6-836385895a04"
        },
        "item": {
          "id": "8e6e70cf-1f24-4959-b536-c815c8746766",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4c6ffc0e-c0bc-4782-9e17-31e9a0b4457a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 308,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8e6e70cf-1f24-4959-b536-c815c8746766",
        "cursor": {
          "ref": "5a337be5-0433-46c3-b394-67db9f8932c3",
          "length": 155,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "337fd3a9-2028-4a5d-b7a6-836385895a04"
        },
        "item": {
          "id": "8e6e70cf-1f24-4959-b536-c815c8746766",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4c6ffc0e-c0bc-4782-9e17-31e9a0b4457a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 308,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "8e6e70cf-1f24-4959-b536-c815c8746766",
        "cursor": {
          "ref": "5a337be5-0433-46c3-b394-67db9f8932c3",
          "length": 155,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "337fd3a9-2028-4a5d-b7a6-836385895a04"
        },
        "item": {
          "id": "8e6e70cf-1f24-4959-b536-c815c8746766",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4c6ffc0e-c0bc-4782-9e17-31e9a0b4457a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 308,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "90dc09fa-759e-451e-8a91-1eaa66e3f177",
        "cursor": {
          "ref": "6a7602a7-5fa6-46d4-a154-66b5d53736f8",
          "length": 155,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "14702d90-b559-475d-ae8f-2ada7ec1a415"
        },
        "item": {
          "id": "90dc09fa-759e-451e-8a91-1eaa66e3f177",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c5b07a13-58f2-4e27-aba9-f572581c808a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "90dc09fa-759e-451e-8a91-1eaa66e3f177",
        "cursor": {
          "ref": "6a7602a7-5fa6-46d4-a154-66b5d53736f8",
          "length": 155,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "14702d90-b559-475d-ae8f-2ada7ec1a415"
        },
        "item": {
          "id": "90dc09fa-759e-451e-8a91-1eaa66e3f177",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c5b07a13-58f2-4e27-aba9-f572581c808a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "c56b0f97-5c03-4673-bcf0-dae87c6dfd98",
        "cursor": {
          "ref": "ff00531f-9072-4e89-90dc-07f776716a7d",
          "length": 155,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e4b7429f-a08e-4911-8c20-4b141d83d177"
        },
        "item": {
          "id": "c56b0f97-5c03-4673-bcf0-dae87c6dfd98",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "b51886e5-02ad-4a5d-bb4d-22493741770c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "c56b0f97-5c03-4673-bcf0-dae87c6dfd98",
        "cursor": {
          "ref": "ff00531f-9072-4e89-90dc-07f776716a7d",
          "length": 155,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e4b7429f-a08e-4911-8c20-4b141d83d177"
        },
        "item": {
          "id": "c56b0f97-5c03-4673-bcf0-dae87c6dfd98",
          "name": "credentials_issue:credential.@context:wrong_type"
        },
        "response": {
          "id": "b51886e5-02ad-4a5d-bb4d-22493741770c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "4c38bd00-823f-4f66-8200-3e34f6ab84a9",
        "cursor": {
          "ref": "f0a7990e-0b91-4b1b-a956-714966b29008",
          "length": 155,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "06f1ee91-f891-40eb-a30b-1fc4cbb12dee"
        },
        "item": {
          "id": "4c38bd00-823f-4f66-8200-3e34f6ab84a9",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "80b4b169-acd2-4865-b5ad-68768176a06c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "4c38bd00-823f-4f66-8200-3e34f6ab84a9",
        "cursor": {
          "ref": "f0a7990e-0b91-4b1b-a956-714966b29008",
          "length": 155,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "06f1ee91-f891-40eb-a30b-1fc4cbb12dee"
        },
        "item": {
          "id": "4c38bd00-823f-4f66-8200-3e34f6ab84a9",
          "name": "credentials_issue:credential.@context.members:wrong_type"
        },
        "response": {
          "id": "80b4b169-acd2-4865-b5ad-68768176a06c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "5e6c8240-faa4-4c8c-aa9e-6e8ca875cd19",
        "cursor": {
          "ref": "9fdbd83e-9b75-4da6-948b-6968eef7a90d",
          "length": 155,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "89710c59-7d19-443a-a9d2-3b1cb438d04e"
        },
        "item": {
          "id": "5e6c8240-faa4-4c8c-aa9e-6e8ca875cd19",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "ee9d3eea-78c2-41f2-9450-105d159dc4aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "5e6c8240-faa4-4c8c-aa9e-6e8ca875cd19",
        "cursor": {
          "ref": "9fdbd83e-9b75-4da6-948b-6968eef7a90d",
          "length": 155,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "89710c59-7d19-443a-a9d2-3b1cb438d04e"
        },
        "item": {
          "id": "5e6c8240-faa4-4c8c-aa9e-6e8ca875cd19",
          "name": "credentials_issue:credential.id:wrong_type"
        },
        "response": {
          "id": "ee9d3eea-78c2-41f2-9450-105d159dc4aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "4c82694b-1e6d-42dc-af79-666d9af11824",
        "cursor": {
          "ref": "695ec563-7210-4436-8375-1edfb632daa1",
          "length": 155,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9415cc92-6067-4f1f-9394-2f86c8706ac3"
        },
        "item": {
          "id": "4c82694b-1e6d-42dc-af79-666d9af11824",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "26371e65-f92a-4b89-a8c9-7faf53b1aa1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "4c82694b-1e6d-42dc-af79-666d9af11824",
        "cursor": {
          "ref": "695ec563-7210-4436-8375-1edfb632daa1",
          "length": 155,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9415cc92-6067-4f1f-9394-2f86c8706ac3"
        },
        "item": {
          "id": "4c82694b-1e6d-42dc-af79-666d9af11824",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "26371e65-f92a-4b89-a8c9-7faf53b1aa1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "30c07074-52aa-4283-85ee-88a3d610c344",
        "cursor": {
          "ref": "8f640682-55ad-404d-81bf-e2ed25806c61",
          "length": 155,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8abe3807-6f78-4c2d-bf56-6d253c9f2275"
        },
        "item": {
          "id": "30c07074-52aa-4283-85ee-88a3d610c344",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "27044f79-2d18-40ea-b8ec-43b51721935b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "30c07074-52aa-4283-85ee-88a3d610c344",
        "cursor": {
          "ref": "8f640682-55ad-404d-81bf-e2ed25806c61",
          "length": 155,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8abe3807-6f78-4c2d-bf56-6d253c9f2275"
        },
        "item": {
          "id": "30c07074-52aa-4283-85ee-88a3d610c344",
          "name": "credentials_issue:credential.type:wrong_type"
        },
        "response": {
          "id": "27044f79-2d18-40ea-b8ec-43b51721935b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "18c02a95-b188-4476-be1a-65e27994dc5c",
        "cursor": {
          "ref": "fba7fc42-581f-4403-ad1c-f526123fca6a",
          "length": 155,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "241d44bc-cd48-4394-9f5f-375ace1fe4dd"
        },
        "item": {
          "id": "18c02a95-b188-4476-be1a-65e27994dc5c",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "be39fb13-244f-46fb-b616-ad5a24e75de7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "18c02a95-b188-4476-be1a-65e27994dc5c",
        "cursor": {
          "ref": "fba7fc42-581f-4403-ad1c-f526123fca6a",
          "length": 155,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "241d44bc-cd48-4394-9f5f-375ace1fe4dd"
        },
        "item": {
          "id": "18c02a95-b188-4476-be1a-65e27994dc5c",
          "name": "credentials_issue:credential.type.members:wrong_type"
        },
        "response": {
          "id": "be39fb13-244f-46fb-b616-ad5a24e75de7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 226
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "10320cc9-629e-4d5c-add9-fe333c6781de",
        "cursor": {
          "ref": "ed480f34-7ec9-4f35-add6-75241f6b2f82",
          "length": 155,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "17c5d1e4-7696-4594-a496-4817058348dc"
        },
        "item": {
          "id": "10320cc9-629e-4d5c-add9-fe333c6781de",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3b21faa1-827b-4e4c-8268-7dd692b7bee3",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "10320cc9-629e-4d5c-add9-fe333c6781de",
        "cursor": {
          "ref": "ed480f34-7ec9-4f35-add6-75241f6b2f82",
          "length": 155,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "17c5d1e4-7696-4594-a496-4817058348dc"
        },
        "item": {
          "id": "10320cc9-629e-4d5c-add9-fe333c6781de",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3b21faa1-827b-4e4c-8268-7dd692b7bee3",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "d3d6fbca-3a0a-4610-80a5-4a983a8a5644",
        "cursor": {
          "ref": "f3733d90-0dcf-4392-b08a-b9f199a9b5ca",
          "length": 155,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1933dbb8-3266-4699-b9e7-0e64d528dd4c"
        },
        "item": {
          "id": "d3d6fbca-3a0a-4610-80a5-4a983a8a5644",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "af23100c-94a1-4784-b88f-5cf260ed8c20",
          "status": "Created",
          "code": 201,
          "responseTime": 44,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "d3d6fbca-3a0a-4610-80a5-4a983a8a5644",
        "cursor": {
          "ref": "f3733d90-0dcf-4392-b08a-b9f199a9b5ca",
          "length": 155,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1933dbb8-3266-4699-b9e7-0e64d528dd4c"
        },
        "item": {
          "id": "d3d6fbca-3a0a-4610-80a5-4a983a8a5644",
          "name": "credentials_issue:credential.issuer:wrong_type"
        },
        "response": {
          "id": "af23100c-94a1-4784-b88f-5cf260ed8c20",
          "status": "Created",
          "code": 201,
          "responseTime": 44,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "f86a9949-9421-4fcb-bf51-47ed33ac6d69",
        "cursor": {
          "ref": "d12a7203-eced-4d53-a7de-869270ccd392",
          "length": 155,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "15f012d5-1442-4f14-9d52-e52f3c821fa9"
        },
        "item": {
          "id": "f86a9949-9421-4fcb-bf51-47ed33ac6d69",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "d2beabf1-7c51-4005-b052-511f6d3e3d6f",
          "status": "Created",
          "code": 201,
          "responseTime": 43,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "f86a9949-9421-4fcb-bf51-47ed33ac6d69",
        "cursor": {
          "ref": "d12a7203-eced-4d53-a7de-869270ccd392",
          "length": 155,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "15f012d5-1442-4f14-9d52-e52f3c821fa9"
        },
        "item": {
          "id": "f86a9949-9421-4fcb-bf51-47ed33ac6d69",
          "name": "credentials_issue.credential.issuer:invalid_value"
        },
        "response": {
          "id": "d2beabf1-7c51-4005-b052-511f6d3e3d6f",
          "status": "Created",
          "code": 201,
          "responseTime": 43,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "77e0d618-67bb-479a-85b8-055aab240ffc",
        "cursor": {
          "ref": "7aad824e-4ef8-47e4-b216-51ad6a0ffcdb",
          "length": 155,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9e113e6e-e4a2-4ddf-8069-9d7a19974b75"
        },
        "item": {
          "id": "77e0d618-67bb-479a-85b8-055aab240ffc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f39654e8-1651-4675-9afb-c52bf6edea1f",
          "status": "Created",
          "code": 201,
          "responseTime": 44,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "77e0d618-67bb-479a-85b8-055aab240ffc",
        "cursor": {
          "ref": "7aad824e-4ef8-47e4-b216-51ad6a0ffcdb",
          "length": 155,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9e113e6e-e4a2-4ddf-8069-9d7a19974b75"
        },
        "item": {
          "id": "77e0d618-67bb-479a-85b8-055aab240ffc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f39654e8-1651-4675-9afb-c52bf6edea1f",
          "status": "Created",
          "code": 201,
          "responseTime": 44,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "6513922a-5960-4e2e-be77-d03593c2c85b",
        "cursor": {
          "ref": "ce6373be-24ed-425d-a475-e57b72ea495e",
          "length": 155,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d5100642-a83e-40d7-b1a9-b837f8cd3b2f"
        },
        "item": {
          "id": "6513922a-5960-4e2e-be77-d03593c2c85b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "aa86026c-4773-4ce1-a218-d2d6e93ef5db",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "6513922a-5960-4e2e-be77-d03593c2c85b",
        "cursor": {
          "ref": "ce6373be-24ed-425d-a475-e57b72ea495e",
          "length": 155,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d5100642-a83e-40d7-b1a9-b837f8cd3b2f"
        },
        "item": {
          "id": "6513922a-5960-4e2e-be77-d03593c2c85b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "aa86026c-4773-4ce1-a218-d2d6e93ef5db",
          "status": "Created",
          "code": 201,
          "responseTime": 62,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "3a3f0100-402e-45d4-8f3b-01f2fed60dd9",
        "cursor": {
          "ref": "07c8fdf3-a014-4525-b5e7-784b5dbce683",
          "length": 155,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "440790a7-2868-433f-9dbb-bf76abb61df1"
        },
        "item": {
          "id": "3a3f0100-402e-45d4-8f3b-01f2fed60dd9",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "a5d4e4ee-305d-4252-b3e0-9c90ead97ab0",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "3a3f0100-402e-45d4-8f3b-01f2fed60dd9",
        "cursor": {
          "ref": "07c8fdf3-a014-4525-b5e7-784b5dbce683",
          "length": 155,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "440790a7-2868-433f-9dbb-bf76abb61df1"
        },
        "item": {
          "id": "3a3f0100-402e-45d4-8f3b-01f2fed60dd9",
          "name": "credentials_issue:credential.issuer.id:wrong_type"
        },
        "response": {
          "id": "a5d4e4ee-305d-4252-b3e0-9c90ead97ab0",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "de9add5e-1519-4e62-b558-491ef97b5924",
        "cursor": {
          "ref": "5607c6a9-a7a9-46a6-8b25-9acc208bd548",
          "length": 155,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d14abcd1-e477-4247-b3b5-b3f6adbfbcd5"
        },
        "item": {
          "id": "de9add5e-1519-4e62-b558-491ef97b5924",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "8c8b07c5-139d-4fb8-8960-586b804f6020",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "de9add5e-1519-4e62-b558-491ef97b5924",
        "cursor": {
          "ref": "5607c6a9-a7a9-46a6-8b25-9acc208bd548",
          "length": 155,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d14abcd1-e477-4247-b3b5-b3f6adbfbcd5"
        },
        "item": {
          "id": "de9add5e-1519-4e62-b558-491ef97b5924",
          "name": "credentials_issue.credential.issuer.id:invalid_value"
        },
        "response": {
          "id": "8c8b07c5-139d-4fb8-8960-586b804f6020",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "8895ddb6-c888-4ea6-bfbe-0e5a83f0776c",
        "cursor": {
          "ref": "3ced48d0-381d-44fb-9292-d18e5a93282d",
          "length": 155,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "66b984b6-4b31-4533-a364-87474da3dc40"
        },
        "item": {
          "id": "8895ddb6-c888-4ea6-bfbe-0e5a83f0776c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9e9b3b1a-e34f-4839-8a2f-6f63c1f2297b",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "8895ddb6-c888-4ea6-bfbe-0e5a83f0776c",
        "cursor": {
          "ref": "3ced48d0-381d-44fb-9292-d18e5a93282d",
          "length": 155,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "66b984b6-4b31-4533-a364-87474da3dc40"
        },
        "item": {
          "id": "8895ddb6-c888-4ea6-bfbe-0e5a83f0776c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9e9b3b1a-e34f-4839-8a2f-6f63c1f2297b",
          "status": "Created",
          "code": 201,
          "responseTime": 40,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "9c222220-b0de-4e8c-a01d-f6012816cf33",
        "cursor": {
          "ref": "53511784-f47f-4d56-9ed3-56076ccd0592",
          "length": 155,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "dfb73eb9-dfe2-44a8-9410-c56ecdd16cc6"
        },
        "item": {
          "id": "9c222220-b0de-4e8c-a01d-f6012816cf33",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "212a383a-7c63-41c3-867f-38c06d64d38d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "9c222220-b0de-4e8c-a01d-f6012816cf33",
        "cursor": {
          "ref": "53511784-f47f-4d56-9ed3-56076ccd0592",
          "length": 155,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "dfb73eb9-dfe2-44a8-9410-c56ecdd16cc6"
        },
        "item": {
          "id": "9c222220-b0de-4e8c-a01d-f6012816cf33",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "212a383a-7c63-41c3-867f-38c06d64d38d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 52
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "4e043971-df53-47c9-8676-1e917233e2e1",
        "cursor": {
          "ref": "cec4aab1-2b59-4b26-9a86-38e7a78e2ccb",
          "length": 155,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e3490ed3-9f91-4b43-b1a3-5d41ca15ae6f"
        },
        "item": {
          "id": "4e043971-df53-47c9-8676-1e917233e2e1",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "593989a3-4fed-4669-81a7-c1cf0b817be3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "4e043971-df53-47c9-8676-1e917233e2e1",
        "cursor": {
          "ref": "cec4aab1-2b59-4b26-9a86-38e7a78e2ccb",
          "length": 155,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e3490ed3-9f91-4b43-b1a3-5d41ca15ae6f"
        },
        "item": {
          "id": "4e043971-df53-47c9-8676-1e917233e2e1",
          "name": "credentials_issue:credential.issuanceDate:wrong_type"
        },
        "response": {
          "id": "593989a3-4fed-4669-81a7-c1cf0b817be3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 239
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "6beb82cc-a1da-491d-bb95-eb1f890914de",
        "cursor": {
          "ref": "37b1c5d9-ee0d-42b6-bcb6-f06aa998a742",
          "length": 155,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e4003f63-c28b-44aa-9fbb-32407906bee7"
        },
        "item": {
          "id": "6beb82cc-a1da-491d-bb95-eb1f890914de",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4b5d9ea0-be54-424c-a040-4810a708ae6e",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "6beb82cc-a1da-491d-bb95-eb1f890914de",
        "cursor": {
          "ref": "37b1c5d9-ee0d-42b6-bcb6-f06aa998a742",
          "length": 155,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e4003f63-c28b-44aa-9fbb-32407906bee7"
        },
        "item": {
          "id": "6beb82cc-a1da-491d-bb95-eb1f890914de",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4b5d9ea0-be54-424c-a040-4810a708ae6e",
          "status": "Created",
          "code": 201,
          "responseTime": 72,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "6beb2212-ed7d-41a5-97b9-4334a7c3c9af",
        "cursor": {
          "ref": "98a64f8c-088b-4c2b-9f7c-70deff5768f9",
          "length": 155,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "66b8f787-197b-44d1-bd6a-134f614a5922"
        },
        "item": {
          "id": "6beb2212-ed7d-41a5-97b9-4334a7c3c9af",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ff340f06-ec1c-47b3-80e2-97e13daf17b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "6beb2212-ed7d-41a5-97b9-4334a7c3c9af",
        "cursor": {
          "ref": "98a64f8c-088b-4c2b-9f7c-70deff5768f9",
          "length": 155,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "66b8f787-197b-44d1-bd6a-134f614a5922"
        },
        "item": {
          "id": "6beb2212-ed7d-41a5-97b9-4334a7c3c9af",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ff340f06-ec1c-47b3-80e2-97e13daf17b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 57
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "8df39a25-4188-4f6b-affd-018f4c0d9a0a",
        "cursor": {
          "ref": "33c17759-ab41-4da9-b1c1-8f2b09820ed8",
          "length": 155,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3b9ef667-32bc-41e6-87a6-07c561382a11"
        },
        "item": {
          "id": "8df39a25-4188-4f6b-affd-018f4c0d9a0a",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "99d00c30-23a3-4756-b429-9d8b6f3cb5b4",
          "status": "Created",
          "code": 201,
          "responseTime": 48,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "8df39a25-4188-4f6b-affd-018f4c0d9a0a",
        "cursor": {
          "ref": "33c17759-ab41-4da9-b1c1-8f2b09820ed8",
          "length": 155,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "3b9ef667-32bc-41e6-87a6-07c561382a11"
        },
        "item": {
          "id": "8df39a25-4188-4f6b-affd-018f4c0d9a0a",
          "name": "credentials_issue:credential.credentialSubject:wrong_type"
        },
        "response": {
          "id": "99d00c30-23a3-4756-b429-9d8b6f3cb5b4",
          "status": "Created",
          "code": 201,
          "responseTime": 48,
          "responseSize": 620
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "44e5ed3d-03c6-4ba9-bef8-2b92fe81264f",
        "cursor": {
          "ref": "8842b7a0-f718-4fcf-bdbf-53b2eb339d6c",
          "length": 155,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "381f88b7-435a-4995-b3ad-9962f6d12b2b"
        },
        "item": {
          "id": "44e5ed3d-03c6-4ba9-bef8-2b92fe81264f",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "2699520a-542d-46f5-b1b9-3b5f06f4c550",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "44e5ed3d-03c6-4ba9-bef8-2b92fe81264f",
        "cursor": {
          "ref": "8842b7a0-f718-4fcf-bdbf-53b2eb339d6c",
          "length": 155,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "381f88b7-435a-4995-b3ad-9962f6d12b2b"
        },
        "item": {
          "id": "44e5ed3d-03c6-4ba9-bef8-2b92fe81264f",
          "name": "credentials_issue:credential.credentialSubject.id:wrong_type"
        },
        "response": {
          "id": "2699520a-542d-46f5-b1b9-3b5f06f4c550",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "d5f3592d-d8d7-4fa3-ba27-1e72e177778a",
        "cursor": {
          "ref": "9b5c64de-b0ba-4dd9-b330-96e082e57cf0",
          "length": 155,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e730aa01-4665-4911-882f-202a9dd312fd"
        },
        "item": {
          "id": "d5f3592d-d8d7-4fa3-ba27-1e72e177778a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d1b57ac1-45e5-41bc-8bc7-cef309b34c12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 21,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "d5f3592d-d8d7-4fa3-ba27-1e72e177778a",
        "cursor": {
          "ref": "9b5c64de-b0ba-4dd9-b330-96e082e57cf0",
          "length": 155,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e730aa01-4665-4911-882f-202a9dd312fd"
        },
        "item": {
          "id": "d5f3592d-d8d7-4fa3-ba27-1e72e177778a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d1b57ac1-45e5-41bc-8bc7-cef309b34c12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 21,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "fa0bf42f-6db6-4a9e-b3a9-a8aa02213f63",
        "cursor": {
          "ref": "297250c8-731d-41bb-b946-48460dd5e7a8",
          "length": 155,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "71edd39c-5c69-42f1-8fdc-35f57dcb47c6"
        },
        "item": {
          "id": "fa0bf42f-6db6-4a9e-b3a9-a8aa02213f63",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "d778d31a-fd00-42ae-b08e-12d246b394b2",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "fa0bf42f-6db6-4a9e-b3a9-a8aa02213f63",
        "cursor": {
          "ref": "297250c8-731d-41bb-b946-48460dd5e7a8",
          "length": 155,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "71edd39c-5c69-42f1-8fdc-35f57dcb47c6"
        },
        "item": {
          "id": "fa0bf42f-6db6-4a9e-b3a9-a8aa02213f63",
          "name": "credentials_issue:options:wrong_type"
        },
        "response": {
          "id": "d778d31a-fd00-42ae-b08e-12d246b394b2",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "3deac9ea-ece8-47f5-810d-47c406d02444",
        "cursor": {
          "ref": "ddcba91f-c2d6-4396-b960-81c0510b4c41",
          "length": 155,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c41c96c0-eae0-4d61-af40-7d4fafde9150"
        },
        "item": {
          "id": "3deac9ea-ece8-47f5-810d-47c406d02444",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "489191c2-4ef0-4262-b646-2deb45052385",
          "status": "Created",
          "code": 201,
          "responseTime": 43,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "3deac9ea-ece8-47f5-810d-47c406d02444",
        "cursor": {
          "ref": "ddcba91f-c2d6-4396-b960-81c0510b4c41",
          "length": 155,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c41c96c0-eae0-4d61-af40-7d4fafde9150"
        },
        "item": {
          "id": "3deac9ea-ece8-47f5-810d-47c406d02444",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "489191c2-4ef0-4262-b646-2deb45052385",
          "status": "Created",
          "code": 201,
          "responseTime": 43,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "fd7df69e-a20e-4b1b-b11c-a3e3afedeb0b",
        "cursor": {
          "ref": "bc5c8843-b218-4958-a6ab-0cb1b2df8e23",
          "length": 155,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d141cde6-28be-47e2-8039-d1917fb894d9"
        },
        "item": {
          "id": "fd7df69e-a20e-4b1b-b11c-a3e3afedeb0b",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "5f08dd18-7a55-4f8a-be2b-22eb5626eb7f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "fd7df69e-a20e-4b1b-b11c-a3e3afedeb0b",
        "cursor": {
          "ref": "bc5c8843-b218-4958-a6ab-0cb1b2df8e23",
          "length": 155,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d141cde6-28be-47e2-8039-d1917fb894d9"
        },
        "item": {
          "id": "fd7df69e-a20e-4b1b-b11c-a3e3afedeb0b",
          "name": "credentials_issue:options.type:wrong_type"
        },
        "response": {
          "id": "5f08dd18-7a55-4f8a-be2b-22eb5626eb7f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "cc41229b-0bd1-4926-9852-6e944f429dda",
        "cursor": {
          "ref": "ad4ee886-9989-467d-bffd-8b800b60a6a8",
          "length": 155,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e44809cd-abcd-4d50-8dfa-652be893ee11"
        },
        "item": {
          "id": "cc41229b-0bd1-4926-9852-6e944f429dda",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "28dbc052-764c-41dc-a24d-4463a0880cbd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "cc41229b-0bd1-4926-9852-6e944f429dda",
        "cursor": {
          "ref": "ad4ee886-9989-467d-bffd-8b800b60a6a8",
          "length": 155,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e44809cd-abcd-4d50-8dfa-652be893ee11"
        },
        "item": {
          "id": "cc41229b-0bd1-4926-9852-6e944f429dda",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "28dbc052-764c-41dc-a24d-4463a0880cbd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 51
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "998bc2c6-b5c1-4b8d-b694-5fa4740383cf",
        "cursor": {
          "ref": "aba887b1-7e6d-4d5c-8748-ebcae82fc1e6",
          "length": 155,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "76f54b0c-3c98-4b11-a3ff-04529b681523"
        },
        "item": {
          "id": "998bc2c6-b5c1-4b8d-b694-5fa4740383cf",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "d5b7485f-259a-465e-9541-4bd40f57f3c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "998bc2c6-b5c1-4b8d-b694-5fa4740383cf",
        "cursor": {
          "ref": "aba887b1-7e6d-4d5c-8748-ebcae82fc1e6",
          "length": 155,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "76f54b0c-3c98-4b11-a3ff-04529b681523"
        },
        "item": {
          "id": "998bc2c6-b5c1-4b8d-b694-5fa4740383cf",
          "name": "credentials_issue:options.created:wrong_type"
        },
        "response": {
          "id": "d5b7485f-259a-465e-9541-4bd40f57f3c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "057e113a-8302-4f51-876d-c2d6e97d0228",
        "cursor": {
          "ref": "cb128926-0b8b-406d-8194-802367e4cc27",
          "length": 155,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "70349d11-e711-4207-b246-e96775e56037"
        },
        "item": {
          "id": "057e113a-8302-4f51-876d-c2d6e97d0228",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "6f60bb74-ff43-4482-889f-0c5fd1063c77",
          "status": "Created",
          "code": 201,
          "responseTime": 47,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "057e113a-8302-4f51-876d-c2d6e97d0228",
        "cursor": {
          "ref": "cb128926-0b8b-406d-8194-802367e4cc27",
          "length": 155,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "70349d11-e711-4207-b246-e96775e56037"
        },
        "item": {
          "id": "057e113a-8302-4f51-876d-c2d6e97d0228",
          "name": "credentials_issue:options.credentialStatus:wrong_type"
        },
        "response": {
          "id": "6f60bb74-ff43-4482-889f-0c5fd1063c77",
          "status": "Created",
          "code": 201,
          "responseTime": 47,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "b460dd1c-eccf-45ba-93e9-d2d20c776a40",
        "cursor": {
          "ref": "9d0883ca-7f1f-4408-847c-60595388f1ca",
          "length": 155,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "09441cec-ed96-4b5c-bc7c-9c9cd1713995"
        },
        "item": {
          "id": "b460dd1c-eccf-45ba-93e9-d2d20c776a40",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "e85553f5-c30b-4a72-ba9b-383166e83e22",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "b460dd1c-eccf-45ba-93e9-d2d20c776a40",
        "cursor": {
          "ref": "9d0883ca-7f1f-4408-847c-60595388f1ca",
          "length": 155,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "09441cec-ed96-4b5c-bc7c-9c9cd1713995"
        },
        "item": {
          "id": "b460dd1c-eccf-45ba-93e9-d2d20c776a40",
          "name": "credentials_issue:options.credentialStatus.type:wrong_type"
        },
        "response": {
          "id": "e85553f5-c30b-4a72-ba9b-383166e83e22",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "b9ec6221-b661-4bb0-9a47-2217310e51ee",
        "cursor": {
          "ref": "750717bc-7fb3-4ffc-a4bb-2e19373e8962",
          "length": 155,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9dbe0b24-57a5-481c-94d8-291dfd2ca3cf"
        },
        "item": {
          "id": "b9ec6221-b661-4bb0-9a47-2217310e51ee",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "5d21863b-0c05-4c01-99f2-7644fbd040eb",
          "status": "Created",
          "code": 201,
          "responseTime": 42,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "b9ec6221-b661-4bb0-9a47-2217310e51ee",
        "cursor": {
          "ref": "750717bc-7fb3-4ffc-a4bb-2e19373e8962",
          "length": 155,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9dbe0b24-57a5-481c-94d8-291dfd2ca3cf"
        },
        "item": {
          "id": "b9ec6221-b661-4bb0-9a47-2217310e51ee",
          "name": "credentials_issue:options.credentialStatus.type:invalid_value"
        },
        "response": {
          "id": "5d21863b-0c05-4c01-99f2-7644fbd040eb",
          "status": "Created",
          "code": 201,
          "responseTime": 42,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "475339fd-713a-41ec-9537-20b84adec979",
        "cursor": {
          "ref": "61625bc8-21fe-4d14-b141-e223a4666244",
          "length": 155,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d5751c8f-ad58-4fb1-8cc0-005e320c1d66"
        },
        "item": {
          "id": "475339fd-713a-41ec-9537-20b84adec979",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5e954c0a-6044-4084-9e03-cf3bd04aa455",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "475339fd-713a-41ec-9537-20b84adec979",
        "cursor": {
          "ref": "61625bc8-21fe-4d14-b141-e223a4666244",
          "length": 155,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d5751c8f-ad58-4fb1-8cc0-005e320c1d66"
        },
        "item": {
          "id": "475339fd-713a-41ec-9537-20b84adec979",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5e954c0a-6044-4084-9e03-cf3bd04aa455",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2db44d99-aff9-4784-8a6b-750c74563d2d",
        "cursor": {
          "ref": "a46137e0-135b-4abb-99c8-3d75da8fde5b",
          "length": 155,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "05e59dc6-7886-4558-921c-ce86660bf7b0"
        },
        "item": {
          "id": "2db44d99-aff9-4784-8a6b-750c74563d2d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a0dd98e9-3a0c-4dcc-aff4-0e85dd45e9bf",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2db44d99-aff9-4784-8a6b-750c74563d2d",
        "cursor": {
          "ref": "a46137e0-135b-4abb-99c8-3d75da8fde5b",
          "length": 155,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "05e59dc6-7886-4558-921c-ce86660bf7b0"
        },
        "item": {
          "id": "2db44d99-aff9-4784-8a6b-750c74563d2d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a0dd98e9-3a0c-4dcc-aff4-0e85dd45e9bf",
          "status": "Created",
          "code": 201,
          "responseTime": 39,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1aa1c442-698f-4787-8d65-adc58009d891",
        "cursor": {
          "ref": "6f9b6835-513d-4c0c-a4f0-80f8de7b32d0",
          "length": 155,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d6aec55e-0193-4537-9f97-e080568bb9c9"
        },
        "item": {
          "id": "1aa1c442-698f-4787-8d65-adc58009d891",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9ece2b51-1081-4963-8f33-114e990d1479",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa1c442-698f-4787-8d65-adc58009d891",
        "cursor": {
          "ref": "6f9b6835-513d-4c0c-a4f0-80f8de7b32d0",
          "length": 155,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d6aec55e-0193-4537-9f97-e080568bb9c9"
        },
        "item": {
          "id": "1aa1c442-698f-4787-8d65-adc58009d891",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9ece2b51-1081-4963-8f33-114e990d1479",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:41)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95cea85-ac63-445a-8540-28843e9beaca",
        "cursor": {
          "ref": "65a88696-d451-4ee7-9af0-b97935fc572f",
          "length": 155,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "aa79872b-74c8-4761-a67b-9f8430b5d792"
        },
        "item": {
          "id": "f95cea85-ac63-445a-8540-28843e9beaca",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "6bd5b28f-06b8-4864-a559-5be0814af3e1",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95cea85-ac63-445a-8540-28843e9beaca",
        "cursor": {
          "ref": "65a88696-d451-4ee7-9af0-b97935fc572f",
          "length": 155,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "aa79872b-74c8-4761-a67b-9f8430b5d792"
        },
        "item": {
          "id": "f95cea85-ac63-445a-8540-28843e9beaca",
          "name": "credentials_issue:credential:opt.id"
        },
        "response": {
          "id": "6bd5b28f-06b8-4864-a559-5be0814af3e1",
          "status": "Created",
          "code": 201,
          "responseTime": 33,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e82502-b5f8-4334-9550-7328b3b440ed",
        "cursor": {
          "ref": "3c28a9fa-d07c-4dd1-933b-0e002643b407",
          "length": 155,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4f4ea3b9-36ed-481d-a6c4-1df4eaa49186"
        },
        "item": {
          "id": "e3e82502-b5f8-4334-9550-7328b3b440ed",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f12fdae7-d9cc-40a9-8532-314043b88de5",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "e3e82502-b5f8-4334-9550-7328b3b440ed",
        "cursor": {
          "ref": "3c28a9fa-d07c-4dd1-933b-0e002643b407",
          "length": 155,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4f4ea3b9-36ed-481d-a6c4-1df4eaa49186"
        },
        "item": {
          "id": "e3e82502-b5f8-4334-9550-7328b3b440ed",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f12fdae7-d9cc-40a9-8532-314043b88de5",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 611
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'",
              "stack": "AssertionError: expected 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn' to equal 'did:web:vc.mesur.io:api'\n   at Object.eval sandbox-script.js:3:43)"
            }
          }
        ]
      },
      {
        "id": "cf68f734-0cdc-475e-b176-c99fb40f688c",
        "cursor": {
          "ref": "ead61b52-2ffb-4a6c-b6fc-795f6a389087",
          "length": 155,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "56da54d9-baa0-4f0e-a0b4-862700527fb8"
        },
        "item": {
          "id": "cf68f734-0cdc-475e-b176-c99fb40f688c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "00be1443-460e-4b6b-b307-f127ff51fd47",
          "status": "Created",
          "code": 201,
          "responseTime": 80,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf68f734-0cdc-475e-b176-c99fb40f688c",
        "cursor": {
          "ref": "ead61b52-2ffb-4a6c-b6fc-795f6a389087",
          "length": 155,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "56da54d9-baa0-4f0e-a0b4-862700527fb8"
        },
        "item": {
          "id": "cf68f734-0cdc-475e-b176-c99fb40f688c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "00be1443-460e-4b6b-b307-f127ff51fd47",
          "status": "Created",
          "code": 201,
          "responseTime": 80,
          "responseSize": 626
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3b2df0-a54e-4743-9e75-dc0fd7f94abe",
        "cursor": {
          "ref": "139f074e-d0fd-4a7c-8e20-8048c667a049",
          "length": 155,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "611e2b5e-2fb0-490a-98b8-ff75ec5bd259"
        },
        "item": {
          "id": "1c3b2df0-a54e-4743-9e75-dc0fd7f94abe",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ee4b6518-08a1-4ad8-b378-aebb8aedf82f",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3b2df0-a54e-4743-9e75-dc0fd7f94abe",
        "cursor": {
          "ref": "139f074e-d0fd-4a7c-8e20-8048c667a049",
          "length": 155,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "611e2b5e-2fb0-490a-98b8-ff75ec5bd259"
        },
        "item": {
          "id": "1c3b2df0-a54e-4743-9e75-dc0fd7f94abe",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ee4b6518-08a1-4ad8-b378-aebb8aedf82f",
          "status": "Created",
          "code": 201,
          "responseTime": 37,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a647f4-2041-4231-a89a-d3cc2e83f1c6",
        "cursor": {
          "ref": "b2002049-8142-438f-b4ab-00635343c32a",
          "length": 155,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3315d94a-fcd8-468b-a161-2ddd103fb190"
        },
        "item": {
          "id": "e8a647f4-2041-4231-a89a-d3cc2e83f1c6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "478e8d7e-5f58-45c3-b25d-1d7fe7c32c46",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a647f4-2041-4231-a89a-d3cc2e83f1c6",
        "cursor": {
          "ref": "b2002049-8142-438f-b4ab-00635343c32a",
          "length": 155,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3315d94a-fcd8-468b-a161-2ddd103fb190"
        },
        "item": {
          "id": "e8a647f4-2041-4231-a89a-d3cc2e83f1c6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "478e8d7e-5f58-45c3-b25d-1d7fe7c32c46",
          "status": "Created",
          "code": 201,
          "responseTime": 38,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e71d3a-b03f-42d9-a80e-19c7fea625f2",
        "cursor": {
          "ref": "4680ff53-ec47-4812-8329-909b21592224",
          "length": 155,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c4d249c1-a2b5-497f-8d31-9ccff28dcbb9"
        },
        "item": {
          "id": "c7e71d3a-b03f-42d9-a80e-19c7fea625f2",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "d5e2fe77-18ac-4d4b-8c8f-4e83a3101d81",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e71d3a-b03f-42d9-a80e-19c7fea625f2",
        "cursor": {
          "ref": "4680ff53-ec47-4812-8329-909b21592224",
          "length": 155,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c4d249c1-a2b5-497f-8d31-9ccff28dcbb9"
        },
        "item": {
          "id": "c7e71d3a-b03f-42d9-a80e-19c7fea625f2",
          "name": "credentials_issue:options:opt.credentialStatus.type"
        },
        "response": {
          "id": "d5e2fe77-18ac-4d4b-8c8f-4e83a3101d81",
          "status": "Created",
          "code": 201,
          "responseTime": 35,
          "responseSize": 604
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc16d285-14b6-4693-aed8-e3f5d0e2467b",
        "cursor": {
          "ref": "55528836-e351-40eb-8a53-21dac2519ed6",
          "length": 155,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "72fb1fce-60cc-485d-8cff-29b840b3ddcd"
        },
        "item": {
          "id": "cc16d285-14b6-4693-aed8-e3f5d0e2467b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "413e6493-7769-4fab-97be-7245ff14610a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "cc16d285-14b6-4693-aed8-e3f5d0e2467b",
        "cursor": {
          "ref": "55528836-e351-40eb-8a53-21dac2519ed6",
          "length": 155,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "72fb1fce-60cc-485d-8cff-29b840b3ddcd"
        },
        "item": {
          "id": "cc16d285-14b6-4693-aed8-e3f5d0e2467b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "413e6493-7769-4fab-97be-7245ff14610a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b588f164-9cbc-46b4-b88f-05b99ad0337a",
        "cursor": {
          "ref": "fb418d6b-c999-4703-b228-140cc69b8473",
          "length": 155,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "70421486-4f00-4779-9264-fe8accc92c9c"
        },
        "item": {
          "id": "b588f164-9cbc-46b4-b88f-05b99ad0337a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "540a1680-9cda-4c67-a186-c310f90ba888",
          "status": "Not Implemented",
          "code": 501,
          "responseTime": 11,
          "responseSize": 31
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 501",
              "stack": "AssertionError: expected response to have status code 403 but got 501\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "dc0cfd2a-738f-42ea-b6bd-f63a0de5013c",
        "cursor": {
          "ref": "5446884a-c464-45a4-95a7-3e4f24775cff",
          "length": 155,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1d9385a5-9ace-47ff-b143-ff24bab99038"
        },
        "item": {
          "id": "dc0cfd2a-738f-42ea-b6bd-f63a0de5013c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "341e4699-c7a9-4847-9b92-c57ab0932d3d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 12,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "dc0cfd2a-738f-42ea-b6bd-f63a0de5013c",
        "cursor": {
          "ref": "5446884a-c464-45a4-95a7-3e4f24775cff",
          "length": 155,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1d9385a5-9ace-47ff-b143-ff24bab99038"
        },
        "item": {
          "id": "dc0cfd2a-738f-42ea-b6bd-f63a0de5013c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "341e4699-c7a9-4847-9b92-c57ab0932d3d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 12,
          "responseSize": 70
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b1046551-535f-42fa-87b3-ca49d1d3a7db",
        "cursor": {
          "ref": "e1398553-66aa-4fd3-a125-9f2905144fe6",
          "length": 155,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "26dd5f7a-6601-44e2-beb5-f0b1af479ead"
        },
        "item": {
          "id": "b1046551-535f-42fa-87b3-ca49d1d3a7db",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ce690cba-f735-4674-a0d3-457a91ecc86b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 10,
          "responseSize": 56
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "56e709ed-d863-4b4e-a825-be287036fd9b",
        "cursor": {
          "ref": "4c8ccbff-cd06-440f-9034-1388803c677d",
          "length": 155,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4e558cfa-f083-4cb9-ad57-5dd6eadd65c5"
        },
        "item": {
          "id": "56e709ed-d863-4b4e-a825-be287036fd9b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3cd2cf05-298c-4229-ba03-cc17a9905be3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 65
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "6e17052c-f747-425d-bae4-70f9f4c53574",
        "cursor": {
          "ref": "14d48d16-e91a-48b6-8d59-44be164e05e3",
          "length": 155,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d29e92b3-377e-4f49-8530-6e127e4d2046"
        },
        "item": {
          "id": "6e17052c-f747-425d-bae4-70f9f4c53574",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cfff6747-b958-4ac7-83a5-ec1ffc795817",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "e35331a1-8fa4-4720-95f9-eeb3fab861f5",
        "cursor": {
          "ref": "0340d9f7-8f81-4ae9-b73d-18a0d672a265",
          "length": 155,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "28a5a36b-d85b-4b5c-88d8-164064f0b846"
        },
        "item": {
          "id": "e35331a1-8fa4-4720-95f9-eeb3fab861f5",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b394b636-4331-473b-b800-e928103994c8",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "d2c543e4-2e7c-4e5f-b234-bb7510c5ceb3",
        "cursor": {
          "ref": "db3099f4-4c8c-4dc2-bf73-803c50eaf97c",
          "length": 155,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fa8a8023-9584-4b3d-80be-d1a798499d51"
        },
        "item": {
          "id": "d2c543e4-2e7c-4e5f-b234-bb7510c5ceb3",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "352aa8a1-2f5b-4957-97ce-269ab8ebc51c",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "384ec854-dde8-4526-a0f2-bbf937341a49",
        "cursor": {
          "ref": "9a811359-c095-45ec-af69-6721842a66ef",
          "length": 155,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "65b67696-1575-4f29-b420-6cf33135fec1"
        },
        "item": {
          "id": "384ec854-dde8-4526-a0f2-bbf937341a49",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "dea75862-d65a-4c92-9571-072c2e0eb284",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "7302920e-40e7-4335-bb41-ffaef2edefa5",
        "cursor": {
          "ref": "ea758eed-1f0b-4327-ae4d-fff97f5f32b7",
          "length": 155,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "08db2f25-128a-45ca-ae64-a302be2cc921"
        },
        "item": {
          "id": "7302920e-40e7-4335-bb41-ffaef2edefa5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "61fcfb81-7dc4-4d1e-bbfb-f12dbbd752b0",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "5a3bbaa7-6165-49df-97e5-37e06457f53c",
        "cursor": {
          "ref": "532ecad2-4fdc-4aa8-aeac-71648540315e",
          "length": 155,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "dcdbe37d-3c6a-46f3-83b6-5c6a0225c847"
        },
        "item": {
          "id": "5a3bbaa7-6165-49df-97e5-37e06457f53c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "169b86d7-7daa-4a16-b246-cff50080f82c",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "9b84bf56-7d07-499c-b1b6-1892e9e777f2",
        "cursor": {
          "ref": "3376960f-a96a-4464-b460-c362a2c52102",
          "length": 155,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b9e6542c-38f4-4007-a7ad-a676df4ca34f"
        },
        "item": {
          "id": "9b84bf56-7d07-499c-b1b6-1892e9e777f2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "81228696-5487-4417-9fed-ecada98ad73b",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "44f88f1d-0153-4548-8e91-86cda114b9f5",
        "cursor": {
          "ref": "9ed2f3b7-1684-4947-9007-5747d88d1999",
          "length": 155,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9cef99d6-72d3-40c7-9231-58afb29e52f8"
        },
        "item": {
          "id": "44f88f1d-0153-4548-8e91-86cda114b9f5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c33ec914-36e9-4df0-8eb6-7c88da524e73",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "69a2f0bf-68d7-4793-8f70-33f337cbb502",
        "cursor": {
          "ref": "96acada2-c68d-40a5-bd8a-65358d63de93",
          "length": 155,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9cb9ee44-f14c-4566-8d84-4cece771e973"
        },
        "item": {
          "id": "69a2f0bf-68d7-4793-8f70-33f337cbb502",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3268ff78-f15a-4916-bfdc-4bfebbaa4f08",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "52b4b3b5-31dd-444e-8535-6f7eb5fc1a0c",
        "cursor": {
          "ref": "ded77cca-7405-45ae-96b5-e438e2aa0f0e",
          "length": 155,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8a74f882-6aee-44ce-ab27-c9d09a5c5353"
        },
        "item": {
          "id": "52b4b3b5-31dd-444e-8535-6f7eb5fc1a0c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ac0b30d6-9b45-48f9-ab4b-be489b0e0871",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "b641f476-f1c3-473b-90bc-e33d6924f6f3",
        "cursor": {
          "ref": "ebf0a271-46e3-4d39-8060-ca5594e706fd",
          "length": 155,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ea412e8d-8e59-4f17-b673-8b6512a024ff"
        },
        "item": {
          "id": "b641f476-f1c3-473b-90bc-e33d6924f6f3",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7207be43-2f4a-4150-9a70-6282e50985fc",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "8990332b-4408-4545-a1e9-f194e4095f30",
        "cursor": {
          "ref": "77a1e847-eaa2-4152-a0ac-00a420241db3",
          "length": 155,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "444dbead-f10b-457d-bd45-78aa7c985a62"
        },
        "item": {
          "id": "8990332b-4408-4545-a1e9-f194e4095f30",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5189c361-8c5c-4690-92dc-a419249e5df1",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "07305d6a-0449-4b2d-9074-61558749e4f4",
        "cursor": {
          "ref": "e513e845-98e6-4d73-bb65-4200492d0b33",
          "length": 155,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "03285f09-ecc9-4fa3-97f1-2289ab7d8b7a"
        },
        "item": {
          "id": "07305d6a-0449-4b2d-9074-61558749e4f4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "585076ac-b3bd-4d13-aef0-c830dcb76fad",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "5253dbc1-037c-46ff-9327-7679d5820d77",
        "cursor": {
          "ref": "3a3a9051-af39-4334-a4cb-2569fed51b18",
          "length": 155,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0c0ca2e8-43e2-4aff-9524-b46e271a8f5e"
        },
        "item": {
          "id": "5253dbc1-037c-46ff-9327-7679d5820d77",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9c5d2f44-658d-4e66-a25a-967bafd02c4b",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "3cb5826e-dd04-4548-a0ca-e81d66da2e44",
        "cursor": {
          "ref": "56fa6687-b581-40d3-a69f-75c6971e9252",
          "length": 155,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "22f33777-175c-4362-8c2e-535c207ccee0"
        },
        "item": {
          "id": "3cb5826e-dd04-4548-a0ca-e81d66da2e44",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c134fe60-ab53-4b75-bb53-dc6243b22675",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "edccf162-1110-4d30-a033-252f94b98e88",
        "cursor": {
          "ref": "5f1b02e6-17a9-4f9c-b22f-61a5b606564c",
          "length": 155,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "59aa7228-10f2-47da-9aee-9f69368bc3e8"
        },
        "item": {
          "id": "edccf162-1110-4d30-a033-252f94b98e88",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e80f39e6-97f6-4958-bf48-1fefadaeb363",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "4b0adc3d-6155-477b-b3b1-ce5317525f72",
        "cursor": {
          "ref": "b00de2b3-05f4-4ba8-a5ed-47f1a5727316",
          "length": 155,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4d795ffa-04b0-457d-9db4-48de5312646f"
        },
        "item": {
          "id": "4b0adc3d-6155-477b-b3b1-ce5317525f72",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4bb3dad4-37d7-4904-94d8-aa8cbaacf2f3",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "234e7bef-9a06-465c-90f1-26264ebbdddf",
        "cursor": {
          "ref": "9b885c06-64dd-4aa6-b786-c452ef742b04",
          "length": 155,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8e88461b-e349-45a4-9c80-e9871ab789f5"
        },
        "item": {
          "id": "234e7bef-9a06-465c-90f1-26264ebbdddf",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "39ca0743-2624-4d02-8273-ae3e42a689d7",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "203e1f90-f6af-41ee-99c8-b97da4377583",
        "cursor": {
          "ref": "913189c5-8313-4a79-9977-4adb25154dbe",
          "length": 155,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0cfa5bbf-85ad-4781-a773-90566683b5d8"
        },
        "item": {
          "id": "203e1f90-f6af-41ee-99c8-b97da4377583",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c59240a9-e6c8-479c-b9b4-fdb1532c8451",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "fd573614-d765-460f-af35-eb4ecf689fd7",
        "cursor": {
          "ref": "1e7f37e3-d593-497d-8a22-f72d664a8d7f",
          "length": 155,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d79ebea5-92da-4b08-b995-dc9116995417"
        },
        "item": {
          "id": "fd573614-d765-460f-af35-eb4ecf689fd7",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d512e548-d105-41ac-8d32-e60f58d74c37",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "ebd4b739-f7b2-41bb-9066-da6e412060bb",
        "cursor": {
          "ref": "33701797-f066-4719-9cdb-833a90c4f9cd",
          "length": 155,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "137704c2-6a1f-4327-8528-089acc931b13"
        },
        "item": {
          "id": "ebd4b739-f7b2-41bb-9066-da6e412060bb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8423d5b3-9839-4f98-b356-dc6ba1242dae",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "acbb0dd9-c48a-42c5-8664-65c5ddd11226",
        "cursor": {
          "ref": "f83e3e5e-6f56-496a-b088-1ce03e687478",
          "length": 155,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "897b4053-005b-4ea5-993e-cc1e31972065"
        },
        "item": {
          "id": "acbb0dd9-c48a-42c5-8664-65c5ddd11226",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "56893a05-c916-4b0d-93d5-114526891f96",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "f7816b39-e7ca-47a0-bc21-edfb9805da57",
        "cursor": {
          "ref": "a5c20837-824c-4d03-8e94-097ad37d1929",
          "length": 155,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "17bb29a8-ffb5-4334-813e-59d786225f10"
        },
        "item": {
          "id": "f7816b39-e7ca-47a0-bc21-edfb9805da57",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "26d490e5-9a2e-4307-8775-de2e1cf7796d",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "f76c0f08-c902-48ed-91f1-4a30b42767ae",
        "cursor": {
          "ref": "893f0c8c-0d09-4d06-9ada-ede7b18f3ae2",
          "length": 155,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1ef792e1-74e0-48ce-8c99-5b0b8e47efb3"
        },
        "item": {
          "id": "f76c0f08-c902-48ed-91f1-4a30b42767ae",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8808fefc-b795-4767-82b5-2560417e2174",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "c7faa458-ce2b-4eb1-ad2a-17d5faf49404",
        "cursor": {
          "ref": "aedb8aa3-8792-48f0-a521-4b51187f1a74",
          "length": 155,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "67722ffa-b512-477a-a450-137ee56c83b8"
        },
        "item": {
          "id": "c7faa458-ce2b-4eb1-ad2a-17d5faf49404",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1258fc0b-fbbd-4dac-a84d-1347bff81b96",
          "status": "OK",
          "code": 200,
          "responseTime": 41,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "fbafd983-c114-4fc8-974d-2dc30fe8e3f6",
        "cursor": {
          "ref": "5cb74be1-6c9c-499a-a6fb-565bafbde2e3",
          "length": 155,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "cc2fdb59-4de4-4fbd-a148-5dd4f39fbb8f"
        },
        "item": {
          "id": "fbafd983-c114-4fc8-974d-2dc30fe8e3f6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0556d949-c7ee-4dd0-9bee-2dd84d65ecbf",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "32c675a6-d69b-49b4-ac03-423a76f90ed9",
        "cursor": {
          "ref": "50c478ca-4946-4701-80ca-0027c4e15f83",
          "length": 155,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d7975bd0-2e67-42a7-8f93-0ae88895d121"
        },
        "item": {
          "id": "32c675a6-d69b-49b4-ac03-423a76f90ed9",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "310dfdac-2f69-44db-a093-38e0861e528e",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "583c5c3e-3c9e-42fb-b1d7-dfe3ec17d981",
        "cursor": {
          "ref": "4c88c65b-b3d4-4d92-a630-103bf15adf8e",
          "length": 155,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0a82b369-7a11-40bf-910d-d4cfdca34ec5"
        },
        "item": {
          "id": "583c5c3e-3c9e-42fb-b1d7-dfe3ec17d981",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9e589043-4631-4166-9b47-6c2ea04872b2",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "40327a8a-3379-4993-8af3-1a1ea703d030",
        "cursor": {
          "ref": "d2f25706-a3fb-4a7a-8863-0167f75ecaa9",
          "length": 155,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "62670ff4-3284-4fae-a489-09f72bc27411"
        },
        "item": {
          "id": "40327a8a-3379-4993-8af3-1a1ea703d030",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b8f81cf2-c53e-422c-afe1-86f78dab70b8",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "abe25450-3d9d-4471-8710-38d16ddf4960",
        "cursor": {
          "ref": "ba652d68-4d7f-4c80-81c6-d68b657db28d",
          "length": 155,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "929546d2-f50e-49f1-8cd3-07020ccd50ea"
        },
        "item": {
          "id": "abe25450-3d9d-4471-8710-38d16ddf4960",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "dd784b23-7ad5-4899-8cb4-bf191be28df4",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "e0682343-b3a0-4b7a-ab7a-35b8edf3632d",
        "cursor": {
          "ref": "2c0b9ed2-0119-465c-89a5-45144474f4be",
          "length": 155,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6ffcbd90-4740-475a-ae58-642b087ad6d0"
        },
        "item": {
          "id": "e0682343-b3a0-4b7a-ab7a-35b8edf3632d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "065296bc-59f2-4b97-9614-807ee37772ca",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "3e0bc58a-0067-4b90-a81d-8ab1796cd6d2",
        "cursor": {
          "ref": "3f972f7c-ddcd-4291-942c-dcdc4436e02d",
          "length": 155,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "0a13beaf-0769-4c8b-a889-0fc397b685b9"
        },
        "item": {
          "id": "3e0bc58a-0067-4b90-a81d-8ab1796cd6d2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0222d251-f3e6-4426-9f2a-75ec8e16efa6",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "0693e077-79e2-4fae-982a-128809ffb924",
        "cursor": {
          "ref": "b2d8e242-40f0-4d7d-a02f-eff59020f1a1",
          "length": 155,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a62af0fa-6355-486a-b928-f43393f616ec"
        },
        "item": {
          "id": "0693e077-79e2-4fae-982a-128809ffb924",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "21acad17-af0c-40a5-87f0-35a5dfb7b00d",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "7686bebf-5932-45dc-a92b-9cc63901735d",
        "cursor": {
          "ref": "fe0b123b-159a-46ea-882d-3aec47965cba",
          "length": 155,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4d9cd431-7a30-44bc-ba9d-9a588d99346f"
        },
        "item": {
          "id": "7686bebf-5932-45dc-a92b-9cc63901735d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1df0b8f3-c8d1-48b7-aede-9a31828129cf",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "fb0b8c2f-8777-496f-8d2c-dcbb4af75628",
        "cursor": {
          "ref": "497d5b63-a6a6-4921-ac78-11e22c2bbc9b",
          "length": 155,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "fd1a379e-d8cf-48c6-9ac2-1c4600a88a71"
        },
        "item": {
          "id": "fb0b8c2f-8777-496f-8d2c-dcbb4af75628",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a60218d9-2847-4398-9122-cc123daf0a38",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "6bc76f32-4778-4a9a-b3d0-ef5b517ab0d4",
        "cursor": {
          "ref": "f635421b-3d63-4ebc-b349-1276a8105121",
          "length": 155,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "093cdae6-068c-4afb-881f-65b37cc03cab"
        },
        "item": {
          "id": "6bc76f32-4778-4a9a-b3d0-ef5b517ab0d4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0b9254ea-596c-4928-992b-747db5a6b6ba",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "0b417077-d872-489c-bc04-85048cdfe481",
        "cursor": {
          "ref": "d2db8b8c-5241-4b43-a5d5-5d1f8b0edc66",
          "length": 155,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "41e1347a-228e-41e1-a9c4-2100a511e834"
        },
        "item": {
          "id": "0b417077-d872-489c-bc04-85048cdfe481",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "10ba7ec7-a270-4b7e-8eff-7de27a40ee55",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "a4f15000-3453-481f-b66d-36a4c2656133",
        "cursor": {
          "ref": "6d6743a9-6a56-4a3f-a868-55e457bcbe75",
          "length": 155,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "253311a2-e359-4157-a3ef-852cfc42255b"
        },
        "item": {
          "id": "a4f15000-3453-481f-b66d-36a4c2656133",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0de914b8-6cb8-4660-b0c8-fcc6323f630d",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "a74848b2-7892-411b-ade8-3b21a4341ffd",
        "cursor": {
          "ref": "30ff1b00-3e4b-456e-ae23-f9e2f7e3352a",
          "length": 155,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c28b9272-1ca3-4dcf-9160-33c99d93e2b0"
        },
        "item": {
          "id": "a74848b2-7892-411b-ade8-3b21a4341ffd",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c7af3015-3015-491d-baf9-7bcf41839d9b",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "4e388840-5c09-473d-952d-90e379bf98f5",
        "cursor": {
          "ref": "bdcfd059-4643-4dcc-a694-4eb4fc880bbb",
          "length": 155,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "459f5144-2e91-4f7c-b594-e72f7cc924e8"
        },
        "item": {
          "id": "4e388840-5c09-473d-952d-90e379bf98f5",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b0d3c9c8-21bd-4ded-a26c-8457aaab6cb2",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "9c6d174d-d549-41fe-8a01-793294abc045",
        "cursor": {
          "ref": "5066c0b8-bdec-4d43-b247-526f3acd65a8",
          "length": 155,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e59e19a0-c1cd-4eda-997c-f7d6571a5a1a"
        },
        "item": {
          "id": "9c6d174d-d549-41fe-8a01-793294abc045",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e71ce638-43a0-4bab-8bd5-74d69b6dc808",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "458a7b68-f579-4b1c-ba90-5bc44e938410",
        "cursor": {
          "ref": "168fde44-865a-4c6d-b7ba-7087e02489d9",
          "length": 155,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "27a7ae0f-4104-4fcb-a368-fc0c14af6ae9"
        },
        "item": {
          "id": "458a7b68-f579-4b1c-ba90-5bc44e938410",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "00299a08-3316-4b12-8b91-7f375719258b",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "0e2c09c7-dfbe-4870-be9e-32d17b0a84ce",
        "cursor": {
          "ref": "c3582891-48a0-497b-8574-95e705b21714",
          "length": 155,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ec8c9a2e-5925-4c94-af6e-419acac929ca"
        },
        "item": {
          "id": "0e2c09c7-dfbe-4870-be9e-32d17b0a84ce",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "080f7f03-335c-4b26-a492-85246ceae990",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "169b5956-85ee-4dfa-9f57-0155aace196b",
        "cursor": {
          "ref": "ff3d0b54-b939-4b1f-9ff4-c20ef736bbd1",
          "length": 155,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5c2ed355-45a7-481c-8a91-e7c9f77c2361"
        },
        "item": {
          "id": "169b5956-85ee-4dfa-9f57-0155aace196b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5fdbd40d-42f8-4471-b49b-36f62a2f130e",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "d402488f-8476-4fb4-8692-17293909df9e",
        "cursor": {
          "ref": "018c37cd-072a-45be-88df-de32da3ad016",
          "length": 155,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "cd693e24-8df5-4ef4-847c-8959eaeceef9"
        },
        "item": {
          "id": "d402488f-8476-4fb4-8692-17293909df9e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e4c1623a-7812-4d9a-8924-f285d41c729c",
          "status": "OK",
          "code": 200,
          "responseTime": 34,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "7a318c58-adab-4bcb-8df0-f4789befc327",
        "cursor": {
          "ref": "4b7aa9ed-8175-4ac8-9c77-268fd2633b46",
          "length": 155,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "07763e24-5f4c-4595-9e20-9a9be7769b07"
        },
        "item": {
          "id": "7a318c58-adab-4bcb-8df0-f4789befc327",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0dcb2391-5e52-44e8-a12e-1c2427fab2f6",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "77725a5b-31d5-49d0-aa40-4855f2fc9332",
        "cursor": {
          "ref": "27ecf468-2be4-49c5-bda2-22c553b2f815",
          "length": 155,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b21e53df-f55c-4f41-ae91-9909da10a954"
        },
        "item": {
          "id": "77725a5b-31d5-49d0-aa40-4855f2fc9332",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2b27dc1e-ad44-4de6-9e07-7cfa01198500",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "752a7c60-8437-4978-b2e8-ee0f8686d6de",
        "cursor": {
          "ref": "d9ba488f-b510-46be-8119-b97649b2e477",
          "length": 155,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ad0e4fe8-bf3f-4cda-a0ed-83b06ef409ce"
        },
        "item": {
          "id": "752a7c60-8437-4978-b2e8-ee0f8686d6de",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "af28f6ba-2ad6-46b3-931d-88cef90030dd",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "c9d4cc4a-e917-43db-b31c-0e1111f67bb2",
        "cursor": {
          "ref": "b8639878-2c6d-4b7f-ab47-b41fb0a9e7d9",
          "length": 155,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3fbe20e0-c403-4408-9102-bbdc374893a6"
        },
        "item": {
          "id": "c9d4cc4a-e917-43db-b31c-0e1111f67bb2",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e7581b80-f4a2-427a-af46-3e3b0ed19bff",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "f88c4f5d-4ea1-48d8-b5ae-3d8c04411766",
        "cursor": {
          "ref": "220ef059-2da3-4bbd-8e86-49d35792219e",
          "length": 155,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "07986110-e69d-4c8b-bb6c-5fb026467c2d"
        },
        "item": {
          "id": "f88c4f5d-4ea1-48d8-b5ae-3d8c04411766",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3f6a69fb-99ff-4c18-b430-35085336de54",
          "status": "OK",
          "code": 200,
          "responseTime": 36,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "3fd64a7e-20a0-4ccc-9d9c-72e0a99bc74c",
        "cursor": {
          "ref": "3cb30ec3-a918-4b3c-ac5b-384a3302c46d",
          "length": 155,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "09f88e67-237f-4784-aa67-bf9071e534aa"
        },
        "item": {
          "id": "3fd64a7e-20a0-4ccc-9d9c-72e0a99bc74c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "17765996-e4cf-4c3f-ac2e-4177267b8e0e",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "0bba8688-18a5-4f66-9f9b-3cf582bb599a",
        "cursor": {
          "ref": "a8a9451b-c950-442c-b1ce-45b2f905dc42",
          "length": 155,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9814fafa-d42a-485b-ba4a-6e8868113aff"
        },
        "item": {
          "id": "0bba8688-18a5-4f66-9f9b-3cf582bb599a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "de349bae-015b-43f0-85c1-b7ee8c5a0d00",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "7f2c9bcd-7b27-42dd-b828-cce61c556f5d",
        "cursor": {
          "ref": "084c67a9-c547-40a8-b664-c2f2af3dfa6f",
          "length": 155,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "eab8ac13-37b8-4a3c-97fd-fe890bc3d0aa"
        },
        "item": {
          "id": "7f2c9bcd-7b27-42dd-b828-cce61c556f5d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d00ad660-e768-4847-96b1-00c8835d3668",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "75fcce67-8c28-4c27-a852-7a9fcc2813b0",
        "cursor": {
          "ref": "6389e895-fdf5-41d8-85ec-614ca2e2f9c7",
          "length": 155,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c9cdee35-b55a-4e26-9269-195ed04d386e"
        },
        "item": {
          "id": "75fcce67-8c28-4c27-a852-7a9fcc2813b0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0c1aea6c-fdab-4846-aac4-22e4fac3021f",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:106)"
            }
          }
        ]
      },
      {
        "id": "0d55aea6-4ff9-4d41-864b-1c7ff0b913e4",
        "cursor": {
          "ref": "8af65873-584a-40e9-b9d6-002b3b3995c8",
          "length": 155,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d22a3368-9209-42da-9116-091223b25855"
        },
        "item": {
          "id": "0d55aea6-4ff9-4d41-864b-1c7ff0b913e4",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f836907a-4bd8-4b20-93ce-f81388dfd75b",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "bb4db5af-7c65-4f68-a8a9-7d10786d6d37",
        "cursor": {
          "ref": "75a72102-4656-46e1-8fff-717238daa5bf",
          "length": 155,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6bb9cc35-85b5-414a-899b-f7f4e7abcd12"
        },
        "item": {
          "id": "bb4db5af-7c65-4f68-a8a9-7d10786d6d37",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "15131a3f-a1c7-4423-9854-f751644d9810",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "82112d79-82a6-4857-9099-91705cf57b17",
        "cursor": {
          "ref": "15193e28-58e8-43ff-8c7e-e388f1b7786c",
          "length": 155,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7ff0ed2f-cf32-4e92-9d85-6d80d01df2cf"
        },
        "item": {
          "id": "82112d79-82a6-4857-9099-91705cf57b17",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6fa15022-3e3a-4ac9-9b98-eb56dc99a796",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "84cac75d-ec08-4c1d-a064-5e8ab4d3db2e",
        "cursor": {
          "ref": "df78aa9f-ca9c-4c75-b3ed-b69d02fe9191",
          "length": 155,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e2b3c4ee-7ed9-467c-a21f-805faf371b39"
        },
        "item": {
          "id": "84cac75d-ec08-4c1d-a064-5e8ab4d3db2e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2a4f9561-db8e-416e-b4e5-9e3811f25598",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "ca8fac08-3aa3-4b96-be37-6eedef47b1dc",
        "cursor": {
          "ref": "d5da089a-a3c2-476c-930c-d571cdc643d0",
          "length": 155,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "790fa3f6-bb78-48c6-942e-247404d5de39"
        },
        "item": {
          "id": "ca8fac08-3aa3-4b96-be37-6eedef47b1dc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5c5900d6-1e30-4742-86d1-ca0cd5d1db45",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "a82a8a10-0e90-493c-9db8-ad46c87226d3",
        "cursor": {
          "ref": "3b7470db-fcd0-4e8f-bd6c-a3d02c4eaaa8",
          "length": 155,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7b630391-0d6c-4bb9-abd1-a4c8d46b7967"
        },
        "item": {
          "id": "a82a8a10-0e90-493c-9db8-ad46c87226d3",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "098f4676-472c-4509-af27-5897433acf47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 14,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "84c8a759-4622-4875-a56c-eb78500440c4",
        "cursor": {
          "ref": "35f0a9b3-8760-41fd-8c5c-873ad2ea5102",
          "length": 155,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "77b61967-4708-4dae-ba60-972d7e72cfa1"
        },
        "item": {
          "id": "84c8a759-4622-4875-a56c-eb78500440c4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "fb85958a-f5bb-4278-91d3-d6d0673f29eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 15,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "09ac4e3b-00c7-4b2d-9592-5b890fa34497",
        "cursor": {
          "ref": "3f5b2172-f992-42dd-819a-f57cc4f52646",
          "length": 155,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4c7f5203-aa11-4f0e-b75e-8eab0701f83a"
        },
        "item": {
          "id": "09ac4e3b-00c7-4b2d-9592-5b890fa34497",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f624e897-3431-4e67-b1b7-0205c0805609",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 14,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "7f90e979-b32b-4f6d-8ef5-2a1357cd0a6f",
        "cursor": {
          "ref": "e598df72-f1c2-4f03-a68f-c0cbb95fd5de",
          "length": 155,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "59cb4ac1-f383-4f23-8c01-6a960e7c281a"
        },
        "item": {
          "id": "7f90e979-b32b-4f6d-8ef5-2a1357cd0a6f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "262913dc-d3e9-44ef-887d-a6d40d120096",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 14,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "ca0a066e-733f-4c92-98aa-0304f9e97804",
        "cursor": {
          "ref": "1096c89e-dff3-47cf-9d99-ddfaf1d1eb67",
          "length": 155,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "773e4982-5994-49cf-a2f4-cedfa39005e4"
        },
        "item": {
          "id": "ca0a066e-733f-4c92-98aa-0304f9e97804",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "563b3dd1-0c90-44b4-9e9e-ff452ae73845",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "33d34a62-253b-432d-967b-06eb8565f5fb",
        "cursor": {
          "ref": "80fcc990-a8c9-4832-b631-495dd2dff3b1",
          "length": 155,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b1005211-51fc-452c-88cb-2a0f76df889e"
        },
        "item": {
          "id": "33d34a62-253b-432d-967b-06eb8565f5fb",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "13f59b4a-182e-485e-bbab-8e1f90d92a59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 14,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "06a99743-929d-4ca9-b59b-f6cb02bda87a",
        "cursor": {
          "ref": "3f54c641-536b-4eca-b0d3-05818c7633d2",
          "length": 155,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "74b3d0ec-51ad-45ed-bd84-dc15f4dd239c"
        },
        "item": {
          "id": "06a99743-929d-4ca9-b59b-f6cb02bda87a",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b2777596-01bb-4168-b31e-4c725d3ef91c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "09030d29-452c-4948-ba54-7d87e8d53620",
        "cursor": {
          "ref": "31f0f723-89c9-4edb-98b6-aa143fd1c78e",
          "length": 155,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "89dbac45-d9ee-4811-b7fa-abef6e928097"
        },
        "item": {
          "id": "09030d29-452c-4948-ba54-7d87e8d53620",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9da8f6b4-2613-4014-966a-8e32414d6af1",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "6f81fd3a-e2f7-4a51-8977-628791c8166c",
        "cursor": {
          "ref": "68e969aa-24c6-48a1-b0fd-43910f7ceebb",
          "length": 155,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a6892e45-dc04-48aa-8f31-cc8019b0d404"
        },
        "item": {
          "id": "6f81fd3a-e2f7-4a51-8977-628791c8166c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "50e4ff77-c936-40ee-af76-0dcf02eaa36d",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "dff1a5ad-d9c2-4e4e-b1b4-0d6021a2d312",
        "cursor": {
          "ref": "0200bba3-d219-430c-944c-581211c83b25",
          "length": 155,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3adb1dc8-9013-4147-a48f-938f5be1bb53"
        },
        "item": {
          "id": "dff1a5ad-d9c2-4e4e-b1b4-0d6021a2d312",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e7284787-4635-4d15-83bd-b6fe945219ad",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "e0ecf462-0473-4f5d-aaaf-03fb5c0a88a3",
        "cursor": {
          "ref": "228b7e06-b8a5-44ae-87e7-bb6124f208c7",
          "length": 155,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "09be33c2-61b6-43c9-8745-7e50ae0653df"
        },
        "item": {
          "id": "e0ecf462-0473-4f5d-aaaf-03fb5c0a88a3",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "fbefa276-d7d8-479f-a60c-44baaa069a4b",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "23b38031-2ba5-4970-8ab9-b3a1b9c51d73",
        "cursor": {
          "ref": "8bc86276-0058-4a96-a7ca-008895745d7a",
          "length": 155,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5df9cbdf-4fef-4f75-a65d-3398c324238c"
        },
        "item": {
          "id": "23b38031-2ba5-4970-8ab9-b3a1b9c51d73",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "25a62c46-7e6b-4cd0-b56e-2f558fa55cbf",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "d3a5021d-71cb-4b0e-9727-6c6c2fb56155",
        "cursor": {
          "ref": "39d30381-7393-42e2-bf59-cc11936673a9",
          "length": 155,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0931e16d-462e-4851-b11c-a50fabd3b296"
        },
        "item": {
          "id": "d3a5021d-71cb-4b0e-9727-6c6c2fb56155",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9343d4be-81c1-4b83-938b-45235fda92aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "b0f81a3b-5dcb-4b96-b772-535ff64091e7",
        "cursor": {
          "ref": "aceb6f25-6131-475f-8496-e4bc1c89a84a",
          "length": 155,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "573abbbd-a4b3-467f-bd5a-41426ec6038c"
        },
        "item": {
          "id": "b0f81a3b-5dcb-4b96-b772-535ff64091e7",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "27ee9377-ca77-4121-b56e-fa68c7a69a82",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "03ed63a3-9369-4977-9f8c-85b66578a8d2",
        "cursor": {
          "ref": "b4fd15b8-94a1-4cbf-ae40-c8b632fb38da",
          "length": 155,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "59ebbc47-3add-4b22-809c-0162fe946d0a"
        },
        "item": {
          "id": "03ed63a3-9369-4977-9f8c-85b66578a8d2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9a6c3114-0bc6-4c12-99d2-0d9c7ae2e453",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "7f8dd105-040e-444b-b0d0-a9c956cc2b57",
        "cursor": {
          "ref": "09408f5e-4503-4aa2-8ee3-aad444658aa3",
          "length": 155,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8878cbb3-7057-4ab8-a55c-2c836129291e"
        },
        "item": {
          "id": "7f8dd105-040e-444b-b0d0-a9c956cc2b57",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a840a540-8b8b-4525-9bac-b5a08878c9b5",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "35ec4fc3-47c8-41ae-9a0f-b6fb28fe057a",
        "cursor": {
          "ref": "8bbc0ca7-1230-4b60-8d0e-2fb010a871e8",
          "length": 155,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "458d5ec8-9c4c-4307-bb4c-1c31a2d7659a"
        },
        "item": {
          "id": "35ec4fc3-47c8-41ae-9a0f-b6fb28fe057a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d881c384-27a8-43fd-8786-5b6fd94ff5dc",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "1759b935-3790-4f1a-a62a-897292e67632",
        "cursor": {
          "ref": "64b37157-7c30-44e3-9aca-10feaf8e2633",
          "length": 155,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "dd490ad0-394c-4a99-bc8a-7b2a9906a443"
        },
        "item": {
          "id": "1759b935-3790-4f1a-a62a-897292e67632",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c2b61f6a-87c2-453f-a740-b5af1ae71d35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 19,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "7f0b1ae6-b440-4f36-a4b4-e5aeeb081014",
        "cursor": {
          "ref": "6728917e-ea1f-4445-99d6-6a2905ce1dd9",
          "length": 155,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ec34125e-8e29-4adb-99e9-ea16b1528671"
        },
        "item": {
          "id": "7f0b1ae6-b440-4f36-a4b4-e5aeeb081014",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "35c12e58-fb50-4154-b9d3-140c79d2da6c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 19,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "c5796c8f-de63-413b-a400-1bba4bf8693d",
        "cursor": {
          "ref": "f5b2c279-58e5-42a7-b907-15d3b893c6b1",
          "length": 155,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c496da2c-d934-4368-86c9-4c110dac6380"
        },
        "item": {
          "id": "c5796c8f-de63-413b-a400-1bba4bf8693d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3261e19b-fb0e-43b5-8c9f-73bf351fabf2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 18,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "e40bdcff-a735-481b-ae78-88295f3c6985",
        "cursor": {
          "ref": "89d1a552-7e17-469d-96c2-69372ae28297",
          "length": 155,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "aa9c503a-472a-45a4-a9c1-aac6511fc6b0"
        },
        "item": {
          "id": "e40bdcff-a735-481b-ae78-88295f3c6985",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7578e238-e223-4b5e-ba86-0e94d181f10c",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "6a43e6f7-5c50-4afc-9b44-962321830cae",
        "cursor": {
          "ref": "5d141802-bfba-4b99-9449-e41a47e58b8c",
          "length": 155,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b84c7438-ebe8-4361-bcd6-7a082cdd2891"
        },
        "item": {
          "id": "6a43e6f7-5c50-4afc-9b44-962321830cae",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d1ffa8f3-cc5f-4f10-ba4e-a67e8e8611a9",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "6d781855-a0a8-4225-84c1-9cb5e4fa66a9",
        "cursor": {
          "ref": "d5383616-e7d3-4e7a-a542-0289b4fc2654",
          "length": 155,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "24119445-f50b-4736-aafe-04050aa822d9"
        },
        "item": {
          "id": "6d781855-a0a8-4225-84c1-9cb5e4fa66a9",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1a481606-0830-43bc-a2c8-099ed444dacb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "0239e638-3798-4640-854e-514ee2721310",
        "cursor": {
          "ref": "44f00a88-1f8b-4ef7-aedc-079e805919b3",
          "length": 155,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d8f3a3c6-8707-4991-bd7b-8b610e064d2b"
        },
        "item": {
          "id": "0239e638-3798-4640-854e-514ee2721310",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c3a7ada7-b6de-4c7d-a217-274624d5acf5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "f88cba79-e6d7-4787-b6dd-2733c14bae83",
        "cursor": {
          "ref": "2f69c08b-e52b-498a-b0b0-2b5003284b0d",
          "length": 155,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "77220e06-2713-4998-bbac-9381a538ca30"
        },
        "item": {
          "id": "f88cba79-e6d7-4787-b6dd-2733c14bae83",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ae090cb9-bdb3-410b-b558-a6a6cb402969",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "69a4c9cc-93d6-4b0e-9e8b-cbdde6b8be87",
        "cursor": {
          "ref": "ed019b2a-a79a-42ba-a12f-905ebdee5f6f",
          "length": 155,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "041b2004-e46e-407b-91f3-98d4e9d54d66"
        },
        "item": {
          "id": "69a4c9cc-93d6-4b0e-9e8b-cbdde6b8be87",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "64cc1753-03a1-4ed9-b7f0-f9abff968cec",
          "status": "OK",
          "code": 200,
          "responseTime": 16,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "a2d23e6c-dfbf-4eb5-8316-fb416c68af76",
        "cursor": {
          "ref": "80934b6a-e91e-4396-bc18-ea3031610409",
          "length": 155,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6e984e6e-05bf-4792-9e94-4f837aced5ee"
        },
        "item": {
          "id": "a2d23e6c-dfbf-4eb5-8316-fb416c68af76",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1e0b059d-bcee-4ff5-9c63-f9dd7a75be78",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "da202d53-3d90-4fa0-8aa2-8b740931aeeb",
        "cursor": {
          "ref": "572025b9-1f6e-46f2-aed4-d6033a3c7680",
          "length": 155,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a2421346-ccb1-4913-a336-fa4359f653ee"
        },
        "item": {
          "id": "da202d53-3d90-4fa0-8aa2-8b740931aeeb",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4b8b9c34-311e-46ce-9a25-e6c442c78d0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 16,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "fd9634ce-5369-4d36-a640-3a58189bf766",
        "cursor": {
          "ref": "e3b8c1e3-08d2-4c00-8542-03853abe2cb6",
          "length": 155,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c0a0c33c-d6e7-45f5-aeb4-94d3fbd583a8"
        },
        "item": {
          "id": "fd9634ce-5369-4d36-a640-3a58189bf766",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cafcb340-5c04-4bdb-a9e0-1a4360fb8b6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 19,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "80e3f40d-2698-43d4-8371-5de1a6fc24a6",
        "cursor": {
          "ref": "6a407f1f-7ffc-4861-b91e-9cf03360d640",
          "length": 155,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "74566162-2a1f-41a3-b664-3fc76148022b"
        },
        "item": {
          "id": "80e3f40d-2698-43d4-8371-5de1a6fc24a6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ae41be98-48c1-4844-b7a9-b8373eefbc24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 17,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "b1c1728d-7ea1-471c-83f0-ef2433cfe4f6",
        "cursor": {
          "ref": "19176073-4999-458a-bc71-cd2d23810c5e",
          "length": 155,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d8821f62-a3cd-4e2d-abc6-9929a7e9330a"
        },
        "item": {
          "id": "b1c1728d-7ea1-471c-83f0-ef2433cfe4f6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e09f28b3-d1f4-4ee3-97c5-6aedadca9536",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "ba7f474f-21d6-4da9-b4c6-a817995c8460",
        "cursor": {
          "ref": "4e056d4d-3053-4a67-82b3-654882e91978",
          "length": 155,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "369d8092-ce86-4db0-bd0c-6b489221b028"
        },
        "item": {
          "id": "ba7f474f-21d6-4da9-b4c6-a817995c8460",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "55fd6bea-2c08-4fe0-8a1f-c600b00070fd",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 29
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "8c69ecee-3221-45ec-87a0-e53ad9b56da4",
        "cursor": {
          "ref": "95315b0b-6794-44cf-9e66-b185782e5123",
          "length": 155,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ed62eaec-3c74-42eb-bb41-be5bf6008448"
        },
        "item": {
          "id": "8c69ecee-3221-45ec-87a0-e53ad9b56da4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0ac20f24-3c23-4f4c-beba-fe3cde4c8f59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 17,
          "responseSize": 46
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "d471eed3-b60b-43bd-acca-8426fb412392",
        "cursor": {
          "ref": "16165b29-4adc-4c5a-9a9f-fe2cc4a1cec5",
          "length": 155,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7941f895-b341-420e-8c10-4c17931ffcbb"
        },
        "item": {
          "id": "d471eed3-b60b-43bd-acca-8426fb412392",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "14ece3a0-0d21-4ab1-9ba4-2e3c07b31efe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 13,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "6027f3f2-c6d7-44ca-9708-f0fc59a22001",
        "cursor": {
          "ref": "01c27e6a-66e4-4a2e-978a-4a2abd059bf7",
          "length": 155,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "718939b1-73d7-4e4f-abd0-ec027e695136"
        },
        "item": {
          "id": "6027f3f2-c6d7-44ca-9708-f0fc59a22001",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "59abd142-76b4-48cd-ab7b-06dad1a42ef2",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "7acb19ef-88f5-437f-ba31-04f57766bedd",
        "cursor": {
          "ref": "59734989-94cb-42cb-a058-83337e12f9b2",
          "length": 155,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b16a2a8d-b4fa-42b7-8d06-2ca9296c07b3"
        },
        "item": {
          "id": "7acb19ef-88f5-437f-ba31-04f57766bedd",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d7e8d32c-5eb7-4ba3-ba67-6fc75b6b2798",
          "status": "OK",
          "code": 200,
          "responseTime": 33,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "495bbf5d-03a5-4a25-8ba2-0675b5e33480",
        "cursor": {
          "ref": "3ec4717e-07cb-4e4a-934d-4fff46b29e70",
          "length": 155,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d4233619-b6c8-42dd-b1f6-65b6645f98fa"
        },
        "item": {
          "id": "495bbf5d-03a5-4a25-8ba2-0675b5e33480",
          "name": "credentials_verify:id"
        },
        "response": {
          "id": "25c2378b-e824-4510-bc9e-4e85cc23eb55",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ec27a0e-7aef-4c27-a926-401464937867",
        "cursor": {
          "ref": "ee038912-6a9c-4525-b653-08bc6bcb62e2",
          "length": 155,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9d64af52-9d72-40ae-a7eb-a6e615b1abe4"
        },
        "item": {
          "id": "3ec27a0e-7aef-4c27-a926-401464937867",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "03dda8a3-0f27-43df-ae74-d418c0954f22",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 17
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e7fa40-afc9-43cb-94bd-2528227544dc",
        "cursor": {
          "ref": "1881f14f-5cbe-48fd-8e35-de0bcf79272c",
          "length": 155,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "137a2ff5-f4b5-4645-98c4-7faa54af5ffa"
        },
        "item": {
          "id": "55e7fa40-afc9-43cb-94bd-2528227544dc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e4baa9d4-5b10-4a95-934b-dd4b726883b9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 15,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "55e7fa40-afc9-43cb-94bd-2528227544dc",
        "cursor": {
          "ref": "1881f14f-5cbe-48fd-8e35-de0bcf79272c",
          "length": 155,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "137a2ff5-f4b5-4645-98c4-7faa54af5ffa"
        },
        "item": {
          "id": "55e7fa40-afc9-43cb-94bd-2528227544dc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e4baa9d4-5b10-4a95-934b-dd4b726883b9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 15,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 404",
              "stack": "AssertionError: expected response to have status code 401 but got 404\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "ab79af6f-1845-4686-98bc-0b9dc2857b53",
        "cursor": {
          "ref": "de48817c-e616-4955-afb4-ff9db6c3702b",
          "length": 155,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "aa459391-200e-41a4-82af-afd6ac90490d"
        },
        "item": {
          "id": "ab79af6f-1845-4686-98bc-0b9dc2857b53",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "cf6783fe-3fcc-4287-8e35-31f6802da189",
          "status": "Not Found",
          "code": 404,
          "responseTime": 12,
          "responseSize": 2337
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 404",
              "stack": "AssertionError: expected response to have status code 403 but got 404\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<!DOCTYPE html><html lang=\"en\"><head><meta name=\"viewport\" content=\"width=devic\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "b7653474-92e1-4839-a6c2-71cf98f51b81",
        "cursor": {
          "ref": "f09086c0-8d35-4bbe-acb2-9af1523882bc",
          "length": 155,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0a190311-9d7b-4e36-8d47-f8448c32d893"
        },
        "item": {
          "id": "b7653474-92e1-4839-a6c2-71cf98f51b81",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e9ec7b63-85fc-4f25-a5c3-0f8c07d2c04a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "b7653474-92e1-4839-a6c2-71cf98f51b81",
        "cursor": {
          "ref": "f09086c0-8d35-4bbe-acb2-9af1523882bc",
          "length": 155,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0a190311-9d7b-4e36-8d47-f8448c32d893"
        },
        "item": {
          "id": "b7653474-92e1-4839-a6c2-71cf98f51b81",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e9ec7b63-85fc-4f25-a5c3-0f8c07d2c04a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "738295a6-2a33-446a-8bfe-f935680039b2",
        "cursor": {
          "ref": "bb2b719c-0725-40d1-8d5b-ccef0f787eca",
          "length": 155,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "52b9912e-9c41-4e18-8b23-650360f20dd4"
        },
        "item": {
          "id": "738295a6-2a33-446a-8bfe-f935680039b2",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "f5a3fae8-4303-4a66-a643-c0505b3bfc10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal Server Error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal Server Error\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "ae496def-7ad9-4aab-ae3a-3117db75035a",
        "cursor": {
          "ref": "8f79edd8-c980-47b3-a0d8-2a398ca71894",
          "length": 155,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "946cabb0-61f4-4a30-826b-e2c17a4ad443"
        },
        "item": {
          "id": "ae496def-7ad9-4aab-ae3a-3117db75035a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ca3e4649-cc56-4200-b907-00623dc198f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "ae496def-7ad9-4aab-ae3a-3117db75035a",
        "cursor": {
          "ref": "8f79edd8-c980-47b3-a0d8-2a398ca71894",
          "length": 155,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "946cabb0-61f4-4a30-826b-e2c17a4ad443"
        },
        "item": {
          "id": "ae496def-7ad9-4aab-ae3a-3117db75035a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ca3e4649-cc56-4200-b907-00623dc198f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 93
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "9988e6cb-7d65-4a67-8003-409d6d0d4a4f",
        "cursor": {
          "ref": "71f26538-4dac-4d6c-a9b1-c6a0b692920f",
          "length": 155,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "50d41493-d63a-47c5-8c8c-7bcf114c9cf9"
        },
        "item": {
          "id": "9988e6cb-7d65-4a67-8003-409d6d0d4a4f",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "fdca4657-505c-46c9-b857-a42d9f718991",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 11,
          "responseSize": 68
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      }
    ]
  }
}